{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ac6fbfb5-0e0e-4043-a69e-f7242474509d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "518aa232-b9a0-46ff-950c-b3c0cfd55895",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "38536fa1-0ad3-445a-aa53-fbd3690cb7dd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ca26d7b5-6b15-45c2-b0fc-07de768071e4"
                }
              }
            ]
          },
          {
            "id": "50667a7c-3a7f-401e-bb78-2450d24e5733",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ada68bc1-4a2d-4ec0-829a-1a8137be16f6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e918372f-0c4a-414d-8823-d0157e56051e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "702beb9d-4dfe-42b7-b0f5-3320d1dce466",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "aee41931-56ce-4e78-8588-e01844f5a497",
            "name": "Positive Testing",
            "item": [
              {
                "id": "89090aef-488b-4a8d-8b24-63c306cab79a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef84093b-320e-4054-a77a-73f0b0b51c55",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ec164228-29fe-4e3b-b884-d2f301ccefb2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "96868b40-9cfb-4328-8790-236970a19a96",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f15f9dc5-9b10-4793-96f4-7af36857428e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5e960b92-77a0-48f8-8f0d-695bc6a55bfb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ccc3eb67-0e19-47f9-8916-7284c014acdb"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c1197b96-125c-4de9-a281-20899c2e6b6a",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "509f7067-02e1-4ba5-a707-d70f829686f5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "13788cf4-5cc6-4bc2-9d53-6459b2425982",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8fbc99dd-b633-43cc-92b9-d7da7385b59c"
            }
          }
        ]
      },
      {
        "id": "5f00eb91-8825-4111-9363-132ffe6d23e1",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4e797069-0569-4acc-852d-352cf48c31d5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7152205e-b5b6-40ad-97a1-8dccbde37581",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4671d6c7-1fbd-4628-a66b-5b167ed1fd26",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb4a167-c254-42fc-aa27-89e676a2dea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6a9998e-e6ca-4987-b240-1e564418ae46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17ed5048-fbd2-45c7-a9a1-aba24bb33e12",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "618cf50e-79d7-4efc-a1b1-cea96bbc8628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bdc172d2-fca2-4d63-a9fe-8b547e133741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f02de15-1dce-4b60-84d9-b1809423e6eb",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8dd3ffd-0f74-42e4-b8cb-891d5985e51c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "acf2a13f-6712-4e50-a075-029cea6279d2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0561b8e1-b0ed-4ca5-add8-b0568b19dbd9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "63ebf8d5-ed83-4f40-bc2b-dd16e9720513",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82e5e239-e7ec-45b8-a6f1-bb9f67227900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "df731d7b-70f7-4dee-a583-8b1e290f888d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fe9161a-137f-4ca3-aa88-0cad8d827dec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "469b490f-becc-4dbb-a33e-c4bb338f654f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c7ca0bb9-1da6-4481-a387-a6153feb4c95",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f77ad4d5-2084-4d1d-9a6a-25fa67ba2ffd",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "31895eac-538c-463e-bbc7-f4ecf9ed9832",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "772f577d-b4aa-4ba2-a9b9-100d4d4fcaae"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cc02b955-eca5-4fa0-b57b-48d7271819c1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "972a4e65-7ebe-4a2e-9a0e-ae16492c2353"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "52b5fd24-9feb-40fd-807c-dfa0d446c9bf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8b5838d3-84af-4629-80f8-531c68446671"
            }
          }
        ]
      },
      {
        "id": "bd608acf-2e4c-44da-afcb-07a641a7f9b4",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "821e9fe4-f803-496d-9387-5d3479a4f52e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f7b48e06-228b-472b-b8ac-403d3ddddeb1",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "100074f5-0176-4bae-b3cc-bf33773cecb4",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b2fb81-c5d9-4018-8c1a-abe9f7326140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3b097e6-cb0f-4433-a81e-2cea56c63afe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91bc3baf-3bab-4644-88f9-3f4e4fe4aa44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "741e40f0-e959-4d39-96a9-ad9c689cf840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e60b167f-5694-4349-a847-daa3bf971807",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4932c0c0-fdc3-4a2e-9e19-284c4857d04b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe4b809d-f721-48be-bfd0-e85fb07578c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "457ab3b1-dd0a-4510-a381-6ad6ff14c98f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e7ee55aa-7253-4408-a2e8-cada283b324e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a4d573-3243-4186-9765-98b8fd7b12f4",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d58ccb9-f142-4a8c-9fb9-64e29a43ee47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4776f24-7f1c-450c-b36f-4575954b38eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95091ba9-723f-4e1f-b2f5-a106c93c7d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "376f52a0-8a41-426f-a85b-a3ca4a4a544e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "706c01d0-ad32-45e4-92db-5a5f31e57e82",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a10ee3-78de-4d99-a58b-8e81f6484253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "250e4c95-cc5e-466c-8ac6-d1b93a04ac86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a5dc7a-84c8-44b0-9983-ef20d4c37b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c2569c8-60a7-49b5-be79-2bd9bfc19158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b7eba88-b81d-4228-aae1-95f0db3b1309",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf85457-73ee-40de-80cb-286a32489e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "281c9cd8-333a-4585-a9b5-ac4528094521"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40515112-e59a-4171-b99d-8f59dc015ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c626c292-0619-43cf-b41f-2aa65a86ae7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd26dce9-7c1a-4c26-9d5d-10c210023bcb",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76f20a34-d692-4855-b493-4312c9ee60f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a4c180e-6d31-4eb8-9901-798dbc8ce55b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a664b1f-3c09-404e-9940-decb38da5619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9afe0aae-d3f4-4b8a-ba75-917aeca2dbb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e8817ff-97ce-48ee-b392-b8f958bbc28e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1db3adcb-4d88-498d-a4b7-878ae0964ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48917558-4772-4773-9fbb-0b972008e71a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99778626-a5fc-425d-92db-8ff9bafc78d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba5341f0-7c4b-497a-b8a4-116f41a06c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da23860d-45ae-4af0-9fd9-765e6f0cff62",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deeab7f5-e087-4ba8-9c9f-78b2e984c50a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a374e436-1fe2-41fe-97bc-29be4811fbba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5bcf05e-bc16-4f29-b880-2374a3c736c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "71c1f95d-a38b-4402-8b11-683de2562555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9315aa73-481f-44a7-a6a9-8ba54f306a14",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c95687a-dd9f-4efe-8a2c-83e1c2be4c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "573767a5-a0a1-4557-87dd-7a3ef3a250c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "729d0754-2e8a-4cc1-96b8-e4f525253c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a223beb3-8692-4ad6-95d2-37ed7f755ecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "601e8fe7-c1db-425f-beb6-f86c05e5c1da",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "016efde6-a1ed-4601-b611-449a16e6a049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a49ba0be-05a0-4117-9c1b-3cfaddda5e85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75d988a3-34c0-43c8-b2ab-6a7cd41f3f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9dc98600-42e9-4e9c-b776-0bf257826a00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56fb78b3-a24a-44e8-9484-4dae4c8e9a1b",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "511a731f-95de-41ae-b86d-ac5a2e6dc898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f72866e-f81e-4e16-9883-a31f0cec44c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ba92590-934a-4a5c-ada0-08b101e1e8c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce02a6f3-c235-436e-8f6c-50c60880b02b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70fd5fe3-e3ee-4cb7-b6c5-acc024302d7d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b191a5f5-e6a4-4c0e-92f9-2170acfdd23a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d73a9235-5f7c-4019-8fc8-f773d9e3c9c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f12a25cb-c573-4cff-9539-f02d1cbd22cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e8fceb3-0fd2-4bc8-a034-32e15d4f0705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b299c1d-a9ba-4a94-9fd3-b3226cf807d8",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dcc1363-18d0-4b01-8957-00872c96b23e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46ee15bb-0e6e-4ce5-a969-4c525bb83ba3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cc85826-429c-4574-af25-dfe15fc1591e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c5b147e-efb9-44c4-82c9-f00b8b67f713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c59e9a1c-c1f4-4532-bea2-8f5e54ef142a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "665bffd6-707f-4c4f-80ec-64935e9bf46a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec8fa1ea-4e90-4e61-b93b-808bfa656aca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0865fcb0-e654-4aa6-93c6-dde8b7aba12c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4fb0cf9c-0023-4641-ac09-c5cc238857af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "286f5948-bd72-4aa9-bb05-c7f794405e29",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f2b16f-95b3-4a4e-aea6-661af8df382c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "421fcfc0-ba54-4cf3-bca5-02272ab3cf20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d9f3c91-053b-4cda-9e8b-9042c784a874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5dd985ba-eab4-4394-874d-0dbe06a56139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90077dcf-e77d-4061-92d8-393fe157de9a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce431f0-42d7-4d8b-8ca6-3adefd7d3fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4370c609-05ba-4ebf-b53d-484f9e4370b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a449645e-dadc-4ca1-a0c3-0b47e0fbcd2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db2094ba-2735-4895-ae9d-4d6a1cd99d43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89fae29a-750c-4386-91b3-906c843a275e",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf3e040-b919-475c-9e68-fc584a22fb76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e2805f1-a87b-4ade-a3e1-3ced7b440a07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc07de11-9410-469b-8723-9a3bfc7b83bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa81f6cc-7cd2-414b-b00d-7f34b761cddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf3e9527-5676-4020-98a0-a47c0bcdb929",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9089f20a-ad73-4548-ad5b-18534b8a85c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36ee86fa-e6d6-4682-9611-d958ee78158b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d309dad8-350e-4f73-8472-7a9812c47634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "15ed2027-3980-4518-81ef-1e06521c19f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3dab87f-9803-459d-a0fc-26e918cf2be4",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb34d189-5a0f-4294-a8c1-e0d2e7fd61ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d03938a-3a8e-42b7-8141-304ac51c9437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec8f961d-0418-4673-ba3a-3eabf43f94b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cb1cdc4-da6f-479c-8cea-30adbde620cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da85b800-5570-47c8-ba3a-b4f14c3476bc",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca713f78-a3b6-4cf8-bf02-327b0087972b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91511930-c319-4111-94c3-7088aa829b9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac3a6383-2d3c-47ce-8ce6-46aed8bd4c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2601292a-9057-4b75-bbd6-c4cc032a9993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2838c487-92d5-49cd-b013-2717381e3b23",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e85123-0fce-468e-beba-79d19a261e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42c0df5b-2fac-4199-b291-40710deec065"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43bb4a8a-ca0f-45e8-888a-4533d4064463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6df0580-ba5c-4635-a8d5-bbed5216c6e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ad35043-cf82-493c-917f-6c7475a36f6d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "910f4de3-b1c4-4429-aef5-a7acc4eae918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7d019e3-2927-4f06-8d47-936203c4de3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91b0eccb-63ff-4da5-a3ce-7df848a3a33d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "100d2930-b699-4865-8ba6-74552de63265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04ec29b9-3d5a-4bc2-854c-d9a1c92e6d61",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "439fd5ec-1df4-43f4-9ae5-9a122b7c27ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3bc40b0-e1bc-4734-9292-53efb6bc3057"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd5d4357-2db2-45cf-9e63-2bec1dc23637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6a77509c-cec0-4430-8029-82a4fefd70cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db5f32e-335d-413f-96af-f29e8f27d4d3",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db426ec-ed56-4ead-81ee-7cb0006bb881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70d85b65-7e92-4958-a9bf-5206e9ec6c98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0520e05a-cdaa-4a1c-b2cd-141d53d12d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1ed43d8-5e96-4d6d-a0df-b884c43fd3fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbdffda2-9ddf-459c-9962-770097c43eb4",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bae331a-288d-4261-b583-7d1b45bc2f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45aed8bd-189a-4731-8826-ac2370f81cea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acf84ad0-c418-4fd3-9cfc-726c9c4d9b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "eea416ab-0b7e-4367-b1d9-560730b731a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4368e1e-379d-40f3-bd51-2f013e7703b2",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d653ece5-a7e8-4b6e-bd99-6f750fdeef0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47503270-bbce-4774-be2e-e578878be9bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b8829b-c84d-484f-9d2a-e843bcc96fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "509dba38-636b-4d71-a3c4-b64c4f6fe739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9510e13f-c1ef-4018-a169-40b4597ea247",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a3230e2-894e-4c59-a916-29986fe92790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "318456b2-4f5a-4d8f-9cab-23ccd354dc1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6c9d494-3cef-4a3b-9ca7-da61ae06573c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "087b51f7-1a5b-478f-a76d-b7861ccf8e4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34c52962-4bbb-405f-aee1-251c3a8ef7c1",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a21d0589-d896-466f-bec7-67b18cfd9a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86949a3d-3c5a-44fa-aa69-332d329c80d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d866aa-a1ec-4e94-8c5a-1d58ce8e0704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbb8fffd-ba95-44d4-bfb0-a976342384ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f22292c-27dc-438b-92e8-1ab5e1200d4b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea75c46-3e71-4be5-aea8-efaddf169ccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a85b60b6-202b-4706-98af-209cfa3ba18d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d321a31-d372-4fb0-bcb8-a7933fca42e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d326f6c4-11e3-4ec0-81ae-ae1dc10a94cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff2a6298-0178-4762-ad38-6631eb51c213",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ea82c5-527d-4b60-addb-3fff41e6a64e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc473931-9954-418d-bb16-f733296df6c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fb84a20-9dd7-4cd5-9698-61410df123dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "187cd48a-0c2a-4951-9f71-01be31998b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a192f21-9ad4-4d40-841a-ff117c94ed1c",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c72469-1a4d-4b1c-be14-eb29f1e56c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3d1fca5-9eaf-4ab9-87c7-b7f0278a4583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b62c2d25-8e2c-40e4-ae8b-282e35fecdc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0604dfc-4f3d-43d3-843b-f055b10a5d54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94b428cd-d72e-4f35-a156-d98a2c2043a2",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf263237-f8e8-4d0f-a172-c843507f55e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "207801b7-d4c2-4502-be97-bf001125b8bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65fff0cc-8988-438c-ada4-bcfe41d866bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a87b65de-08e6-4523-bd1e-267f96f18926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9498915-9dc1-4b36-9b36-0bf8928a202a",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1003b2a8-e6f9-4229-bbb3-7f37e24f5ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bad56fd3-5e96-4f0d-a9bf-9a9bf5de7e33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95bbd66c-b817-44c6-8178-b7876523d638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2304407-3f09-4010-9e51-3ed9a3890d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d34228f-01ba-4802-84ab-1b2f9afa53dc",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cae811c-288a-41d2-8521-1252f55599d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6dc22fa-ad28-469b-a2b6-b5ddc744958f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "319b5dd0-4d0e-45f1-b6bc-fc5dd34dae07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc177050-260e-4e00-9e7c-c36dffcba0d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f0e355-5287-48ef-9c9c-07515eed91c3",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59c2737-afdf-40ed-b1d2-ad8063378731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "309a2722-3dd1-4e8d-9029-9aa607e8713e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "490f9798-f19f-491b-95c0-9e14ab735d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0fe62d0b-cc76-4ff0-a842-e747ea631383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74a5095d-1011-4c78-a2c0-5bcc3cc7a79e",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c844baa5-5cc5-4527-97b7-dbbb61359726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "caa0e456-da68-466b-b2d9-555e4768c3af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00a09fb0-5255-45a8-abef-a2198c407fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2add3cfa-5bdd-4ed5-ba4e-244bb0c6266a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feab78ba-2505-4a2b-981a-c43c9b402711",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "127886f6-f6da-417f-b0b1-cedb9a7f2fb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35cdad3c-3c97-4b5d-9987-80701d662420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b882ce-e014-4f2c-af5c-db251e8a9aa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6210cafa-7d93-4f0a-8126-fc612dd16b0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f62f13a3-90cd-40ca-b97b-c1de0d2e295e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6cbf920-060e-4f02-828f-077c2aeb7d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a08a9c3-ebcc-4576-8a56-d1718586e1e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da798610-9f41-45af-967c-072948e01cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b36e2ff-4be1-44e6-845c-193b3a7b7b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64ccd166-0811-4b14-9999-1f68d4990292",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa2b9636-1c02-46ae-9ed2-e3d07c17861a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "705830d7-43f5-45cc-b6c4-bd23bdf82015"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "260de7fb-3917-4165-8e22-3500c90132a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6aacc84a-e314-4baf-af74-4206ffd4abc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cc7fbc0-9c45-4256-9840-5fa8404e611b",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ffc65c-c7b1-4d50-9034-3bf89c16f17a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50ba70bb-3364-4988-ab45-ceeacd967702"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bddcc513-56e9-4732-a79d-1bb6a4ccc6a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3817193-da5f-4170-a7d1-23ad07dc01ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7758224-f607-4b6f-84ed-df6e507e461e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f71bef8-2243-4cd3-88fd-4d5a21f0f376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0cfdd49-7955-4b41-b2eb-b5797e230cea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a4157a8-9876-457b-b5cb-51235f908bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf71f024-594d-4582-bc33-ca5ac501915e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f55bb448-9c4b-4c07-97fb-9ba83fbf4302",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc138664-4752-40cb-a77c-1b85b774f69c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "543a9cf0-c7ac-406f-86ea-a87fdddbf544"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "117b7594-602c-4ee7-a72a-d766c40d400b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b7e42134-bf43-44cd-9f76-d92cc4ec529b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a12af3-d482-442c-ada9-e631b59b4662",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56568da0-1bc5-43c7-88e7-98dfe666815f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e02bc53-1754-423b-b56c-d77ca913b627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78b9efdc-8b1f-45e2-aa1f-c167a1282131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b45fbdb-10b0-4751-9302-705a94a5f390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78eac51e-0ea3-4919-8353-f490ce3df784",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94284883-3f22-4db0-b1b2-8bcadb9856d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72ace212-66d4-4835-9487-beb236b8959c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a4adc78-a0ed-453f-9898-1636dcd209b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "f217861d-26af-4bc7-9858-c2da058f7db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c79e24f-be15-4ef6-bd2c-fcb4bc5f7b37",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe9069a7-9aee-4ff8-b543-bdbe331cf4b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f63e580-8037-44d0-8ddb-e3f07695e1a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5b16112-f9b8-4dd8-a2b3-ef67f701b2ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "57c1df68-0413-4d2a-9028-1f933d0650b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ee72ef0-8f38-4209-b960-3ec2b7726dac",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75630edb-fc2f-46b4-b93e-e213d2d81e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d319dd95-1046-4fc9-89f6-54f2f88aa57a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2747363-0d35-4539-8728-5b9620880a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f862983-6bb9-4f6e-b05a-dea533924791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39a45643-d04f-4db0-aac8-fe0bf0409e40",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c7e3f56-c333-44bc-bcae-711952810aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6205f852-8b63-48ad-a214-a1fcb4a80035"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60056dd5-7d57-42b9-88d0-b3f11a5d597d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bcd786e-9d53-4352-9ff0-786bb85cf3e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a20393b-757c-4604-a7e0-356776248c53",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e6f90b-9e08-46a1-8c51-5a9e30c84d3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3df824e9-b3b4-40b0-a7ff-0d4ee3aaf876"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716889d5-56f0-4ac4-b2c2-ef53cdf9ee7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfa46819-8a5d-41a6-b054-8d698c0ed70b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "586e7fea-65a0-45e8-a2bc-7396c26c71bf",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49adb8e1-d583-460a-9afe-14e7ed479dea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdfe0ee9-aaab-4d7b-850d-888540aed55f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef880483-4721-43da-934c-a2c2005a8598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e0629a7-aa2a-445a-be74-acdea0440edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "269583c3-fa14-42c1-9410-d4f515fa17c3",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2491793-4ddb-4b15-bfde-f4218a206052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3adf3a52-cd43-44df-bc74-d6631eadcb25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c2566ca-533e-4222-a304-065746f0fb61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a9107fc3-bd39-4bda-b598-48f0e1f250ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dbfcb2f-1dd0-41b1-b7e0-74c60c86a827",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33eee525-4f29-4f74-8eac-a53a1f51f2a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cda3a08d-3999-4717-b9ed-e4ce2463424b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7550dc2-e1ee-47a6-bef5-bd46d0989c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed1c8b99-96ee-4518-9116-3ecc4825b47c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4f730a-ae83-45f5-a7d4-f0826a1d2ca9",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0810a9bc-3b89-4c03-8bc1-bdf345d62a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc494a42-12de-4bcf-b057-c6f3c315ea73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96428326-3220-469a-93a5-c398b43a27c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "439784ee-6c01-452f-b822-126575152408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0c0130b-4566-4b0f-a98b-3f333ea2fb01",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76914336-dced-48d1-8812-d4b5f458ba8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "691b9d03-126f-402c-a321-333069343ce7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f188da2-2f22-4f55-a427-f0ab6cc3b348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "57d53f07-6b82-4582-9c51-300538b8bc80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c0c290-1023-420b-b6ee-1c8cf91a6475",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b38ae9ef-f117-451c-b5aa-bcbf63f0b126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08a27bf2-6f43-4438-8219-7f7a19fabcc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95ad18d4-ff29-46cb-a694-c94357021a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "87676473-f4c9-42b8-a3ab-64f7580c8016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "905f644d-9789-405f-937f-afce00184a2b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d3927d-cc01-46d1-a2fb-fe7b84b156a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23a29e1c-a113-412e-b91a-fa295f7f0d54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3a6bfe-4336-46ad-b810-c59a7197aa92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c39b78bb-d1a2-44d5-8a43-3f84500aee34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ffcefba-09c3-4135-a75e-f5ca26ba5686",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a965ad-7703-43f4-bf68-7c41c6a05f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69ff1fc5-86c0-4a24-8b21-f56075c2083f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a79590e-4d1a-4a2c-bb14-1207ff311c2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "1a5b33c3-f82b-470a-b722-f73a984364c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b897f46-c4d4-40a8-8cec-d8925d9a4c3f",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab7461cb-0c33-43db-a46c-2deacc1f762a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e602f7d6-eec9-47a2-a939-482c65eb0549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74ed65af-c1a9-4299-97b3-04fe8d128816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d2c8d02-950e-4cee-8d12-ccc2a511a5e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcfd5ca3-962c-4610-9fec-8b3b6961cb31",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf97056d-7312-472d-a086-6d857767034e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26876646-6701-4872-b851-253b84b67aa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e1e9cf0-77db-4606-a48d-dad993942081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "096b45e5-b273-4005-8d25-0303bf287852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bd642e7-fd72-4158-a7bb-90ece9b965af",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c06d7b8-f38d-4e29-a5d5-6a3106a609b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "359b58a0-2915-4247-98e3-3c2d91923b6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9eab9e2-217c-40af-94b6-bb218034692c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "142ffb03-c955-4b6d-aaf3-0ee4421711f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efc3e112-babd-4908-955d-0745c994cc88",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebe41b83-04b0-4642-94b8-02dcc6d1e3ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6daf43fc-e576-48a3-8300-e82d76406e44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de83b77-7404-4366-945a-cb92f5cd7887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a27101b-0baa-47bf-a254-58fdebd170a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc5a3cd1-a040-435f-9bc9-aafcc37bc0ec",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12c02143-519f-4a27-b4a0-151bc650ee3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1064a73-469b-434a-a6b6-6d32407616db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "762e8096-ab49-4da2-b92d-6094926bb783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "38b93812-2fdf-4b7d-a061-2b3577232fb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32a2e706-0d98-4530-a848-d59ff680c5e5",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5cef2a5-924e-4008-9b96-bc4b3f2d8ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89951181-9102-4751-b543-bc3f1a8f5c52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "357e94b1-878d-4891-95f1-78c2057880d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "94329059-837e-4fe4-a513-9b9f7f638feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a856cc2e-e963-45e9-80a8-ac339d679608",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "792a379e-e133-4f8e-8979-196cc7fa8d3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d591a7f-0fe2-472f-92b9-c5bee86ee440"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd265ca-944f-4fdb-8f44-ce76985daa79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "876a0143-e53e-442e-881b-0fa0518e42b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c0c60c5-94fc-4a8e-aa29-c1df2f38f3a6",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b1e9ba-8707-4665-9d7a-28f1ec244897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a0a2fce-fe24-4701-b301-19662ecb2e74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96198512-44af-4397-8143-a6912bdec6e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "58c10e6c-41ea-48d9-8d14-e49c3062a591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b619ddcd-ab5f-4388-9fdc-c09c7580e7a5",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "387aecba-2eaa-454c-9fea-fcadc8b50451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fabff4d3-0299-41ca-8a29-dfbfe6c94c9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "928e6b00-eb95-4760-a4b8-de14a0d5ad9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "200756eb-e9a8-4f00-81f4-0c90a7fb41b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf017e12-184c-487d-ad98-da09f30cea33",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "497e8be7-10a4-488b-929b-5d2bf6a8f74b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b19393da-5069-428d-8d73-58e085e5196e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2abec031-8f52-44b7-817a-1ecd654c3c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "164e104e-84b7-45c6-b861-f9022e341c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c5848df-9393-499a-b382-4ece761423fe",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85020a0a-6f74-4323-b0ff-0630cda881d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c495b103-5b3b-4f2e-82d7-d26f032266eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05d6ef2f-162f-4c92-b9f2-bfb1b021e0b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4b1019f9-9eab-4502-89ea-9f39bd220926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92973de2-789a-4add-83ce-e8092f9206d1",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e11d6c11-4d3e-41c3-ab6b-026952230672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9081deca-be3b-47e8-bdb9-a4028113b216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d56d3be-59e7-469f-b3a4-d6812d01b146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7ae7c88-47da-4e1d-981e-f3051beb0e8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d0e76b1-91a6-43e3-97da-45eb395c9c24",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51294425-fc0e-457e-8ac9-55995308ec11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20b97833-83fe-4107-9093-38c8e580ba6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e70b200-e09b-4c31-a5d9-c96632b9bc90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4cd396d9-fed0-4609-aca0-94f5058f3375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75193a18-078f-4972-b4ba-eca7707711cc",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebaa3198-b458-4756-b65a-33a87ac70bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6d87b91-2505-4282-ae54-08f9d9b4a60e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167c9d90-4a5d-472f-8010-e6a0092d3231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b640367-9adc-43ae-a9b9-9629edfb12c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30a228a5-8ae9-46fd-be79-c363a7e40ac7",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc41a704-8601-4887-ba49-6af001eb484b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6058d4f-2b24-4b5b-9965-8561d1b26fef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c98caf-e678-4d56-a9bc-b9487d772770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "22459431-cb5f-43bd-9270-68b2041b259f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e45504d-8695-46cc-9e5e-863428a5ee7f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57605f69-f4fa-4acd-9b66-e5a969ea1685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f9a330b-e94d-41cd-9212-cd8f99199463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebf3b503-a38b-4236-bffe-ba1b1a11e131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "61ab2a9d-48ee-4fd3-abe3-d8c416982840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "486d46d2-305c-4424-90a7-6da97a31efbd",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afa25374-896f-4b9d-a9bb-7116355fad33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a83e385d-8033-4d53-869e-d0e454804ffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc6119c-0e1c-4f31-b251-72d9c1fc02c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e2a9051-3963-4952-82f6-56b277c6e707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1573cb99-33af-478e-a159-32379f849a12",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cfc937d-abff-45b2-b829-a9575fbc32fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65cc0edf-cb5f-4dce-ad21-120bc22ef379"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f90e1556-7a22-4cd9-8854-8acbe4efa673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "27edd28d-1701-430e-978d-900278e73c89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e39769fe-0818-426c-bc51-6210aa29f37a",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60143f97-7e3b-4a23-8f6b-05486d164de0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ee3033d-d3cf-472e-ad4f-853b593b71ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b94671-07b2-4c37-a855-4a7986279bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0df6cacf-8d1c-4abc-8ebc-2dc8e373a889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "530ea144-90b9-4f82-8a2c-8f90f753d870",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d46a4606-c593-47e5-ac78-eeb13f02db90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7665280-e61f-4ea9-aecb-1c93fe43b9ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72df4604-ad89-46a6-b185-53fc5975bb97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5749efc-54d0-467f-b348-0fb58ba15427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3d1e18c-c66e-4652-acee-5778a452851b",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b07932b7-4b8a-4073-b3b3-1f206ba87e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05ffe5e8-257e-4128-a0cd-3f8cbeba449e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc3df37-645c-46a8-be79-14f8ba939f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ee3b754-6ccf-4741-9d53-33bd56e6ffd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3891e83c-58c2-4de7-84b7-0663615bb928",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44e8df8-be0d-48e2-a55c-bea5efa0e8f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3e66b95-0cda-4537-b2be-dd7ad34603fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "993734ee-d268-4301-8e8a-6771809cfe3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc564282-4a16-43e5-8fe1-ca7615e189f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb12f0c-9573-4a8e-8693-b75cdeeaa338",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77a4b292-71f0-432d-a002-0ddd4d756860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a381b5b-b53f-4b10-83a5-6e426e9f423f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa83be0f-5645-4d41-a92f-0583b539ff1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2b96e593-38d6-4683-8ff2-c9a8a671e17c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9556eeb4-82cd-4ffc-b8ef-9a182b0a2d23",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db516c82-5cdc-45ed-9dce-2f7c199811f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddec3c8b-4ddb-4bd9-a087-de29f9c3213e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb5ef2dd-c7c7-4156-b739-700e3bac8b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b30b286d-81f6-46ef-8128-b7f99f75ded7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc9c590-c5d1-482e-92ca-b6ba9e205256",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3dd31a5-44b4-491f-a2f0-6ebc7494222e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6a9a663-f524-4a5f-8ad5-0c43c01946a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae19e01-6d26-40cf-b1fd-eee0582a14f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c64d666d-cfcd-4cfd-9c54-365bb4fac004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9da1e577-2289-4f1a-8c43-7cf4ca26f82e",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca6b18e-ff8c-42be-85e4-fc0d9a2ec188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aab32582-db0f-4914-8d89-79fe2a833967"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ede7df0e-819d-4538-bb97-e601d9868ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "13259b2e-bc1b-4378-8e46-48682431c282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a2598fd-8421-44b8-a7f1-62b95d1d9fcc",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8690192e-88c8-4042-931f-88494671568d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63f9226a-df8e-453f-97ed-3c14b8be712a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "134a4440-dde2-48fa-97fd-664b70a7a479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f702e211-2477-4a64-bbee-96eb5d7633c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e30dc2cc-b583-4216-9dc6-b5e39a03c548",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95046cf4-fa26-4eb9-8f73-62b0269eea11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3522abf2-51b7-435e-a989-7d2c3c7ea6b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b255f0b0-3da4-4f22-867e-476b73a551b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bec18999-19f6-416a-bd8a-7a0158d14786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffde1b90-f4ff-4ed6-b946-58d196671820",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "248cfc74-3e80-4b04-8d6b-dc744c45d0de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "872cf368-321e-40e0-be35-f5713a3cc3ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22ade551-1d16-4f18-9bf2-03bcebfd51ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b73acce0-b5cd-409f-8421-bf3c0e21172b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a7a2d2a-4efe-48b8-8099-245fa9198eb9",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcca093a-19a3-4704-935e-9671923e0df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79aabec8-c172-47db-bb07-c18cda6c2b22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0181b7a-edba-41ae-9649-b4b221adb403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "293adfea-7af4-481a-9b9c-b8e097248229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "459fb851-1c89-4df1-8ac4-7054a6763ca6",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab5deb28-35aa-43f9-a378-00094bf66fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0676155-e7d8-47b8-a58b-40be4301b65f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1bf3911-b11c-44a1-88ff-39ec946d9b3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "394e3892-0a62-4b62-a82a-c8a0d1eb5d9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e51c3237-b929-4e24-a770-2f026aea8be0",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3349f7a9-81dd-450e-8251-e9487de47b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "093d9567-1e7e-4690-aeba-810569fab87a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e64972e8-ce67-411c-a336-b03b87d8585c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4fd7356d-f3a4-4101-ab6e-160825507c33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "418d5b51-0a25-4048-9121-434bb46c66d4",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f9caffc-bc37-4ca8-846d-9fd5b581bb2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f5df043-4fb1-4069-a40f-08f0941f890e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e97f375-3889-4dd1-9af0-b98215c85071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "60f8b441-435c-44e7-98c3-2e752c517c00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7057c09b-3f4f-4988-ad5e-0f2852b1b46a",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e4a117-1ad9-4d28-b619-183ffd4b82af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "921aeb48-2e83-4564-b6c7-32ce7b18fc42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f683ac0a-ebe2-464e-9190-4121b2613143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4851403e-4dec-464b-ba9b-3a10b829e138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00f4ddbb-96ec-4e39-b6cf-de77f6f579a9",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b3cd98-6911-464d-b12a-c6b6f219ed1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38d4f92c-1022-4768-847a-e8d83b3f6784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "156444fa-5467-4d4b-a579-fd6587e75c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8c2f554c-67d1-4668-97d5-6ad860aa654a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3918fa0b-b3a0-42fb-bfe2-9137dc7e62c8",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "200c8675-6d17-40df-ba82-a35970295845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a6241333-be38-4052-8258-e1ecc4c23c7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4901ec8-9088-4cd5-af35-a3046c5e3b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c752280-cc64-4077-9ceb-c59404c1063d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "370d5193-5afc-49ed-a6bf-6db8acf94723",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8fbf120c-b462-4ff0-ae0d-6fb66aa68ee4",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee0d2e6f-0006-4c18-b153-2b413331e178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b23c888f-35b4-42c5-bbfb-f6a66434bacc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07cfe2e2-a65e-4a13-b4ed-4b04fe20c3d7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "60c5c5fe-88a0-477d-88e2-89381908d2e1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b781cc42-5448-41bd-b914-174465184cd2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "42cb58d0-1184-413f-802c-1abad4abd5f6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6f5788b3-96c0-4378-a30b-090c2a929104",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "549b742d-0158-4339-bed7-5e09ae3c0bca"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "87b17587-5716-40d2-9319-7a8b54144a89",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fc61543f-7b8f-4f84-848d-86acd0e6d5c9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6f756dfe-9f9d-4fd7-a110-aa5f40a97cdb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cb15be3b-8d7b-43ac-aba9-aa4d9703b019"
                }
              }
            ]
          },
          {
            "id": "e1a61c38-a2a9-4e9d-8076-60ae643f8b60",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1b646b80-7981-4d6a-bb28-449078041cde",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "2174030e-59b3-41c3-809b-8dd01613d07a",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d340653-b09e-489b-8fbc-678e4b7963c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b443f45f-5eb9-452f-ac14-21315f1b43e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e951682b-80d9-4453-badf-05d8cb1c6d47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92cd4531-2ad6-485b-b7f0-b566be56c6c3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d449e3df-ac5a-427d-9cd3-f69320cda3c0",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4dcb2ed-c6c0-4ae4-9338-a496b1180ecd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c537a2ad-43a1-49d2-8a87-2634f11fef84"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8bd0ac95-cbd6-4c52-81fd-1879a9b6f000",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d4f372da-bbdf-4820-8304-5fcd4802b34b"
                    }
                  }
                ]
              },
              {
                "id": "5b6b40a2-b8e5-4e9f-9b39-b66addd8f1e2",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "03c89e61-524f-4ce4-91c9-92dfbe1cdd1d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "653585a8-0dff-41a4-b7f2-5f86ec5c9476"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ef6a754-85ef-4d5a-a3d5-53a7f5d98bfe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6e0c1f77-4c98-48d4-91db-4e4ae6cef97a"
                    }
                  }
                ]
              },
              {
                "id": "1e4e0350-7d1d-489b-8fa9-882217fdd575",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f92e246-894d-41b3-bc45-3ba58ac2f354",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c81c63cd-4690-49f5-86f1-e00e06036f00"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21a099ea-eefa-4587-a568-9d57af25ddd1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "87aaf69e-8bd1-4975-bff2-87ee91e830ec"
                    }
                  }
                ]
              },
              {
                "id": "daada070-69f7-46df-a321-54548c4b8ad7",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "12aa6cf0-688e-4be0-9230-389e24360b67",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6284355d-da3d-4ad5-891f-e6609624248b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd6eff6c-180e-464e-a048-4d90154d7b21",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b74abc7a-4e51-412a-af6c-a927423537b5"
                    }
                  }
                ]
              },
              {
                "id": "b32f30f0-9fe0-4005-b488-77d78eba48b2",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3727431-21f3-474e-9eb7-b6f31edf037c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "010817b8-b0c7-435a-9b50-ef99a08a0d54"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "063cd6e8-ab14-4e60-9fec-d36dc08b7e2e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "a3e080db-d050-489d-9a80-78ddbc47a5be"
                    }
                  }
                ]
              },
              {
                "id": "f612505c-fb18-4713-9724-9e5250e31b92",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a9bbcc65-b885-4b14-845f-4a66735252cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "07e5bda6-2d44-4ea6-b06d-e06625296ea5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e2d64190-f0b7-4843-a8a8-e0e2dc8bbb5e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5490a7f3-4a40-4392-8bf0-b9de22b17bed"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5034d1ee-0f05-4ede-983c-35354f93629f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e865a71a-dfbc-435f-8515-ab2571a7a2b5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cb0d56d5-74d7-484c-ae39-490300a75473",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d69796cc-bc54-4b4b-88d9-d95ab942fde8"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3e717377-ad04-40ef-9381-46d86083e1bb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "1f929132-cf9b-4bdd-9dc4-3d884a73677f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0571752e-b1af-4224-81d6-1d99fcd15e92",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "20aaad3a-eb10-421d-aed6-4035eada2f5c"
            }
          }
        ]
      },
      {
        "id": "325f32b1-3539-49ae-8ade-3dbd9b1b5564",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "73a28dea-72ca-4202-819a-f7f22d786b47",
            "name": "Negative Testing",
            "item": [
              {
                "id": "71e7a1cf-b70d-4c28-bb07-c272a907e0eb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "500b9c7e-299a-4454-82b5-8a3b08fe371e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b211d87f-b89c-4879-908d-7cf79c9a5583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e67f78cb-c25b-496e-8921-e752ba2590f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26c86cf4-a22b-48e8-a961-cb7c8fb3a438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6689e695-dedd-4011-b015-daba5a689e89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e4667a1-17b9-4f3d-afc0-6a1cdc957100",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dbc5ca6-0474-4e4f-9959-5eed9c788457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4c8b955-310c-47b1-9401-c3302b0cb749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "131fee1d-6a07-4e9b-9e11-24b882397f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "da184c4d-04d1-4f8f-9d5d-607b228a513d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d9976e-3344-4b75-a394-31cb6b6de9da",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bc4b53c-7051-402d-8695-f24027b49d07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "878507fe-d4dc-4b31-beda-594c92e7fc1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6da9a3a8-935c-49af-83b2-c76163f51158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "36e505b3-00f1-4780-924c-a6bd2f921549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e837d39-6497-431b-9be8-df9c272901c7",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f52ee04b-d831-4b48-94ab-50d38f434669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d7c6ed3-d6b1-44ed-be54-0625f1f42d14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b49f0a7-91f6-4e54-ab89-c84423a0056e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d072fe05-5bfe-4d9b-91b3-38f5d0c54b1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "115b5412-bfd6-4387-939e-a9a98d27f8ca",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e538b7-6b19-4c9c-b77e-20c93d3121ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed49b72a-fb27-4a56-89a5-5839b7d830d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd5d147-694e-4a44-8ad8-2709ea943599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3834ca81-5383-43e0-8f23-bc0fd647ce39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7811a08b-9365-42ea-84b1-4adaa1862b6c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f2b87fd-ec37-4e8d-b07c-6f84a38713c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf0aec2b-266f-4166-a60c-5436e4193c00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f81b3b81-68f3-4523-9b8c-c1d0f5ce36ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b45cb13-53e1-4ff8-ab7f-db4ee255f78b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d13a08a8-76d6-407c-88ee-bb1940ca8cac",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e30ce9-227d-4239-b57b-5b74b8708fd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa9b1cb7-a23f-4117-b615-c8a04794a9cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbe816cc-4024-46d1-b989-b2b72e0ce09c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "57a45a66-9a87-4cce-824d-39b4febf39ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5f44b2c-4587-4b06-a7a6-462ba334f2e7",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1fe8bce-4115-4a67-bf99-a1c1e7190954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9cc0821-f311-4062-9cd1-1b3453afbc78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89f565ba-bcca-4385-96c1-1f36e60ae012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fe21b4c-573b-479f-9f30-2533cfd0e566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f44d4916-1982-4f88-bdd5-2a3dff07f4f3",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca589d57-56f7-4b79-9255-f02d1a03ac9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1244bc6d-b175-4fe4-8a54-4ef8bd953f62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43b50d2c-65c0-4f85-886f-80eda703f468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d9044d0-b455-4233-a73c-046bad07c2a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca2ad2b-3626-442f-812e-abacb7f4ed1f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e136a50-084d-4606-87b1-05f94d11e0bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10d4a1dc-408a-4e14-98a0-0bd8a4a32270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "943c3684-ab7d-4ef1-9fd5-615bbaaadbf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3255ec91-b946-48b6-bf39-f103327c17b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d1e32d-bca2-4b0c-ad9a-6916e34fcc4b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0fe8185-0008-45a5-bcd9-0e2aed5c919b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5b0f6da-6aa8-449b-bfe7-57a9cb3a5844"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1875981-37b5-428f-982b-f1bb0a91c7bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "7d11bb33-a56f-4808-8e38-91a0cc34f91e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a9d5d8d-82de-4ed2-bf18-900d71325c9e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5403ff7d-a46c-4aa3-8bbe-5bd86716d12b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7be3100-7128-4e81-ab29-1344c374eeb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a881ee3-ce02-4ed8-aaa0-e1762cc565a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "912c4877-963c-42df-bac2-d4d058a69138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e817618-2197-4e7a-8aa3-e45adb5cd355",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd1dea8-b2ff-4389-be98-0066c39412c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe4360f6-f512-49e9-b265-44f1e59232ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac990b70-7e9b-4950-b1bc-4cdcfc00683a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "16f80b5a-d1f3-4688-9767-f32b42aa96df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08c86d73-e53f-4827-afd9-18dcfdda2418",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "033aeeb5-4552-4aab-bab7-8dc75f916ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "348ba850-a233-47b3-b603-65450b65b27d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e8cd435-a069-4f66-bd95-32e644ae3282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ae3e355-d954-4351-be86-21e9fae8d742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa5eaae5-f9c1-4651-8b27-040879f2813d",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f55774a9-f91e-4ff2-8fe0-f1973e199826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0779052a-63ea-4bb5-8996-3930ac01b5dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "270f02ef-c9c4-4f19-bb79-0194306c4f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a27bc238-b7a8-447c-8a8a-5c65e3d1552e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a21d10-98ca-4c8c-ba72-2aebed609288",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ec6d2d5-e544-4579-84ae-563f2f0638c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5013abd4-eeb7-42d8-b0d5-59e121a8979e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "849540c7-c6ab-490b-b7be-14ba07c7c1f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3441c4c6-8f81-49a7-bd66-c47c00ce0ae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1423e1c-f6f0-4c25-a6a9-316e2a593876",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90016e1d-3a56-43c2-94fc-a896203a1843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a156db2c-6fb5-4703-abf1-1101853446e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31a2d618-43d4-4b7a-b755-50f4041d3c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "57e9d77d-3a97-4bea-aed9-d0ed54e34634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30dd42d2-8e3b-4235-88c2-1fa2eda065da",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e481a72-df6e-4edc-96ae-f52e9f1edad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02654548-4231-43f3-a031-ae17011d2f8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b35e0df-0e2a-4786-a850-165d01a91aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b636fc5d-897d-46eb-88d3-abf964ecb59f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8258a661-ac5f-4f44-bf6d-7d3a28065858",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a89f1de-4b9d-41e5-948a-42d4cbdee0f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43e24486-41f6-48d4-8ba8-239a2de21af7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "654b082f-01a7-4603-b794-067bf2223a21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c0bcf69-e8a9-45e1-a1b0-35e2078964b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edf30e83-a6a3-4951-96a8-379f7a6ad9ac",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfd7595a-5399-487e-85fb-7f9a9ee53d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35037400-49f4-4bff-b371-90b973ce392b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47d63c3-8366-4b08-bec4-d5f897a2510c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fd57339-5bc6-45b8-bd8a-6db8a889e23c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db60860b-ff9d-4cb1-8801-f444ff391dec",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6da0a880-d729-45fa-b90c-a1b659f98f79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62d47976-0023-4a04-b825-043b1cce1da4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c20194f4-4cf9-4838-8ffb-0bbb2f53235d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "93a612f5-97a9-4557-abe1-9a8b1cc3769a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9600e4a8-f94a-48ce-ae0e-59014e4f5c0c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c046ef08-0921-480c-aa3c-57824eb73526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f930c180-27d7-42bc-9458-e2c17d74754e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b4eec0e-ea26-47d8-9cc7-350d533a498b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c1203de-9431-43b6-b57d-bab13474def9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66de10c5-8a6c-4c77-aba5-4dabd4a02a85",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec9e39c5-c1d4-4858-b599-b48c2c7a62ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e94a158-3a3c-4efc-84b0-b1071077c44d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f5f48e4-0ecd-42a1-b906-261996f2089d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83ddffb3-2747-4b66-b400-54aeae2f660f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f3994e-f4ad-4f94-8d06-fd6e0346673c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a41f6681-8f5e-4ef7-8bd9-c1acf1cd5414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5ddf501-62b1-4a2d-b92a-6ee5386e92b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8a3f51b-f0d3-472f-976e-c9318d655b12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a3aabe1-3c0c-4f63-a246-7a4bdf3a4be0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af1178cd-b067-4aa7-9c83-510eba2bb076",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da9d31b1-64ed-48fa-9490-a0e599ca290b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63128dc3-5b63-4b31-8bf6-9bc42bfe117c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0742e05-908d-4c7c-adee-8467399b7744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2766ab34-6a91-4441-9a1c-ddd2dc106350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68411fe3-9b5b-4725-9bdc-5b44996d31b5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24e4ddae-d7e8-47dd-bc99-2fbd50d2a533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bf98897-9d2c-46c7-b6b1-8467fc99405c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c92f0be1-8205-4cd7-8de5-e38a399871c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1182587b-0fe8-44a1-a536-1070172af2ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "523b882a-6093-4e54-b2d3-d74217a00e93",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53d6d69b-4e1a-4b0f-b0d1-253743666c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9f76ffe-2e7f-4900-8b1c-b0a38af9f489"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0167bb66-66db-4766-bd9f-46734a50b8b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "132f78b3-9e6c-426b-b686-e7c1ac97d537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7bafcde-c044-4c1c-88b2-1526692811df",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ec2e7ab-3645-4dc0-803e-59625b77a046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d345d9aa-fb1a-4151-a8fa-75ecc1d6a8d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa833d4-f8b4-48f8-b5c4-02d64a36eb1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe5deede-58d3-4291-b401-a72d40d836c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ece10cc-be97-452b-bb7f-f0f5c94abed6",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf3fda8-d80a-409c-8c31-5f493b6b0573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45350830-a4cd-4e84-b198-a958eb0661c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8388a96b-f242-4f6b-8a8e-61ddef859cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2b4c16f-38a7-4f88-b8b9-73430012a34a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e42112-8e3d-4514-b48a-80f8ae8339bb",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec944f5b-0925-4009-8b45-b86f36ba946c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd2e9124-a165-4251-9347-a71790be362b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6060fa18-31a8-4e56-a5b5-3b992c7c1d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c5d5e31-570a-41c4-bf8d-4634b4dfb8c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "820405e0-9ab8-4c3b-8e57-37a3862ffecd",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0623d8e6-099d-49e8-88bc-5db907ed6952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92d3d7a2-ad7d-47fe-9bd6-249c775e88fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d96e836-9384-43de-a2c9-aa7749a002f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5e1e7ee-7f17-4469-b22f-19188b51174f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d5b19b8-a6b2-466d-98cb-a072248b4f06",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79c923b9-a2b0-4534-a803-7636526a173c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13d6ed21-f344-472b-8ba6-d9d8685a673d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf25c602-1c77-4a37-9bcb-2922b742710d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b313d356-81ff-4fc2-b93c-46b9517deba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd8a08ba-7e2c-4fa7-9f67-4a471d9f58d3",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b12a0b2e-4d05-45df-9d2f-0ffdd754390c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b45ba153-0a58-412e-9184-7b591366fb70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e25f297f-d521-4793-9fa8-fdcc2eee0f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0950c08e-9873-4cba-8c27-f2e97bed27ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a82bc99b-7d72-4664-8d72-d24112c61b17",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82a80363-7545-4181-a3dc-3763bb58dcb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad96e5de-bba6-4a06-801e-b589e51a7fe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df9de88-a836-46ef-ae91-e41894508925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9222988-070f-46f8-902d-b0aa645e62bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c70cf25-bbc3-4171-ac4c-5d1f70e08888",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07e32efa-d906-4c20-9388-62cf5a374158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8e7c7e1-cb87-44f5-9ca7-1f957508b2c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d45823c4-6215-4d9e-b4b4-c0490e8451e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06a711f9-d064-4d28-a07c-870a22f58ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6751907f-fd03-4977-9528-0e756f874bb7",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "756381c5-e54a-4537-bef7-c9ed4d62c582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47d19d97-5398-4eb4-9bc5-e784bd2cc1df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f48fba-2f02-4f73-b2f6-4884f0d7aad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d998034-b42f-41cf-ad2e-34223e198ba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda4a88d-5f8d-4bbd-a34e-ed0e1f4dab07",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d42ce602-0bce-46ea-b560-75c74ca11598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cf83b9c-2c50-4d63-b799-b50676cc1401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae37793-5e74-4d56-b8ec-0fb1bcb64555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa418b48-7f5a-4e0d-ab05-76fe36917b92"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0cdc913d-6c08-45f1-95a0-ba34f6180adf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4fd414c4-a01c-4585-97a7-177525738bdc",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b17a246-4319-4fae-a0c6-2d4e2130df19",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "240baaab-753f-43fb-baa5-4912c6149fce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52de389c-7065-4e99-9777-4b856bd66371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "10e8848b-cb86-4623-868b-4594e63a196c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "545c288e-b514-4034-852c-dad5aca13f3b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c02bcf5-9105-453c-b20d-3948a4a16fdd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9102fdb-ed30-4a6f-a046-67d8dc0e1a00",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b83516ab-cfe7-4b89-a2de-edb555ebb011"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cff49ae4-d628-4550-9107-db374441f201",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0ed3b807-2797-4da8-9bbe-53b9dc748fb1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c80f4c29-5137-4f5a-a8fe-dcc2154ec513",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "891fc931-9c7a-474b-8f7e-7ced47681338"
            }
          }
        ]
      },
      {
        "id": "0ce32f33-6348-42c6-be1b-0248f5e30834",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "606a498c-f5fd-4434-89a9-32a3bcd00050",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b064bbe5-0a3d-41ba-a0ad-223923e1a08a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f2af2229-0b69-4f4a-a486-ad30ff632842",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6a584bf-ec2d-4ef2-b41d-c02ee88bbfa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db0d1d7a-1a43-437b-a409-dbaa8b430386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47dfbdc0-3ed1-4ace-a8f8-33e309aa37f3",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18626f03-9efc-4614-9fa7-f0e7ad444995",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ff007d5-eca6-4af7-b004-4ce3f9d5422e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf8135e3-e341-4de1-a481-4d94f3e36ecd",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a11cd290-1b5f-4f77-bb2c-194d2cc5fadb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b55db6bc-5e46-4654-949e-389d3ca65da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "793b77ce-b11a-4d67-b11b-5259cec8fa3f",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "152b3135-81d2-4c83-bbeb-3a00358ae0a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50d494d8-3e76-46a3-a553-118262985f64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb1fafb-47c1-4ecc-8126-b66c2765903e",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6161c303-6e71-4d88-986e-1c51eb7f5e01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5fe5531-4f1d-43a3-a2fd-cb89c283936d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8907009-16d0-4f74-bfc4-4b811c7a7e6d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27043ef0-8a80-43ba-9362-44144da48f1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0986769-335a-423f-8d20-a83261b1d5ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb13809c-1913-403d-8931-ebcb7b2d4394",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30d99c64-b289-4ae5-b0d4-98330d284a0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a67472f1-8057-47db-831f-1bba02dfbaa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "060911ed-5136-4427-a3e1-8b5a24ca259e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1757fdc2-83a4-4c1d-bba6-08ac909669c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84f720bd-7362-4da4-89ac-57243ae02965",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "568fa4af-a5c9-4bb7-8593-88917aa41181",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b7a723a-7a13-4011-8d2f-c2bd45da575f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f85450d2-ef4c-43da-b698-492b68b50df2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b80394a-926a-46d6-bbf9-ac7383eae683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a93c9c15-1ea2-4e75-83ce-1ef8af8059ec",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceab1e18-bf53-4170-89e7-2c61f7656360",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "612a5403-78d2-4222-9e5f-49804fb357a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e4ac1b-6a89-48f8-8102-5ff64ccea3ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b32ff65d-ee0f-42c5-8adf-d7dffcf35f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11864a14-113e-4580-b858-27ce82c396c5",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4c89caa-dcda-43ab-a1f1-bed1f818cbab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0dad1408-4af6-4580-8c3a-41ec50dfcdb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d387dc1e-109f-440f-a728-2efc588f14c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3d41f20-545c-4eb0-a5e4-49c8a57aed78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "269f907b-fcd2-47a9-bfa8-bba0e49ed41a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40ea600a-5803-48a2-b425-aa6b8996b14d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d053c36-ace7-423c-80a2-650c16d7c36c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb8a55a-eb24-428e-a03f-a762ffbeb83b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0551335c-b9dc-4d83-98fb-33f40c02dfed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f0aa60-67fa-4572-bdf8-2fdf1564bee7",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07ab6b00-f537-4175-a66e-2318256569b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5f36c35-0bb8-466a-a399-88aeeaa73256"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3abd3067-2133-4f64-b7a5-23d98daca8eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21b12d02-81c6-4455-bd1e-3cf884f8c688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "382242f7-4ac2-4876-8da7-2bfdaa62a33f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc6dac7a-dbf3-4c25-b5b0-aabec82877c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0928d8a7-df96-4ed7-9e24-134952694b63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c9a384-f0ad-4b6e-b8bd-6eeb8fb97204",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f991e7a1-d735-453d-8be7-1dc496bbc972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f367fd-329f-4fda-b6be-b8d3ac3138bc",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87711b37-3c95-4ac6-a47c-156d786bbe05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb4eaa8a-222d-45cd-b93d-aaf7fc2a2323"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dee3cd1a-7990-4bb6-96e0-2f4ad8e28ae1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6280c9fb-5fe5-42be-9020-b40d7f10353e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78cff02e-7c29-4218-8172-df961a022932",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "648ccebf-69ca-446b-971a-d7081b7e42e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "789807af-8537-4c66-9616-cf63cfbfa35b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cde400b-7b9c-461d-9f50-97eea2a92378",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b73850e3-8bbc-47a0-ba6e-41b080642f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdaa42c1-67c8-467b-83d2-14d9c0299740",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a3af25a-ef47-4b47-a453-80e75180732b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35906e8d-7688-4228-8a70-292d383766e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e5aa52-ebcc-432e-8e93-58b77202f7c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66eceed3-f514-4ec4-8a02-4de1d53da47c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d8f593f-7f7f-4175-9821-138bb03d955d",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5f43dcd-3df9-4c72-9aac-81b321882ad3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01f95013-d305-46a1-9ab3-3ad4bf29f3d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "396a482e-7886-419e-ac5e-9f9bebb42fb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "774f4318-3d55-48c7-9663-6c7909dca075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "397a7007-25e8-4af0-9fb4-516eb7ce7517",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aad1e53-b581-4ae3-8b31-9c7fe9a4f2de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5baa658-b0b4-4781-829b-553798f730a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f16db44-a417-4846-b841-611af99b6f94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32b41c27-76e9-4a5c-b38b-370e53ff5701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b15145df-1184-47fa-8036-191c0594f8b3",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5f3bf25-a13e-4ff8-a62d-7252d49b3b4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc4362e8-2f62-4181-bc09-12f5718660f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f596fa86-6a45-4d2d-a31d-ac8dc5c3bb02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b1c5e79-6a69-47e2-8ecc-51064b59c30f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c44513-0e02-47f5-8e17-86186b939abf",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eddfde98-6b10-4a97-a5e1-64c5454ac05d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a52d8666-739f-4799-b1f9-d5dc094a0be2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "205a09ff-6fd0-4fe5-8985-37de05a6c8b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c9ae271-cac1-4d39-ab60-5f879302fd38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0937b92e-2c31-4fda-be1c-dd768f889dd5",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "644e8417-202d-41d1-bb52-5da465f1727d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "260d0386-3ec1-484b-b9c7-c2c61bad4b88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d78c8647-2ac9-4a35-86a9-d3d0684ec549",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c0e4b4d-570b-4399-9640-ccd2346aa7e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dae7d70-653d-49ed-b2c8-44454218d0b5",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49adada7-7b80-497e-9e23-05803eb4d26a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ba740d7-5950-406c-bb5e-9926e83d6025"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "213235b6-51c5-4e8f-9dd4-6855c54e3c67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7a28a6d-f6eb-42f8-923c-f268d7170f8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef6c82f6-03c0-4e2c-9728-4e8f6782454e",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d347ba4-9f39-4854-a0c9-ea22c3e39944",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d1cc833-9877-4c89-8593-62591fbe7343"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af5f10d8-2ac9-4efc-b45a-d19a18054c56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd55ecc9-5374-4f63-9516-72b3988d81de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9b95f77-9879-45d8-a798-f369b7186361",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4181890b-cb29-4c07-9c59-0685dd10b136",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "071b570e-47d7-44eb-b8af-8c69c8a81ed3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15850caf-5b57-4829-909f-28c6d39b63d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c047f60f-bddb-4d11-a0a3-59b665365a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "267fa8b3-0383-49c8-a7fc-e8ae24b79b25",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e37acd6-75e0-48bb-ba4d-57d0c3dce993",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5dfcc311-3ae6-4175-9a21-16c31e206560"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a702408-a55b-433d-96c1-7ead3c824f1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16a59e56-cdf7-4953-a0da-4d1ca0fcb6f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6426097e-e2ea-4e01-ba1b-72e1ea832a13",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b053df93-8d4a-4eb3-8a38-f86cf5fb591c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9785ec1c-1107-49e6-9c5e-e3bcc27a56b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "790d2dfe-e468-4818-ad92-387fc814f409",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eabdc60-e2b3-471d-81b9-5c2bbe6ba387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c0c411-bb5a-42b4-bb02-266cd6da0656",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f12073-bfe8-4510-85bd-6f0db2885d1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f56cf9a3-18d8-4615-98a9-9050b9b25474"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf0dea2-dfbf-43ba-9c84-e09cc7314f52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "431679e5-527f-4d9d-91c7-0eb4d6d870f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "714b9bae-80b4-470c-a39f-76cb465bb7a5",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be5bbaf1-c803-480b-961c-12d5a5e3d6dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ebe83df-dbc6-4e44-b94f-7fdd657d4a90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e29eded-e5ac-4790-a3f5-7b756c3cecaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d2adf56-dfbe-4376-987e-6f7ec66456ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c033676f-7790-4581-9725-1d7e00d2fa80",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6e4f77f-be37-4114-95a7-c1b97a83ab50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7a9bbac-c465-4e61-ac9c-3cf3d81d4343"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc510a5f-991c-4e5c-a5da-c74e25f91dd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc170b09-11f2-4180-b612-bab31338eb19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd90bcee-3f14-44e9-bd3d-e98987c9e5ce",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "386d92fc-a2a6-47bd-8785-7997f85f59a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c7d7ca7-ec6f-40dd-ae7c-59dce33e1ebc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd7a0052-01c4-4a32-865b-1c527350406c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe2ada20-e27c-40eb-891a-e4fade704e27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8169c760-ac56-49a3-b173-369127730f0e",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb542c7c-4ddb-466e-ba04-f6fdb684f21f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9c2153a-51e4-49f0-8778-5ca5bc1eff16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86b44831-bfce-4338-b558-aa818bd57540",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e387cd09-0839-4424-9812-da1c5d638940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac828c31-892b-4a7b-8ff2-c957220eb099",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f2803a5-5a3d-467a-b428-2dd8807f3b93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b945c19-7142-4979-a73e-8fc9a66f3bc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df6c9226-dae4-46d0-99cd-8a88bcdf9e74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8257cd2-6707-4bc7-8836-9931fc2f0d79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74418c17-90ac-42b4-bd0e-652f826cdec0",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e95bc4f0-6e90-421c-8961-017ce9832947",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "512adb6f-5346-450b-8adf-335a64388e39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe6dda1-d3e1-4679-a938-e7d3f29f5882",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebdf1f54-871d-44a2-b6d4-a26d4fb0d789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b98c3846-ab7d-415f-af05-af74b06ee6b5",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3d36136-17df-43b4-ab80-37ad8e238ed6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c7d4f23-13af-4ecf-98c3-6b0f9f358cac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e21cde76-3989-4d4a-8af0-35057b37d5c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e09988da-2733-4b60-976e-a3aca5c48345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5cafd4c-e266-4766-a628-43e248b41a70",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9766b5c4-d367-4f25-91b6-3318c61d9d6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44215a99-a34d-4d09-bc98-8f1065c4ba7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "772ae771-34ca-4f9c-92c6-c84c6a6cf178",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c71b15ef-d640-4c92-902e-a9bbafc932ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fe213ee-06b5-4b0d-840e-a71cde084f17",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05c7282f-ee7e-4182-92f5-87e3acb7a8f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0848f721-dce3-4898-ad6c-2b1009b80102"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c414f958-9da5-42b2-a6c3-5e1e48a4300c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "509ee6ae-4b2a-4b97-8f80-8049a5673c6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e9d23e-ef1c-401f-b50c-7549b7a8383d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8e3b47e-885f-48c1-91f3-859591812c26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb7a97fb-9381-4e90-84af-cccfee6ae164"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b99ff08-f3ce-4ad3-b448-63cff17df485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81bd2cd6-d145-47bf-a009-93a184a93af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7292317-26c2-4097-9eca-9613567655c5",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ec95f3-9dd6-407a-8931-82d5bf055ed5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae66f3d3-1cce-4c10-acbf-ad6e91498c70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f6fd4e2-8b12-4a0f-be8f-92b82e8dec2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfb2d08b-46f7-4958-833e-51e3b5bb298e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3776129d-a754-4658-ac04-bd4f4b59ab0b",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9926397-ff26-40f1-b647-95a51c1f98d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de0cc59c-df01-4f05-bb40-2370cf7e7cfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f58eba8-db6e-4888-9260-a06f06128d19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "122e26a2-6f79-4c06-9b76-8a91553886b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8abd09d1-5af4-4c28-8721-e23573d884ec",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f42f98b-3419-4e00-a1a4-e74aa4d91a98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ca45af4-f58c-4191-ac2e-cf3235695d5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cae2583-beb8-4184-a45a-20fcd1800812",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf659168-b9eb-4822-98d1-3431c8e433f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34909ced-e203-4879-b927-4116886fdd41",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9387689-699a-4309-9858-2c5b785c84ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2935a1d0-105d-43bc-a4ae-a9d0a06601c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5fc09a8-bbf5-416f-b15a-46836f291f5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4eb4f10-4f58-4582-b8d6-618d42f990cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc0c641f-b314-4ae0-bcf3-90a829cc0ffe",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f649deec-e9d7-4e6d-a35b-7f2fc92026b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fc58a85-707f-4f0d-b261-05440b273b81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "469a7127-7cfc-444e-a90b-60bb495d950c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4be93a1e-2e2c-450a-a88b-99369dee2397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "908dd12c-0b65-4539-96a8-a96dbba003e7",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d55e39e-c9d6-4d8f-bc94-9760315ce177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7716a138-2454-44a9-a331-a54fbc5bd419"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98dd2b7e-d919-46d4-bc7e-d45ef32c6153",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59216ffd-0d8f-4426-8b4b-16d99ad406ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d16821d4-1d51-498d-8ff9-0f0d3e1ecf0e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6738d71e-d72e-48b0-91ce-53a52cd25c71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e78ee80a-f933-4232-8219-973b2e9e4464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f48e4ab6-2483-4a35-8cda-d54d560b2e01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee32d28b-c341-4fb6-920a-47e2cff936bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42289132-37a1-4edb-9e05-a21cc62677a1",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ff39f6-1490-4ff7-824c-5197b766ba91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71dc9908-bb21-4e9e-9468-395541456509"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92bd4915-379f-4a01-bba6-4273922a4990",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d7f198f-806c-4604-8b6d-a3866c0e2d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b532f0eb-7f36-44fa-9112-2624d800cb79",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb100d60-4039-4f35-a36d-d77bed622279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27cd539f-ad7f-422b-b34e-0606492e0440"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb7b617d-b41b-411b-9927-4b2dc81cd70e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fea073b3-6e7d-49a2-ac10-37da2a9339ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d65300a-5407-4f02-9e02-163a6b3b06ec",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8880209e-4af4-4b29-856c-aa73ce23e276",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ee09cb2-7780-4f25-9d69-a642794aafce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fac7a36-5d6b-4091-960d-6f07ada40ba9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f252eb76-23a3-4e72-a52b-da3842283e4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60a87cee-4cc5-4d00-99aa-5fcb8b859790",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e9d007-7a62-447c-8bc0-1f6ec1c92c55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69a15888-33dd-4abc-b9aa-d483d640b19d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be59a54a-aa3b-44cf-86e4-46520d3002a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dce091ed-638d-49c8-a3f6-4e3db2da274a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ffead10-f156-4e35-a265-9d0127b3e57b",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e1df62-c2af-47a4-9550-7cbaa0c34a78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c317d7cc-c658-4973-8aa7-5ebf114342c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2646ec0-d945-4cb8-9255-f8922fe14784",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f21bdea4-9f36-4d1f-9b14-947eb4f7b91e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3a6efad-ea3d-49c5-b6ee-676f9141c335",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b0c38cf-f60d-42ad-a915-bf8d5708cd89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8366ed5e-e20d-4e2e-a0ff-1da6520992a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3584e5f-b4c6-48d3-85c8-d4100850433e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bae7dede-d79d-4701-b3d9-1be49dfe531c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebd306d3-55ba-4bef-bbc6-c81cf85e4fc7",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "386077f5-5d83-45c4-aad2-dbf2383a4889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f4d01a5-d324-49b1-9b1b-9ca34ca2d582"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b090de2-d7af-4d5d-9918-7584ac833df4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "629b07c3-8286-4fea-89fb-6b4d23908d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e494e236-9ef7-4a91-ad90-399a98491af5",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2452421-e653-4977-92f8-c1d224ab21ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d311b1e3-790f-4f65-9a4e-d229b7db9887"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5cca88c-4d38-4587-a58f-4fdc6a104767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3faa17ac-ee7e-4c61-80a5-21efcce68753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6ee23e6-4301-459d-b738-14a5e3e65283",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "168e60ed-cc7b-4fd0-bffd-2f71165e392e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2baa4782-0c32-4747-b8a7-7b2fa1f2e073"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4111e804-097d-47c9-8abb-48656283aac2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c402d1a3-f7dd-4d5c-a24c-8f53227942b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ca5c2ff-e779-42db-be91-5375b6208ac0",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7665513f-0d08-4736-860f-10e2d921ff39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "005504a6-e008-4180-a3bf-cf37c0c068d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e77ea5f8-800d-40f4-ad93-58474e924c28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "332fb135-d32d-4f7f-b1c8-1309ecb9e8d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "394e99fa-e94b-48f3-86a2-4ef8c5afcc3b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6b63aca-6f81-4d91-80bb-f3082a01c2b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f20ef40e-0207-4594-a0d4-07766b06e04f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc7b2873-77b5-4e35-9328-fd224338d0b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3c153ea-9026-4829-b538-3025cb59831f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c9b72d6-fa5f-48dc-9d4d-3c79704ee293",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ec1ad36-a853-431f-816b-1d07c3292d5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87cc310e-52bb-4c84-8dbf-ceee7df4f1c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de2295e-5091-48a5-bcf9-8c8294a2f033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5f83a24-5062-435c-b9ea-571e1f1f7817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13e19403-b9cd-480c-8c9c-64eefe026695",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "536a20bf-ab78-42da-9f0d-a8910219b0a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dbb6f79-bcc0-4086-93b7-4772d1be831c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2be07a4-929b-4ad4-8d29-90f9d930c0da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fd11e93-b263-416a-836a-e6ae431475c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eddaf3a-a545-4e94-9bac-91a6f7a5b429",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a69111-1794-4903-b415-55fd3d931055",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef15a229-ba25-4980-ab78-fccf32a2cf22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2569e86-e8fa-446c-8a50-b21ff1a8a691",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "394edc2a-108b-4cc4-8cc4-2afe138a17bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b643531-6c7a-4ad2-a860-4a21b60e8563",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88353e73-c7a5-47c1-9856-fbf4b7332721",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4044ed2e-f423-4355-af60-822abe2d6909"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15661420-9a54-4515-9a9a-584a77e11071",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23f9292b-202f-4847-8656-c2f54a96dba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa2caf9e-f238-4c32-9a5e-804821bfa033",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b6a841-16cf-4ffa-a2f6-feca9576ad63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32d57b3c-16e8-4073-a491-74d6888d78f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1329d93-dca5-4617-ad56-9d7bceea50a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94576187-b07a-4dbf-80ba-2862bdd91259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04bb49af-a74d-47fe-8d68-ba1785539eea",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f9395ed-23ca-465f-9827-a965a177bb75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb17ca3d-8f6d-4484-a847-5ac6d5c228c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6387e03c-901f-4d5c-a1e0-f2bebac1bb7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfe7c4da-e2bd-4462-85ca-33fc12ff6b69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a1729fe-3bf1-43d9-8969-198b13636ad6",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1db5490-4a2a-4177-a488-2b8bfece110a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21f0a29f-7b0e-4511-8d07-71f5c6919e10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdf1ff72-2bc4-405d-8f4b-33b1ab073298",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffeb8db6-a90d-4f82-a656-93ebf59efbee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e04fd042-eda8-4463-997e-52bed8493d79",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40b29129-103e-4f66-b412-c211a024b31a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cec51db-289f-4d8a-9e98-76fb0aa5a1e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fbe3c57-11eb-4335-8fb6-be40b57e49ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9815b0fa-f85e-4def-82dd-0e0c7f9e6cb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50b60afa-dd28-4678-bfdc-1ce2b18e83b4",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad6bed86-6fd1-4a3f-92c2-f1c86d292221",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90ff1312-c97c-4299-9528-06029e8bae20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dd74539-1da9-44b8-a358-e5e291385e36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dabc686f-6dad-4ef6-a0df-982c31d03eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d0b3957-2957-4f21-af54-4942a2512b77",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e967933-d785-47bf-b028-ab59e887c23f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fbc1de1-9979-4bfe-888e-9cac14aadfce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f52fcb-2ded-4e12-8f96-140d393b070e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0076d55-369e-4d6f-b9f3-fe004b2130e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d69df8-4388-4dfe-9471-b220c6a888ba",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc11a506-6f17-4693-99d5-b452d1b6eb87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef717c7c-3653-4859-a4a0-30ee1696099f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "868b900f-8268-4528-9f86-5017ef9fe1af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79e65436-d256-4696-af75-af7fcd3e684d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d6b8e7-fea4-4144-be75-23a1cde9b3b4",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e24c694-34d7-4ed3-9d57-1534f981d7ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc4b2ef3-c817-4136-a924-9c29a275526f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85b40dbb-b8d5-46b7-a0e5-c8474b6e3c6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f794e7f7-2bcb-4df3-b7fe-c3364c2f7274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e2bb259-b123-4c3d-b6a5-311097aebfc7",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9ff76b5-35cd-4fd9-9095-3926f2692de5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a72820ee-35ce-4791-826d-97aba691311c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4a17a0f-7e07-4fd2-96ec-7159d43e0d51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "468d4bf7-5e7c-4f8f-b8c4-2ccab10b2c3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "907aa7d6-6e8a-4da5-afd6-48e0272da7bc",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8042e44-3c74-4fb6-910e-1bd0047e3ee6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e9e2825-c4d2-436c-b62d-8bddfc30b05b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0ec6ac2-d83c-49c3-ac43-a13999f4c002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e27f4106-008b-4658-8151-6612dcd8b677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f7bc6d0-6418-4a03-921e-93bfc3030d33",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8545c914-5698-4592-93a0-6459730ba833",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f3275b7-8265-4c9f-a92b-146762220615"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3c7465a-782a-4e4b-b4d6-cd4f8f48ead0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b48ff1ca-52e2-492f-a4c6-70d656b01f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dc4724d-cbb2-4982-8d6d-cf722662b0d5",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e9c8552-c526-439b-a852-b79d17071356",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fae895a-3434-47a5-933f-7254202d0c2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1135278d-be5d-45e9-9f14-fab9f12b50a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cdc0529-12e4-4d66-b12e-57020b3af983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e2a0f1-bbe3-4a4f-af5b-a6ad3580a5b8",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d51ae14-1ddb-44c5-b8f7-85700131f466",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05315d37-2fa3-4086-94f6-333e9142439c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29068e4e-3f40-4b05-b4ca-fc9c48b396ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0d4872a-8b56-4935-83d7-4f1ef3c32d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab7dba1-4714-4a3c-ad80-8c6a8c17284b",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe7c0a68-1f1a-4433-bb19-b2602426fae7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5f36474-e71a-4811-ada6-9d326e5439b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "605762ea-d025-4d4d-9412-ee341c288377",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "844d705a-3e95-484b-86b0-21d28192d6bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac17e2a-0fa6-4d3b-bc51-00ec5848e192",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0d1b976-b528-4580-bffa-3ee2b7aefb56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1415993b-d69a-4162-b046-d1abfd50ab04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b59a2f9-4f6b-4247-839b-6168dd1eaf64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79bf3553-6dad-4cf2-afa0-790d11ecb20d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f41106c5-4f57-4184-b4bd-d25baf329d03",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "924c44b6-cd82-418b-8e3a-720979dfa8d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98fab99f-d64b-43eb-8dda-6e224fd82552"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3e57314-af26-4e56-b747-2be4ef825343",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7a73aef-22f0-4ab7-ab1f-4b11181a8861"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86d44d74-f3d8-4838-9268-de7b3e2062b9",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60a99150-df07-4259-853a-9d54e73d83fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f12c421e-62f7-41c9-8f53-6c611779612c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d82275d1-a0fa-4fe9-9796-a73eb401af6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4523307b-5558-4e13-9cad-ff701cc61f52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64766484-8de5-482e-bbac-ef771678caa6",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2079b95d-3299-4725-9b32-7811ed57facc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa3d313d-23a1-43e6-8b89-8066aee75ba0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "845c8df5-d338-4335-8860-fd738d658b6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c104e2a-f68c-4a74-9d02-6f8775ea6223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65f2a61a-15fe-47c5-9132-c5ff16d8d4d4",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1f4f086-3f3e-48b7-9400-d0f4337fe105",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "333d7407-6234-4f86-9b7d-74e8afc70904"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b83c31e-df4f-4e5b-845b-e9f9ff31ad8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00591d7a-974a-46e4-a8e1-836772179704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d93057-f957-43c0-9e9f-68597e38c28f",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b10d168f-be98-4f48-9452-67ac44ea2b16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44e0c769-cb1c-4e96-995e-04bb9f03a794"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57058371-1165-4f7b-b605-1ffb6a71b944",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed1a99b6-485f-4b76-b8af-c5693cc3799a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e019fa59-66e5-4d50-ac81-fdc7623e981b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b67deea-ee8b-471c-9161-908d153197f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cd31634-110e-435c-9ca1-724031a83a2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c6c496c-9cc4-4759-98dc-4bb0cd3b9ed6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "113a424c-6fea-42e6-ae40-7d196a00819c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd88225-bbae-4284-bba2-021fe754aebd",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada55dee-d7f1-4b1e-a82b-e1bba079adc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f065528-a758-4c86-83ed-7cdca4b92e61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83412a1a-cc26-451e-9794-43e187378ce6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51d5044c-310f-47fe-882a-493d3189885f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "804b5962-a886-4ea1-bf69-74d4b4b9ec18",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc6c993-c9cb-4c15-9c55-a85e6514bb88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39d372cf-5aa5-4a91-aae1-0445e8f6c04d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce4c524f-60d1-4e57-9c89-d92bac217d61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "905a35c2-106b-400f-b053-3eacbf85eb73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fa6fb48-a29e-432e-b053-e07f7f4f9ced",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bfe85de-aa67-4393-9c4e-fd03a44ab0cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39c71725-cacb-49ee-bd6b-b4dde4627f39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a316ac-3ac1-4584-bedf-9eee1d41bcb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1e20a8f-321c-4305-9b9b-5b6b5771ef8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8128ffb-3fd9-4758-8dd6-18f9d3f5749e",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "459707dc-a62e-474b-886c-b0f12becbe3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1df7d6b2-2003-4883-812e-0b1b5f84d689"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52c64544-05ef-4816-abef-8fcdde26b120",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96a7a293-c0ed-4057-b4bd-09a3884df173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b2b8ad7-0ada-42e8-8062-ed35f1a95858",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20de465d-72ba-42d0-baad-7d08601e3729",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c675f34-e08c-4c31-a87f-ca734101cc45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b5d973-aa2b-4bf5-92fd-288779559f37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "236d3ee4-2077-474d-b96c-dce1ac3bae08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6df92f98-9429-48f6-8060-948d18286ca3",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc9a95c1-5e28-40d1-b573-db55f4fb870f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84fd1acd-805c-4234-8d2b-7dd40a9d94a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8253c76b-8d6e-4e81-b82e-c6f430aacf83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "387473b7-e783-4fe2-bcd6-0d5361afc729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf7c12de-ec18-432a-abee-db26c5bfd5a1",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d15d8f6-d3e2-4a6c-bd67-2dc30d2152a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3d84b88-4174-4013-9fcd-f93af5b756d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21da5d71-8d81-43bc-9f3b-4ca7161a3087",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3a63d50-4105-4764-92a6-fb5ec7371d18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "322acfc1-e3b1-482a-8fce-0c1f3bdb71d5",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2633fb18-d869-4a11-ba2d-def1dc868e13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34865dc7-c325-46af-b71b-e404880c8ba4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f143351-8fb7-4c29-a533-cbbf6d5dfc13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21bdcdda-3a3c-454e-9e73-9fa7c9c5ec8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b399dcec-e740-47dc-9169-c6467a73d97a",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe6a84c-fd9e-445d-874e-62d883c5f5df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bc25064-7e99-400a-8daf-b71447553b09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c16c353-7a87-411f-906e-0844c11a3455",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7735b415-d2fa-4c54-b6bd-863cb8ac9dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "141d0206-d019-4350-981c-1a8d525872eb",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0938137e-578c-4dda-8512-0be0500cb108",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2a20c13-66a9-4fff-8552-6285c3b9e8a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f349398-2866-44cf-9cc5-236b75b4ca8e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d2ca274-195a-46a5-b6d9-fb8d2b9f7d9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "162760de-765a-4cbb-aa33-aa542f9006fd",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "938b833c-83ca-4f97-aa10-0b226589df08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0658fc4a-ea7b-49ba-883c-3ba6bd66c6d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc0017d-795e-4586-8ae7-2ce58c67f1eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "141bef2b-c36e-4cb0-ba8a-91618a2b5c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd117f4d-6f8e-4596-b316-d1bdfb3d1a0d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c6439f9-b079-4da8-9a38-30833a923ce4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e88cd13-b672-4765-ae74-3224162e12e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c130dc-159c-48cc-b796-dff0b0c10629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da42a417-2c6f-4854-be80-04fc1eca2ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5569f98-bb56-4196-916d-aae152bff847",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "390c4eca-f8b7-413d-b4b1-0768d105978b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82c73958-59be-447a-9b6e-a9250ae655e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a11b08e-911e-45d0-a0bf-7b2c14fb63d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0d74f8b-73d1-4154-ac25-652c9530289c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d6e55ae-6cf6-4767-9de4-d739276c71d9",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c719d8-be86-4886-a671-3f6b91aca79f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6be50e82-97e9-4ad8-b741-f0527140db57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db2dff82-062b-4328-baf7-9ab0cccbb4a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9e4b87b-785f-4a6b-879d-edba1901ba88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c396b50-d19c-4e66-9f41-d4befe4f729e",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d3d8f47-0280-485b-8e23-2209f0a36ec4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41ac3c27-9fbd-4d19-a298-53c2c5a74be6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65305fee-7ae1-4dea-ada7-eff9a5f11e53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69e579ad-0e5d-47bd-9869-3d7d546ca2ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "206969af-11ce-40fc-8b17-1efaccb0611d",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "579610d9-c08c-44f1-96c2-54f19191a257",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d92d8d81-7b4e-4812-bf5b-4f7b384cb767"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d669b9f3-44a7-4ff4-9d32-596cf8f7cb9e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bba61a8b-9606-4169-b49b-a3a5a5d6fd53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1fa90a5-8924-4fa6-b2fd-bfd03c5de570",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "320c2e26-071e-41b4-b308-a88499213282",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e787995f-911d-4f25-adc5-f651d2a20515"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e78ece7-24a2-47ae-805e-16ff08b7a573",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9967d4f7-efaa-466f-9919-fa412a058a2a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c06cbfc5-ee25-4cac-89c7-1b47abf6e3f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b874eeea-78b7-4752-93ad-22257cb16fe2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e57fd15d-b10d-4f3a-bfd0-47a36661c18c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c7ab8a4f-0c6b-477a-ba83-48b1e0491314"
                    }
                  }
                ]
              },
              {
                "id": "68387d03-0505-488b-ab5b-e363cb5d60b3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "14c29c14-f9c4-4be3-9f7b-8e6f6c5b8ade",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "502ac899-53a6-4a3b-b4d0-edf6714a4462",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4e6c9677-3ae9-45dc-ba86-dd0d7e6f424c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80669000-bd64-4b89-9013-62ee15c968cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1b7cd9d5-3ded-4d0c-9707-b3ef12ab1b73"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df2091f4-414f-40fe-98cc-6e47e175019c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ffd48aff-3828-4a2c-b242-6baf26816f79"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb5979f2-ece7-4178-80fa-c4fb024a1491",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b2995004-c50a-4540-89f3-40daef210d72"
                    }
                  }
                ]
              },
              {
                "id": "a12803d7-e9d8-4580-a49a-2e4dfc6823d3",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "5c387031-62a6-4168-bff0-dc2379d9b45d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2c08a3e-98ce-45c1-bb82-bc4dc81f8b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "cd0eb0ed-bd99-47c4-ad79-46ca93cc41d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "328115bc-4178-4eca-a012-149a869d3364",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62e84b49-d105-43ff-82d9-af5df98c855a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c8ad38f3-928c-4767-afc6-390afaaf110d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "45e9a804-c082-4e15-bd16-109cde7d5d1a",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b435afb-201f-45a3-a54b-f43ed9aa7a98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f351fd81-5353-4812-93cc-a3dacd1361cb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d7272655-ca34-4d62-bd1a-73bd543b15c5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ff4ed8f-7c7f-4756-aa20-ae634aa358fd"
                    }
                  }
                ]
              },
              {
                "id": "971b41df-b7a1-48c8-a9db-2448bcb70d4b",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a4d41fda-49a5-47bc-b223-6f4e09fc913a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6cec80cc-efc7-42bd-8070-035f5669009d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cd7a7681-6904-478f-b943-27b86cf04327",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b7122f90-a387-409b-8608-c48f019ddb2d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "94d82f2a-3db2-43ae-ab9f-a9438d2af950",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "6cc5f3d6-e637-4d2a-a30f-841c30c25394"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "12b419bf-1f4b-47c0-91b2-63cf93a533d3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9ba1856f-86e3-4b99-920d-9ef1e6e48318"
            }
          }
        ]
      },
      {
        "id": "6c8f50b8-4962-4dd1-abc7-29777816adb6",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f0d89368-d5a2-457b-b1f1-384069492919",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a56f5d15-ba33-4e0c-ba67-7fa131f911a2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "20d7fe58-3834-4051-ac8b-0c222e2d717b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b00421e-e698-48dc-97c5-81db2cf76c1a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5455bdca-88f0-407e-ab67-b30a270873f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca4258f2-845c-4a26-af7c-40aed2aaadd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7f42497f-b235-43a0-9bc5-29d33f5f9654"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8a7b2ebf-010f-4ca2-8e45-ba6d13b9d21d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "acc16c40-5b27-4fc6-a629-441582905643"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dfe039f3-56a0-4350-b08f-eb359a6cec2a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c788214-cb93-4011-bbff-c8f1c4f88627"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "15e7a9f4-507a-43f5-ac97-403f246cb6ea",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "842dc172-2ba5-467e-90b3-cdb82ab6f331"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "292f3214-6a38-4ad3-af50-ac7351a93fd2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4ad77cd8-0e03-4be9-bed2-2a65a46faf46"
            }
          }
        ]
      },
      {
        "id": "8b473d18-11ee-44b6-9e42-02fee14ae89f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "40faef3d-98b4-4867-aabb-3e3d94f3db53",
            "name": "Negative Testing",
            "item": [
              {
                "id": "49c27c9c-ca34-4a7f-a290-d0740619d38f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "739f8f95-4f1d-4373-a5e9-56d35513feeb",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bff3542-abe9-4697-9f2e-e1dff7dc1382",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f413e270-3a77-455e-b57c-2f6f533cbdd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8adbf14-34d3-49ed-ac42-932726e8c7fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e53e154-4bab-4179-b1c2-f167b915e52e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "172fddef-f8e4-4c31-8060-4812f84b7ac2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ddbc1a78-2d9d-446c-ab2f-14dacedad3f4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8cb08a07-7ad9-44a6-8035-f6d8e4925634",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "07a3d42a-0cb7-49ee-ad83-5007066c8c22"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "71c5a8aa-74ad-48a1-95cd-5a11521b6791",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3b3bb2f7-b62d-429f-b95a-6f378ce5c645"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1805780f-4279-4596-896b-704a73cee6db",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fc369c0c-8cb8-4ae8-a646-ff8a144ffbfc"
            }
          }
        ]
      },
      {
        "id": "d22e0c82-3fc1-4a22-9428-aaa3d0a96fbe",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "af30036b-282e-4418-b96d-ded8e08f352d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2d425614-e507-4344-8d5d-5eab3ffc1c6d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "47b7ad4d-1bef-4ddc-aad0-bcde12032590",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09793e66-1f7d-4a1c-aa21-fa46747b693f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5aef6ed3-f042-4bd6-95cd-fdef124b9dca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac393f9a-9f04-44a1-9735-bd348f0eb6dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3c678547-351b-4635-bfeb-d71e33ebd2f0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "111ca860-50a8-49c4-a4af-a38703266959",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3acfd6b7-a010-44fe-a995-30b18441f796"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ddf1cb46-c06a-425d-9dbc-0acdd219e420",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9ed489ba-5ea7-4675-9bbd-33eea0b0db07"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "351792ae-9860-4e5c-b525-def65fc96259",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "421043ed-8c1d-4259-a688-a21f21a0e759"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8b360f72-4196-40a8-8c79-29eed5ec713a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b34c54f3-bcd1-4fd1-8ed0-08ddf93c2eb2"
            }
          }
        ]
      },
      {
        "id": "92e6e74c-6612-4999-8dd1-f4c74afa2b4e",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "048ec0ba-4e99-44a7-a3d1-c9f183af5cf7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a25cf445-3057-4ee6-829c-39ac2d2517f0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b8c77931-cb6e-41cf-9547-821aad2f893f",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5521ad35-7592-426e-a151-81dbc9e0d50f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e87eb804-5fa7-423c-a0f1-05850340b167",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 55.71031746031746,
      "responseMin": 5,
      "responseMax": 598,
      "responseSd": 76.8852436245135,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1712536562578,
      "completed": 1712536584921
    },
    "executions": [
      {
        "id": "518aa232-b9a0-46ff-950c-b3c0cfd55895",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "53218489-edfa-4882-b348-01badc922c04",
          "httpRequestId": "0457e502-59f5-4137-b8b8-0594314bde78"
        },
        "item": {
          "id": "518aa232-b9a0-46ff-950c-b3c0cfd55895",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "27aadc41-0477-4846-8f50-a2c57941a429",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 0
        }
      },
      {
        "id": "50667a7c-3a7f-401e-bb78-2450d24e5733",
        "cursor": {
          "ref": "85f9f49b-78d1-479f-b61d-ba85b35b05ca",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "bb48c06c-90d5-46cd-b0bf-c58d721f513b"
        },
        "item": {
          "id": "50667a7c-3a7f-401e-bb78-2450d24e5733",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "fc3e1497-82fc-49b3-a40b-32b59b25ca1b",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "89090aef-488b-4a8d-8b24-63c306cab79a",
        "cursor": {
          "ref": "288256bf-96df-451d-b7fb-cbfc509f60ee",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "9ba1d1dc-98a1-44cb-be52-df88fbc436db"
        },
        "item": {
          "id": "89090aef-488b-4a8d-8b24-63c306cab79a",
          "name": "did_json"
        },
        "response": {
          "id": "7769a736-8569-428c-9ae6-9af81050254e",
          "status": "OK",
          "code": 200,
          "responseTime": 314,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4671d6c7-1fbd-4628-a66b-5b167ed1fd26",
        "cursor": {
          "ref": "35856cd8-396b-4a9f-9a33-f236f6b2b7fd",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c126833d-f382-4087-b41a-bc1ba5ad4d9b"
        },
        "item": {
          "id": "4671d6c7-1fbd-4628-a66b-5b167ed1fd26",
          "name": "did:invalid"
        },
        "response": {
          "id": "8f17be0d-ee8d-41b0-9baa-d222dc949e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4671d6c7-1fbd-4628-a66b-5b167ed1fd26",
        "cursor": {
          "ref": "35856cd8-396b-4a9f-9a33-f236f6b2b7fd",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c126833d-f382-4087-b41a-bc1ba5ad4d9b"
        },
        "item": {
          "id": "4671d6c7-1fbd-4628-a66b-5b167ed1fd26",
          "name": "did:invalid"
        },
        "response": {
          "id": "8f17be0d-ee8d-41b0-9baa-d222dc949e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17ed5048-fbd2-45c7-a9a1-aba24bb33e12",
        "cursor": {
          "ref": "1288b28a-a6a6-4714-8801-d5bcfc491f70",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "7925708b-52d3-43af-b5c5-3bff53aff3b3"
        },
        "item": {
          "id": "17ed5048-fbd2-45c7-a9a1-aba24bb33e12",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "5b2329a9-3bd1-4e1a-835f-136c0eaa35a6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 301,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f02de15-1dce-4b60-84d9-b1809423e6eb",
        "cursor": {
          "ref": "01e50a22-a70f-407c-99eb-dede165db3a0",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "cebbbeb4-a74e-4861-84cb-c01a787c34d6"
        },
        "item": {
          "id": "7f02de15-1dce-4b60-84d9-b1809423e6eb",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "cf55b0f1-2f99-4ca0-abea-b49c57e03a57",
          "status": "Not Found",
          "code": 404,
          "responseTime": 29,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63ebf8d5-ed83-4f40-bc2b-dd16e9720513",
        "cursor": {
          "ref": "4199de5f-3530-4b2e-b930-2733a01111c8",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "22a25b2d-ad08-4987-a843-ebcba29750fb"
        },
        "item": {
          "id": "63ebf8d5-ed83-4f40-bc2b-dd16e9720513",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "17c0d981-88e6-40ab-b3a4-dbdec691c0ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f77ad4d5-2084-4d1d-9a6a-25fa67ba2ffd",
        "cursor": {
          "ref": "74505df8-4b3a-4514-bf0c-15b5f1234bb9",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "53d93e9d-2dfd-4d7f-a476-e62f22a553f7"
        },
        "item": {
          "id": "f77ad4d5-2084-4d1d-9a6a-25fa67ba2ffd",
          "name": "identifiers"
        },
        "response": {
          "id": "4b44dff6-de5f-44c5-adfa-da51155b40fc",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "100074f5-0176-4bae-b3cc-bf33773cecb4",
        "cursor": {
          "ref": "880099d9-6836-41a5-a6c8-2651efc46554",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "3798ec47-8d1b-4996-988e-ae0b1199eb27"
        },
        "item": {
          "id": "100074f5-0176-4bae-b3cc-bf33773cecb4",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "337755c2-a2ff-4785-ae8a-ad75f534ec44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e60b167f-5694-4349-a847-daa3bf971807",
        "cursor": {
          "ref": "f3e0cd33-22a8-4ded-9243-07ff40001ca6",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ae3cb324-3764-4fc1-b3e1-dec11907e49a"
        },
        "item": {
          "id": "e60b167f-5694-4349-a847-daa3bf971807",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "af46d6ab-9a1f-4f20-8f1b-dce16ca66918",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a4d573-3243-4186-9765-98b8fd7b12f4",
        "cursor": {
          "ref": "14b3c4fa-6f46-41b7-96e3-3094462c26b8",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5e9a4e15-f784-401f-b53b-53b01014868c"
        },
        "item": {
          "id": "f7a4d573-3243-4186-9765-98b8fd7b12f4",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "06a26269-f8e9-4746-ad36-ad1cb4220b28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "706c01d0-ad32-45e4-92db-5a5f31e57e82",
        "cursor": {
          "ref": "5b0eb6a8-9b38-4e65-b287-973b2ec977f4",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8ed82764-ab18-45b0-9682-b734b0666f82"
        },
        "item": {
          "id": "706c01d0-ad32-45e4-92db-5a5f31e57e82",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "18d3febb-8223-4155-9c5f-be5da7bbde08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b7eba88-b81d-4228-aae1-95f0db3b1309",
        "cursor": {
          "ref": "55707f4b-0102-44d6-aed7-3a3498b39ed0",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ea987e60-893d-4e19-894e-4b8e0612f255"
        },
        "item": {
          "id": "1b7eba88-b81d-4228-aae1-95f0db3b1309",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ea17fe7f-af8a-4565-a90c-c73975ac5549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd26dce9-7c1a-4c26-9d5d-10c210023bcb",
        "cursor": {
          "ref": "8ed61dc1-0f5f-4e11-88c5-44068a339c86",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "08b98db3-8d1e-40c3-bab7-a1280f5ccf6c"
        },
        "item": {
          "id": "dd26dce9-7c1a-4c26-9d5d-10c210023bcb",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d7005944-9c2d-4125-b2e6-f22b79e1b0b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e8817ff-97ce-48ee-b392-b8f958bbc28e",
        "cursor": {
          "ref": "4763af38-dea3-45ff-a5df-3ff070a3eb3f",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f591dcba-e327-48e0-8b3a-a6401bda0bce"
        },
        "item": {
          "id": "1e8817ff-97ce-48ee-b392-b8f958bbc28e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "486c9bf3-8156-4776-ae4b-c547c361bebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da23860d-45ae-4af0-9fd9-765e6f0cff62",
        "cursor": {
          "ref": "8b3ceed6-7789-4597-be4e-2da293befe0f",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "68e39d82-b91a-4267-85e8-30930a40e78e"
        },
        "item": {
          "id": "da23860d-45ae-4af0-9fd9-765e6f0cff62",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "6fe38336-b03f-40e7-905f-415562bc0d74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9315aa73-481f-44a7-a6a9-8ba54f306a14",
        "cursor": {
          "ref": "b34cf778-7bd7-4553-b9da-94a97bafc498",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "997a76ca-721a-4e9a-8ece-2ad7ed90c66f"
        },
        "item": {
          "id": "9315aa73-481f-44a7-a6a9-8ba54f306a14",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c6b77a7c-dd24-4e66-9e1b-14e339bbf9e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "601e8fe7-c1db-425f-beb6-f86c05e5c1da",
        "cursor": {
          "ref": "b72f4b78-8a0c-4481-90f3-d8afa5e2f759",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b2bdd947-82b3-4077-8f23-aa03aaf613d2"
        },
        "item": {
          "id": "601e8fe7-c1db-425f-beb6-f86c05e5c1da",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "777ace31-8444-49f6-9187-aef219065ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56fb78b3-a24a-44e8-9484-4dae4c8e9a1b",
        "cursor": {
          "ref": "a8f9cd89-b533-403a-b69f-b41bc14ec891",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0831068c-02b5-4465-975d-10a08538d7aa"
        },
        "item": {
          "id": "56fb78b3-a24a-44e8-9484-4dae4c8e9a1b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b3d6f08c-5f65-401a-bc6d-295c7da5a413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70fd5fe3-e3ee-4cb7-b6c5-acc024302d7d",
        "cursor": {
          "ref": "cf32a3af-76a2-439e-8abb-8a65c6572490",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f3d95e19-d9e8-46ba-9b2d-e8358c5b9ea9"
        },
        "item": {
          "id": "70fd5fe3-e3ee-4cb7-b6c5-acc024302d7d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "1da71ac9-f6b5-4e18-b964-9e93f9e2e1dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b299c1d-a9ba-4a94-9fd3-b3226cf807d8",
        "cursor": {
          "ref": "f8b33d57-d31a-45c7-a90e-8e031f7dfc22",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f001b997-94de-44b0-b4e0-51b1ae7f9131"
        },
        "item": {
          "id": "6b299c1d-a9ba-4a94-9fd3-b3226cf807d8",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "22ef405b-9658-4d4a-a103-09f98c07d4a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c59e9a1c-c1f4-4532-bea2-8f5e54ef142a",
        "cursor": {
          "ref": "50077d2b-5564-473a-b4dd-9dd499d7819f",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "99bafe9c-f509-46a3-81c9-ceb76de26e56"
        },
        "item": {
          "id": "c59e9a1c-c1f4-4532-bea2-8f5e54ef142a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "fba75050-37f4-4492-bac3-9883cbbde1ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "286f5948-bd72-4aa9-bb05-c7f794405e29",
        "cursor": {
          "ref": "da68c7ab-0274-4442-8d27-ed2b85554fc8",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "56ec0445-1e47-4350-93a4-2675ddcc07e5"
        },
        "item": {
          "id": "286f5948-bd72-4aa9-bb05-c7f794405e29",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4f6d6fcb-afbb-4546-aafc-d0c96532b9e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90077dcf-e77d-4061-92d8-393fe157de9a",
        "cursor": {
          "ref": "4e595d97-6d2e-4351-bd91-d57191c25f9f",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c4fa231b-53a8-4138-8a19-44d19e890bbd"
        },
        "item": {
          "id": "90077dcf-e77d-4061-92d8-393fe157de9a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "a9e2ec4b-c302-44db-8f65-4c13862b9f93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89fae29a-750c-4386-91b3-906c843a275e",
        "cursor": {
          "ref": "a2f7ea97-eed7-4221-a74c-ccd9d8bb9012",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "5b5ab72c-13d9-4659-926c-73867e2379d3"
        },
        "item": {
          "id": "89fae29a-750c-4386-91b3-906c843a275e",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "038b28b2-446b-4ad2-a6d9-8e54fb7e6baf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf3e9527-5676-4020-98a0-a47c0bcdb929",
        "cursor": {
          "ref": "06b5a703-c5bd-444e-bf4a-141f9cefffda",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7b4564dc-73af-42ce-a144-694d5235f0d0"
        },
        "item": {
          "id": "cf3e9527-5676-4020-98a0-a47c0bcdb929",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "4b321b2d-48aa-4a3a-87a8-02ec77c16dc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3dab87f-9803-459d-a0fc-26e918cf2be4",
        "cursor": {
          "ref": "f9b20f84-240a-4d45-af83-edac7dc078c9",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "35d74355-c845-4931-ac2e-9d8479ea0388"
        },
        "item": {
          "id": "b3dab87f-9803-459d-a0fc-26e918cf2be4",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "e3edbe77-bae9-4f75-ad18-64cbd3e11729",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da85b800-5570-47c8-ba3a-b4f14c3476bc",
        "cursor": {
          "ref": "718800d4-1dd3-4cdb-9c4b-21fc46ba02b3",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0f458fbc-f43d-45ba-bb40-365f2c4d65ba"
        },
        "item": {
          "id": "da85b800-5570-47c8-ba3a-b4f14c3476bc",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f3b75060-1cae-44c1-8181-f7558b3c8156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2838c487-92d5-49cd-b013-2717381e3b23",
        "cursor": {
          "ref": "b7e7ade1-7926-4d22-9f2d-3c073c2a19ea",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "04534f62-e4f5-44b8-8dab-2e81f3c395ce"
        },
        "item": {
          "id": "2838c487-92d5-49cd-b013-2717381e3b23",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "0a70355e-cfc1-4029-8ef8-9ac7e087528f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ad35043-cf82-493c-917f-6c7475a36f6d",
        "cursor": {
          "ref": "6c7e3481-cd0e-410e-aec7-c306036d70ee",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c8266ac7-3c8a-4e48-8e52-bd5924129888"
        },
        "item": {
          "id": "6ad35043-cf82-493c-917f-6c7475a36f6d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ff2e54f3-3ab7-4ffe-bf4d-f783d565ee84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04ec29b9-3d5a-4bc2-854c-d9a1c92e6d61",
        "cursor": {
          "ref": "1d57d69c-8b89-42f1-b6b7-a3cf68bdd25d",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "e3c9e1b3-2415-4cf4-8acc-8eae1dd26c4a"
        },
        "item": {
          "id": "04ec29b9-3d5a-4bc2-854c-d9a1c92e6d61",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "45ca29a8-f88a-4a82-aa65-850884eb3d10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7db5f32e-335d-413f-96af-f29e8f27d4d3",
        "cursor": {
          "ref": "a7189384-7025-4201-af29-4559410cd546",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "fd77a149-8a77-4a9f-8575-3c280524e6c5"
        },
        "item": {
          "id": "7db5f32e-335d-413f-96af-f29e8f27d4d3",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "f4e41824-0d6d-48ce-babc-84bb3425f763",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbdffda2-9ddf-459c-9962-770097c43eb4",
        "cursor": {
          "ref": "cc8f44a6-4837-42af-8198-f54cca6c193a",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "35d10e7f-0c58-44cb-91c9-b1bd34759f37"
        },
        "item": {
          "id": "cbdffda2-9ddf-459c-9962-770097c43eb4",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "af1e2861-a18f-4f9e-90d0-273979b591c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4368e1e-379d-40f3-bd51-2f013e7703b2",
        "cursor": {
          "ref": "3917b38d-f31b-4608-b445-6b7834fe44c7",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "52b63c87-ca66-4254-b0bf-9e81051c8664"
        },
        "item": {
          "id": "a4368e1e-379d-40f3-bd51-2f013e7703b2",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d37e3238-a92c-4a38-8cbf-aa9260d1a6b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9510e13f-c1ef-4018-a169-40b4597ea247",
        "cursor": {
          "ref": "a38d740d-f008-4726-932b-5689fb0deafc",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "6c0dace2-1527-4734-b049-61572c22841d"
        },
        "item": {
          "id": "9510e13f-c1ef-4018-a169-40b4597ea247",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "89a2fb34-0992-4c8c-b84d-6f1ab8c5eb1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34c52962-4bbb-405f-aee1-251c3a8ef7c1",
        "cursor": {
          "ref": "bbf848d3-5f1e-4d5e-a38f-b3ac6bfcc767",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "1a1ea2ca-a28c-4313-b008-b97f2ccf3673"
        },
        "item": {
          "id": "34c52962-4bbb-405f-aee1-251c3a8ef7c1",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "6636e53d-b34f-40de-a3d3-e3c5f2c07761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f22292c-27dc-438b-92e8-1ab5e1200d4b",
        "cursor": {
          "ref": "84bb95c2-f92f-4500-b3c0-3b759e525d62",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "94e2ddd7-4ee8-4699-b465-1122b56415e3"
        },
        "item": {
          "id": "3f22292c-27dc-438b-92e8-1ab5e1200d4b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "cf767e9e-54b3-4681-b4c4-d735b66fae50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff2a6298-0178-4762-ad38-6631eb51c213",
        "cursor": {
          "ref": "058a205a-8e7f-43bc-ac12-6d604e4a6af8",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "82d87748-17d9-42ed-bbee-9fdd644220dd"
        },
        "item": {
          "id": "ff2a6298-0178-4762-ad38-6631eb51c213",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "8d898018-5397-4ce1-a5e2-89a93e055d9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a192f21-9ad4-4d40-841a-ff117c94ed1c",
        "cursor": {
          "ref": "18a5b363-7136-4607-88ea-b7e05a7c826a",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "de8e6de4-26a3-4434-aa10-68df8ef7dbbe"
        },
        "item": {
          "id": "5a192f21-9ad4-4d40-841a-ff117c94ed1c",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "9f02d431-a7d4-4d9b-b969-734b142cd0b2",
          "status": "Created",
          "code": 201,
          "responseTime": 598,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "94b428cd-d72e-4f35-a156-d98a2c2043a2",
        "cursor": {
          "ref": "a781c1a0-f027-4628-b0eb-af2fe20601e3",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "8c34e038-c4d6-4c18-9fe0-8b6b1b326ec9"
        },
        "item": {
          "id": "94b428cd-d72e-4f35-a156-d98a2c2043a2",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "bb27f60e-5fc1-4988-8f30-c8f400003426",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "f9498915-9dc1-4b36-9b36-0bf8928a202a",
        "cursor": {
          "ref": "190e1b30-362b-4572-90af-3efb89bd0b34",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "305a2f0d-9485-4d77-ab0c-818ffb80c85f"
        },
        "item": {
          "id": "f9498915-9dc1-4b36-9b36-0bf8928a202a",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "6b129978-87dc-4c78-a205-4bbc22d21e50",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "5d34228f-01ba-4802-84ab-1b2f9afa53dc",
        "cursor": {
          "ref": "a41bcc01-922d-4262-be8d-03438d2c1491",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ad30b5ef-07f5-42e4-a573-4fde58588752"
        },
        "item": {
          "id": "5d34228f-01ba-4802-84ab-1b2f9afa53dc",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "45a03c1b-06b9-4883-88be-7d1981221155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f0e355-5287-48ef-9c9c-07515eed91c3",
        "cursor": {
          "ref": "dce63fcc-c1e1-46ce-9ccb-c84e5e02b85c",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "cc32ef50-a906-4415-98cf-f532ef8c6b26"
        },
        "item": {
          "id": "c3f0e355-5287-48ef-9c9c-07515eed91c3",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "f01fab45-1f0c-47a4-8ba2-6312b73afec5",
          "status": "Created",
          "code": 201,
          "responseTime": 226,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "74a5095d-1011-4c78-a2c0-5bcc3cc7a79e",
        "cursor": {
          "ref": "f8a2cd50-721d-43b8-bde0-ff279f38a6d1",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ef8cea61-e32e-459b-a477-f3f88ce2c916"
        },
        "item": {
          "id": "74a5095d-1011-4c78-a2c0-5bcc3cc7a79e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ebc65cf2-801a-40f1-bbf9-d8ec0413547f",
          "status": "Created",
          "code": 201,
          "responseTime": 221,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "feab78ba-2505-4a2b-981a-c43c9b402711",
        "cursor": {
          "ref": "724d8cb7-a5ff-4b23-b874-e076174d166e",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1cf49063-0f10-44a0-b177-a324e0e3b772"
        },
        "item": {
          "id": "feab78ba-2505-4a2b-981a-c43c9b402711",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "55c0a3b3-2bc0-4ce5-99c1-15e501d219cb",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "f62f13a3-90cd-40ca-b97b-c1de0d2e295e",
        "cursor": {
          "ref": "c37d44f2-6bc1-40dd-b0a4-d11e7ef55a73",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "926c5896-e6c8-477a-9f10-f635883b2025"
        },
        "item": {
          "id": "f62f13a3-90cd-40ca-b97b-c1de0d2e295e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "7d5bad91-be83-404b-9c0d-9b5c9942e44e",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "64ccd166-0811-4b14-9999-1f68d4990292",
        "cursor": {
          "ref": "beb4ce56-cf3b-4097-ac88-e409cdcd09a2",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ec6daebd-1ed9-4bbc-aaa0-20a6cb46a50f"
        },
        "item": {
          "id": "64ccd166-0811-4b14-9999-1f68d4990292",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "8a626dd7-31d5-4f4c-a76e-e80be20b628e",
          "status": "Created",
          "code": 201,
          "responseTime": 216,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "4cc7fbc0-9c45-4256-9840-5fa8404e611b",
        "cursor": {
          "ref": "f5acba14-a5f5-4070-8972-7a208e4bf42a",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "8d12c988-2ba9-4c77-b7ad-e5e82509747c"
        },
        "item": {
          "id": "4cc7fbc0-9c45-4256-9840-5fa8404e611b",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "92168d03-aa77-4a3a-84d2-f9a72e8edb49",
          "status": "Created",
          "code": 201,
          "responseTime": 230,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "e7758224-f607-4b6f-84ed-df6e507e461e",
        "cursor": {
          "ref": "93a65f84-925c-4302-afda-4f5526242660",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "519348ef-2419-4fe9-b7fe-49ac1a346780"
        },
        "item": {
          "id": "e7758224-f607-4b6f-84ed-df6e507e461e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a32345be-1248-4c73-9712-72126730d0c5",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "f55bb448-9c4b-4c07-97fb-9ba83fbf4302",
        "cursor": {
          "ref": "8e071d0e-679c-44cf-b124-f8d814792d1d",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "26a117c2-8062-46f2-ab75-1f27ff462c47"
        },
        "item": {
          "id": "f55bb448-9c4b-4c07-97fb-9ba83fbf4302",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "32292e9a-6990-44a2-933a-9f48782cfdf4",
          "status": "Created",
          "code": 201,
          "responseTime": 216,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "c4a12af3-d482-442c-ada9-e631b59b4662",
        "cursor": {
          "ref": "a281ca6f-cc15-4434-a463-15bec562b33a",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "95c149a0-aec6-4889-8e26-651a75fc36a4"
        },
        "item": {
          "id": "c4a12af3-d482-442c-ada9-e631b59b4662",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "baa9b2de-22b4-4448-ac09-2ae5b7e51587",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "78eac51e-0ea3-4919-8353-f490ce3df784",
        "cursor": {
          "ref": "d9fc404c-57ac-4829-8664-1e5165859ed3",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "8aa1e393-516d-4759-8afc-f9501ca161da"
        },
        "item": {
          "id": "78eac51e-0ea3-4919-8353-f490ce3df784",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "85087fcd-88c5-479d-b4e2-d59f8e906039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c79e24f-be15-4ef6-bd2c-fcb4bc5f7b37",
        "cursor": {
          "ref": "baf4e6bb-b8c9-41ab-9278-d66e1a624df1",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "931da2b3-f777-4170-8a5a-02507c885a68"
        },
        "item": {
          "id": "2c79e24f-be15-4ef6-bd2c-fcb4bc5f7b37",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "3ae83ac8-5fde-4139-b96e-c28ce16dc789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ee72ef0-8f38-4209-b960-3ec2b7726dac",
        "cursor": {
          "ref": "c09a4387-32cb-4778-a288-e9b61cc976b3",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "13dd312e-6b4c-477c-9133-67d236fc3e2d"
        },
        "item": {
          "id": "5ee72ef0-8f38-4209-b960-3ec2b7726dac",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "e1fd5e47-6976-49ac-a8dc-b4e564b1bf49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39a45643-d04f-4db0-aac8-fe0bf0409e40",
        "cursor": {
          "ref": "c6ec223c-fa44-450c-9537-26e66ba79f96",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "65a58fd2-2c3d-47e5-92e9-ca53e6a285f5"
        },
        "item": {
          "id": "39a45643-d04f-4db0-aac8-fe0bf0409e40",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "320fa805-4c34-4c45-9302-18ccc5a78f5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a20393b-757c-4604-a7e0-356776248c53",
        "cursor": {
          "ref": "5dc4f7e7-44fe-4fb2-bdd4-df9c866b8885",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a1f3d4f0-4d75-48f2-9834-667b4376cba9"
        },
        "item": {
          "id": "0a20393b-757c-4604-a7e0-356776248c53",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "72b834bc-4217-41a9-90f9-e90510bf08d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "586e7fea-65a0-45e8-a2bc-7396c26c71bf",
        "cursor": {
          "ref": "085743fc-886e-424e-8dbb-d795ded428c5",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "78d7f705-dfce-4d13-abaa-f9bf2310a525"
        },
        "item": {
          "id": "586e7fea-65a0-45e8-a2bc-7396c26c71bf",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "2b93311f-f8d1-43fd-a4d3-532b2f21e694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "269583c3-fa14-42c1-9410-d4f515fa17c3",
        "cursor": {
          "ref": "2722a851-8603-4d95-b43e-d7ffe49175cb",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "5a962fff-9ca6-4d5b-bfcc-3fc5d04396c0"
        },
        "item": {
          "id": "269583c3-fa14-42c1-9410-d4f515fa17c3",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e91e5b25-e0dd-44ae-aec0-5ee0165759c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dbfcb2f-1dd0-41b1-b7e0-74c60c86a827",
        "cursor": {
          "ref": "fb612ae3-7ed1-4aac-9ad4-ab1f9aa053d1",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "82b87d4f-50db-4686-be17-bf41dd8f097d"
        },
        "item": {
          "id": "6dbfcb2f-1dd0-41b1-b7e0-74c60c86a827",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "48a71e41-3c96-47b9-8846-4e4181d46b9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4f730a-ae83-45f5-a7d4-f0826a1d2ca9",
        "cursor": {
          "ref": "5cc73949-82f8-4032-aad2-6db5ecc57220",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a7e5756d-0393-410e-94be-d32fadacf1a5"
        },
        "item": {
          "id": "fb4f730a-ae83-45f5-a7d4-f0826a1d2ca9",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "4def53b4-fb5d-490a-bfbb-52e314698d8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0c0130b-4566-4b0f-a98b-3f333ea2fb01",
        "cursor": {
          "ref": "ce336977-1c4a-4971-8dc5-2ddb26c832a2",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "4e57201d-8d91-44ef-8e26-31c2d46a5628"
        },
        "item": {
          "id": "c0c0130b-4566-4b0f-a98b-3f333ea2fb01",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "0c117e33-4407-4d5c-bd6a-a6d626506809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c0c290-1023-420b-b6ee-1c8cf91a6475",
        "cursor": {
          "ref": "6b6020ad-ca2c-40ce-ab40-3716cfb36382",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "4991eb5e-c2ec-4dad-abf1-f5e349049dcd"
        },
        "item": {
          "id": "d5c0c290-1023-420b-b6ee-1c8cf91a6475",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "37b7308c-28ab-4a39-ad84-11d14af1abf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "905f644d-9789-405f-937f-afce00184a2b",
        "cursor": {
          "ref": "53ddb63e-056a-42a5-a590-83a9bcc49c2a",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "a1bfd71e-5fbd-4ef4-9e80-35278bbfe7a7"
        },
        "item": {
          "id": "905f644d-9789-405f-937f-afce00184a2b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "48a53cb1-01a5-4feb-8b4b-6377fb5354db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ffcefba-09c3-4135-a75e-f5ca26ba5686",
        "cursor": {
          "ref": "83c4ef16-fcd8-408b-b3bc-791c9c86cb22",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "3c43bf76-204c-4578-9017-8f58bf053c43"
        },
        "item": {
          "id": "1ffcefba-09c3-4135-a75e-f5ca26ba5686",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "8e0793ba-50b7-42d7-9a0b-5a92f403d4d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b897f46-c4d4-40a8-8cec-d8925d9a4c3f",
        "cursor": {
          "ref": "3ea7fedc-c827-4f00-b81f-e6307fa09a52",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "8948dce2-8b91-421a-9ed6-3c5bd77fa218"
        },
        "item": {
          "id": "3b897f46-c4d4-40a8-8cec-d8925d9a4c3f",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c1614256-5a85-40a3-9ea0-b6001e6e3dd8",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "fcfd5ca3-962c-4610-9fec-8b3b6961cb31",
        "cursor": {
          "ref": "ad0ff3c2-2f93-483e-b3f6-2be17e59e0d9",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "64f84b5e-b03e-449b-834b-f904694633f4"
        },
        "item": {
          "id": "fcfd5ca3-962c-4610-9fec-8b3b6961cb31",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "64738494-ad94-4ae9-b872-67ba5b2d4461",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "2bd642e7-fd72-4158-a7bb-90ece9b965af",
        "cursor": {
          "ref": "fdb73e22-8779-452b-9a03-a02b32fa4b04",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "4f929f0e-4cf8-4817-886a-d9300b3383ec"
        },
        "item": {
          "id": "2bd642e7-fd72-4158-a7bb-90ece9b965af",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "72647d68-f2bd-49ec-a88a-c3f235fc5559",
          "status": "Created",
          "code": 201,
          "responseTime": 230,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "efc3e112-babd-4908-955d-0745c994cc88",
        "cursor": {
          "ref": "5a6c1e2a-84b0-4109-aa9d-cc55bc0176d9",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "374a80ef-ced4-4a84-9cdd-68323c937ae6"
        },
        "item": {
          "id": "efc3e112-babd-4908-955d-0745c994cc88",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "75091187-65a9-4471-9313-6ecf2d996345",
          "status": "Created",
          "code": 201,
          "responseTime": 218,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "dc5a3cd1-a040-435f-9bc9-aafcc37bc0ec",
        "cursor": {
          "ref": "c84be615-df81-446c-bf09-63ea75bfce02",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "a2c30a6c-d2fc-45d9-bc4d-ec6e31970125"
        },
        "item": {
          "id": "dc5a3cd1-a040-435f-9bc9-aafcc37bc0ec",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6852f75c-c9bb-4e09-8d4a-921dd094770e",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "32a2e706-0d98-4530-a848-d59ff680c5e5",
        "cursor": {
          "ref": "b8b6255b-df4b-441b-aa0b-7f45e313a4f6",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "496312bb-b04f-4127-9dbb-9026c4104798"
        },
        "item": {
          "id": "32a2e706-0d98-4530-a848-d59ff680c5e5",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "cc9ccc69-0074-48ac-bc7e-40a2f39be7ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a856cc2e-e963-45e9-80a8-ac339d679608",
        "cursor": {
          "ref": "9f774879-c0d8-4f18-b539-db5261fca2c9",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "86a20c44-0c9b-48bf-a6e2-c88e53ec11dc"
        },
        "item": {
          "id": "a856cc2e-e963-45e9-80a8-ac339d679608",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "907310e4-d3b8-4a56-834e-e0a702c60d54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c0c60c5-94fc-4a8e-aa29-c1df2f38f3a6",
        "cursor": {
          "ref": "b34a1617-a2e1-4815-aa64-955536244ffe",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "b50eea8a-5af1-4dca-b8ee-d709d9d7e5c0"
        },
        "item": {
          "id": "3c0c60c5-94fc-4a8e-aa29-c1df2f38f3a6",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "396919f9-b8bf-49f1-9024-dab3f233e9c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b619ddcd-ab5f-4388-9fdc-c09c7580e7a5",
        "cursor": {
          "ref": "f7d3f15b-0f0a-44e1-bcc0-d97d34bfdc74",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "a32d6728-f1bf-462f-998d-e46ddac93282"
        },
        "item": {
          "id": "b619ddcd-ab5f-4388-9fdc-c09c7580e7a5",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f345a5bb-8a07-4445-9d97-daad81c9872a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf017e12-184c-487d-ad98-da09f30cea33",
        "cursor": {
          "ref": "c7e6de17-09b5-438d-8d45-33bf564a0275",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "67a9222d-f09c-463e-976b-8753640d6fb9"
        },
        "item": {
          "id": "cf017e12-184c-487d-ad98-da09f30cea33",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "41023b9f-5b5d-4493-8ecd-75fc3ca3769c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c5848df-9393-499a-b382-4ece761423fe",
        "cursor": {
          "ref": "2cde3758-67cf-461c-9260-c30b62c63f90",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "2cc75079-5690-4882-b46b-544a07e20daa"
        },
        "item": {
          "id": "2c5848df-9393-499a-b382-4ece761423fe",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "60250d89-dad4-4d69-bdeb-1c1fecea5a55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92973de2-789a-4add-83ce-e8092f9206d1",
        "cursor": {
          "ref": "6d235186-b664-4ec1-9bd6-c6c8b92cd8c2",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "f3072e2b-6c4c-4816-a297-4ba4420e7f6c"
        },
        "item": {
          "id": "92973de2-789a-4add-83ce-e8092f9206d1",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c909d85d-c0ac-46ca-9515-9d270da12a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d0e76b1-91a6-43e3-97da-45eb395c9c24",
        "cursor": {
          "ref": "e15ac2c0-e8de-46ef-9f70-6abd154435fb",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "efe0c260-4f01-4bf9-b24b-32be92712b23"
        },
        "item": {
          "id": "8d0e76b1-91a6-43e3-97da-45eb395c9c24",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d7ccb70f-f4d9-4598-afdd-831bc01b7585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75193a18-078f-4972-b4ba-eca7707711cc",
        "cursor": {
          "ref": "c4027dc2-a809-4921-8848-de7f4cec438e",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "c57fc73e-9ea2-48bc-b70f-704681fcf8b3"
        },
        "item": {
          "id": "75193a18-078f-4972-b4ba-eca7707711cc",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a7c38175-76df-42a3-812e-092ee71f6009",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30a228a5-8ae9-46fd-be79-c363a7e40ac7",
        "cursor": {
          "ref": "e04e39c0-1f6a-40b1-86e8-3ea14c5e2dec",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "6efef0e4-4077-4362-816e-8a2a2ca1a2f9"
        },
        "item": {
          "id": "30a228a5-8ae9-46fd-be79-c363a7e40ac7",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "5e56030b-2691-4380-9216-51a7132a7186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e45504d-8695-46cc-9e5e-863428a5ee7f",
        "cursor": {
          "ref": "1b80b0f0-3c1d-423d-96e4-06aae49d6d27",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "9d5432c8-5585-4f13-8d69-f37217a794c7"
        },
        "item": {
          "id": "2e45504d-8695-46cc-9e5e-863428a5ee7f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "e24cc2b2-ee2e-45a4-b953-a3026028cd07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "486d46d2-305c-4424-90a7-6da97a31efbd",
        "cursor": {
          "ref": "04365a42-ca15-4b60-971c-e110631c7b93",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "e3564ea7-20dd-4591-bde4-0438229c5a51"
        },
        "item": {
          "id": "486d46d2-305c-4424-90a7-6da97a31efbd",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "2ac2b3c0-871a-4e7b-ac32-7f322a7cf0dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1573cb99-33af-478e-a159-32379f849a12",
        "cursor": {
          "ref": "39fe29dd-bed3-49e2-9d13-090e83d06d50",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "140e6b68-bf0b-4b3c-83c3-1037ffb810b5"
        },
        "item": {
          "id": "1573cb99-33af-478e-a159-32379f849a12",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e2584d71-ded5-45cd-a642-ccdc1ae01dce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e39769fe-0818-426c-bc51-6210aa29f37a",
        "cursor": {
          "ref": "43a086d0-5e0c-4d1b-91f1-c2c1e6580409",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0711dce6-3ce1-4e1c-8eaa-d1232d3aa7f4"
        },
        "item": {
          "id": "e39769fe-0818-426c-bc51-6210aa29f37a",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "dfdbc42e-8014-46f0-90b7-ce85fda9e099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "530ea144-90b9-4f82-8a2c-8f90f753d870",
        "cursor": {
          "ref": "3456bd03-4ff2-4211-a31f-b1c7e2473a30",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "7ab577f5-7cf8-4911-b98d-f2cc32e62548"
        },
        "item": {
          "id": "530ea144-90b9-4f82-8a2c-8f90f753d870",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "14d89f8f-65ce-498f-a38a-74618eaf2896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3d1e18c-c66e-4652-acee-5778a452851b",
        "cursor": {
          "ref": "84cb3e72-e26c-4998-87b1-00bc2bb1d3b3",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d14aec5a-8464-4e8b-8bd1-fe9cb993ea76"
        },
        "item": {
          "id": "e3d1e18c-c66e-4652-acee-5778a452851b",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "88e464b0-aca6-474a-9ca4-082d9fee16d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3891e83c-58c2-4de7-84b7-0663615bb928",
        "cursor": {
          "ref": "0804c59b-4951-4d36-af87-bd69d58b72c0",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "0ab0f26c-0199-40d1-abc4-bf159f451c42"
        },
        "item": {
          "id": "3891e83c-58c2-4de7-84b7-0663615bb928",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "8f52a9df-4fc9-48b3-a849-3f30fa58ad54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bb12f0c-9573-4a8e-8693-b75cdeeaa338",
        "cursor": {
          "ref": "c0480027-b2db-460a-982c-e61c60ca759d",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "4d603af1-0775-4b2e-8e73-11c32343fa61"
        },
        "item": {
          "id": "5bb12f0c-9573-4a8e-8693-b75cdeeaa338",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "14a5dbbe-2391-4e01-92d5-0028ee3a56b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9556eeb4-82cd-4ffc-b8ef-9a182b0a2d23",
        "cursor": {
          "ref": "e619f361-581b-4c7c-bf7c-839f55caf9c0",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "67b63c32-cc06-48a2-a5dd-fc8e42d826e6"
        },
        "item": {
          "id": "9556eeb4-82cd-4ffc-b8ef-9a182b0a2d23",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "74c30ede-6757-46c3-b19b-ffae6d57cd84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc9c590-c5d1-482e-92ca-b6ba9e205256",
        "cursor": {
          "ref": "75a1fa50-9c44-4210-8142-21c2f3958989",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "9383a948-4278-4087-bf3a-ad6b62d4c917"
        },
        "item": {
          "id": "0cc9c590-c5d1-482e-92ca-b6ba9e205256",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "d462af16-f157-4d6a-979b-259953a7c931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9da1e577-2289-4f1a-8c43-7cf4ca26f82e",
        "cursor": {
          "ref": "d559c4e9-f282-4fe4-836e-cf8a2d4cd85f",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "73e932c5-a045-4483-9c6e-ca6b774484e2"
        },
        "item": {
          "id": "9da1e577-2289-4f1a-8c43-7cf4ca26f82e",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "facaabfc-fdb0-4ed5-8b3c-002eca130bf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a2598fd-8421-44b8-a7f1-62b95d1d9fcc",
        "cursor": {
          "ref": "64d7b0ce-6f4d-4232-9f82-031e2a7e0a2f",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "598e871b-83cb-4a41-8695-613f87353991"
        },
        "item": {
          "id": "8a2598fd-8421-44b8-a7f1-62b95d1d9fcc",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "adf72106-4eb7-4da9-b38d-62b1ea7f1597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e30dc2cc-b583-4216-9dc6-b5e39a03c548",
        "cursor": {
          "ref": "87c53a63-d4a1-4281-b6ad-6c7e097752ac",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "487b6aa0-ea0c-4cbc-8e72-de9334d6cadd"
        },
        "item": {
          "id": "e30dc2cc-b583-4216-9dc6-b5e39a03c548",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "89efc7e5-8958-437c-89c2-e8c7ff74ae5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffde1b90-f4ff-4ed6-b946-58d196671820",
        "cursor": {
          "ref": "8fb7c3fb-bf45-4a60-b305-fa13cc968cf5",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d50f04bd-0b0f-45c1-baa1-d767aebace9a"
        },
        "item": {
          "id": "ffde1b90-f4ff-4ed6-b946-58d196671820",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "47922c83-93bd-4e58-beb2-5a2624bde0b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a7a2d2a-4efe-48b8-8099-245fa9198eb9",
        "cursor": {
          "ref": "09b69e99-8652-4988-8fa2-d944fb4e02eb",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "6e2d4e30-a878-459b-928c-dc32ebb25d57"
        },
        "item": {
          "id": "2a7a2d2a-4efe-48b8-8099-245fa9198eb9",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "8275b20e-e0b0-4700-b44a-d11a56f2d091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "459fb851-1c89-4df1-8ac4-7054a6763ca6",
        "cursor": {
          "ref": "1f72115f-f94c-48c2-afd7-5dfeb0069e64",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "4d88ec61-b71d-4b25-8e62-c7272425e31e"
        },
        "item": {
          "id": "459fb851-1c89-4df1-8ac4-7054a6763ca6",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "49116c7e-4281-4b6d-8bb1-6748fd17cbcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e51c3237-b929-4e24-a770-2f026aea8be0",
        "cursor": {
          "ref": "a170f06d-6bb5-4d1d-bc84-81ab0ab91a3f",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "a498f69c-7fd9-4d9d-8d09-87f923376ce9"
        },
        "item": {
          "id": "e51c3237-b929-4e24-a770-2f026aea8be0",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "664a4264-0b4b-4c49-85e3-39afd5e5af51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "418d5b51-0a25-4048-9121-434bb46c66d4",
        "cursor": {
          "ref": "4c8e0259-faec-4e8a-a4b4-80966c046729",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "fcc9be26-3004-42b0-8c9a-c6ef875a0bc9"
        },
        "item": {
          "id": "418d5b51-0a25-4048-9121-434bb46c66d4",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "244f493a-05db-4ce6-93a6-66de547d62e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7057c09b-3f4f-4988-ad5e-0f2852b1b46a",
        "cursor": {
          "ref": "3b063301-3ab2-44cb-8b3d-3b5c919e8659",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "6a329a6c-820c-4e1f-ac30-16d1a2614e34"
        },
        "item": {
          "id": "7057c09b-3f4f-4988-ad5e-0f2852b1b46a",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "5fde7421-ad0f-433a-9d2f-56728a661e80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00f4ddbb-96ec-4e39-b6cf-de77f6f579a9",
        "cursor": {
          "ref": "9fe61d9e-9b02-41bf-aed2-d133ee7fbab2",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "85c64ea8-13c8-49be-baa4-8c808a45cadd"
        },
        "item": {
          "id": "00f4ddbb-96ec-4e39-b6cf-de77f6f579a9",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "28e77e2a-526d-415a-a9d7-d74c34d4c25e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3918fa0b-b3a0-42fb-bfe2-9137dc7e62c8",
        "cursor": {
          "ref": "3352a5ba-9e27-448f-8f98-94022c2baabe",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "22b59e52-e71f-4aa4-8014-425fb2508123"
        },
        "item": {
          "id": "3918fa0b-b3a0-42fb-bfe2-9137dc7e62c8",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "9779d747-2a5b-4852-94a3-0ebeabb07e73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fbf120c-b462-4ff0-ae0d-6fb66aa68ee4",
        "cursor": {
          "ref": "7d5837a4-fc7d-4000-8120-e00b843bd119",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "838fcf20-dada-4874-b03d-c2fbd42f53c1"
        },
        "item": {
          "id": "8fbf120c-b462-4ff0-ae0d-6fb66aa68ee4",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "9b041949-2572-4b27-85fb-cbe46af9f39f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2174030e-59b3-41c3-809b-8dd01613d07a",
        "cursor": {
          "ref": "65a4842a-8237-490f-9c83-6f00c98e18fb",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "03c5d4aa-2d50-42e7-9371-500695fa02c6"
        },
        "item": {
          "id": "2174030e-59b3-41c3-809b-8dd01613d07a",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "ad04b236-5771-42ba-bee1-7a85b01166d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "d449e3df-ac5a-427d-9cd3-f69320cda3c0",
        "cursor": {
          "ref": "864ee4ea-2474-48dc-b6ac-4135d3f79566",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "989f261f-b799-4b39-b034-9a1bed68779b"
        },
        "item": {
          "id": "d449e3df-ac5a-427d-9cd3-f69320cda3c0",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9edc5fd5-5732-4011-b7e3-5bc6c9a34681",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b6b40a2-b8e5-4e9f-9b39-b66addd8f1e2",
        "cursor": {
          "ref": "1915ba62-327e-4add-a1ba-56fc4bae2ecc",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ce684dd0-fefd-4427-8aa9-0414848e1a43"
        },
        "item": {
          "id": "5b6b40a2-b8e5-4e9f-9b39-b66addd8f1e2",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "d97237a7-7b8a-42c3-8411-1f6e117f0001",
          "status": "Created",
          "code": 201,
          "responseTime": 231,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e4e0350-7d1d-489b-8fa9-882217fdd575",
        "cursor": {
          "ref": "311b2e15-2e54-4237-8b54-35bb570bd0a2",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e8ef7929-d8c7-403a-9fae-63f4b40bb38e"
        },
        "item": {
          "id": "1e4e0350-7d1d-489b-8fa9-882217fdd575",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "57cb3341-f13b-4404-96df-98840627ff14",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "daada070-69f7-46df-a321-54548c4b8ad7",
        "cursor": {
          "ref": "bf1ba324-42a7-49d6-9e04-361680872e56",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "8e95a3cf-3a26-49df-8292-7889c9c9f3ad"
        },
        "item": {
          "id": "daada070-69f7-46df-a321-54548c4b8ad7",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e01ebc22-1b1f-4d53-979a-1016fa742f05",
          "status": "Created",
          "code": 201,
          "responseTime": 217,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b32f30f0-9fe0-4005-b488-77d78eba48b2",
        "cursor": {
          "ref": "c1704f3f-cc75-4e61-99d7-4dac86608d9b",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "82470203-e6f7-4983-ae06-530e1699076f"
        },
        "item": {
          "id": "b32f30f0-9fe0-4005-b488-77d78eba48b2",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "cb824a62-d473-4d7f-9b67-449866009b14",
          "status": "Created",
          "code": 201,
          "responseTime": 324,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-04-08T00:36:15.077Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-04-08T00:36:15.077Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "f612505c-fb18-4713-9724-9e5250e31b92",
        "cursor": {
          "ref": "f0c53cce-e60f-4d55-9cc9-db9152fabe0a",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b6885b20-af1e-4121-8d8e-8784cb958c35"
        },
        "item": {
          "id": "f612505c-fb18-4713-9724-9e5250e31b92",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0a759d15-35c9-4813-a487-7ce6e1f08e64",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "500b9c7e-299a-4454-82b5-8a3b08fe371e",
        "cursor": {
          "ref": "9e0d2cc0-0814-4fb4-8581-54aca70a120b",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "988ea895-fae9-4ebd-9acf-08d3b62243f4"
        },
        "item": {
          "id": "500b9c7e-299a-4454-82b5-8a3b08fe371e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "430745cd-0187-4270-9540-8f49d4ff9965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e4667a1-17b9-4f3d-afc0-6a1cdc957100",
        "cursor": {
          "ref": "36d1b871-19b2-4eee-8e49-c3c57a1232e6",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c5d1d627-e1bf-4cda-8462-61776c1b9516"
        },
        "item": {
          "id": "6e4667a1-17b9-4f3d-afc0-6a1cdc957100",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "845f73c5-461b-4314-babc-56acabb98764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d9976e-3344-4b75-a394-31cb6b6de9da",
        "cursor": {
          "ref": "79b481c4-6c7c-4d7c-8b6d-7f0a8db1fca2",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "622a134b-1931-4d81-ba4a-8d3a972a2dad"
        },
        "item": {
          "id": "32d9976e-3344-4b75-a394-31cb6b6de9da",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "70034608-6261-42e8-8cdc-828baaf22b73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e837d39-6497-431b-9be8-df9c272901c7",
        "cursor": {
          "ref": "dd96539e-61b2-41e9-b2cf-6a2ea69e2214",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "8a1d50bd-7df7-4a36-8f9d-fc85784829f5"
        },
        "item": {
          "id": "4e837d39-6497-431b-9be8-df9c272901c7",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a2c97d6d-eb95-44c0-ac97-f2f51f67109b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "115b5412-bfd6-4387-939e-a9a98d27f8ca",
        "cursor": {
          "ref": "f768edc1-b335-4a4f-b1d7-84791401302e",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "4ba84aa3-fdca-4abc-bbbc-5b2e18e5c616"
        },
        "item": {
          "id": "115b5412-bfd6-4387-939e-a9a98d27f8ca",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "26ea4695-ca11-4162-8bbd-44d97ceb891f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7811a08b-9365-42ea-84b1-4adaa1862b6c",
        "cursor": {
          "ref": "c5d62ec0-5a2f-49a6-b79b-2cbbdada381f",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "33c69e44-699c-48ce-ac96-914ad3d7e5c3"
        },
        "item": {
          "id": "7811a08b-9365-42ea-84b1-4adaa1862b6c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d3fcbbbe-99e3-49af-a217-c1fdb7fc6d98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d13a08a8-76d6-407c-88ee-bb1940ca8cac",
        "cursor": {
          "ref": "ddb240e8-c17c-42dd-b93d-e9fd660f2cd4",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "1b34ef37-dbce-406d-b59d-b144f956f982"
        },
        "item": {
          "id": "d13a08a8-76d6-407c-88ee-bb1940ca8cac",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f9de92a1-777b-4fb3-a9a5-019e4046ff4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5f44b2c-4587-4b06-a7a6-462ba334f2e7",
        "cursor": {
          "ref": "1b3eb26d-dd0d-4161-b5e1-64776ce98478",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "acf1d83e-c0b0-48ad-b661-9700d5603bbc"
        },
        "item": {
          "id": "d5f44b2c-4587-4b06-a7a6-462ba334f2e7",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "293ccc01-f2ee-4bc2-bfb3-e8950b8dbea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f44d4916-1982-4f88-bdd5-2a3dff07f4f3",
        "cursor": {
          "ref": "10d9943c-a0e8-4f9f-9a3a-b1b99b7fb07f",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "bb69bdee-7007-49f4-b013-db8519f179e7"
        },
        "item": {
          "id": "f44d4916-1982-4f88-bdd5-2a3dff07f4f3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c010d698-f560-476f-9790-a15182c754b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cca2ad2b-3626-442f-812e-abacb7f4ed1f",
        "cursor": {
          "ref": "596a9e9c-aecd-4b38-9b7a-9e69db43c0ab",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1d96f75f-fe1c-4313-8842-30d69bc297a0"
        },
        "item": {
          "id": "cca2ad2b-3626-442f-812e-abacb7f4ed1f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "18839e78-6cac-42d4-b74f-702156ad4a85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5d1e32d-bca2-4b0c-ad9a-6916e34fcc4b",
        "cursor": {
          "ref": "c223685f-0379-4836-9cd6-f8d7378f6812",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "48fe3f68-46f7-441d-83c1-6ad3dfd13db5"
        },
        "item": {
          "id": "c5d1e32d-bca2-4b0c-ad9a-6916e34fcc4b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6beac7be-8384-49dd-9854-cbb20736aa7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a9d5d8d-82de-4ed2-bf18-900d71325c9e",
        "cursor": {
          "ref": "2575e51c-5e36-4076-a476-9acdacc85f2b",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "4b31ff20-efd5-48a9-9c6e-1146d6324af2"
        },
        "item": {
          "id": "3a9d5d8d-82de-4ed2-bf18-900d71325c9e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "702c42a5-a593-4461-804b-2f45af94aac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e817618-2197-4e7a-8aa3-e45adb5cd355",
        "cursor": {
          "ref": "c4786c13-b77d-499a-892a-f406ff09d75c",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c7129440-4d92-4810-8f75-724841cf3c1a"
        },
        "item": {
          "id": "8e817618-2197-4e7a-8aa3-e45adb5cd355",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c445f2ae-5da8-47bd-b41e-2a117794732a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08c86d73-e53f-4827-afd9-18dcfdda2418",
        "cursor": {
          "ref": "3b1c7b49-d479-47ba-9c28-7ac435f85dbe",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "457ef100-407e-4686-ab66-7705f9cf7c29"
        },
        "item": {
          "id": "08c86d73-e53f-4827-afd9-18dcfdda2418",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8a519d4d-b15a-45c1-9098-0590eb7dc1f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 45,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "fa5eaae5-f9c1-4651-8b27-040879f2813d",
        "cursor": {
          "ref": "15f23d35-a540-4447-83c1-f7703bd9c757",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "879717b2-2737-4aa0-bd77-c4edcec0cc92"
        },
        "item": {
          "id": "fa5eaae5-f9c1-4651-8b27-040879f2813d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4001465f-9455-495b-a64c-b28bd921db31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a21d10-98ca-4c8c-ba72-2aebed609288",
        "cursor": {
          "ref": "ba96df79-387c-4c49-a19d-3ec2d7251720",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e26ac251-4026-43e5-a155-aac7e3b5fb89"
        },
        "item": {
          "id": "44a21d10-98ca-4c8c-ba72-2aebed609288",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1ce51db1-3b6f-491f-b8c5-0e87bb5e3328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1423e1c-f6f0-4c25-a6a9-316e2a593876",
        "cursor": {
          "ref": "b4cfdeac-1a14-4eb9-ad9f-6614f7599c78",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "6e2ee58c-6276-468d-a5c2-846eb668830c"
        },
        "item": {
          "id": "f1423e1c-f6f0-4c25-a6a9-316e2a593876",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2f42d343-3c88-42ac-98c4-04d74d224d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30dd42d2-8e3b-4235-88c2-1fa2eda065da",
        "cursor": {
          "ref": "b0fa648a-21d2-43b4-b5b7-fe271e13b1c4",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "9b8eac9a-c4aa-4f35-afc6-ed7f0067c030"
        },
        "item": {
          "id": "30dd42d2-8e3b-4235-88c2-1fa2eda065da",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3b1d8592-a0be-4ab8-827d-b82f136d9ddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8258a661-ac5f-4f44-bf6d-7d3a28065858",
        "cursor": {
          "ref": "1b098678-0f79-49fc-ac33-e44059c3439e",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2a1160e6-b911-4508-9fb2-c953a21a25eb"
        },
        "item": {
          "id": "8258a661-ac5f-4f44-bf6d-7d3a28065858",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "1a83e9a1-68e4-40c4-aae7-28202c1b9cc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edf30e83-a6a3-4951-96a8-379f7a6ad9ac",
        "cursor": {
          "ref": "39db5ad1-a002-4838-a71c-3a8a1f597cb2",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "edcd6b88-bd64-404e-9271-def140a3f522"
        },
        "item": {
          "id": "edf30e83-a6a3-4951-96a8-379f7a6ad9ac",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7aa6b423-58e8-4091-b35f-2d19dc658c9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db60860b-ff9d-4cb1-8801-f444ff391dec",
        "cursor": {
          "ref": "259b33d7-4db1-4a8b-bf16-43b7a7d8aa8d",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "54739be3-448e-4045-9b53-5a249ef8165b"
        },
        "item": {
          "id": "db60860b-ff9d-4cb1-8801-f444ff391dec",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "aa916f44-06b5-4734-97f7-77b145a47c0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9600e4a8-f94a-48ce-ae0e-59014e4f5c0c",
        "cursor": {
          "ref": "faf78eaf-db1b-468e-b111-f89582d1b517",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "806e60b5-1f79-41cc-acab-fceb8026ed0b"
        },
        "item": {
          "id": "9600e4a8-f94a-48ce-ae0e-59014e4f5c0c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0b16199d-4aaf-4af5-8115-659288a5168a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66de10c5-8a6c-4c77-aba5-4dabd4a02a85",
        "cursor": {
          "ref": "99d60ca3-c2de-4008-bc98-0ae9a9edc191",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "6cd5b902-8ece-4abb-a1fb-c2afacdef339"
        },
        "item": {
          "id": "66de10c5-8a6c-4c77-aba5-4dabd4a02a85",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "58cd1b8e-d49e-43ff-b7ef-8ab5b58adc59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f3994e-f4ad-4f94-8d06-fd6e0346673c",
        "cursor": {
          "ref": "1f47e268-77c4-4a5f-9f99-5db329fa1754",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "feb82d7a-76cb-4144-b258-3c633f91417a"
        },
        "item": {
          "id": "50f3994e-f4ad-4f94-8d06-fd6e0346673c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "66608daf-be25-43ec-ba74-ac508cbe2f5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af1178cd-b067-4aa7-9c83-510eba2bb076",
        "cursor": {
          "ref": "5ec07473-64fb-4fba-bc60-ce684d888edb",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "c80edb1d-6d91-473d-b38a-d676ea0676ec"
        },
        "item": {
          "id": "af1178cd-b067-4aa7-9c83-510eba2bb076",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0e415190-6e7f-48da-b899-87d7c727c783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68411fe3-9b5b-4725-9bdc-5b44996d31b5",
        "cursor": {
          "ref": "d12d0f3d-f098-42bb-8cad-07f991dcdbad",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "ed71f4db-27e6-47a7-9f85-a348fa498555"
        },
        "item": {
          "id": "68411fe3-9b5b-4725-9bdc-5b44996d31b5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8422162e-6fe8-42b5-8239-173cf8d0f91b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "523b882a-6093-4e54-b2d3-d74217a00e93",
        "cursor": {
          "ref": "07ab4a55-dd9e-40c1-9ed4-e2a490642d4d",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "9df5f226-e40d-4e79-aa0b-60db70d95812"
        },
        "item": {
          "id": "523b882a-6093-4e54-b2d3-d74217a00e93",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8a79c57e-ea69-48c6-8fd0-69d11ed50f6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7bafcde-c044-4c1c-88b2-1526692811df",
        "cursor": {
          "ref": "9ab95a35-3ce4-4518-86fb-38be2b8bf7f2",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "9f005b16-aa0a-4686-a143-9971d67c7033"
        },
        "item": {
          "id": "f7bafcde-c044-4c1c-88b2-1526692811df",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a69d5342-3459-4e7d-881e-94df60dcaf19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ece10cc-be97-452b-bb7f-f0f5c94abed6",
        "cursor": {
          "ref": "c34c3423-26a2-44e7-b159-ced79f0e9ee1",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d5f2e102-72db-4338-8278-4a34e624bfc6"
        },
        "item": {
          "id": "7ece10cc-be97-452b-bb7f-f0f5c94abed6",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "4b6c4ac4-2f16-46b4-833b-fb0eefc7584c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e42112-8e3d-4514-b48a-80f8ae8339bb",
        "cursor": {
          "ref": "2d81d8ae-803f-4bc6-ac10-e467eab5eb13",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "23461c63-b7c5-4164-ae01-96b79bf3d3d6"
        },
        "item": {
          "id": "47e42112-8e3d-4514-b48a-80f8ae8339bb",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3d48e11e-e83d-49df-b472-0f2d02689511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "820405e0-9ab8-4c3b-8e57-37a3862ffecd",
        "cursor": {
          "ref": "9ff46f01-40d9-4ea6-aca2-7242307ff951",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a05e0a44-8ebb-412a-b245-23fc2eb37ab3"
        },
        "item": {
          "id": "820405e0-9ab8-4c3b-8e57-37a3862ffecd",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0bbbb7a8-760b-494b-9e97-d04456b118d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d5b19b8-a6b2-466d-98cb-a072248b4f06",
        "cursor": {
          "ref": "fde9e31c-e120-442c-b415-4d9577912630",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "2a9bbb0f-ae51-4352-b358-f0fbdbe1ef3f"
        },
        "item": {
          "id": "3d5b19b8-a6b2-466d-98cb-a072248b4f06",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "ae09f243-d946-4f1b-a3c3-c736e307de8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd8a08ba-7e2c-4fa7-9f67-4a471d9f58d3",
        "cursor": {
          "ref": "bb232b9a-e73c-49cd-8fd4-206e89fbff32",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "fc68c5be-72c0-409b-a5cf-2e9a046b5547"
        },
        "item": {
          "id": "cd8a08ba-7e2c-4fa7-9f67-4a471d9f58d3",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "f2de6c74-2efb-47dc-99ac-61225649fd2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a82bc99b-7d72-4664-8d72-d24112c61b17",
        "cursor": {
          "ref": "73921923-3afd-4f18-bf16-45688477a5e3",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "949b5a96-af14-43a5-95a4-67a524880657"
        },
        "item": {
          "id": "a82bc99b-7d72-4664-8d72-d24112c61b17",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "9cacc2ad-f42d-42e1-a6ff-6e4fe1176228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c70cf25-bbc3-4171-ac4c-5d1f70e08888",
        "cursor": {
          "ref": "dba05536-96a3-4e21-b403-11444d627b8c",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "569d68a6-9965-4af1-8e4d-3a7aa821c27c"
        },
        "item": {
          "id": "8c70cf25-bbc3-4171-ac4c-5d1f70e08888",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "f1b90bd0-053f-449f-9131-d7c8d224f68b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6751907f-fd03-4977-9528-0e756f874bb7",
        "cursor": {
          "ref": "81eb8e98-e68c-4ca5-94f5-cf059005a1b3",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "aace760d-bcab-47b3-800c-1fa021b6dcaf"
        },
        "item": {
          "id": "6751907f-fd03-4977-9528-0e756f874bb7",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "d19d8de1-1b17-4886-8ecf-40da5d7bc4b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eda4a88d-5f8d-4bbd-a34e-ed0e1f4dab07",
        "cursor": {
          "ref": "47a384dd-23fd-42c0-bf33-de6d2c5fb694",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "9ba811d6-363b-4156-9c70-4e9f6342bfa4"
        },
        "item": {
          "id": "eda4a88d-5f8d-4bbd-a34e-ed0e1f4dab07",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "f7dc441d-afe3-4d9d-9b7a-3fd23908c232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fd414c4-a01c-4585-97a7-177525738bdc",
        "cursor": {
          "ref": "5c735477-6d03-4d25-ad38-41fb691e3459",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "e4a7da01-dfad-4432-aac2-b8a35aff5c35"
        },
        "item": {
          "id": "4fd414c4-a01c-4585-97a7-177525738bdc",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8cbdba48-d946-4f9e-9c22-e317ca1ecb99",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2af2229-0b69-4f4a-a486-ad30ff632842",
        "cursor": {
          "ref": "1f3fb84b-0835-4a9f-b99b-6da373792d5f",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "1b751080-8aa4-467d-ab16-d147a73f1195"
        },
        "item": {
          "id": "f2af2229-0b69-4f4a-a486-ad30ff632842",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a5facdd1-f722-40f2-8b7b-059c89fd311d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47dfbdc0-3ed1-4ace-a8f8-33e309aa37f3",
        "cursor": {
          "ref": "01800eeb-d9a1-4dd2-b5ed-03495abda313",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "1c73251a-3999-40eb-9bd9-33b814f1e9de"
        },
        "item": {
          "id": "47dfbdc0-3ed1-4ace-a8f8-33e309aa37f3",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "bb44747c-5579-42e3-b973-066326b4a7d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf8135e3-e341-4de1-a481-4d94f3e36ecd",
        "cursor": {
          "ref": "ef9e8d3f-8615-4158-8dde-49a65884b824",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "71c890fd-bda8-4e00-85c0-b80d661b64c9"
        },
        "item": {
          "id": "bf8135e3-e341-4de1-a481-4d94f3e36ecd",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ff53e32a-c527-4c4c-a859-e16ffa693615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "793b77ce-b11a-4d67-b11b-5259cec8fa3f",
        "cursor": {
          "ref": "bd4001fb-c517-4bfd-b1ec-6b8c2834cf99",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "a34b60d8-ff46-4d1f-8863-9a4b725796e0"
        },
        "item": {
          "id": "793b77ce-b11a-4d67-b11b-5259cec8fa3f",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "84f86a5e-82ac-482a-a3e8-6fa7f6e08004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bb1fafb-47c1-4ecc-8126-b66c2765903e",
        "cursor": {
          "ref": "866216b6-95a8-4c67-8e8e-ab6e7fb649ef",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "2a1c5619-915e-4647-96af-214518d492dc"
        },
        "item": {
          "id": "5bb1fafb-47c1-4ecc-8126-b66c2765903e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "9ab3a9e4-0a79-4e1a-a563-75491007d22e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8907009-16d0-4f74-bfc4-4b811c7a7e6d",
        "cursor": {
          "ref": "b3333df3-e10e-422e-be29-e312b6f666a1",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "f790057b-905f-400e-a834-af393249d9b9"
        },
        "item": {
          "id": "f8907009-16d0-4f74-bfc4-4b811c7a7e6d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "96a04dc8-b63c-4ba2-9b8e-3da6021849a6",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "eb13809c-1913-403d-8931-ebcb7b2d4394",
        "cursor": {
          "ref": "bed73c5a-5150-4d8b-84ff-e92d9f472117",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "00568ece-6fa5-489c-9cf2-29b9202d0326"
        },
        "item": {
          "id": "eb13809c-1913-403d-8931-ebcb7b2d4394",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "512b753a-1227-405c-8d96-7ab7ce543894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84f720bd-7362-4da4-89ac-57243ae02965",
        "cursor": {
          "ref": "ef5f429f-09cc-4a77-88da-8946e2f16ae2",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e6f4121c-f014-4129-8346-18b83bf5a6b2"
        },
        "item": {
          "id": "84f720bd-7362-4da4-89ac-57243ae02965",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "856dcc6d-4947-4148-8a71-e1071e0bbf4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a93c9c15-1ea2-4e75-83ce-1ef8af8059ec",
        "cursor": {
          "ref": "1e82eafe-7a0c-4007-91df-1fd0fce26407",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a5f08569-07f0-46ea-9eca-ded060dc2a57"
        },
        "item": {
          "id": "a93c9c15-1ea2-4e75-83ce-1ef8af8059ec",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ec2f1b48-0cd0-4e27-8b3b-a5dd31a6edcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11864a14-113e-4580-b858-27ce82c396c5",
        "cursor": {
          "ref": "bb153fed-5ef9-4b0a-aec4-3d8330470aa3",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "1175d675-8faa-407d-81e6-f678f25788fe"
        },
        "item": {
          "id": "11864a14-113e-4580-b858-27ce82c396c5",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "8c6796ad-c055-4a3a-af6b-6f7160b23f56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "269f907b-fcd2-47a9-bfa8-bba0e49ed41a",
        "cursor": {
          "ref": "4490b581-46ae-40f5-9bbd-daa770eb4700",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "b60eab99-8eaf-4eae-bd7f-904ec8285826"
        },
        "item": {
          "id": "269f907b-fcd2-47a9-bfa8-bba0e49ed41a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "5a470812-332c-4c78-9c84-87dda9dab557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f0aa60-67fa-4572-bdf8-2fdf1564bee7",
        "cursor": {
          "ref": "c94aa5f8-c2c9-47dc-ba05-ffae3e309b62",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "05c2ae38-a886-429a-8e4b-d16372667bd3"
        },
        "item": {
          "id": "73f0aa60-67fa-4572-bdf8-2fdf1564bee7",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f20eafa8-85d9-41f4-b37b-d64d6909abb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "382242f7-4ac2-4876-8da7-2bfdaa62a33f",
        "cursor": {
          "ref": "b908c45f-ca9c-4c29-acbf-e7c0221e0c5d",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "3b0d296f-0e4d-40b4-92a0-d664673467d2"
        },
        "item": {
          "id": "382242f7-4ac2-4876-8da7-2bfdaa62a33f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "4ccbd6e2-9867-4418-975d-d6076e62e11d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8f367fd-329f-4fda-b6be-b8d3ac3138bc",
        "cursor": {
          "ref": "4d909b36-57fc-4d71-b200-7e3cfa139da2",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "9307b6b8-d5bc-4401-ad08-fe74f798375f"
        },
        "item": {
          "id": "f8f367fd-329f-4fda-b6be-b8d3ac3138bc",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "59f28f92-81f6-49ca-8421-42b4aefea833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78cff02e-7c29-4218-8172-df961a022932",
        "cursor": {
          "ref": "0a639139-d8f3-413b-8d68-4dd33d61883d",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "268702d7-97e1-48c3-ae54-210a5140765a"
        },
        "item": {
          "id": "78cff02e-7c29-4218-8172-df961a022932",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "f97f4525-613a-4356-92c4-a328bef7e7f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdaa42c1-67c8-467b-83d2-14d9c0299740",
        "cursor": {
          "ref": "13b1dfe5-91b7-42d5-9863-19f7f242edcb",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "df685986-5cca-4323-89cb-99d34cd2f521"
        },
        "item": {
          "id": "bdaa42c1-67c8-467b-83d2-14d9c0299740",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "190875fd-5715-44bf-8804-d9c8d78da4b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d8f593f-7f7f-4175-9821-138bb03d955d",
        "cursor": {
          "ref": "f205499c-439f-4a3c-bf63-754ec8a88a55",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4b7f13a4-301a-4aed-abfa-65e6b2eb3190"
        },
        "item": {
          "id": "9d8f593f-7f7f-4175-9821-138bb03d955d",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "56d47e6e-5370-4e92-9012-5a106b70b187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "397a7007-25e8-4af0-9fb4-516eb7ce7517",
        "cursor": {
          "ref": "77b8bf84-d49d-423d-b669-e3fb152103ce",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "4906781a-aa65-4198-b313-400ae23dea76"
        },
        "item": {
          "id": "397a7007-25e8-4af0-9fb4-516eb7ce7517",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "90e82247-2230-4dbc-9432-ea69d17a9853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b15145df-1184-47fa-8036-191c0594f8b3",
        "cursor": {
          "ref": "c84674d1-8425-4399-b7b9-671b3fcf7e07",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "56423a01-bd98-4d53-a8a3-daf1b6b14ca8"
        },
        "item": {
          "id": "b15145df-1184-47fa-8036-191c0594f8b3",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "46c52d23-49f9-47ed-bdfd-25d4466c1a6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c44513-0e02-47f5-8e17-86186b939abf",
        "cursor": {
          "ref": "2797c5fe-8346-486b-8bd9-c5371e517053",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "bfc6a68b-3061-4405-b99f-02951e1b8299"
        },
        "item": {
          "id": "27c44513-0e02-47f5-8e17-86186b939abf",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "1cee2810-d7c3-4d33-ab13-6777ab698aa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0937b92e-2c31-4fda-be1c-dd768f889dd5",
        "cursor": {
          "ref": "1e3e2999-3382-4dce-81b1-2afcdf4803e6",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e4306e5e-5636-4a46-9589-c23026f2d57a"
        },
        "item": {
          "id": "0937b92e-2c31-4fda-be1c-dd768f889dd5",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "419f2d30-f16d-4f99-9d23-0212bb8c1b6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dae7d70-653d-49ed-b2c8-44454218d0b5",
        "cursor": {
          "ref": "39b30419-1954-483a-8d32-04025ea3fed0",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a4e5c9b0-baf1-4298-a5ef-f5bd98311200"
        },
        "item": {
          "id": "2dae7d70-653d-49ed-b2c8-44454218d0b5",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "b952ce95-18b2-4ac2-b727-0cae46130d2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef6c82f6-03c0-4e2c-9728-4e8f6782454e",
        "cursor": {
          "ref": "b6ea7277-edde-4ad1-bff9-5045a617e7f0",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d76cb4ca-40c1-41bd-ab44-21998de55017"
        },
        "item": {
          "id": "ef6c82f6-03c0-4e2c-9728-4e8f6782454e",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a14f55e4-c63b-4d61-9be5-8b861181f046",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9b95f77-9879-45d8-a798-f369b7186361",
        "cursor": {
          "ref": "fc8197cb-d47f-4340-b660-4182dc5a33e2",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ccfdb684-bc40-46a0-8d58-6c31995be416"
        },
        "item": {
          "id": "a9b95f77-9879-45d8-a798-f369b7186361",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "0b4a4158-8008-41ee-b2d8-94feddf84001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "267fa8b3-0383-49c8-a7fc-e8ae24b79b25",
        "cursor": {
          "ref": "f9734c31-fe5d-4fe3-83c8-c5c90a42512e",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "1bdc860a-51c0-4c67-ae0d-d1763e27074d"
        },
        "item": {
          "id": "267fa8b3-0383-49c8-a7fc-e8ae24b79b25",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f3819e48-50d5-4613-8fbd-f7b4f34c0911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6426097e-e2ea-4e01-ba1b-72e1ea832a13",
        "cursor": {
          "ref": "b14427f2-8284-419b-a3f8-377488c24b8a",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "15a41b45-4d32-4d25-b507-1f35639f7ad5"
        },
        "item": {
          "id": "6426097e-e2ea-4e01-ba1b-72e1ea832a13",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "86b3b03c-ba69-4ab7-8739-c47b2d9062ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c0c411-bb5a-42b4-bb02-266cd6da0656",
        "cursor": {
          "ref": "0001c2fc-ef19-4163-816a-13f7bbe14acc",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "56bbc112-f8f8-46af-97fc-53b19cf587bc"
        },
        "item": {
          "id": "37c0c411-bb5a-42b4-bb02-266cd6da0656",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b497bee7-372c-4416-880b-8ff6f33b2f1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "714b9bae-80b4-470c-a39f-76cb465bb7a5",
        "cursor": {
          "ref": "e3ce00e0-58a7-4030-ae13-df1ab7792395",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "2eb37383-2b05-4f03-b963-f8ee4abc4583"
        },
        "item": {
          "id": "714b9bae-80b4-470c-a39f-76cb465bb7a5",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f29723e6-a317-4362-900d-3366196e65a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c033676f-7790-4581-9725-1d7e00d2fa80",
        "cursor": {
          "ref": "6349b443-b6ef-4d9a-bd7f-6ae187ca449e",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a8839e73-f667-4401-8222-7b01253b176e"
        },
        "item": {
          "id": "c033676f-7790-4581-9725-1d7e00d2fa80",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f940d52a-8915-4f6d-8dff-ef99f1b5969e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd90bcee-3f14-44e9-bd3d-e98987c9e5ce",
        "cursor": {
          "ref": "b5816da7-6484-4305-8495-5c5540737f2e",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "258e1cea-9601-43ca-8bc0-95e6857570be"
        },
        "item": {
          "id": "bd90bcee-3f14-44e9-bd3d-e98987c9e5ce",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "4e0f6228-4cd6-467d-82d8-c3993780fed2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8169c760-ac56-49a3-b173-369127730f0e",
        "cursor": {
          "ref": "31d307fe-c69e-4356-9155-8641593563e4",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "82833b23-9aac-4bcc-8dd6-5d0c6d3b7ac1"
        },
        "item": {
          "id": "8169c760-ac56-49a3-b173-369127730f0e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e36c60ae-d60e-487b-b973-75c1c14e9163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac828c31-892b-4a7b-8ff2-c957220eb099",
        "cursor": {
          "ref": "864f37c5-e4e4-4796-9fc3-15f569b3d39f",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "fdebd321-c82c-4c6b-8815-27a650b35873"
        },
        "item": {
          "id": "ac828c31-892b-4a7b-8ff2-c957220eb099",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "899d777c-bd4a-4745-accd-a026ba6cf1ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74418c17-90ac-42b4-bd0e-652f826cdec0",
        "cursor": {
          "ref": "4359d2d3-c447-4ffd-b3ef-0c0dba4a4fbf",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "fd20a2ed-9133-4cb1-b2ae-ebc2ba583634"
        },
        "item": {
          "id": "74418c17-90ac-42b4-bd0e-652f826cdec0",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "de0f928e-54be-4560-bc00-a87f278074c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b98c3846-ab7d-415f-af05-af74b06ee6b5",
        "cursor": {
          "ref": "a37d9be3-e7da-4b92-840b-2de083934911",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "57b8516e-ef91-4acf-8bb0-cb2e9be7b376"
        },
        "item": {
          "id": "b98c3846-ab7d-415f-af05-af74b06ee6b5",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "cff6f482-d90b-40b1-bd41-c5fded33b0bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5cafd4c-e266-4766-a628-43e248b41a70",
        "cursor": {
          "ref": "8eb062dd-90a5-4b67-820d-8dc4ac6a9e51",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "517b958a-3b7f-4d8e-b85b-22566ec74c78"
        },
        "item": {
          "id": "a5cafd4c-e266-4766-a628-43e248b41a70",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "341612d8-ed20-4b62-9a95-9d0f5c82d999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fe213ee-06b5-4b0d-840e-a71cde084f17",
        "cursor": {
          "ref": "c7fc198f-0ba2-4928-b737-358663a6fe3b",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "cf3b37e3-eb15-40c0-9b0e-22b7476041df"
        },
        "item": {
          "id": "7fe213ee-06b5-4b0d-840e-a71cde084f17",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "e29e4d5a-adfd-4b33-8d86-b21f22f74227",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "c2e9d23e-ef1c-401f-b50c-7549b7a8383d",
        "cursor": {
          "ref": "60874a35-adc0-4a3f-8739-d29c43c2fd56",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "0bdce088-210e-4183-9a13-1950bd614f8b"
        },
        "item": {
          "id": "c2e9d23e-ef1c-401f-b50c-7549b7a8383d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "5fd843e3-65a5-4ef4-b228-614cea35dadf",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "d7292317-26c2-4097-9eca-9613567655c5",
        "cursor": {
          "ref": "1489c8b3-339d-4c8b-adeb-23249ac84890",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "592162a4-ff94-4e29-8bfd-3f8406c30531"
        },
        "item": {
          "id": "d7292317-26c2-4097-9eca-9613567655c5",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "9d49d493-7676-4c4f-89fb-304c12b2c1a3",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "3776129d-a754-4658-ac04-bd4f4b59ab0b",
        "cursor": {
          "ref": "e3bdb5db-9acf-4760-8899-843f3e253236",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c5350f33-de89-43b1-a210-b23da32cdf48"
        },
        "item": {
          "id": "3776129d-a754-4658-ac04-bd4f4b59ab0b",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "7de3fdbc-1f68-4813-9325-a4303eeb683f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8abd09d1-5af4-4c28-8721-e23573d884ec",
        "cursor": {
          "ref": "afd20f71-ac8f-4402-99ca-029eff361f47",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "18ae22a2-320e-42c4-870e-4b19b6161176"
        },
        "item": {
          "id": "8abd09d1-5af4-4c28-8721-e23573d884ec",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "c1eb0080-9ecf-49b7-a546-a5a86a43429b",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "34909ced-e203-4879-b927-4116886fdd41",
        "cursor": {
          "ref": "78cdde8b-409e-46cd-8fc8-c68053c91415",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "35a76db1-2264-4fc2-9d4b-99f956dd3b71"
        },
        "item": {
          "id": "34909ced-e203-4879-b927-4116886fdd41",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "caf3267a-7fb0-47e0-abad-098964360510",
          "status": "OK",
          "code": 200,
          "responseTime": 105,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "bc0c641f-b314-4ae0-bcf3-90a829cc0ffe",
        "cursor": {
          "ref": "0a7a558a-e072-450d-8e9a-4755e59997c3",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "1c244eb6-aebc-4d88-bad8-bea7eb9fa945"
        },
        "item": {
          "id": "bc0c641f-b314-4ae0-bcf3-90a829cc0ffe",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "f6043b19-a463-428b-a353-6be56a69b090",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "908dd12c-0b65-4539-96a8-a96dbba003e7",
        "cursor": {
          "ref": "9f0de466-0fb0-417b-84c3-856803270a19",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "04727fec-d890-422b-8b01-5c45d947f12a"
        },
        "item": {
          "id": "908dd12c-0b65-4539-96a8-a96dbba003e7",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d8971dee-a4bb-4320-852b-85030fefd8c1",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "d16821d4-1d51-498d-8ff9-0f0d3e1ecf0e",
        "cursor": {
          "ref": "485d1e78-4fc8-44c8-90b7-f00356800474",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "cccc070a-9852-44bd-8fe1-2b3b36e404ac"
        },
        "item": {
          "id": "d16821d4-1d51-498d-8ff9-0f0d3e1ecf0e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "82d59f65-4d20-4f30-b121-147218f4fab1",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "42289132-37a1-4edb-9e05-a21cc62677a1",
        "cursor": {
          "ref": "ad69bcd9-9aea-40e9-a743-293e48299452",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "f4cea7c9-0b0e-46f8-97b1-fadaf57e0d81"
        },
        "item": {
          "id": "42289132-37a1-4edb-9e05-a21cc62677a1",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "8e5b6679-2946-43d7-874c-cb7d74404ec5",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "b532f0eb-7f36-44fa-9112-2624d800cb79",
        "cursor": {
          "ref": "b967a726-6f2a-4863-94bd-2851f707ce5f",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "b13592d2-21e3-4696-9ecc-134c5230f671"
        },
        "item": {
          "id": "b532f0eb-7f36-44fa-9112-2624d800cb79",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "78078b95-070f-4fdb-97aa-a8229402826c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d65300a-5407-4f02-9e02-163a6b3b06ec",
        "cursor": {
          "ref": "201ea490-b76d-4184-b920-fe078f78e36c",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "aad87fc5-2a9e-4a2a-82ed-d1e89f2e47b0"
        },
        "item": {
          "id": "6d65300a-5407-4f02-9e02-163a6b3b06ec",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "5005155b-692e-4958-a887-b4e6940a0223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60a87cee-4cc5-4d00-99aa-5fcb8b859790",
        "cursor": {
          "ref": "dbed7442-16e5-4183-b52f-acebe4479e95",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "297dcfa6-8bed-49bd-a46c-0dc86781e949"
        },
        "item": {
          "id": "60a87cee-4cc5-4d00-99aa-5fcb8b859790",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "3da2c94d-f2ca-418d-a3c9-8e8d912f6089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ffead10-f156-4e35-a265-9d0127b3e57b",
        "cursor": {
          "ref": "65f9d24d-bc41-464a-bfd2-98f74715bc6f",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "65ed72c9-306b-46e1-8b50-1f9efc78315b"
        },
        "item": {
          "id": "9ffead10-f156-4e35-a265-9d0127b3e57b",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f3ced542-e130-4143-9b17-c1b85dff37ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3a6efad-ea3d-49c5-b6ee-676f9141c335",
        "cursor": {
          "ref": "bba3d103-7d56-41cf-bc8c-e87ab8518492",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "1cf981d7-d345-4aa8-97e4-e618570f9c3a"
        },
        "item": {
          "id": "a3a6efad-ea3d-49c5-b6ee-676f9141c335",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "0a8888f6-89b3-4b95-9598-386355d9e91d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebd306d3-55ba-4bef-bbc6-c81cf85e4fc7",
        "cursor": {
          "ref": "5d020c6e-df75-4123-8bd3-863473e078cf",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "6397ba3a-ec9a-46e0-be86-e2c474c6bfd7"
        },
        "item": {
          "id": "ebd306d3-55ba-4bef-bbc6-c81cf85e4fc7",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "3cfd8209-2ff0-4b28-a7b2-7316f8d29718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e494e236-9ef7-4a91-ad90-399a98491af5",
        "cursor": {
          "ref": "c12b981c-1f24-4681-b8d5-7b5fbc5f974b",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "ca8f9b2d-978a-42f0-9e44-05bf11bce356"
        },
        "item": {
          "id": "e494e236-9ef7-4a91-ad90-399a98491af5",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "9a239ca6-ffd4-4539-84b1-8fe9b2cb0358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6ee23e6-4301-459d-b738-14a5e3e65283",
        "cursor": {
          "ref": "6a6dc985-9225-4d4a-865a-c20a8939cdd9",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ea9d4d4e-8458-4f8e-9daf-30f4af20c877"
        },
        "item": {
          "id": "e6ee23e6-4301-459d-b738-14a5e3e65283",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "865d2c95-9b8e-4748-9f5b-0cb586407af6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ca5c2ff-e779-42db-be91-5375b6208ac0",
        "cursor": {
          "ref": "65af1371-6b88-4c6f-aab0-832ea2620f00",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "28fd2250-eb10-43b4-8722-8cb71cb224f4"
        },
        "item": {
          "id": "0ca5c2ff-e779-42db-be91-5375b6208ac0",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ef113868-bec9-4d2c-9206-923a06abc253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "394e99fa-e94b-48f3-86a2-4ef8c5afcc3b",
        "cursor": {
          "ref": "41626c71-0ee6-461e-95ee-87699a238bb2",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "36ce822e-09e1-472e-912e-8ab5d59c1da9"
        },
        "item": {
          "id": "394e99fa-e94b-48f3-86a2-4ef8c5afcc3b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "b481eedc-4bcf-43d5-b020-4b51bffa2acf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c9b72d6-fa5f-48dc-9d4d-3c79704ee293",
        "cursor": {
          "ref": "3dbef609-e788-482a-aab5-8a4ac56f6dc0",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f946d73a-b871-4808-ace8-3b760f2ad2e7"
        },
        "item": {
          "id": "8c9b72d6-fa5f-48dc-9d4d-3c79704ee293",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "66fd26e2-00e2-49ec-aaec-23511fc35e98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13e19403-b9cd-480c-8c9c-64eefe026695",
        "cursor": {
          "ref": "943c9539-206b-4834-a7f8-94f2a1cfb682",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f16c7f3a-b5ac-44ab-87c1-daa20bcdfed2"
        },
        "item": {
          "id": "13e19403-b9cd-480c-8c9c-64eefe026695",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "5a93ecb1-012b-41f1-8f57-84039d5a58df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eddaf3a-a545-4e94-9bac-91a6f7a5b429",
        "cursor": {
          "ref": "9db7080a-b746-4e08-b993-00c604e425a7",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "1e83535a-c320-48f6-b0b7-b5a690cc80b0"
        },
        "item": {
          "id": "5eddaf3a-a545-4e94-9bac-91a6f7a5b429",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "174335e3-be3a-48ba-ae27-cedb13c32d23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b643531-6c7a-4ad2-a860-4a21b60e8563",
        "cursor": {
          "ref": "97da8129-8306-4cdf-87c9-7e99c0e43685",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "edcbc55d-e93c-41dc-b539-eca238836367"
        },
        "item": {
          "id": "5b643531-6c7a-4ad2-a860-4a21b60e8563",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9f7953f8-e5f4-4d08-bd7b-18f0748c4806",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "fa2caf9e-f238-4c32-9a5e-804821bfa033",
        "cursor": {
          "ref": "cf5f7e48-31f0-4ad9-a7d9-d408073e74c0",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "b5bd5c7b-b3d7-4c9d-a2a8-53202d8c2706"
        },
        "item": {
          "id": "fa2caf9e-f238-4c32-9a5e-804821bfa033",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a46949f5-61dc-4d3e-b3f1-ccfdc6535e13",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "04bb49af-a74d-47fe-8d68-ba1785539eea",
        "cursor": {
          "ref": "49ccf8e2-8aed-4b6f-bd71-866d72d68cad",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6ad9f8c7-0377-4f44-9c3a-f1627fd4b074"
        },
        "item": {
          "id": "04bb49af-a74d-47fe-8d68-ba1785539eea",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "9955a265-8657-45db-85cb-b9e8d423f65e",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "4a1729fe-3bf1-43d9-8969-198b13636ad6",
        "cursor": {
          "ref": "caa35988-b998-4a9f-8408-884395787ce4",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "53c9cb9b-abfc-4443-bef9-4e99c6286515"
        },
        "item": {
          "id": "4a1729fe-3bf1-43d9-8969-198b13636ad6",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b1970be4-9fed-468b-8487-bcca91578746",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "e04fd042-eda8-4463-997e-52bed8493d79",
        "cursor": {
          "ref": "dd79ef2f-a7be-476e-b788-fa593b01f962",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "81d9e497-eb89-4470-a8b3-ac2f37cffe3d"
        },
        "item": {
          "id": "e04fd042-eda8-4463-997e-52bed8493d79",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "4615d2db-5c3a-4fe9-904e-6801d0bfe70c",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "50b60afa-dd28-4678-bfdc-1ce2b18e83b4",
        "cursor": {
          "ref": "75c69199-93d5-4841-ac30-cb369d776d04",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "4bf40140-5be6-4dc9-ba54-bc813709e8ad"
        },
        "item": {
          "id": "50b60afa-dd28-4678-bfdc-1ce2b18e83b4",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e8909dfb-f573-4370-98fa-c4d2c1477117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d0b3957-2957-4f21-af54-4942a2512b77",
        "cursor": {
          "ref": "67fc6f28-c870-4ece-baaa-68c747da6e7c",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a74aa050-8f6d-4e01-b6f3-2e0dbb667162"
        },
        "item": {
          "id": "4d0b3957-2957-4f21-af54-4942a2512b77",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "92f7a884-96d5-48ae-af72-5183c4c98c37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6d69df8-4388-4dfe-9471-b220c6a888ba",
        "cursor": {
          "ref": "48f37f43-0256-43ed-9677-b694111d7184",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "2cc93782-ecbb-450d-82e5-b3ed494d6a02"
        },
        "item": {
          "id": "a6d69df8-4388-4dfe-9471-b220c6a888ba",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "6e7824c4-3f42-4b13-bb1f-f8da4cf2e2dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11d6b8e7-fea4-4144-be75-23a1cde9b3b4",
        "cursor": {
          "ref": "0adcbd25-380d-4918-a28a-6540a528cabf",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "a266b8db-e66d-44e7-bbb6-3b8d816e1071"
        },
        "item": {
          "id": "11d6b8e7-fea4-4144-be75-23a1cde9b3b4",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "9b69b534-4874-47f0-b310-d815f3086eda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e2bb259-b123-4c3d-b6a5-311097aebfc7",
        "cursor": {
          "ref": "9aec81af-ba7c-4a96-b154-95a9b9f6f218",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "484a9794-91a6-4ae6-b52f-cbcc64a0f9f4"
        },
        "item": {
          "id": "3e2bb259-b123-4c3d-b6a5-311097aebfc7",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "1c4863f4-25b9-4179-b941-e9c990266f01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "907aa7d6-6e8a-4da5-afd6-48e0272da7bc",
        "cursor": {
          "ref": "822fffef-bc6f-415a-99c5-615245fee456",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "7dce7caa-8d51-4d89-89c0-e2f08b65e776"
        },
        "item": {
          "id": "907aa7d6-6e8a-4da5-afd6-48e0272da7bc",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a1cfe0bc-3e13-4cda-bbb7-91463c07e85f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f7bc6d0-6418-4a03-921e-93bfc3030d33",
        "cursor": {
          "ref": "62655717-8c3d-459b-979a-75dbd0af899e",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "761ce997-13af-448a-891d-2c63fbd22325"
        },
        "item": {
          "id": "1f7bc6d0-6418-4a03-921e-93bfc3030d33",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "dffd91e9-d66c-4a98-b1c1-59290d50be3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dc4724d-cbb2-4982-8d6d-cf722662b0d5",
        "cursor": {
          "ref": "1117fc74-a6db-4d77-a516-52c84ca79978",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "833ab1bb-ad60-4ace-9e81-6675f8df004d"
        },
        "item": {
          "id": "5dc4724d-cbb2-4982-8d6d-cf722662b0d5",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "89e2dae8-40a6-42dc-81e5-619ef7d3bcd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96e2a0f1-bbe3-4a4f-af5b-a6ad3580a5b8",
        "cursor": {
          "ref": "0625b570-46f8-48e3-a2f9-f913b105de34",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "90551a31-43a7-4714-aedc-55660e98b071"
        },
        "item": {
          "id": "96e2a0f1-bbe3-4a4f-af5b-a6ad3580a5b8",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "dbde858a-dd5c-408f-9511-0afaca8001a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab7dba1-4714-4a3c-ad80-8c6a8c17284b",
        "cursor": {
          "ref": "b37efb96-4245-484d-a66a-f272da5d88ea",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "9c2022a9-664f-40bd-aaef-f869ad98f77b"
        },
        "item": {
          "id": "dab7dba1-4714-4a3c-ad80-8c6a8c17284b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "64ad05db-7a85-413e-9b31-13777d315940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac17e2a-0fa6-4d3b-bc51-00ec5848e192",
        "cursor": {
          "ref": "16c2aefb-242f-444a-ad34-4e08de8068fb",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "1f346a01-ca32-442c-96f7-a9a28c9257ed"
        },
        "item": {
          "id": "cac17e2a-0fa6-4d3b-bc51-00ec5848e192",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "df5ffd51-aec3-45e8-8111-cbb58b92a02c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f41106c5-4f57-4184-b4bd-d25baf329d03",
        "cursor": {
          "ref": "5d390803-c3c7-4f11-8d40-1248b6f9ac07",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "9c0cc83f-3043-41cb-9751-a898fa4b0838"
        },
        "item": {
          "id": "f41106c5-4f57-4184-b4bd-d25baf329d03",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "21ef8be3-0c7f-49aa-b7fd-ba15eaeb8b9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86d44d74-f3d8-4838-9268-de7b3e2062b9",
        "cursor": {
          "ref": "3eb1aa18-bde5-415c-91bb-b97d5216ab18",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "4b848189-9da2-41b2-9baa-38d75ad52f79"
        },
        "item": {
          "id": "86d44d74-f3d8-4838-9268-de7b3e2062b9",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "6898b756-5354-4061-be2a-1cb387c54bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64766484-8de5-482e-bbac-ef771678caa6",
        "cursor": {
          "ref": "63391005-948c-41f0-86b6-a3d5bd6b79e6",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "8f20b460-c0aa-4e43-8ed7-5ec63262343e"
        },
        "item": {
          "id": "64766484-8de5-482e-bbac-ef771678caa6",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a4b59dae-9370-4b43-aad0-38ebd3d72403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65f2a61a-15fe-47c5-9132-c5ff16d8d4d4",
        "cursor": {
          "ref": "3459d3f7-80d6-4aca-966b-7a31c14b5925",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "36a2f2b3-db08-479e-8d9a-b8cfccf0e253"
        },
        "item": {
          "id": "65f2a61a-15fe-47c5-9132-c5ff16d8d4d4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "cc831979-a572-425f-952f-8a3efdf3b130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d93057-f957-43c0-9e9f-68597e38c28f",
        "cursor": {
          "ref": "f5aefc3c-0a7e-4e40-b04a-ef7c4554149a",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3d104811-479d-4b19-a5d4-f1215a4c50c8"
        },
        "item": {
          "id": "47d93057-f957-43c0-9e9f-68597e38c28f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "afc93eec-e223-4f9d-909d-1d449a7c255d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e019fa59-66e5-4d50-ac81-fdc7623e981b",
        "cursor": {
          "ref": "c4f98b0f-c2c3-4c49-9b82-6b2c6f8c341d",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f20c2ae1-a747-44f9-89c3-6b81abba34c8"
        },
        "item": {
          "id": "e019fa59-66e5-4d50-ac81-fdc7623e981b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "a2fa905c-dc98-4049-b966-0e5f975b24ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dd88225-bbae-4284-bba2-021fe754aebd",
        "cursor": {
          "ref": "b418ef95-a342-41dc-84e6-d4392621c556",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "9dfa0b85-3a8f-4ec2-ac55-f2fc5d17405a"
        },
        "item": {
          "id": "4dd88225-bbae-4284-bba2-021fe754aebd",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a8be838e-cd7a-46a8-829c-6e0c791c8239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "804b5962-a886-4ea1-bf69-74d4b4b9ec18",
        "cursor": {
          "ref": "9dcb7b6f-5324-4282-8d33-1710a132f4fb",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "cc5a49fb-f76d-4813-b967-a3503000bbfb"
        },
        "item": {
          "id": "804b5962-a886-4ea1-bf69-74d4b4b9ec18",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9377daa8-8daf-4a58-95ed-3cf4ebcd3474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fa6fb48-a29e-432e-b053-e07f7f4f9ced",
        "cursor": {
          "ref": "cc2dd952-f54d-4c9d-a72d-4401e8d9766c",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "2adad5b7-397f-4295-9aec-1268052079cb"
        },
        "item": {
          "id": "8fa6fb48-a29e-432e-b053-e07f7f4f9ced",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "acf706b7-a108-4467-a396-05ff75080bb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8128ffb-3fd9-4758-8dd6-18f9d3f5749e",
        "cursor": {
          "ref": "9c979af2-de10-47d8-aa42-a83a2019ab2b",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "40d04d3a-252a-424f-b589-63043ae7c83f"
        },
        "item": {
          "id": "b8128ffb-3fd9-4758-8dd6-18f9d3f5749e",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "672c8a37-2faa-4596-a887-9cc44308b486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b2b8ad7-0ada-42e8-8062-ed35f1a95858",
        "cursor": {
          "ref": "71c11a95-bbda-4dfe-b294-54e37284e291",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "7ed08c13-c2f0-44fc-a63d-6b0967cf2d54"
        },
        "item": {
          "id": "9b2b8ad7-0ada-42e8-8062-ed35f1a95858",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "5156cfdb-a153-453e-a0d7-3f230040568a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6df92f98-9429-48f6-8060-948d18286ca3",
        "cursor": {
          "ref": "7820b669-2e75-4175-80be-2a7dc71da42d",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "751a469f-7f62-4541-929a-b86501d51949"
        },
        "item": {
          "id": "6df92f98-9429-48f6-8060-948d18286ca3",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e54cbcd4-235a-4026-839d-454410f5d052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf7c12de-ec18-432a-abee-db26c5bfd5a1",
        "cursor": {
          "ref": "4f01e35d-ebcf-460f-9113-204670487e9b",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "182f3fd3-1854-4f8e-90b3-ae73010a56c7"
        },
        "item": {
          "id": "cf7c12de-ec18-432a-abee-db26c5bfd5a1",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ecac1770-7d9a-4b5d-9f15-5f3ddd358b75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "322acfc1-e3b1-482a-8fce-0c1f3bdb71d5",
        "cursor": {
          "ref": "84b9f35a-59a1-4fe9-b000-7f5c2033f803",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f50577e5-5d9a-425c-bc68-84666868bf90"
        },
        "item": {
          "id": "322acfc1-e3b1-482a-8fce-0c1f3bdb71d5",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "70705a52-fde5-46a7-ac3f-57ead72fe1f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b399dcec-e740-47dc-9169-c6467a73d97a",
        "cursor": {
          "ref": "b4ee7526-3131-4afa-9d1a-b69b99b2bbff",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "398ad8ee-6ab9-4872-b51f-4b4bf953b0ad"
        },
        "item": {
          "id": "b399dcec-e740-47dc-9169-c6467a73d97a",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6aad14f8-8aec-4890-9226-ba41ee4f4f58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "141d0206-d019-4350-981c-1a8d525872eb",
        "cursor": {
          "ref": "e0beae4b-e94d-4a9a-95c1-afa62ce801f0",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "6e7bc691-90c1-421e-b2da-0c45da71100e"
        },
        "item": {
          "id": "141d0206-d019-4350-981c-1a8d525872eb",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "38f9bd65-1f30-441f-a38c-2ea503f137f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "162760de-765a-4cbb-aa33-aa542f9006fd",
        "cursor": {
          "ref": "f44ec105-abe4-4db4-9f2b-dc6c7d409b2b",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0bf47fc0-2688-482a-8dc6-1d9496dc6111"
        },
        "item": {
          "id": "162760de-765a-4cbb-aa33-aa542f9006fd",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "bf2b5cde-cb9e-47c6-8cd0-a81291dc5a35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd117f4d-6f8e-4596-b316-d1bdfb3d1a0d",
        "cursor": {
          "ref": "b5dcd8fc-a3b9-47c8-9ad8-a476e61ec845",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "6db797b7-1784-4425-b3e9-587e078000b5"
        },
        "item": {
          "id": "fd117f4d-6f8e-4596-b316-d1bdfb3d1a0d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ff24266b-8249-485d-80bb-d23d014aed66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5569f98-bb56-4196-916d-aae152bff847",
        "cursor": {
          "ref": "9590ba9f-e52e-4d67-a980-4d195f1362ad",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a907ebe1-ef72-4b57-b465-3aaf367ea505"
        },
        "item": {
          "id": "d5569f98-bb56-4196-916d-aae152bff847",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "e1a8715f-ee22-4694-9932-27dbb333ad2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d6e55ae-6cf6-4767-9de4-d739276c71d9",
        "cursor": {
          "ref": "8c1c9621-1418-466c-a869-9d41f3a3b3b9",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "8a736d33-ae44-4bef-851a-652dad8ff348"
        },
        "item": {
          "id": "3d6e55ae-6cf6-4767-9de4-d739276c71d9",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e779a13d-b3ec-4b24-82b8-d2b788d180c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c396b50-d19c-4e66-9f41-d4befe4f729e",
        "cursor": {
          "ref": "6249af4e-912a-4c43-b2fb-8798da61fa78",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "48242e18-ede0-4e58-8351-1ef784875047"
        },
        "item": {
          "id": "5c396b50-d19c-4e66-9f41-d4befe4f729e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "296ef264-ce27-4617-8055-2f3c37e1cc5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "206969af-11ce-40fc-8b17-1efaccb0611d",
        "cursor": {
          "ref": "f431ebbf-1f02-4cfd-a957-236767c934dc",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "2406a746-5bc8-4269-a07f-25f35d6f97d7"
        },
        "item": {
          "id": "206969af-11ce-40fc-8b17-1efaccb0611d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "44729a55-7d08-43b8-91ed-9eb5b66cbaa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1fa90a5-8924-4fa6-b2fd-bfd03c5de570",
        "cursor": {
          "ref": "aea1c827-c994-4b94-832c-c0b8df7be33e",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "82d14088-f54b-4d62-bb84-8e44bb72e575"
        },
        "item": {
          "id": "d1fa90a5-8924-4fa6-b2fd-bfd03c5de570",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "34a2c55f-9ac8-4de4-84ee-b442b6318c1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14c29c14-f9c4-4be3-9f7b-8e6f6c5b8ade",
        "cursor": {
          "ref": "d7660086-1a56-47e1-91d8-15b9540a8ca7",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "7cb8793d-0778-4e0f-be7a-2e129b06de52"
        },
        "item": {
          "id": "14c29c14-f9c4-4be3-9f7b-8e6f6c5b8ade",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f5c4fc57-999a-45b9-848a-4fae7ddfaba8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c387031-62a6-4168-bff0-dc2379d9b45d",
        "cursor": {
          "ref": "f8ddd7c9-57fc-4f83-a98d-eecef7d3ff30",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f8a1de32-5955-4781-a3f3-172ed6e45331"
        },
        "item": {
          "id": "5c387031-62a6-4168-bff0-dc2379d9b45d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "8bb1a287-a622-4345-b164-9cb935eaafd0",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "45e9a804-c082-4e15-bd16-109cde7d5d1a",
        "cursor": {
          "ref": "4234527a-f19e-46f8-b359-7f8e31039407",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d576ceca-ec06-4501-a72d-462267f193cc"
        },
        "item": {
          "id": "45e9a804-c082-4e15-bd16-109cde7d5d1a",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b009abd9-2631-468d-9239-94d4e39793be",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "971b41df-b7a1-48c8-a9db-2448bcb70d4b",
        "cursor": {
          "ref": "14b6f79c-cabc-4000-accf-6fb0bd612f52",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "bcfc1f97-dd98-4ea0-900e-a4284fbe637c"
        },
        "item": {
          "id": "971b41df-b7a1-48c8-a9db-2448bcb70d4b",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "bd11cf60-a852-45e1-9c12-aa506c3dcffd",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "20d7fe58-3834-4051-ac8b-0c222e2d717b",
        "cursor": {
          "ref": "3ef5cd2c-3b6b-4652-b769-92874ee921e5",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "61fec679-5751-41bf-9e08-3f2437a2b606"
        },
        "item": {
          "id": "20d7fe58-3834-4051-ac8b-0c222e2d717b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fe77f055-ca93-4dee-a3d1-542849cbf6b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20d7fe58-3834-4051-ac8b-0c222e2d717b",
        "cursor": {
          "ref": "3ef5cd2c-3b6b-4652-b769-92874ee921e5",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "61fec679-5751-41bf-9e08-3f2437a2b606"
        },
        "item": {
          "id": "20d7fe58-3834-4051-ac8b-0c222e2d717b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fe77f055-ca93-4dee-a3d1-542849cbf6b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "739f8f95-4f1d-4373-a5e9-56d35513feeb",
        "cursor": {
          "ref": "f2597801-fe71-40bf-864e-eda5d610a184",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "040cfa1a-5b96-402b-923e-3b89d07a8da2"
        },
        "item": {
          "id": "739f8f95-4f1d-4373-a5e9-56d35513feeb",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "19f211ad-fe94-4961-986f-a9c9d4f4277d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47b7ad4d-1bef-4ddc-aad0-bcde12032590",
        "cursor": {
          "ref": "541e2c85-d672-44dc-be91-7fdabca4eebe",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "d24e9a99-2689-4ee8-8b31-92d8ce0c9d90"
        },
        "item": {
          "id": "47b7ad4d-1bef-4ddc-aad0-bcde12032590",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "346fb344-361c-45f9-b140-b258e87ec54a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}