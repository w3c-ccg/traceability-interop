{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "8479a81a-efc1-4861-9d04-01364c663d6f",
        "name": "Clear Cache",
        "item": [
          {
            "id": "243f8f34-488c-440a-b91b-8bcb29377d88",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "25d2f39d-c1f5-4a45-94da-f32aacf0aacc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "95622d6b-8592-4169-8ea5-220278e32f9e"
                }
              }
            ]
          },
          {
            "id": "ae1eb29f-6f0a-4142-b64a-5af684844d02",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cac666eb-365e-411d-8f50-a739c7dd7550",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9076aabb-c48c-48e7-a976-fa3537fe4cd6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "a14757af-0633-42f0-92d6-a24909cd57e6",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "f22ec2bf-58ec-4581-81cd-7005aebedab3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "76e94f10-fd3f-4fea-93dc-e35ead72f9ea",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4d89bb25-7d02-4520-a7d1-142bb569ccda",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "48ae6d78-b69a-4b81-9891-26c5d16fc6d9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1a7671e7-dddd-4434-b11f-757bb919e278",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c17a045e-d22e-46a4-8fc3-435952359764"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "de551dca-f594-4dfe-99ee-e2a8deac7dca",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "46d79f7d-b5e0-4cbd-a1d6-6de1b5791762"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c98874c8-019d-4abc-95ae-4b0c1feea084",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "5e70b1a3-9f1f-47e5-854a-b0a783219a7d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "06165a59-1c55-4c35-ac1e-735f18d8713a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ec74f8fa-0037-40ca-9e96-e948dae333a5"
            }
          }
        ]
      },
      {
        "id": "76b16b9e-8689-45e4-b5dd-302b6669ef71",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "942882cd-2999-445c-89bf-89649c57bff8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0b08073e-5aba-4953-8c72-4ae15f732290",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8797b325-e161-4640-9ac4-14890b9ad43f",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5c01a9-0b4f-4af4-afcb-5d12159cec97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "927d7ed9-c7f7-4b38-936c-46e74de48942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db10e6f2-373c-428d-a494-bee006d702a0",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad31c9b-8770-456f-b6b0-fb4aab56fd24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f0f3ac28-4c5b-47cf-8670-d9805d03b6ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bcb5358-4db4-463c-b051-4fa23c88bdde",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c76782a-5b43-4068-9feb-22e0bcac6511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d8e9ca55-7f4f-4544-b845-b218c421648b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8850e463-3d0a-4068-92b9-0a5fbb2cb9ee",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "11f3fb58-0d52-4c1c-8a0a-9490b65521d3",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc239a1-abee-495b-a2c6-e1bd87bef23a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "740200b1-6093-4d0f-ab87-044faa47612a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b73514-602d-4545-9912-1d17bde4bff9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7420d60-da0e-42dc-9751-38151395f01b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "fffd134b-bbe7-46ac-aed4-3acac0c9df2f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "07229c8a-cbc6-4eb5-bd97-251320cb0fef",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9cf50171-0745-42dc-8d98-1fcb46286265",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "de61096b-019d-4753-aac5-22c5a920d4f3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "70b1d70b-7944-445f-a92c-70a319e25145",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "d47bbca7-225a-42e4-844b-1d28765febd2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4a254c26-b921-42f5-9491-558fbab73d67",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dfa9f949-7a4a-477c-8d7a-a5b2015a24a7"
            }
          }
        ]
      },
      {
        "id": "97b63d16-d968-4024-966a-975c289b3444",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "12f9fc40-a47f-4e15-9001-afc972cced51",
            "name": "Negative Testing",
            "item": [
              {
                "id": "258e1458-921d-4dc8-ae9f-3591075ff740",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f7407bd9-ec65-475f-83dd-3845e05c4c10",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cda596b-965b-4db8-9f48-2749e0cab5a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d165d3b-7298-4abb-887a-b14cc4c08c44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10d562ba-39fd-495f-b4f5-03d5eca429bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "96d2964f-cdb7-434b-bfc9-d1df25232831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1bdac46-0c53-4df1-87b2-2fffba112890",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc704736-40dc-42bd-9d1c-57da9e6af1cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94d9d04d-a66c-42e3-a5c2-82bd1f405bab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d75806a-f20b-41b8-bbf6-1c579ae1f9ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c53b7042-78b8-46a3-8273-8e573ab071a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01d408d5-9872-4eac-9df4-f1ef341d7840",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae9866b9-844d-4e76-90f5-1eb57579285c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60e65999-4f6e-46cd-a774-73bed1c91f70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a7c21b-3bc8-4dee-b655-74d27349267d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "87e47ee5-289f-4d19-b9ef-b36f3d6f796d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b6bd2b-f7d9-4bce-9278-fbd1557fdf48",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d9510b4-a923-4297-9143-437367f12867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "244bdc26-9985-4fa4-90f5-b338afeb287b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d61ee780-1b09-4651-b9a9-5abc126e817c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "394cb000-389f-4581-83b7-b2b7795910d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b095d08-4b08-4725-8634-4185a3c876a6",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b74f24b-ba02-4af9-95e5-ba25c4c48671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5a59ebf-78ed-401a-93f9-65ef484df6f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24f4a27f-1e50-404d-bea0-5820a38531c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "66a8d8ab-dd91-4a99-8b7c-4a26f1f21bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b944172-7ef7-4d29-94de-26330f073491",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e156c8dc-ee96-4f7c-ad62-9ae0db893a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc88793b-cdb7-4106-a3d0-50f0e9aa229e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bbcd634-143b-4de9-872a-79fc32a1c257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a81104fd-42be-4b72-b325-1d87981d58ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e516fc37-4e19-455c-90bd-50e5dd02e30b",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c337b8a8-3f26-428b-aac7-90bcc424d1a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5908c60-46cd-4119-aaf6-6cffc38fee20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f99a0a23-e1fc-4908-8561-0679724b98af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4fb22aa4-75e4-47d8-bf70-b0db6b3b9e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8287fdf8-c467-4cfe-931e-70ca55264272",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbbf2ce5-fe1e-4cba-b028-ce53c52745b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8965e162-03c6-4446-bc88-19fcf0c6a780"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bcdf2ce-e8bd-42bd-a1d5-83496e67247a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81a08806-facc-42ce-bb31-57be7993a6d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3fae981-2b46-4224-9bd1-fe67fe37d57f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "764a66e7-b6b8-4d25-bbf1-8e23ab3d4c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7efb4577-ace3-41d7-9106-1f760413f934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5034d289-ef33-4247-b483-d433bfdb4d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d73b774-eff6-4b4a-b051-db0d6852c07a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "866eb42a-0ca4-4772-8126-61e46a666bfa",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56943989-dc9e-434f-b7ac-ab91feb2a539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4701c6da-ba8b-42bc-ab50-4e9a7dea5248"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "146031c8-06c6-49ab-83de-ca5239947705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cff38bd3-8dcc-4ab3-9518-5dd5c3446564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb01e9b-4be8-4e9c-a22b-be0019cc1cbc",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41b20f77-a718-4c2f-83ee-599f9897671e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0078c3dd-ed83-481c-89da-2c2defd1a284"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d03965c4-36a9-444d-88bc-5888cf94e4f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89baceee-4a49-42ec-a26b-c203fdb4a027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a98d116-06b4-4e02-980a-c309866c830f",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "193b519d-5239-4db4-8666-cb39847e7ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4bfc7a7-dbc2-4b45-a661-da3e05b68313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811cce98-915f-4608-b610-1335a482dd5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c659b1a5-3e3f-4c40-9369-1ed2e366f006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e6dc4e2-be5a-406e-ad91-328adfd288ac",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b11c22-a3b1-4547-a3e6-90e94c8eee89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0de58fc0-d181-4a49-a61e-3bf53c1d8761"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f030e188-4c8a-429c-b530-dddffee59661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "88f6181e-bbf3-4d72-9738-309e0d76fdd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "111274e5-1f66-4aac-a7f0-9ebda54e30fe",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a198843-d153-470c-9e15-cd3140cf8858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16be02a4-c89c-4972-926a-99028886843b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bad4f55-9525-4442-a061-70bf3536abc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "846c8379-a4d6-490e-971f-5e5e09cf5358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b93107bf-ef3b-442b-9ea2-bb7ed00eb50e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c062b50-5bf2-4665-97cc-b5a67c49f475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d555012f-424d-4d4d-b42e-694303fca133"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "396d2934-8a62-45cf-a002-2b6bb97e75a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7985a41b-6c90-4638-831d-41f77a2080e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "596532f7-6ec1-4ae4-ae3e-b9732ff7807f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1bd0c92-0bd5-4276-8d39-bafcfcdea86c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "042edb9a-9c01-4eb5-995b-df04996a3de8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42c78098-03f4-4f21-b2c6-d332baa308d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "194ca426-ae48-4703-8586-f5cb6ad485f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8f06de5-f197-4346-ae92-86b683e27c97",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f394b32-9d0e-4d10-a4b8-8b3991aa75d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c21ce41-8ad4-4573-8c54-4d48d185946c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "befad869-eb0f-4622-800e-410ded6953d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "467cb248-90fe-47b8-a899-602859c30f4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74783e67-ea77-49f3-9ab1-7e9c13717a38",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e6a5fc-0e34-4d05-8690-e621083ec568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97be2bfe-41a5-4828-a4a6-9ccf33c2ca54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ddeda9b-6e2f-4160-99f1-ff7120868b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e2e402d-cdbc-40f9-8ff5-6779108e2384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96247ae1-5a91-4108-8c3d-a5ae59dade4e",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5ecc74d-b706-4574-8555-7a294b0c6331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "366cebed-264e-4c12-9614-797174ee3d0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe58a66f-79b6-4dcb-af1f-461e522922f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8cce503-b449-4433-ace1-74690b4b2011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f20589fa-2d00-42d4-b370-648c3f6fda6b",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e04305b6-dbee-4d87-aaeb-cf745a05e5b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39e44a8c-997c-4804-bebd-7c755ede5db9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f0ae5f3-fe7b-4b21-aaa1-8fc9ccdcd536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "14c515e2-85ab-4bf5-8df4-313494e53533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7749228b-3619-42ce-81b7-5ed5cd36a037",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "281fbc36-72a6-4392-ad37-f59d8aefd117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "277400e9-977f-413b-b26a-f8f9a23efe08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95535900-007e-4b1e-8ef5-9d2242678199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fbaecf1e-b659-4548-8c0e-20a4a0685fb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "908be77d-2dc9-4500-84f1-8b4ad3e09cd8",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "598249d4-6837-47ea-b57d-09e48af3d20f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c7d3a51-63b7-45a6-9f83-c1f89eb22735"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71ff4c06-7a51-40b6-8a26-5a72463c1914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b062be8e-deb0-408b-b979-6596b456e1bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c7d1f39-e4f8-4183-9b8a-868a8082a113",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b7d0d79-f62a-4085-9e06-38e732e0a8df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6015bd9-89ac-4a40-b484-20e870f483bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85c6604e-7425-4587-90e4-512330482fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "eb6f97aa-1ed4-4269-a52c-c8123dfe65ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "160ba132-a26b-4802-be15-462c1a084932",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d40cb1c-30cc-4533-a9cb-51610e694ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e56ffcc1-4ff4-4f51-97d1-b647c1726508"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa6dad07-7f9a-42af-98bb-16637d1fcd75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d663270b-f49f-47d8-9cc1-f3cf707d9195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d5b174-7b93-4328-bc7a-04059c98b5d3",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b87cf2-2b90-4bcf-8cb1-cd1a86c0a746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57c1e49f-05a6-4cdd-8749-c2a2501a0266"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a02d591-4fef-483f-9a68-9a46994ea473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "08ec17da-15f7-4ec9-9152-abeff15cd250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b90980cb-3bde-4adb-8561-6d1652bba89a",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5272fb5f-8a60-46b6-90f4-7aad13a54111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d46e88cd-0471-4155-ac57-25288ca6c416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aac040a-64b2-4ccb-bdae-07046f3bb002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "24c8cdd7-cc82-43eb-997a-68ef0296332e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04edb9ab-0b95-4701-88ac-c8d6bd37a773",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d059d78-6da4-4340-b062-55c41ade6289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93c9889a-e56e-481d-ac6e-64691468b758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1adba009-6a9e-4394-9747-6c410d2dff9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bb60cf3-c782-4b37-8a04-351342288cf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddd7ece1-eb48-4d56-b8d0-4e2c9ce948f7",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cbfc964-d9d4-4115-9bd0-a880522e06ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95f03dd9-1186-48cb-abf3-59dc1d241078"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecc56984-9bfb-4e6c-a37f-01b1c934713a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "939becc6-c3f6-4a21-8d39-7587d74279d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3196328a-947f-4698-be4c-3042a8c348cf",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9eba7da-f4d9-4fd4-bc1e-1eb7abbab43a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5de7f33d-845c-4c6f-a3a7-9f0ad4f2f7b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc57377a-e6f8-4661-870c-b005451f2897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "04fb6c19-24bc-4d01-a590-79cc4db8fce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d091b2-962f-4320-9951-cfe7ba1204e0",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7325f451-a3c3-4a64-ba15-588776de8e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c6d49a7-4522-4142-95a0-1dac0e741cd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ebd14b2-5420-4fce-bbba-085c72b44ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ba5ea88-818f-419f-b811-708db36ffb4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "425e76fd-07aa-4691-894c-5f890d8d88e7",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b13a421-df74-471f-912c-755e28e81580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efae261a-4e15-41b6-8e08-57adc2f359e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19318083-d65c-4c11-bb6a-c500ec17fab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f68a78f-d540-47ff-9e51-0caff3decdb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a641b36-1b76-4fd9-8933-10b650c35b26",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b920e49-9144-4773-b58e-f29feaaf75b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee4242d0-0d07-4fd6-bead-2d14934d5e96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c968ad-23aa-4134-9761-d45ba8e0858a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9290f88f-ae56-451c-a355-3cbf66fc573f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8918d92-365a-4354-9b07-1841031e84ed",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a5bb3f-7775-430a-8f72-a96e92676109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "135e930e-135a-4d3c-badf-4456f6ce2a3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a1529d9-21fb-4442-834b-1be61c5650a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "524f7f68-8278-4de1-94b4-97249cabea56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8c26ae0-c6b3-40a7-bdb5-d664cac2871f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb492f25-5c94-4a71-8fe8-f831f7a0e77f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "375a8da9-44e4-46af-8847-2a5afe2a239c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66abac39-8628-4281-96a0-feffbfaabf42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "774de281-8e85-4536-a5fe-c0cec9b4211f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0630a952-3b05-413d-840a-084f356c8a8d",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ecff8be-821f-477d-8c64-55272fc6a09a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d901228-a4be-4bc7-8488-6a8a864aaba9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dbe7656-ee3b-449b-b773-94fc04103fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "e376bd60-7cdb-4d1c-abbc-9476fc34cf21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51cc14e2-cf5f-4390-8d5f-ade6a3b40dbb",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2abb539c-c342-46d6-a030-589b60d04dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "91247a77-50d8-4679-88ac-23575c3623d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb602030-80b8-4d6f-9a99-1bc4ceaf277e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "71e33939-a9b1-4126-af57-688a4350ba6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd68b9aa-1304-467b-9f83-985fd1917932",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8612f8fc-7564-447e-8ec8-f456f59ff9eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20700401-4a93-405b-aa19-64aec3372b42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8df7482-a723-4bb5-8cff-059fcf1c84e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ff040a8-03a8-4676-ab0f-9124eaf14916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef5500b8-f231-4365-8b76-1b54f1f24be4",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f405f8-5446-4ce3-8354-45edf5d59c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "771c3bf3-384a-4e5b-9155-6bdcaa6847a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdca689e-896e-4a20-84ee-e1b105f10e1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "65f7011c-21ca-4f43-82a9-c72f01ca16bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08d64df6-2fe6-4ab9-9023-de1257c7e2ec",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "140d5179-8a20-4aed-87c9-5184dbc2662d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c6b96cc-96fd-4eb9-803e-4df54f8888f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1586022a-fb64-4cc4-93d4-139439a848f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "23f21d68-5732-42f3-9567-dc9c0fcfbf28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47abe4e9-cb27-4bd6-9fa6-5e57aeefb879",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af878cc1-a1cb-4a43-9337-2a62ce27f12d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f70973d-c7a0-4899-891a-d2bf271e13fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b42aa18f-5340-4fde-af72-e169d26075ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7343e6f1-6ec8-4c14-9dbc-c09dbab67bb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b5bb5a3-edbf-44fc-909c-b731b90af5a6",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d89930-e632-4435-8a78-10f2d56c0b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cac63fc0-80e8-4ac4-bc91-bd2a20d22b5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12d1e56e-e8f4-4aa9-9f3d-095445a94c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c5ad9f3-e1c2-4e21-b0bc-4e463f102332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d94a9e8d-39a4-410b-b324-58ed0cbbc54d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d04923-5c20-4371-8d15-1cc6e5f9bbd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c4fe001-76bf-4392-9dee-2f50fbf45327"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5464f7a6-00d0-49e2-8586-84aa6b346127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "48195363-330a-47a8-8d39-4d30d808453e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c00683bf-d7bd-403a-b136-6c18b1e35d6d",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad6bf99-3da2-42d5-bde1-06f1c0d8647a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86d69657-e566-40c0-aac0-5b7f71877b6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42a690b3-7074-4c8f-8ad4-746757db5575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa99bc3c-2017-489e-9527-7f433f38586a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db89e34-a4fb-44a8-93c1-641441917db7",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d03baa3-7a80-481f-ad55-39613d20f0a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e29f24c8-5584-4ef8-9ca0-6793e3f972d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20758d50-5e53-4a40-bcc9-2b87d185b7d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2368873-84df-4290-afec-f1dd5425d949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce47530d-9209-4c2c-bf3b-d55bb82c9b1e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86276008-84b7-4f51-9b4e-a3f0458552d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53b9e047-bf47-4b66-a53b-93aca5771456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd13bcd6-6544-4355-a0b3-702c6f669b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e015cb3-75fb-4fd2-8339-b5d58c89f96b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15fcedb4-ec77-46f3-97eb-109d19e1572b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24bdcda1-4826-460a-a44c-9a6af4ee5958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e255b18d-6ff9-4c1a-857c-e8cfb6d9619d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df88329-76cc-4d07-8868-257f8dbd5518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ca236fa-2099-4fe6-aca8-f37b6aefdc3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f55a10-6648-452b-8706-1b8a5ec60504",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b10f673-c1ec-4b84-9f24-f41e9abaa8e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38955307-cc50-487c-9b39-63307c018bc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "560d01ed-d987-4153-b3b1-008f404f662d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cc9bc5e-1a2f-4869-a5a1-28a29b56cca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f7fe6f-8d62-4712-bd4a-29c9aadcdcb4",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b4102f2-e0da-43eb-af92-517b6ecd9299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "314c74b5-9719-44a8-81e7-ea0da14aef33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b46031a-1d1d-4b1d-80c1-8669cca52b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca55fdf2-f0a5-485a-a020-2812ea19fb2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "120c28fc-e272-4e2b-9c66-cfe3a741231b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24602213-b4ae-4bda-a73c-323f62d2f04e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85e7edb7-d52f-4b32-8e2a-58299a68f346"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5be5ea0a-99a8-4da1-afb2-dc84ca82026b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "57491fa5-78d8-4190-8791-f9b16fcfef81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d0ac1cc-2f75-4eb1-ae30-79eb894abf08",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44bd2631-cb6d-4969-acb2-369bdf32d3e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d38c3914-b1e2-4dd3-b191-4f84781095db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb090a63-9a57-4bb7-a4a6-ef4fe1b183db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c8c9c356-f9d7-487e-8568-2041649b6cca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f99f30fa-98a0-4fbe-9e22-d9131f5031c4",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d37af86-0eb5-41fb-8c07-3c23b2af7725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7b7c31c-2475-4fb8-a231-47e96657767f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe46187f-c03b-4cbe-b856-e9ec798360f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca90b054-247d-4d0c-8439-d8f6936c685e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c63fc0ba-6016-483d-b7f0-fd7e0b8a63a7",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa82e5f8-5354-488d-8b60-62d2b9d5b454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9c9e1ac-b0c2-4695-b857-a3b32589927c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d7c9ab2-6f01-489f-9660-f1fa92bb79bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fdce707-bd09-4899-881d-bf87f1a26ee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "283b94c8-26c8-4655-823a-2bbf6f508e61",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56af9f64-ee56-47ff-be76-159ef849ca63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44ce5a54-8c89-4c42-ad56-807fc8402a66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ed5f583-a0cb-42e9-b6d1-b0898b96dd32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6afa0bf3-4789-4cd1-a754-392c37d67c91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eab0c8c-094b-4162-acb1-ffb3f485f26b",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a12efa2e-3643-44f3-b39a-75ef2ad26e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaa9cb9a-bcda-4d3d-881d-a833eb80197e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4309d011-30db-46b2-9704-529eaa06c544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e17de897-81cc-4423-b7fe-3f95cce795af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b826a67e-9d40-49f8-8c1b-b531bc3c57fd",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5308f194-7a4b-41de-863a-a2b85bee6564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b56b4be-2006-4df3-932a-3b42da6b8fcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4706504-dd84-4021-ac9c-6080784d8d7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1dfc5c7d-0420-4440-ba37-cc7892a19c0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc3304f-a64f-4c35-b03f-4eff8909a026",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ecfdb0-2e59-45b6-98f8-ee0bd25828e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c721b1c3-852f-438f-aa69-3d9765b9a04d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c5b082d-837b-464b-8072-020be909ca17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "14f06714-eb70-4d83-81c5-6f8f80fe8bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c2fde50-265f-4676-b8fb-486a2b540a7a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cfdc85a-787b-4907-b5c3-c4e871cc4204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "871808c7-5b5f-4a31-83e4-969d315d8535"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2988c982-2bb3-4b38-9b6e-f66cd3165d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c304ae1b-b8e6-4622-8a22-392728e929b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51d2e31c-3fee-4dc8-98fb-74a8e2c0ffdd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02576b09-baf3-4ab9-a2ac-1c0d21e8641d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90db4030-5251-453c-ae0d-07a2170f3cef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "479398c2-c741-4f5e-bfbe-b6c704a5b183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2715e314-f6a2-4f2f-8fa3-53911faed1b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ce546b-2bdd-4e1c-82d5-5474704953d4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9be73c8-a644-494a-9055-1427c8b6d54f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3561ad7d-62fb-49b8-a2ae-dfc06afd8219"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff6808da-eebd-401e-8144-3d643e0fa2b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b132b24a-0800-40de-9092-53b387fa7bdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dccd4c15-65ec-49a3-ba62-4b5ea35963e8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "083f7d1e-3e53-4df0-8dac-fb1ea7cdd51e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b184330-4d84-4ce5-b06f-0e2cce3e6e59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7525e3c-79e4-4801-809d-63852ae30ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d005dbe3-4deb-442b-a44f-21727bc1e8d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c362b73f-fc71-4fe6-8c30-558e796edc4a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f2e6691-9452-4025-8be8-0fae95b474c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8eefc07-d7f4-4330-8e92-0fedd7594c7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6da6822b-0949-4574-b51a-d0d99d5c2325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c059fdef-2548-46e8-95dd-d9da1c7d6215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef8396d-660d-41a8-923b-c1ed3c2d855a",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa684eb5-3382-4a74-bd79-5f532fcc9a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b192430-9b04-4b62-98d9-3fac83e21fec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76015e61-e1e1-4ae4-9438-b3c7c88a00c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "723d6dae-9715-4e70-999f-818fe8f9b2e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "661f0273-30a4-4f2b-b47b-32ad1b2be59e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed0725d8-ba70-4054-8b41-0dae9dc74429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69f064ea-e8d3-4953-8a50-a1dabe5a2302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "580c01ce-3d02-478e-bcd6-2c154c54048b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0559881b-3757-404b-9e49-65b66158205e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efc085f5-6f66-41a8-b92b-21909c51b003",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e523d44-e785-48ed-8f2a-b80670911eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdd0030e-e544-401e-9dc8-c0f679f5c350"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c287223-4533-4a31-b8ca-cb9863ada940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "37f011ca-032d-412f-ad65-f922f0bbd88f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dfb9748-7dd9-4e04-b91c-2843aa22e76b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7b55822-d54e-4803-82d3-7920a826d8d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0544b70-c192-4ce2-8257-eabae4cb05f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "407e4b30-c5c3-442a-b8ca-5a94e2244655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b710f5e-bccd-493c-9bca-0a808163322b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a25d5190-66dc-4360-9c45-a1384eb27534",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c0ff3b2-d953-4b03-a32a-c0cd7f8a53db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6535e921-7208-4e5a-821c-d5cd933d1ec2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e261171-c147-4aa0-b623-751d9dfac464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd059a9c-dbfc-4677-902b-bc137b6299a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "883038eb-1b25-45bf-befb-f1c0e830b3a7",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb817b4-8101-436c-b795-a915064bd3a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c5c2b17-31d5-46a8-8169-4fb5266101b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "071ada20-9847-4860-a033-efc1a523f030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "268904d7-2e3d-48bd-bcd9-ab3b4456fcc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f79211b-cd94-4ce8-9709-2b8b6f23005e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d31b66f-4d7a-479f-bbb7-675ccd7d83a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "409efe2b-bfeb-4262-8b6d-05748a2eda98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68d8039d-56bf-4fd1-9f76-102dead6d2ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "38abf219-d7e0-4bce-a8c2-737846afbe89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a2641bd-8399-4ea1-b262-bcffbb96fa99",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7597af0d-4fc2-4110-bcb4-0f24efd60aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b6b561b-a0ed-4193-9a4d-6420d130ad3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68c87118-d90d-4b40-b6f9-0fbd841848b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "62b0455c-7cd8-4adf-a0bb-99a495118b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "292cba95-9785-4fa0-b924-6735d1673370",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f41eaf2-90ce-49fb-bfd6-e40e1ab9ea17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57c1fea7-0aff-48d8-9262-f503427860a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d514434c-40e0-45ae-bc83-03149f869074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a970ace7-76f1-4b8f-843c-476f58f52c47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c49ddb8-fb50-4c5e-9b89-182057ac023c",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc264d94-9245-4a7b-b33f-97d6bb2ec8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59d528cd-a58f-4fde-803f-71a47747f4fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf07833-819d-4627-b727-c735bb219e30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1935e124-71cf-42b6-a920-a1816447be12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f899d171-248f-4b3f-b2ed-0d255916d3f8",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8adbad1-5266-4db7-a997-9b8d65ebd054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78ed7e9e-c901-4d81-b402-5115ce0b2d89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64e88cd8-498b-450f-96c2-309714b6c9e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2517f8ac-6eb4-404f-9ea1-1425a0b67dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c77b1213-87b5-4775-97b2-5380cd6d7879",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b413be09-1e24-46d8-bbda-3f70ff2931a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "348e95b3-4c9b-483f-a89d-5854cf12141a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2a72b2-2338-4130-9bd3-6c5db249a8d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "68461e00-0932-498a-a52a-8a40f77b4a29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "526519ca-2a68-4e99-99e0-952c7dcd10f3",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2f33870-bdba-48fe-9ed9-41c6e6e3486c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3c87b59-23cf-4f28-9643-8f12ed4cf63f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da3ba34-c8f3-4b2e-a4ad-d00210a122cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3bfb3c25-7e81-408c-8812-35c60de837be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0842a8-cdf0-435c-aeca-89c48a6332db",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c36b7a8-d9c2-43bc-ac2f-95fb73728b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "123c1122-1bfa-4637-b8b9-d8f2b5b3aad8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e476109f-3412-44f0-8d88-293040cd9a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "22bb5c5a-1851-4a94-982b-19a6849f183a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e14b1a4d-542f-4642-a96d-d46463baa9bc",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97f16469-47e6-48ec-af65-479cdd99994a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c6f42c7-cafa-412a-ad36-af6b503fee24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f4ccec8-a152-4c03-a7d6-55b99e502e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "32bf1886-fed8-48ba-af5c-91c3128152d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb53450b-abca-46ed-bd8e-1c9bad33045e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8824d98-99f0-4c44-9519-b53c59eeb2fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d982748-bf68-4534-b8ad-c5e2dfcc7af1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b37d7c0f-e963-485d-8c6f-d6a8a2455e5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1eeeca85-bea8-4f27-b6e1-74153bbf23a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92076d6a-7f50-4f49-ae98-d33583dc35af",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84be91f8-2f6c-40d3-b4e8-6cf66c390a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34097fac-47b6-4bc3-a00a-141760922fc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6936a869-17a0-4ce2-a39b-433db97219e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "38891181-d019-4285-baa7-f764d05a4294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9072359-3d9b-41cf-a6b2-9e30bb31d850",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e57edcd4-c510-4c75-8eb9-9a373f0bb5ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f3df3ec-d5db-4d81-96ac-1c90684eb8ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf4ddf18-907f-419f-a96d-3378c24e313b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0eb4bc30-af60-473d-9aa8-f0e1d13b7b35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a36961ab-7143-46a9-be08-3440df653b1f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86970e5b-a692-4213-ad79-f218dd324f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2e930a0-8418-4bd8-97ec-f50278f86438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c5801b8-fa69-4e69-b927-12e949ebc209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c9aab5c3-bc9f-4c67-aa1f-80b907bb41e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "703098c4-b0f9-41ee-ab60-bbdaa87021ac",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17212461-404f-48ea-8a0b-88cad471aa01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "298cbf75-dfa0-4a7d-bc52-d6f6e569bc11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95f2d0da-d681-4169-a5a7-48e8fc059875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "85c6659a-b2cf-454f-8b8e-ac8eb1e6ade7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b17ca5e7-2ba5-425a-893b-612e7f35ab66",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20aedcb7-176d-44f9-9228-2bd14d112065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07d1afaa-51ad-4152-bcb0-e7a82d6d2c15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d83610c-5fc4-4aab-bde9-6dcf0802c315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "972560f1-36d8-4891-8e31-915b7806fad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f7203b-1e2b-4641-8725-cef2381456e5",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d5b563-83fd-47bb-9790-f7d43fea5df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "149462e7-34c3-454c-822d-4aaf716cbcda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9888424f-ec04-43e1-bb6b-6561b33b6e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "30725835-ef7e-4aea-8582-17489b9f07f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5761e879-5eb0-4b4a-b7f1-cb8af210732f",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5168af11-1761-4021-a4ae-b6e7f8ffd2dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08c332af-71eb-49f8-87ed-3be47249ec06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd52c785-11b0-491a-bb11-baf1d5de3c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "21242ff6-ece9-44c8-a3ef-83059d04bc5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e01e612-d2bf-48bb-83cf-8acece998a11",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6eb96a6-c23b-4804-9641-37a7000d1811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d270561e-f304-4b6d-b48a-dbb67fe95907"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a450759c-6ad9-4a55-b0b7-4fd91d1fc026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "733dd481-d79d-44fb-81f0-68278dfdbc6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23354a18-3f29-478f-b274-ae12a2e8ab9a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e80c545-530f-4a96-8a62-67ed1dcf5959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58262957-656f-4ecb-965b-e7401bb1da81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "436e8389-9363-4106-8c94-124ebb02bb8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1dd897ce-6627-4b14-bae0-864f5470b5d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a5dd57-ef73-4eed-9f98-6bf0c899762e",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d1eda3-8da0-4a96-b40b-934d387a726a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaeb56d5-70be-40fd-88f2-e9a455c22e40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0741a0c1-6519-4417-bbad-c1dd9e170d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "90abc848-b6d4-44e5-b1a6-44e78a82b38e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea2063ab-6ee8-47e6-b08c-28e25a07d638",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db8783d4-054b-4ec4-907f-8fe6f61c7cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "047fd346-1f3f-4977-a51b-d017f9fb98d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87d5f943-09d6-410c-a9c0-03931102930f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbf387ab-70a9-4b3c-9532-49d023ed3f77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f08633c0-6268-4047-bbf2-34a4228c7ed1",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5225c7e3-607c-44c9-ac1d-7ef7478d09a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5efc7cc9-0c18-41aa-8226-7edf460189de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df571c2d-7d47-47ea-8c49-df10682afa17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d717c9b4-a6d1-4f9d-a5c6-9cebd73e9c1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc411de5-1dbd-4376-a81e-6f8c902b6d64",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9268a175-292e-416a-8eb1-4d5225ec807c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76c7884f-8c50-449a-8e34-1677d8eff4f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fff9293d-f4d9-4430-9b04-da0d029daed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd2a6cf9-70fe-463d-8e2e-a501ddc44c28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aecda84-aa79-4abb-b3f7-e93a26e2a4c7",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5958f248-e2b5-4dfc-b446-435658950e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85ed5ae6-313b-4926-94e3-279c81592973"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3055f697-2a49-4f3d-b3e2-107fc0a1b703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f075d17-6830-416d-900e-2303379d7bc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba699d48-6fce-4c46-8694-d47867e19477",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4c2770c-e149-4cea-bc94-6da7e59eb444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ffa39dfe-7f4c-44f0-8576-1e62fd95621b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52aa92b7-498d-48eb-803d-4b5027bad5ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b134d53b-ce5f-48c8-900d-4e9a21da0da7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "50be71d8-d5d3-4042-bc6c-cc8ddea5629a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "86db46ce-cf90-46b2-ba2d-ba554b4e9862",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a4b83c8-6bcb-40eb-afe1-3c7f1a83489a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3cca92b5-fa87-4592-a751-7a6f5377255a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fb37301-b7f5-4739-beb9-ea6f716ea521",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2279adf2-0fcc-4afd-94b2-ce9c8c712e1a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b742a7f8-34ec-415b-940b-0b8eec3532a1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d71104b1-28a6-4e73-a8b1-0e82d3cf92a0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6fe1f8ff-fea1-4c69-be93-402885ac7237",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d3b8938e-6a73-4b6c-96cc-7882924ddd9c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "01f0b875-6df4-4af4-bb16-12c3c78de1f7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "72641328-83cf-44e9-83d3-81054a631429"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "25b84a9c-ffc2-4b12-a542-cd1ab10b4d36",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4823b229-7a54-4076-8961-2060c577cfc0"
                }
              }
            ]
          },
          {
            "id": "b4febe35-c296-41c9-8526-b41ee5578639",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9f8b67c1-5487-4c54-a371-67e89bfbf0bf",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "188bcee6-d6c1-4a9a-9f72-07d3b69fbbe4",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c5ddf32-027a-4ea7-b9b0-69c652fe12b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "045eefa2-3b9a-4de9-a52e-bac08bdc9692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f47eb8-bd94-4449-9046-269b80e2d858",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7875fde8-c8b3-4721-a52c-8f01e0c2ae61"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f6489f58-b8d6-4904-a296-0088a9990e08",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9094b85-8288-4a29-8be8-d0f5d98f286c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "29631fe8-c64e-41c0-86aa-49fa11bf2518"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7ebfcf8f-08ee-4d0e-af41-a6dc4e8017ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4537683e-15ec-4fd4-b304-0fe3d485e445"
                    }
                  }
                ]
              },
              {
                "id": "ff1b327f-0153-45ec-b4cd-487878114e19",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "01d1b47b-dd1b-40a5-a009-48827a4f71d5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1022f52e-e2fd-4737-9f39-d9b2de825278"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e08326c4-39ea-4093-aaf9-29a45ef4559c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f9bc350d-b253-44d0-9d13-8f5f5da38736"
                    }
                  }
                ]
              },
              {
                "id": "8036176d-d22a-4361-b4c6-2bc91c9f8ff1",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8850e5f-f137-4407-a5b7-14261d0a8743",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5c9b6242-2461-417b-a921-8be47089d0a2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30a4976f-75a2-4721-b175-74459f2e15c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "85a8b827-a77b-4a48-becd-afb2a043cf92"
                    }
                  }
                ]
              },
              {
                "id": "815f2439-f7be-4919-827f-d046c3756c23",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a8ef9c3d-93c7-42a4-9d23-23e401fb0316",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "97260523-7846-4f46-9a80-b173e9a8af79"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0294f799-1de6-4d57-8f74-81642efebf72",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "764183ac-78ed-4730-be29-c113a06a9363"
                    }
                  }
                ]
              },
              {
                "id": "7c8d1b4e-d3c0-4246-a8cc-5ddbd5b0302c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae738c88-1491-4ec5-b59b-4100590263b6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "647b5e69-8e46-4ee0-89ea-657da14b9081"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8099b608-6c0c-4f51-a327-e159c38890d3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "016ebc5b-7a76-4e00-8ce3-69cc4e6aaf95"
                    }
                  }
                ]
              },
              {
                "id": "50e65e62-886e-415e-aed3-fb24e356058f",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7e76b62-4e89-4e42-a4f0-b6b37dae0a51",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6e657b01-30b9-4697-bd58-8b22abce1456"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "06176d06-aed2-4951-97b8-61687b56d5dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c109d0be-aa22-49b0-a2b9-34a9aa9b1653"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "44908fa4-edc4-49af-b37e-57b24df7cbfd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "73364af3-60f7-414c-b25f-014fa7f636c3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f117acea-a809-412b-84b6-10a5fbb31262",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "251ae0bc-85fd-4aa4-a223-e983257f5a42"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b614172b-8a1e-472e-9bf5-2c9df25d6146",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "76b3b6c1-2567-4230-a0a1-61e4af5d8886"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a8a3c302-2cd4-4d7e-a0fd-b667b41abe79",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "404f66d0-b3ff-4ccb-a48b-0a4d8a2bb6c9"
            }
          }
        ]
      },
      {
        "id": "30274138-aa67-443a-99a9-1b6d4b3adb26",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "12f3db45-8bd1-44a0-b05a-e5bbfc9920e1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0515d3eb-179e-4781-8378-7f2bf5793a7c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c1d2e47b-5ac3-4fb2-a070-8bd43c6bde0e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd404c18-8434-41e4-bc52-7fd9ac7a7094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abaf7492-cbde-40f4-8c39-dea337fe8f81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70dd2e6-0d60-4d6a-9ccf-c75b7db0e525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6939965e-40a5-4a7d-b3d0-57bac4537e39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af52d829-6712-4db7-9618-d4dfd3dc829b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93b140eb-6834-441d-a8ab-405493f2ff92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2003bedc-61af-45f6-b6dd-85cb1969983d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29fb8867-71f4-4606-ad07-903174d8a4fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f32ef39-1fdc-4bd2-86e2-b7e128dc4051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0032de9-7076-40e2-bc18-799d4e1555fa",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6673e16-4dc2-443a-b7a1-8c1ec95f88af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4e80993-0924-444c-854b-e56736d1e2c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7639513c-5059-4a44-9e09-0761bbda0f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c652bf7-7bc9-4c36-84d1-240550f79d24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2c68d50-1793-4e87-a581-6db477821762",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d45f1ece-8432-4fb1-a06f-9d9ce6d5f65e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74070440-5bdc-4043-8785-062eef2b528d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13aac64c-9b31-4e6a-a48b-9af62df395c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "21344703-f3df-4d8f-acd0-00983a2bb434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6305a00-5610-4bb8-a694-980c9180a0a1",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05feeac6-1ee4-4c0b-a942-ebc2f4387bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04bec2ee-6b5d-4c21-a8af-fcfb70e59cd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17f3af01-ae1d-441d-9486-746f3d314b6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d44802ac-18b5-41a9-ac18-0521b0afc2c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c426e82-4c00-4e98-aaea-97b984b1acef",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a9abc74-b101-4172-ad3f-da7b2d1d9435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "250b28a9-941b-449b-b1ea-f71d0f60fe4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9542de48-8a2c-4e58-b753-73b583ecf808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b9189aa-94df-41d6-8347-8a8a54c304ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d180dda-9cd3-47ce-911e-377805b8209d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddcbcf3d-56e5-4578-a36d-1073f202c4dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2672849-c89d-4c2b-9194-607df4e12540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38e560bc-c02b-4645-874f-0d2318636e7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "630e8c7d-97e1-43ce-8af1-d15b26879494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "388b91df-afb2-4191-bd05-c1f81f29e14c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5060be4-59e0-41e4-8fee-015f8453d277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b626db93-e555-4b77-8d7a-3f9bdf999514"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7899fc93-ce03-403a-bf09-20fbbd4bca87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a856af2d-43a1-4962-89df-fc8f54acabb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "755d1d6d-b14c-45b5-9859-dada3b8d050d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d47aeaf1-2e3c-402e-a43d-caa18b49cca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04f1b876-c97a-4876-bfde-7023a6a360f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd1f8320-e904-49c8-b20d-9e9f850fa2fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e15bc71-0667-45c4-adff-ed2b32f972c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8967414-64e4-40e2-90c0-266eac3f3ea0",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "769ebbe4-92e0-4289-a02a-fe9994e36f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9665e465-ebce-4b93-88cc-abd2ec9a840f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97681a5b-0888-4e23-b336-828b844d9b0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "695a0f31-66dc-4245-8ab9-f2d880de6428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3e99a31-e5d4-4750-ba85-517e63041bdc",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae40c0c-69a5-4166-a176-57274b9a1177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc1b4749-45ed-4df3-9de7-2d1cf582ff06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5bc74ee-5ac5-4283-a21c-a78d15e7c298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "63a3f8c1-b499-4c23-84d2-2513ce9f7c64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc84c80-3ffb-42fc-ab9c-1da628d199e9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b52cd44f-1505-4471-b169-83f2fee65fd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce462a43-b328-41e9-a3bb-186509cb7d72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a14714cc-a4ed-439f-b13f-ecee5d8282c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e69aa6a4-62b4-4d64-a69d-4c25114b0cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35a3e7ea-6638-478a-9010-e7b4f11fd5c7",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9036632-c3da-4d19-90ed-0b0bdb37033e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffaba890-ea52-491a-8c7c-765d5646fc21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09932b25-3736-4484-aa9f-40e3ee6e32ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f9f919f-43a3-457b-bc4f-f9dfa318954a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b9b792-c86e-40f2-983c-d38fa80a58ac",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "732cfe50-7bf8-4ac3-9063-2001c349a327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a941a92d-b729-4f08-8955-3586c69d4f07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5a3448b-bc76-45da-9744-348e5bbfbffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4700764-054c-4a88-bb9c-7e33543e274d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "195168eb-cf74-4fba-89a8-9150fb8f446c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9dc3b0c-62c7-4310-aad6-940919455ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb8e6717-d0cc-43cf-bbe2-9d7bc236a8d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11b79156-8b04-45f8-adeb-5c7087e5a691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7c58719-677c-484f-854d-b1efc2839a76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ca258e2-1d2d-4af9-a461-c6492f05acac",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d541b7b-2fc0-476a-9a26-8d7f7be3de44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa1c65c9-1f30-461b-b856-7a3e16180ab6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21afd7ba-8d0b-4264-a5df-c348adbf2be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "140a6510-d7f0-4041-b812-3d3d8c392293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b079ed1-8523-408a-aa5b-d4d80d3dc730",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c7a252b-a534-4ec1-8d4a-89d4ada419fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c939acce-7b7e-4484-83cd-07433b0f5f86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd3c8705-9049-49c9-97e2-999e01ca3175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "04fbf724-4c3a-480d-bdc2-e94f2ce75d0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b270f323-5844-4bba-90a9-bcddd832784d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b935281b-6233-43cd-8725-b6084bcad2e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "524b2582-68c1-4892-9433-f2000cb7913e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7279d17-a912-4839-9d7d-b75fb69e89cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b95a0c3d-f910-46f9-a808-9baaa3af8f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "840a7107-c6a1-429b-8f24-3de9131fccf6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2913fa-a1a4-42f6-ac2a-130f57bdc5bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da28c0b4-5654-407d-80b1-5f8f68c7d887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ee09a1-e189-42a2-9c89-448be8af56a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64cd4b68-d636-4880-badd-0dc67aef8bfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d98f67ee-ccff-4a8e-9527-e601611b4efa",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b262d171-6dd2-4b36-8ea3-2f53fd3630ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bb8bd6a-41cb-4f96-802c-116ca6c90bd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f79ac459-c103-470e-9f75-af623b919b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e9b181b-45f3-47e6-9c63-14cb700e6e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5159cb8-70c3-41ff-8ac9-33e914dec29a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37c61676-c87a-4c34-bcb2-aedf23b80f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ca90a31-3b3b-4bdb-aaca-ca9043c565e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b28b4e52-338a-4b1e-b5c5-e22a200c01ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f36eebeb-ce46-4eb0-82ca-b182a7ea0ddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "020011fc-85cc-420c-8ad3-9211ea8c75c5",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc9d68a-c3d3-4a81-8117-a64b243373b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fc2a5ec-7230-437c-bc47-677e53ff5eaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c38a2782-eb87-428c-ab7b-b0eaa2f392c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3997c986-6b3b-493c-a368-fbc221ef1d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2e7d055-56fd-48a1-97fb-64c43d0f7e46",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fe12323-a017-44a6-a2c9-f81fe17b63f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "277f9197-982c-44e0-b71c-b8c052aee8cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bb85bba-9115-47d6-b150-9bcc076bf62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff573d59-c9a9-4b39-9377-1da09528029e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e75bfb1c-f4c3-4b03-9d24-2e6a0995eb8d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5113d3b-914e-4933-9174-5c47af5ff563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2424a9e1-48da-489d-aa57-b0a26c0bb5fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40d9338f-efcc-4cfb-897b-1766f35b9250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "288f66a7-9a0f-4770-9bc5-088b69c1cfbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c95b875-ebf2-4b06-8f24-a16c2aa05bf1",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b65bc20-e1df-40a3-954b-f2c75cca6533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d365f0c-8b5f-4ce0-bdc5-b27d8971b2da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63994f50-bc1d-4e9d-a2aa-6f90252fee9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa17bc3e-1143-4ee3-a882-d37ee76a12de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e82e7c98-3d16-412a-b3b8-512a6c493a8e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "865ab784-261a-458b-861a-2352842be727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "788e56f6-1b0f-480d-b0f8-6b9c34064f2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c015d7ab-280b-4ef9-98c0-f6ffb2530e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a370cd5-9b72-42df-8470-8662ec5a55f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a3eaa88-b2ec-4250-8820-0f80bea7ce03",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b7b8ba7-a1d5-44e4-8473-ad35ea4bf3e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "822f71bd-1ebc-49de-abda-b47e116fe560"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "021ff3be-53e5-4eec-afe6-a341c597ce5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3713040-25af-41cb-b5ed-7a4876c05173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4ea1a5e-5f4d-4d53-a9d6-4f4d059b2aca",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45fbf86e-ac62-476e-8825-36026179d838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f4fefbd-827b-4fea-bd08-ec12e5cc376e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e16d8a14-78eb-4fc6-aea7-cd5238a5e839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77368aad-4b57-4ab4-8874-649277d0d083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa6615ab-c6ef-4ea9-bb91-8e109c39f10f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c34226-289b-41b1-9b8d-fdb1da2417ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25859dc3-0502-42fb-a0c4-36d7c0f1c518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "502cdf75-eb49-49d4-8c81-646f66103eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f34681a-4714-4115-90b7-2b95f44a6e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee235e5c-9700-48cd-8cb8-a1b228864c9d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "970d2ed5-b2a0-4fca-be11-e855c6352b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38d572b6-ec9f-4cef-8d8c-574b5a8a7632"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d844d760-dbac-4906-9716-fa0bef05100b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fac96e7-76a5-4c9e-aaa3-d4e28144d7f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb948f06-6e06-48db-8161-cda8400841f3",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebe48ad9-7b91-4463-9e7c-9f229623235a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fc8f932-7787-4eb5-9a5e-a82287b5ea75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7d244c3-1684-4cd7-93b9-0f4def7aa2a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ea91489-6a02-4139-8bbc-7e9dbd41610e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e402f8c-1f91-4848-a38c-47a1f90c9242",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a33be98-3457-47ae-a045-1bbb2d377512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6c42ce8-4bb2-48da-b9cd-c148fa27f908"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae39b3d-fe00-4856-bf23-cfbf1f002101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfbaa3f3-9956-4f1a-af3a-a30445c23fe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39cfa217-6743-4ad4-98d7-f974ff929e10",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2760b067-16c1-4896-81c3-bb34e3a4fda4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62fab0e7-f3e2-4b23-9b62-a7a39a775edc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35800921-1676-4cdd-8a61-7742927485ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b50ffd19-85c3-4f7c-872f-43adc78d064f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a534c38-d5fd-41bf-b388-9e6326437651",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb6dd58f-4519-4749-804e-762e8eacdd49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42e23477-68dc-4520-94e2-090a8c079bda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee3327b7-b461-4730-8719-494ac4d4a957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d324c379-5fcf-4360-b95b-a93b16942933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4499f1c3-f2a2-4fc7-8317-4a58542693d5",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8fc55c5-1440-466d-a5b2-c2ae5475069f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9386856-1e07-4b97-8027-4b8f7dbb0d5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82958758-1fc1-4371-a239-f27b5076b66f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57ae86a4-1d6b-4364-bb51-0f51992d83e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0f1bcc-c9ee-468a-b01a-0b568acbc091",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1656563-f6e1-4845-b7aa-29498cb341b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac847cab-6728-43f9-b1a4-f467b23e8c27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "099740a6-d7f1-4a79-acb9-e97978ca2138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "04bc01e7-42af-41d0-9f53-1df4d42eb4f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "442bec01-3597-4fdf-81e4-82f9bd6ea300",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8174b153-d39d-481a-8592-9b6b198a9b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3737dc41-4023-4e02-8550-4b62fd89b14b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab33e563-051c-4c74-989c-7e0512bd8628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1291a0df-4aff-4692-b1e9-31ac696ba6b7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "190feddf-23e2-4f2a-8eda-5187ed194437",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6119ab43-8e75-468d-8679-877131bee520",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e8b3ffb-dba5-4c90-964a-4d5f43f6ea31",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a6fc9199-232a-44aa-bbd9-77b2be994ff4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "253c73dc-6c30-4b06-9cf7-088ae611575c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "262fc8a9-a40f-42e3-b6a1-69d4a77dddcc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "243d74b7-3d01-44bf-a150-3d89622bb55b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83af3eab-8709-447d-bd91-656928bd0f02"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a32ab057-af0c-441b-9bf8-3c96dea240da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b0e07d7f-83a2-4616-90fe-1ee0ba84e1a5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "930da1e0-824e-4e40-b43b-0f3bc7567ce2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f43e176f-2a92-46cc-92d4-c757f50e7b8b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "151851bb-2f52-4d57-8416-d809ffa79bec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4cd4d73c-1006-4ac2-9546-c7f1df096540"
            }
          }
        ]
      },
      {
        "id": "52f6656c-72a9-46c1-92e2-e4c6a12a0947",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "9eedc9b4-3c75-493e-b2ab-9fce181106b4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2991933b-98bd-4441-a8e4-00b1e2de1bec",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f5647652-3e1a-4209-a78d-73466fdacefa",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "363bc77d-a7d8-4cff-a0e0-87df0101419c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ab7e7fd-e9fa-486b-8753-1846c2e11672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5c8f855-0e10-4d5b-801d-269780e8e931",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0cfd93f-280a-460b-95b5-7d10694f6eff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f79e0df8-8592-435b-9d76-89c15e6c1a72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65deb997-b636-417a-8756-e007cfb4adfc",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c32d5ba-e006-4e50-8d5e-89123fc63878",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ec7ac88-cae2-460c-8d8f-d0d1a58a80ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "963a0dcd-ea97-4bb8-a131-01017db91bd1",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ee6788-de0b-45c7-a207-d709aa0326eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ef89b5f-8be2-4559-bc15-63b3ee20995a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbea8e40-cb41-431e-a208-ca4134832db7",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a78ea447-421b-461c-8b46-2bb2564b2241",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e5a28ec-27fc-412f-9879-71b687a63a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "021bf900-7549-4c8d-9f70-c8c59935f8e4",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9fe0dfb-4e2e-4023-82bc-8c56b48fca94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fae18c06-ec1c-49df-8960-d51069170d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a061ac6-5577-4c9e-972c-034f54262d5e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8941cd9b-3a60-442c-9e9a-ca3afb8c1ebe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7df635f-f388-4e92-811f-456b6163c84b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1633e1e9-a480-4f1d-af11-d8eb65a7ee46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16c79756-6ea7-447a-ba67-10cad5ee33db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf7f64ce-8314-4176-ada3-9188f00210d3",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e5e1adb-3f0f-4626-a1f6-2b5ee00aae40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ac2f79c-3fec-4558-92b1-1ce42c5cbe50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6ae0762-12bd-42f2-8dac-40789a6ff2af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28c38cf0-0418-4b8f-b09a-9cab85cd65bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf8dfee6-93b4-45d5-a1a6-3cec87c3537c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edad411c-7c31-4331-a081-197e957cb326",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28650da8-9b99-4d53-b782-774957b9e30a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17915e32-f0ab-4e15-877c-a22397391d27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c8842ee-c7c4-420c-862f-03c82faf4958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81d8ed4a-8385-4931-908d-32649ff637fe",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26401dd2-2a13-4dea-84d9-ed5f49e39867",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb5d29e4-ecd9-4810-8807-26304c29cab6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b219f151-30a4-4c90-9846-960185f8a580",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bdcf832-81a2-44d5-99a5-d37906a25153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd39b696-cc60-4132-a8d2-cc02b719a7d5",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc66a429-bc9b-49bd-a8c2-398207a03d6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41c1398c-e69f-4e85-af2a-96e4dab2ef89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbec0ea1-8775-4dc4-bc57-78ce98f63bab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20e04220-c33c-40d8-9428-4ca38095cfac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "262cd92d-89c8-4f0a-a8b4-b53a2674c7d3",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3758f520-dada-4483-b257-0b43f50645d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1f576a9-6d95-472c-8d00-13952261e33c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59323b77-245a-4911-b0a7-b55f352aeae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b505367b-622e-4b89-96f4-66322c9e77b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47248926-e2e0-4c11-94ec-cca8681f509b",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aab4bba-c210-4b1c-81be-cde3cfc33c09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "456d28cd-8b53-4078-bbf7-81db53a704a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c0dca8-5b36-4beb-a35b-deaf5fe70d1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6c0eeda-ab2a-4047-8512-428b675c15d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a6421ec-1dbc-42f9-9ce4-fafce6b2aef0",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f1bde9-5f5f-41ed-9e82-5c78da5e76ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d6e1aee-9053-4b5a-a9a1-0f4acfefb028"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1db9fe87-1b14-4a79-a9ce-a4344dbd6c66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b12d3ee-ecf1-4d33-baec-2304b0ff0cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e389ab-3931-40bf-a339-2609b9db5ee9",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78b6752c-8666-48ad-8a38-1caea294bedc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d01bac78-73cd-4138-8056-c5753cfa6dda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "991e3933-7be4-43dd-8fc8-a0507d928355",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9a2aba9-01ea-4c14-abd9-683a35aeb28a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "970c69ab-b148-4f0d-89f3-69a74af80bee",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d70ee4d-0697-4360-8909-11561609269b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9dc54d65-dc96-46d5-b671-5a7c41a1d44e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcb8022c-cbe0-4e18-9e91-f433fb49b216",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d5ca25e-9c72-4c84-8619-5c8d588b0745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0d9bc0d-1072-430e-a246-9a3fc290d04b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7870be6-2089-48dc-9bbb-9d0b97d2bb8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce684de6-0a42-4ec8-92b9-f1648d09420d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a714e1-e7b0-440f-8cd0-69b255fc6277",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bfe03c2-a7ad-432b-ae99-500e285e03fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02c2e130-1225-4138-8675-470f62061b57",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be89f77d-7bd5-4671-8cd5-4122880e5c72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "180963dc-8043-4261-a900-fbfc8bdff88a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c6a025-c685-445d-a06b-dbcbc6c4500d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04215ab3-784d-45b2-9b32-ef93bf8827ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3842ac4-93b9-4710-828a-fad583bc4f9d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e35411ad-e9c5-4874-bce0-d9225dd2525d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "119b3e28-6811-40e0-b811-a4b4651b936d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebd4fa93-283e-4a46-8481-d09b0456a3ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0df02e75-a639-460e-8083-d3bde1206b00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "423525f1-ed2e-4aa4-82b0-1eb2e70e8680",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f210117-b0f8-4dd4-9bcb-3a8adb5222b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71033348-8f03-4f47-875f-175c43c7c963"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b2c05e-1375-459b-9b3e-933ca9522843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c364d6a7-55f3-4911-b286-3825cea838c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "261aac0f-5623-49ce-82da-7824df27a60c",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fabf93de-2b7b-4233-a3d5-21a8d1d0f2c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6537b7e1-5a81-4f2f-bc9f-6c04a11ca85f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c9956ca-7622-49ce-ad9f-2452032ad9d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "081433d6-f9a9-4450-97c3-fb25809fdfbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec1d510-7d08-4892-a03d-1d9f3c07d153",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffeeffdf-c118-470f-b303-2ba78e2a6757",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a6019ad-dec0-4da5-8fc9-b319f9a5e75c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9432ff3c-2f8d-4871-8a3a-7d208285063c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74b21340-09d3-413d-b378-44f313087159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6b31802-9487-4f37-b03b-bf048ff3fad7",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "820266d0-a7a7-43eb-a00d-a1d461eafcd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77edd1f9-0680-4a96-828f-81d479ee7d2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca69adc4-6718-4b94-b0bb-44aca863ec11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17b8d92e-d1ae-407e-bc37-7411f6a865ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d4b84a1-7553-4926-8751-045592b5630b",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d15e1ad-1700-4ccd-b3cb-3193f38ee4ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fefc7e1d-527a-4777-af2d-87336efc4bb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "487f1dff-562e-4474-963e-7c444a8d6b14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e4a5615-a460-4a69-84e5-23534777a296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "058efc4d-f341-4ff0-a601-252d99cc13b9",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0090f03c-0632-4310-b771-6ca247414508",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "922849e8-761e-46b2-9256-f0af1954c242"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebec6633-3505-468c-b248-61c4fa163f29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20747f2d-83d0-4bfe-a2d0-d8384b3955e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac490fe-1111-4daa-8e01-2dfa75018211",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3f0a5b4-fb8c-4e77-b498-27eabd08e408",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35034f1b-a852-46d9-8a7b-53e1fe38c895"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f49e573-65a6-48df-83de-974495ebb5e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0e8fb66-fce6-4ffd-b4b7-8e23b919a91e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c53110b4-105b-4893-a9aa-50a65b9f1438",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dfaf3ba-911f-47cd-86bf-42fd863b5531",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "274293d8-076b-4c3f-957e-a8508a52ec7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae36343d-9faa-4898-8d22-aaba7611e1a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d28efb0-1762-4249-bd66-5c2468b4d8dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2346e5eb-2e88-4882-88b2-34d78dedf73e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec896e6-1be1-44f8-a553-b5a2827f322f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a86b1d3c-2a09-4d4f-bcf5-3441a852402e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ee21840-847d-466f-847e-b6debcc5946b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26e4ded1-e62c-4b6c-b0c8-eb5918958a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "443de16f-19b9-4e85-bce0-691991756a68",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa021f3e-52e2-4ebd-98e1-7d5b56054d88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4362dc5d-82b9-4a1f-82cc-34e62c6ac1f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be1525f9-d1d6-475a-85e8-249888252559",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e69e59c4-0a82-4b19-aa30-b1f2f5ec383f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba69b6c-4147-4d13-877a-e0f9e317c079",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aabe578-d7c6-46fe-9c30-259944a38879",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "915d42f7-efef-4b2b-81d8-05857d843992"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "493e3226-549c-4a02-aeab-d75984bd279f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9058f23b-85d9-4444-9da1-7c0cb56f4ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d2b001-87d8-431e-b746-3583f9853dfd",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2c03d65-2329-4ab6-9086-9456c2c094ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0886f784-7f04-45c1-b2a8-1deb551bf022"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4edf8c96-d86d-4681-852e-cf16c9ee5563",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "612b7702-1959-4eee-b577-aedf873d2c0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96ad72de-36e6-4a6f-9529-2fe638f35ba1",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b81ed28-a85e-4ac5-a019-4a5305835cf5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "766dfe7d-af8a-4d8b-864a-ee86c3a288d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e766f1a8-ab80-4e0e-823f-057e2c0cdfab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4453d7cc-2695-4450-9089-d8e057ab7bc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed35a07-ca59-444c-9f93-01161bbf66c9",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a3102b-b286-47db-aeb1-3f6169281ed7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3462b68c-6609-4d84-92f3-fec519225ca9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "578451d1-a6ae-4a18-8d6c-8b6e73ee9903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fb9c21e-a09d-4c29-970f-3e999fe64177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19002b7d-48a7-4efd-9779-a7d106d297b7",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6903844-6163-467d-9d8d-589e9ab45369",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b1121f7-127b-485f-9085-82d0c93d7e1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb412eb8-df54-4236-a8a5-46580737975b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67bb8f34-7c0c-40bf-ad47-d1fbd29f76e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "162335cf-ad24-41e4-a476-a6165fd03980",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ca01b3-93c9-44dd-a37e-1cc49cd7e7ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "892a6924-c361-48eb-8145-ff2cbc32d7dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64674851-034b-4661-9819-199a7c3a7566",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f253e8e8-7c37-4361-8c15-c13fcf5d8b6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d92b0e2-7311-47ed-a0b3-8ed063601797",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae92d283-7ef4-4036-86ce-09d8e4f4521e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47b6145b-26f3-40b9-b0e5-8e16cb035ef4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3be0d348-ed82-4097-a43f-847d48a51a37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37fa8d85-dea4-4c0b-b2db-a2d9347fc9e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b370c03-9d79-454d-a7ed-58425e827c38",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a426a829-f6f0-4cd3-a96e-3537867bc7d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eca6340-9938-48b5-8a7b-83802dbda646"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59bb1f4c-1642-4052-ba83-6befb2ac7084",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c154072c-bd7c-45df-abd5-038eac3ff645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06359d3d-b871-4bab-82d8-70d317a46511",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a370d72b-5236-4519-9b02-095edeb8a2aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3ab5d27-4122-43da-b6d7-e5efaa674b66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57ed9eab-39d0-4c7c-afd9-4a416622b79b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7170953-c405-475c-a3ca-5dd8f06277f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc392418-e0af-4b33-8c5d-228995e972d3",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "675c6982-f00b-485e-8e72-0353955ca994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4ae6bc8-b546-47da-a889-ede66b00d2b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59984396-0791-4d4d-9fdf-c9585979a65c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce083e81-9228-4643-ad7c-d79e996af436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bc5dddf-1083-42b3-b583-d7379ac37920",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb4a887-2bef-4911-9b72-3a6d9477bbe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bbd4d47-98f9-45c8-b67d-67288575c26c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d4bc72a-de78-4f62-a37e-4de9947c61d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64cb3866-93b2-4728-9501-7058b1cb9802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4b4f85e-faad-423f-972d-a9b428e5895c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feaa29b5-a2e6-4dab-b2ca-202df175220c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54bed056-7d09-4b72-b85e-b5a3fc312a22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35e0ff2c-6fb4-4b8e-9c26-8ff271a0a6f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15068679-f859-4917-8a7f-b5248331ba3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "196580b9-f5b3-4241-99cc-b9e340830108",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2faf8e85-dc03-43ab-9fad-77e24d64813e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32792c89-b1a5-4d8b-b00d-436e940e9331"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7524a37-fec8-4c0b-bd96-ab5c5f681f34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd808019-f756-48bf-8c4a-f6c86ea2c367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63313df0-0113-46dc-bc02-2c11cf6447cb",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ac95eb9-bb0a-486d-85d1-904f1166a18b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13b3beb7-db0e-45a4-a976-9a811d50d802"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef97b2f0-a9fd-4206-bd99-43f7c1469280",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baa03c55-6b53-4cde-8d06-b67889f106c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "409874ee-52be-4e33-ba48-e70c8262675e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da9b65a-33f4-4ca2-a3bc-b6974a3e9965",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d274fdb-56c5-4c8e-b011-e769743ab992"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11fc48a7-e628-4475-acd6-28d9284d6a1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0b21b43-caf7-444c-9e9a-61814637149d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cbcfcea-c50a-4e8f-ab56-410c02d1699e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6270540-a2e0-4cb8-a052-5f895d33ca1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b5f06d5-5dd2-4d86-950f-b3b198b0d88d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fa4a3b5-a9b1-4931-9efe-95d60ba48d40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abb5e76e-2e0b-4ecf-96e4-425b359971db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95ba3e80-d107-411e-877d-c31f2fbaff77",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7672caad-5f1a-4f40-8d48-77fd50a38d08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a668938-c5dd-4eda-ba68-cfe22860dc85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff184a06-2d10-49a5-92c5-eb60c2ee0b82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5219c900-3172-4f1e-9dc6-772aab233283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b69c8e-a1e4-422e-a86f-a9297cb3a29d",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5002cbf1-bb5f-40f8-9214-682b64f0641c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8101222-edd7-4756-9fb3-bd2183591c16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78726901-406b-48d8-936a-d13ac7005cdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac849343-f28b-482a-a95b-146e8d6ea942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4159e63-fcf4-4314-a35b-043b97d640da",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54e853d0-6895-4424-b57e-3c31b554a253",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d7e5b35-3a35-4457-9c6d-1e9d40753547"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b163885b-b0f5-42f9-bbf1-5ca32a7c13ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f52638c2-a094-443d-96c8-cb7a1876a272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85c37ea8-3497-4a87-8ee2-76f1843ecb1f",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adaeaac3-21fa-4e4c-a1cc-68dc679ab25b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8050bb71-4b36-4f85-89ff-4b337c4059df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdb60b61-3efb-451a-8742-fb93db46c2ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d74b3a81-caf9-46e3-bd15-9438108724ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68da93ac-9bcb-4675-a688-8d40bbf62d36",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fae46eb4-dcf4-47fb-b552-727d97331f2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "505d96a2-5535-4b18-8bf1-76f16f099148"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "200ab90e-0147-4518-a595-d80e5dda0749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2424057d-a873-4ae5-8e62-702a110e26ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "853b374c-4932-4dd1-93a0-ac0778652fbb",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab0db106-676c-4e2d-88a8-b8550146319f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25e5376a-3522-421a-a601-818aedc40c8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5815869a-fc8b-47f9-a368-3f2e755072d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f56c05f-2587-4e45-bac4-176b07017de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88f90245-0c2e-4b4a-8930-e0251fc769d6",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "781de0de-08ef-4fd5-bebb-bc38208a523c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87cc638b-9b0f-4f34-939e-2ea486aa2309"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "317aa257-728d-4137-a7b0-3a59fea9dc98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b670ccc-59ee-4153-b127-425ffb9d1813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9871ed7f-6c85-4b19-bf39-47e2557b818c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "312cf8d0-3473-4e46-836a-c4f3fb8e2552",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "253cb4dd-3946-4a34-9855-79fec203060f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94951393-a236-4dde-a70c-83c14451a1fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64a842f2-7c1a-407b-8f3b-2c9ab1f1924a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d37904-226e-4527-9273-a27741106ded",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6763721-e25d-4749-8c96-3780482c6c2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba3c751d-235c-4b3b-9719-ebf1a110f3cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8984715-c6be-4f40-a1a5-b07b17eca556",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3032d6a4-a0d4-4f53-bbd3-61c87daefe1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e40d05b-3280-45b7-b721-dbfa8377b7c9",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb052f25-3fed-4fd4-b0d2-d160a0d786fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9622ee15-e20b-4d23-a8cb-cf834470bb18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0df1c5b6-68dc-4689-b30d-21a7b8a91538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74ddc7b0-c233-4374-8dfe-32cf9cdf4856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0911248-2738-44b3-9ded-bbe52f9a9724",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc5ba45f-d1e2-4111-a1b3-e020c99d5109",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31b44102-45d0-4cd1-946e-a88e0d1f70ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3bb3afe-c1c4-4be7-93ec-d8081b68b0ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d292ba6-1311-481e-89e8-f1d1a39ddf77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77800e7b-028b-433e-83c8-6dd44d2dfd35",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc922be-cc7f-41bd-a256-557054f21426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5d7edc3-d05a-485f-b8c5-e312502ee34a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71b46231-86d1-4260-a6e3-8308613bed0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd91b3bf-1e65-415d-9418-e35c0f73b639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b771ad40-7682-44bc-8641-cd89dd7aeffa",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd99812-5d96-4908-8bff-7d950288082d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d004a851-5632-45d2-a1d0-8672787f9623"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30fe4a39-7cde-4ee9-aba3-c3d47ab52484",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32ccf840-010b-41df-aea1-32dd3bc40bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0cf629a-fa2e-4edf-95b1-67003550a478",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9fb24c3-650f-4990-9929-0932bdb626d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03b0a8af-c653-4ecd-b5fc-319d0081b50b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d596b034-6e91-4a98-a922-cde5a88fb70c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aaf7f66-263c-4646-8594-3b7a82f491ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43f9732b-2069-47fb-9383-339c33cef5af",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d7ec99-a949-4b14-92f8-feca66f495db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0ceadb5-1e02-46ad-b5f2-b81550d572d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c301f9c2-beca-49e2-a3af-655328b36cfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c34ade5d-41ef-412d-a037-36ece929c536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec03378-3bf0-4d2a-bea2-258dfe44efab",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e85ef53-1563-489e-bb97-92e2a96d739b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca0f75d2-b0fe-4da1-9574-02e38a4fb78c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d9c7c3-aafb-4b3c-b469-f96664200e7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeac4e4d-0924-426d-9d52-10fe9b601805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb82e852-0fb5-4aeb-9e37-5788c3637bed",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "773a9fe8-2147-4649-b28f-b99fcfa3146e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85b8f2a6-bf67-4fc7-af57-7fd901dd10c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47188b5f-f8de-4022-95cd-9edcbd65ba9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daf0261b-65a5-48c9-ad99-45b7bf726e29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26edb99b-f7f1-471d-9641-2b24b09c255e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d04ba8-4293-41c7-b406-bdcb565e3e5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b3bf030-5803-4d76-b5c4-2770da9fc591"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8816422-4aae-4b0a-a898-8dd071443fa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6055796e-800c-49ab-a3e6-962d162fdf1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e5f9c10-d62d-4254-b94b-8e49f47625e2",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c72a0994-7a36-463e-bbd6-13ca13797967",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91a565c2-be6a-472c-929e-bb1857e9c5b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e456cc2-77fa-4e33-9c13-499abe274686",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19ea1a1c-3a27-4888-ae97-e961ea29525c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b71b5c4f-4293-4ea9-a920-3075a0696aa1",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a230a0b-435d-408f-8d0e-242f27109498",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "562a5bf5-e446-4f33-a1fc-b13dbff71e02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab81398c-f546-4289-8a5f-8737cc71a5fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2dd8fbe-b667-45d0-a610-9b0dab59e394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c54f8020-76c1-4fa2-b04a-1084a40d1edb",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daabe48e-cf10-4deb-b41c-08fb9a8f0bf2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99de2c2e-2936-4d28-bca4-841f74879a27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc0a5d0-d6e1-4788-8e4e-37171d8c08b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2303bc00-0635-4525-aeba-92fde1152381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba934f8c-df82-4319-ac01-ba09c52c7b8b",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5c06211-8db5-4857-9e71-ab7272084b76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7ca72b3-6b69-4b0e-b68f-fefb245b3cda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "871b5daf-4b3e-4134-8ab7-3d0b0d2c2afa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68f5ab6c-75f5-401b-b913-373782e4aad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d77d4f8d-7204-42d2-a769-795ef1a0ee5c",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c62b673-87ae-4bde-893c-5426ce151ac0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcd73b8f-83ca-4b16-baeb-517d88f052d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e142667-ebd9-4ef1-9b84-2d3e50fb23ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2fe0859-d58b-4b28-bb93-f2a673ef4727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85605d10-12fe-4e34-8b52-ee2a667ba068",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12988b94-e0f9-4621-92bb-dd4039632b93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "428d9f58-1e8a-4c18-adea-f89990178c7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dbac91d-699d-41b0-b48a-817d2ea42fda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "816a4b0a-a03a-4f7a-88fa-06cb836d4e74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03eb34a9-9862-4ffd-b6ea-701f26ff2fdb",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "990c3fb9-7f62-45fb-ad5f-ade1dd0cc69c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa00497f-3411-4887-b40b-325bde287eda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b84a40-7d41-4d32-bb54-a9956fba204e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc78cca5-254a-4817-b710-1366595c5d53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc4b29d-0f43-4f19-83e1-679e44296110",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f218b713-d960-4daa-a8a7-07551464fac8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a8d65bb-6c04-4d6a-8a3d-1909595a1327"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd6ce167-e68f-40b3-9269-6e40e43b9a81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10b1c225-8da9-4cda-82d1-3a137bb3a6bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f64124-8f67-4ba2-92c9-31088fbffe01",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40337d67-2d29-4511-aff1-3e447b109ede",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bba62560-e31b-47b0-874a-7f82cf99fbfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2315669-fe05-4136-9825-f6bfe4166b09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "512a7b50-7fc2-42f3-a183-4601d8170059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd5c6765-0f88-4635-98dc-beb9c1de140a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61dffbaf-430f-4825-92ea-d0dcc9c367f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72175ec7-5c8d-4ef5-94e7-1c314f403b12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b80a903c-2717-4d08-bb74-254f394154ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c132b65a-41d1-4e88-9cd2-2199f6a0c0ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ee1344-b728-4b59-af58-17b893e27776",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af8fcbfb-0b36-490b-b3cb-1dedfef66548",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "148b7266-0e81-4ee7-905b-661edfc5b98e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c32113b2-1076-4718-b6b7-dac234c5173f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e0d6fc2-a88b-447d-a6f7-8613e3eae6c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af807eb2-7b10-42bb-a97f-96a1b75e995b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51bf8703-1cd3-4885-9b20-ab70136988bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f5751fc-b6c4-405f-b698-4477198bc364"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7625bce0-ba90-4f97-87bc-7dc18c856de5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bb09dc4-01ee-4759-99e6-1d0af7af80db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8519f06e-95d8-45b6-ae6f-2487c2b940f5",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a63089e-3857-45f2-b0c6-2a0f2fe93cb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bce5c853-0f0f-4c28-9ce7-7e1c7c100d67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a4b8840-6906-4b1c-bcd4-f5c2cf412b9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93cc912e-12e1-4e19-b810-9da447fc7f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f6ceca7-aab6-4113-97d3-c179b87cd46d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63e0ae38-47cf-4d82-a495-05237c3babba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ba6df16-146c-4bec-89ed-02755cda9f60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c5d8ce3-ddfd-43ad-92ef-f0dc314ca768",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87f3053b-3dcc-46e5-87a2-63016344d1fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41590ef8-7ed4-49c6-932f-8a7a290334b7",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf341578-bb12-4f73-9a35-80db40202c60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64f6ef9c-ed65-44b3-8953-76e14c0e951b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d8c5e5c-0948-47de-8595-30613c963e40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09498d72-d28f-44e2-ac70-8bbffb4c26e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af216cb1-694c-4c1f-ab5f-41373a4ccad0",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15b435ea-9b1e-4328-ac4a-f5a46f038d32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4db23842-aa96-474e-9eac-3940bdf39599"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32cf3c69-5fe5-4451-8d6e-0f6402de7dfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e85c83ac-741f-4a90-a254-24f8939b4dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b786678-c3e1-4de3-911e-1efbfd053158",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c9eee83-36aa-4e7a-8867-cda661b119f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b3124aa-f1f2-4bb4-a870-b62b201bd824"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e593fde-89c7-426c-8d04-098ad01dd7f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac89b262-24ee-4650-a365-cff12e41b2b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a998677-7a57-4eac-8a72-10946c88fed7",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e35f5f-dd91-411d-98cf-a7766477a8d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a09d9add-de13-4732-a749-36bb2b220a12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b83c694e-3217-476e-9163-627ee731ca2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d965465-4cc5-497b-8306-e94073fe5618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "304d5da2-0174-430d-8ebf-eafdb78359a8",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c80475d-26ed-422b-a68a-65a998f7884b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44d938fc-0cae-4691-aa75-2bb2ec3c921e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e52c6778-e96f-4656-8f87-5e84f8479109",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d7fa202-3f56-4a00-8157-f97a0cb55846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fcfc8e9-6125-4a2b-ac0e-07d5d933fc00",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2319be13-60cc-4b90-85a0-cd2147eeff69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b685f4e-44a0-4387-89de-f8933c9c4658"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f20e8d61-211f-4135-a673-e137abb03762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "febd7a0d-d63e-4f09-960c-3db7558ab542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd3bf106-1c5c-4560-88ec-febbc8084d16",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e08c276d-4ead-499f-a1aa-d56f63585449",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e07bbe2f-f1da-4af8-957e-ab5ccbc3edbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8759ac28-161a-4a26-b41f-f31ee7ab77aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe9d6790-b066-4027-8e3b-74585eb73253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb8e714-a277-4fa9-9ed8-9b88fb37972b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "264905f1-4c58-4435-b96b-97ea9b9110fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c6913a1-0fea-45f5-9049-5736bbc3ca16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab1e7e44-0db4-4fc9-9b43-dd4b1e4d469a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8a4cbd7-b03e-4e95-a3f6-f729f9fa6d11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a3cd82-b756-40b2-8b8f-9249090f3fb1",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a8303b6-b22a-4f52-b6fe-89631743ff38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a08208c7-73ce-420a-aa9c-397fd0fd0ca0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "423d163c-ca49-4967-8256-6c18e79f55d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e288e908-f4e4-464e-b21b-db8eae395bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c863845-4fbb-4d72-a240-6102dfd18a57",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c5ca50f-79d2-45ac-a414-90ce5c61d4ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8142bc5-95d5-4db3-990a-3f6bb551afd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dc46f45-4352-40e4-9c61-1027ecd4a642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ef9181e-9d09-4289-bd47-ffa8b4f70ded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8989f691-182f-422b-abf1-c79ec49f6173",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe270c2e-9dd6-48f1-9dd8-e4cc0d5f247e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0bfbf5d-c7f3-4912-83ba-c3688747a74b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4e774f4-a6f6-411e-8e83-63b932479fb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c468df13-e6b0-41d0-ad5c-0e914e95fdcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "814fea3a-ea6e-4762-a0da-f610958e35fa",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5281436d-0fc4-4c6e-9342-f2ad2cc876a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6432b336-2259-4358-9b4b-06d6e47f8bc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec524de-125b-45e4-b969-ed6a700a6130",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1feabf52-71c3-4c35-bdf1-56adacfabf20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf54876-c7a0-4a41-b148-7693f0519f36",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "307ece9f-e3ab-4fa6-bb08-7901549697a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e03c21c-9f01-4948-9c78-8008a08bfb04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c00f5da-c927-4a0b-ba50-1abd188bfd6c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7056b82b-12ff-4390-8b2e-22c4fc9e046d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ed1fbd-febf-4c5d-bb3f-6c896880d8cc",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53a22c23-b813-4f03-a36d-8f45a14c06c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "968ad6a5-cbb3-43c1-910a-675fa1feafa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f529f2-bdc4-49f2-9824-dface609463e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cbf658c-d1d2-40f7-b0c0-96796356fb1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5545e3c4-7400-4bfa-8973-9d61e9729bb9",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa353f32-df30-4c4d-91ab-df4d76d17438",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fee8c84-e437-4c13-abf3-3629db46c808"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "361914e8-4551-4241-8364-4bdba3a7ddb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "986faf9c-43fd-4494-8931-0599a2b5235c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bb4ce69-587e-42c7-9087-34fd532dc5e9",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4031dee3-97bd-4997-9f86-ed03ca950a18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0edd6c59-a495-4785-b5f0-e1c34877afa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba9b6ab0-0ea6-40b0-a3dd-62a5fe3b7a41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "901582da-c8e8-4c57-bca8-54c0c0b16051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0136f72a-c515-4870-a69a-fdbf642a1c6b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58de84c2-fb4c-4874-95ed-7c9484968e3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bfd8f6c-2e08-411a-9134-646510fb730d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fee2eb96-2e5f-4e9f-8eb0-86ee5423f1d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df84bf92-a568-43e2-9f25-a59b03674c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e2b8ecb-bf99-41e5-8573-de92ae09b8e7",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e72f6c22-7ed1-4c48-bee2-9d07a87e49aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe1e9104-1ada-4714-a7e1-8680165b084d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b313f5d4-de34-4a6b-a2ad-ee67dcd0d28d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9d85c24-8ec6-4c80-b464-eaeb804113a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "337c90e9-2c60-4b38-aee2-3d6413e1632d",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54159624-1467-4f04-afe9-adfc26c339cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7b77287-ba8a-45a2-b6ba-1fb8fefd5569"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fbed048-f04c-4dce-83bd-161a40909465",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be141461-eb88-4460-91a5-c21dd511cbbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05a12fc8-00d3-4c4a-8dbe-87ee4795bb13",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c626687-ed70-4230-a0a4-adda8efddbff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "713c7b9e-ce78-40dd-a35f-f29cb9cee5c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa65ba4d-d630-483a-828c-55922b22553f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ce56b51-c553-4ece-8e6c-486d9f573b24"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "903cdb18-57eb-4e9a-92b5-d65c5ed16f37",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62843be7-9082-4ec0-b612-755ec3c87d41"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d93cf6c4-fc9d-4ba8-b27b-d096aac9d4be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3f8259e5-2260-4b10-91a7-893109b6ebbf"
                    }
                  }
                ]
              },
              {
                "id": "1c904e19-b825-4736-b938-661f644432fe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5ffc991d-cd0b-4cb7-9861-12dde234efa8",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "954a1669-1d7d-4c1d-b926-6b6ba36dad08",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "3d5f249a-1f49-43c0-9880-f3ebc655ccba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "301492c2-3068-4a70-b702-e34ecd5ac8c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7f280ef0-753e-45fa-9962-4a62db04acd2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "25a1d4ec-0c08-4dca-ad86-bfa855bd18b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1852b478-f782-4039-987e-05c5eb7d1c5e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "39db5b85-c4ab-407f-9072-0ee468d21669",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89a223a5-0a47-41b5-98f9-b99b94d85cfd"
                    }
                  }
                ]
              },
              {
                "id": "735f5f23-77ca-4231-b920-011dd7651693",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "9a90c739-0367-4a41-98e3-5c826345fc79",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d79cdfe-e442-45e7-95a0-9956a9a9d01e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "fe6a8b92-a9b2-4ad8-ab02-21c29033db09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f59cbe-61f4-46db-a07a-6e56b539d93e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4444ca4-6dd1-4235-9b0d-f3b45e59d6a9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "621ae227-ef75-450e-8958-da5a90a0180b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c11a8128-f250-4124-9623-613ccf25e585",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b852c81f-a9a3-4009-a927-77fbf0f90a27",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "cb9087ea-344d-46f3-8d85-cdb3c4c4b433"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e629a01-77d7-4740-9172-93b01d18ac67",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "26c0c3f1-950a-4ee8-94bc-d5be49834b4d"
                    }
                  }
                ]
              },
              {
                "id": "42414c70-c5e5-4ae2-ab80-0d2fa77ca2ac",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4e642243-e29c-420d-98ad-71542aede218",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ea8718d7-1076-4440-9c9f-5af351dbf2d0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1e181a6f-cd02-46d2-81ea-43ca7f5582a1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "330aa8ce-ea4f-4467-89c1-c702993e371f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c6d6cfa9-57bd-4b75-b12f-d109804579a7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "a7c76123-e917-43d2-8058-2431b704ba40"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eba8f258-cdfc-4129-ba24-f7e02bff980a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "128af5df-f37d-4627-acab-19fde27bae48"
            }
          }
        ]
      },
      {
        "id": "71af8351-5ddd-4684-8f4f-a1d2c97a96f1",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a2aca732-7ee9-4a34-a623-4848116d7d08",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c7f7ca69-1b2f-4723-b941-1fea217edbab",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ad201c59-5726-4949-916b-2aaa843f8b9a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbafc3f5-4c29-4be4-8283-af4baeb98a72",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "df60b2fb-8a44-4bb7-ae46-f619a989ec33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0726d830-b32d-4ac8-8333-4805cc2a4cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e43aa7dc-3d8f-4dba-bdff-90bd8236b2bc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a2501e2b-b969-4106-92e5-de308995bf38",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "25116763-51da-4549-86cc-89e3c61a948c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc026b74-550d-4c69-a520-10cea49eb0b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "15567305-3215-4f42-9e78-98731c1e8e58"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3cd5b560-3f71-4345-8fac-dbddae502cc6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "59ff7ca6-cc6d-4e92-9fa1-083fe85d47b3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "28e440c5-0cbd-4c4f-bd08-8fff246486e6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4cf5a17d-0b10-4db8-b9a3-febbb6d34518"
            }
          }
        ]
      },
      {
        "id": "d74b281f-e742-464b-98e8-39d90488ce82",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "fcca9da2-f6cd-41fc-981a-ea35eba02f81",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2bd6861a-dbe0-456a-bc3d-540d9b69bf5f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "776be8e8-4230-4f7d-9235-260bea13b44b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53790160-46e2-4888-8974-1d51ccd59d18",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f3590531-418d-4dc7-9cd8-0ae4d5f05aa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75447691-7b79-4855-8778-59204b19e116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eee82208-b630-4445-8b56-fb54c8259059"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "179a9f7f-a814-45f8-8281-e6c704253198",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f7fda6c-bf27-41bf-b2ae-c52d5a15e0c9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4042f780-9c96-48a5-9cf6-b8b239fc0a38",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c9cfc65-19d5-4b61-b30d-1bbb571f6929"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da181297-2460-4c74-8ff0-e09eb37cc73d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "35b50dec-f738-45a0-ad2f-5d2e2b53829d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2964ed85-ac2b-4fa8-8ad4-fc5d3b2168d8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "19bf5f80-f235-4a5e-a485-e40685174868"
            }
          }
        ]
      },
      {
        "id": "f91051f8-ec5e-4b11-a9dc-2decf29f5279",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d78691a3-060c-40f0-be6d-23039d9c6e4a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "77597b34-07bd-442c-86a3-88ca4927d5e5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d2a9e432-bfa6-410a-ad98-e9def30073cf",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f439a511-6a83-4e7a-a66e-faea1c8b628a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a6c2f3b8-9b9d-40a6-bae1-f48f7ce7c907"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1abab53d-6803-481c-848a-5bba7c60bf02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d1fb1805-9e62-4469-93b2-42cfeb660676"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2feaad6f-9713-4cd4-be50-011600c906a0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb107dd0-9b28-4465-a618-e75c675be6c6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "299d510c-7819-4e86-8e25-edf70a55eb15",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ef58499-410d-4a65-a77d-adddafb3ff67"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8608ae0f-dda1-4a6a-a2b9-a5b06ee11c16",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0ff4c8eb-b33a-4ac7-b349-b5131f4be62d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d44efa20-5188-4dc4-b77f-6b5f228258b7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b563daea-aaea-47ad-badf-24e94581063c"
            }
          }
        ]
      },
      {
        "id": "ed2765f8-c2f5-4e38-824f-10baf536effe",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "79f09b22-3ccf-41cf-8072-2b99775f304e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5dd2f5db-cd2d-439d-bf68-10f81fb59755",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c53b7bd9-4129-4f1a-a4d2-9f38d7bbeaa1",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dc556981-6e26-464c-8ba1-d4ac1d756440",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4511bce7-dd83-4076-97a3-6e0ad103866a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 54.33333333333331,
      "responseMin": 6,
      "responseMax": 557,
      "responseSd": 77.31922079768984,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1715214973649,
      "completed": 1715214996064
    },
    "executions": [
      {
        "id": "243f8f34-488c-440a-b91b-8bcb29377d88",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "454fd665-71c5-4db3-8baf-763c3848cce7",
          "httpRequestId": "347a77bd-8330-43d3-8790-b66363e8b362"
        },
        "item": {
          "id": "243f8f34-488c-440a-b91b-8bcb29377d88",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "e2b178b3-86fb-4193-b399-08169f222e99",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 0
        }
      },
      {
        "id": "ae1eb29f-6f0a-4142-b64a-5af684844d02",
        "cursor": {
          "ref": "0a8ef8b5-8ce4-414f-8b89-c1f13de65709",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5207a67a-c853-423a-82d2-4853e5b3b84b"
        },
        "item": {
          "id": "ae1eb29f-6f0a-4142-b64a-5af684844d02",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "99b8daaf-496e-4b57-b152-5aedaee77c66",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "76e94f10-fd3f-4fea-93dc-e35ead72f9ea",
        "cursor": {
          "ref": "2b8bebea-e438-4ec4-ae51-114287922c54",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "acf97b04-6876-4f45-b8d7-127e1fff489f"
        },
        "item": {
          "id": "76e94f10-fd3f-4fea-93dc-e35ead72f9ea",
          "name": "did_json"
        },
        "response": {
          "id": "e9b5e79b-bfb3-4db2-8d10-ee4657a3e9f5",
          "status": "OK",
          "code": 200,
          "responseTime": 161,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8797b325-e161-4640-9ac4-14890b9ad43f",
        "cursor": {
          "ref": "d227d287-6be3-4cd3-bb62-d486662734ea",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8341a2bb-87dc-4604-a5d4-19ce2fbf5991"
        },
        "item": {
          "id": "8797b325-e161-4640-9ac4-14890b9ad43f",
          "name": "did:invalid"
        },
        "response": {
          "id": "4582b8e6-6427-40a7-8f91-fd48265641ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8797b325-e161-4640-9ac4-14890b9ad43f",
        "cursor": {
          "ref": "d227d287-6be3-4cd3-bb62-d486662734ea",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8341a2bb-87dc-4604-a5d4-19ce2fbf5991"
        },
        "item": {
          "id": "8797b325-e161-4640-9ac4-14890b9ad43f",
          "name": "did:invalid"
        },
        "response": {
          "id": "4582b8e6-6427-40a7-8f91-fd48265641ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db10e6f2-373c-428d-a494-bee006d702a0",
        "cursor": {
          "ref": "54574738-b003-4338-9d3f-d723879bb9bc",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "1d094490-a087-45d2-be92-5f215e097c1d"
        },
        "item": {
          "id": "db10e6f2-373c-428d-a494-bee006d702a0",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "6c3276c2-4cfb-47f8-b296-20363dbd4b14",
          "status": "Not Found",
          "code": 404,
          "responseTime": 236,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bcb5358-4db4-463c-b051-4fa23c88bdde",
        "cursor": {
          "ref": "ef9fbf9f-a3ec-4f33-af2c-51538f9d4b13",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "df38e361-39fe-47af-beba-b8f2b8a303d3"
        },
        "item": {
          "id": "3bcb5358-4db4-463c-b051-4fa23c88bdde",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "bdc924be-079e-4ce1-be86-4f7ad3515c07",
          "status": "Not Found",
          "code": 404,
          "responseTime": 28,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11f3fb58-0d52-4c1c-8a0a-9490b65521d3",
        "cursor": {
          "ref": "d707332f-9b59-496e-bd06-fbf0e5236918",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "0a60715c-28c0-4c00-9b7e-c23e2ae98f18"
        },
        "item": {
          "id": "11f3fb58-0d52-4c1c-8a0a-9490b65521d3",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e8140991-c632-463d-a1a6-94cb9659e76c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07229c8a-cbc6-4eb5-bd97-251320cb0fef",
        "cursor": {
          "ref": "23c236d1-3a52-4569-9b20-caf28de1c627",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "98431230-c8d4-4344-8e86-ce4d71e73243"
        },
        "item": {
          "id": "07229c8a-cbc6-4eb5-bd97-251320cb0fef",
          "name": "identifiers"
        },
        "response": {
          "id": "c6c5774a-1502-48da-bcd2-a72740aa943a",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7407bd9-ec65-475f-83dd-3845e05c4c10",
        "cursor": {
          "ref": "96a55df6-f2dd-416e-a6ee-c302a713de74",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b877d352-2eee-433a-9b1b-52ce8f7c7b7b"
        },
        "item": {
          "id": "f7407bd9-ec65-475f-83dd-3845e05c4c10",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "32e7d05c-b7a4-4cb6-b496-2389e5cbc54b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1bdac46-0c53-4df1-87b2-2fffba112890",
        "cursor": {
          "ref": "b21f4c97-d1a3-41cb-a890-bc06924a55a0",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "189ba489-c041-4394-9185-afdc9e3c8a15"
        },
        "item": {
          "id": "d1bdac46-0c53-4df1-87b2-2fffba112890",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "52f40996-8988-4fb8-9b58-2768fc3d7cdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01d408d5-9872-4eac-9df4-f1ef341d7840",
        "cursor": {
          "ref": "c15babd8-56b3-4abf-a845-0eb8244846d7",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "808f94b2-4c20-47cb-9ccd-fca7c701f6ac"
        },
        "item": {
          "id": "01d408d5-9872-4eac-9df4-f1ef341d7840",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "a4c61c67-ff09-41a4-8c65-fb8b81ce982d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51b6bd2b-f7d9-4bce-9278-fbd1557fdf48",
        "cursor": {
          "ref": "53a4b060-411c-4eec-8135-caeab0a91ef5",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "9af7ff9e-bd28-4e3d-ace1-e0ed64c94289"
        },
        "item": {
          "id": "51b6bd2b-f7d9-4bce-9278-fbd1557fdf48",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "7e2fcbfa-b858-4231-a6d9-662ca68348e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b095d08-4b08-4725-8634-4185a3c876a6",
        "cursor": {
          "ref": "cc310977-8594-467d-a36b-ac394c8126b4",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9948e89b-73df-42f1-8dc1-d1bbd338c8c0"
        },
        "item": {
          "id": "3b095d08-4b08-4725-8634-4185a3c876a6",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "fb35cc23-832f-4d8d-9fe8-d70f5b8a153a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b944172-7ef7-4d29-94de-26330f073491",
        "cursor": {
          "ref": "87756599-ade6-4c83-a2f2-6f7f76f17b15",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d56eb5ba-ac52-4510-9b74-afe2c23cdc43"
        },
        "item": {
          "id": "0b944172-7ef7-4d29-94de-26330f073491",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "4e5e95af-1b4c-4d1d-a1f3-f36c99e41583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e516fc37-4e19-455c-90bd-50e5dd02e30b",
        "cursor": {
          "ref": "1e287273-56be-420f-989d-13682fca57b3",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e59c546e-45f3-43bb-bada-cf9d5fd1c431"
        },
        "item": {
          "id": "e516fc37-4e19-455c-90bd-50e5dd02e30b",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "d52b45fa-2307-4ff5-b726-0c3218fa32ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8287fdf8-c467-4cfe-931e-70ca55264272",
        "cursor": {
          "ref": "b5a36341-7e61-4dc4-9ca4-6e53f750d8e9",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "bd2e3e18-4958-4ad1-9ac7-309783052ca7"
        },
        "item": {
          "id": "8287fdf8-c467-4cfe-931e-70ca55264272",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "41eae1b6-943b-48cd-8aec-70155054c176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3fae981-2b46-4224-9bd1-fe67fe37d57f",
        "cursor": {
          "ref": "a95df660-8eb0-43ad-8b50-b06787a4a6b1",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "41591516-8579-4573-9d70-037f65c9dd76"
        },
        "item": {
          "id": "a3fae981-2b46-4224-9bd1-fe67fe37d57f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "6a0a8e62-fab7-4dae-ba02-6d64797d46ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "866eb42a-0ca4-4772-8126-61e46a666bfa",
        "cursor": {
          "ref": "c6a1aa13-6d98-4765-b2a8-73674371e83c",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "cadc1c3c-0b9f-4d49-bd46-7fd883ea7b40"
        },
        "item": {
          "id": "866eb42a-0ca4-4772-8126-61e46a666bfa",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "735df11f-a088-41d2-800f-f880317d1f8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb01e9b-4be8-4e9c-a22b-be0019cc1cbc",
        "cursor": {
          "ref": "1286a416-3fc4-4bc0-b2bb-a2803969aa4f",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "720b69cf-a21e-4bb3-8ace-d627f00ae067"
        },
        "item": {
          "id": "ecb01e9b-4be8-4e9c-a22b-be0019cc1cbc",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e0fd7778-7777-4f62-9323-4b7d7b196ed2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a98d116-06b4-4e02-980a-c309866c830f",
        "cursor": {
          "ref": "937aeb8d-3223-4fd3-9041-0b752cb6b1a1",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8fe6737d-3f77-4bfc-9ca0-6a0569b39d2d"
        },
        "item": {
          "id": "8a98d116-06b4-4e02-980a-c309866c830f",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "0f8ebff4-123f-4aa0-8361-4ea6fe2ddf4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e6dc4e2-be5a-406e-ad91-328adfd288ac",
        "cursor": {
          "ref": "8af74e4a-54a9-4d55-b69c-ed7ea1e06540",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b2f0a9fc-1560-4648-a0cb-05a90300b9d8"
        },
        "item": {
          "id": "0e6dc4e2-be5a-406e-ad91-328adfd288ac",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "0aad72d5-3ae5-4d2f-bc02-296d8bc0145d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "111274e5-1f66-4aac-a7f0-9ebda54e30fe",
        "cursor": {
          "ref": "dc363830-1c22-4d91-a28a-aa3c4d1ea3c0",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6c3ee281-ac7e-43af-9842-7b144e9f8ede"
        },
        "item": {
          "id": "111274e5-1f66-4aac-a7f0-9ebda54e30fe",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "5f9b6c9d-8d06-4bb4-867d-555864bae3e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b93107bf-ef3b-442b-9ea2-bb7ed00eb50e",
        "cursor": {
          "ref": "5b9b13af-7396-4995-9e86-81c91fa93d69",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "406ecfa0-30de-488f-ba23-add289c5f2a7"
        },
        "item": {
          "id": "b93107bf-ef3b-442b-9ea2-bb7ed00eb50e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "72a19473-ec22-497e-8897-587612d9be12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "596532f7-6ec1-4ae4-ae3e-b9732ff7807f",
        "cursor": {
          "ref": "ceea49fd-4f3d-44d5-815e-1e97d323b7a2",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "302ca313-94f5-4e18-b88b-321be0425c3d"
        },
        "item": {
          "id": "596532f7-6ec1-4ae4-ae3e-b9732ff7807f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "23926497-6de5-49a8-84ff-ae92430aac11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8f06de5-f197-4346-ae92-86b683e27c97",
        "cursor": {
          "ref": "0889a31b-4fd9-4156-a631-c21d9a227643",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "dd8b42f7-49c3-4b4b-98a4-7f38e63daec8"
        },
        "item": {
          "id": "e8f06de5-f197-4346-ae92-86b683e27c97",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "869e7a16-9276-4002-848c-2829f0d225d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74783e67-ea77-49f3-9ab1-7e9c13717a38",
        "cursor": {
          "ref": "f687442a-1f48-4301-a320-0323dcd82ae8",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7fff03b1-78e1-422a-a8e3-bf249b300697"
        },
        "item": {
          "id": "74783e67-ea77-49f3-9ab1-7e9c13717a38",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "1bda33bb-7676-4765-b8e1-0d2089a3925e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96247ae1-5a91-4108-8c3d-a5ae59dade4e",
        "cursor": {
          "ref": "64553de7-2c57-4d73-acc0-4accdc39bb4e",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9881daef-8e87-4ea6-af66-32ef7d56a626"
        },
        "item": {
          "id": "96247ae1-5a91-4108-8c3d-a5ae59dade4e",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "1e31dd03-75fe-49d2-b40e-d8b21bceda2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f20589fa-2d00-42d4-b370-648c3f6fda6b",
        "cursor": {
          "ref": "29ab525f-e370-40c6-b250-9fffac4126e4",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "94656049-38d5-48da-a6cf-43a6f0f42190"
        },
        "item": {
          "id": "f20589fa-2d00-42d4-b370-648c3f6fda6b",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "32c24bf2-7a31-455e-ae5b-08c8740754b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7749228b-3619-42ce-81b7-5ed5cd36a037",
        "cursor": {
          "ref": "43b432e9-b554-4293-b1ce-c8d3d417f1ad",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "98df5070-d6ad-4067-bb04-40bc3588966f"
        },
        "item": {
          "id": "7749228b-3619-42ce-81b7-5ed5cd36a037",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "8646b8ca-2a7c-4913-8898-931c35b32af3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "908be77d-2dc9-4500-84f1-8b4ad3e09cd8",
        "cursor": {
          "ref": "f4981ff2-5f76-44b0-baf9-cfe4339de49a",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "04ad45d4-3d82-4a3d-8fa4-be7c51c15c6a"
        },
        "item": {
          "id": "908be77d-2dc9-4500-84f1-8b4ad3e09cd8",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "72566faf-401b-4912-b9ce-1f8e1800e02d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c7d1f39-e4f8-4183-9b8a-868a8082a113",
        "cursor": {
          "ref": "0a48e622-42ac-4307-964a-2048d894a355",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "92437ccd-af0b-4a20-9ee8-0547eca94e18"
        },
        "item": {
          "id": "2c7d1f39-e4f8-4183-9b8a-868a8082a113",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "1998144b-1ee2-4989-bdae-8bb258c6f94f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "160ba132-a26b-4802-be15-462c1a084932",
        "cursor": {
          "ref": "c0e201b2-bc98-4f20-8e39-a8005e819cb8",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d7db525d-7e8f-42d0-9c36-e792e7affa16"
        },
        "item": {
          "id": "160ba132-a26b-4802-be15-462c1a084932",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2ca5c0de-4cd2-4e3b-ae7f-69c64decbfcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5d5b174-7b93-4328-bc7a-04059c98b5d3",
        "cursor": {
          "ref": "8e0e798a-aa7f-49db-9b1f-72f7b67b2ec8",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "53bb2756-4691-4e28-a606-c5d821d344ce"
        },
        "item": {
          "id": "e5d5b174-7b93-4328-bc7a-04059c98b5d3",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "824375ef-518f-4906-a40d-f964461e2626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b90980cb-3bde-4adb-8561-6d1652bba89a",
        "cursor": {
          "ref": "ee9f59e9-cecc-4e22-8436-f45515bfd3fc",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e0310d54-e1d7-4c3d-8265-592882c50c29"
        },
        "item": {
          "id": "b90980cb-3bde-4adb-8561-6d1652bba89a",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "2998ab6e-b262-4c53-8c35-fb9782b48f82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04edb9ab-0b95-4701-88ac-c8d6bd37a773",
        "cursor": {
          "ref": "fd73c863-30ab-40c8-b714-65a7cec528fa",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "2e0b70d9-1e7b-4985-b04a-6dcf285b3053"
        },
        "item": {
          "id": "04edb9ab-0b95-4701-88ac-c8d6bd37a773",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "468a64a1-ddaf-4172-9ca4-2988e59ebb9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddd7ece1-eb48-4d56-b8d0-4e2c9ce948f7",
        "cursor": {
          "ref": "b485283f-f5f8-4bb6-8612-4a95be4f2ea7",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f3a4c558-2773-4218-abeb-4ef2df91df3a"
        },
        "item": {
          "id": "ddd7ece1-eb48-4d56-b8d0-4e2c9ce948f7",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "38231468-03c9-4689-ba1c-750c6f975898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3196328a-947f-4698-be4c-3042a8c348cf",
        "cursor": {
          "ref": "c101a216-7c61-4d3d-a752-3d6324b546f4",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "206c5691-e195-4f2f-b3e2-1293e8294fa1"
        },
        "item": {
          "id": "3196328a-947f-4698-be4c-3042a8c348cf",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "73762d37-47ed-4527-a5e6-a87e12d2e6f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4d091b2-962f-4320-9951-cfe7ba1204e0",
        "cursor": {
          "ref": "1919536f-80fb-4597-b67b-6f29df07ee27",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "92509227-0907-4b9a-863e-b86dc08fa0e4"
        },
        "item": {
          "id": "c4d091b2-962f-4320-9951-cfe7ba1204e0",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "6e469d44-3493-43cd-861e-f15fc02c044d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "425e76fd-07aa-4691-894c-5f890d8d88e7",
        "cursor": {
          "ref": "270bd8b4-fc56-481c-8bb2-36690d454b8d",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "67ee4c49-2623-49fc-b229-6eda65ae5ccc"
        },
        "item": {
          "id": "425e76fd-07aa-4691-894c-5f890d8d88e7",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "9141760d-2a1d-4125-9c1f-7b0c75ce834d",
          "status": "Created",
          "code": 201,
          "responseTime": 557,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "6a641b36-1b76-4fd9-8933-10b650c35b26",
        "cursor": {
          "ref": "7c159566-99e2-4ea2-8a60-ac2a47a80270",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "7316698a-fbf6-4230-82bf-aecdd1c5fb18"
        },
        "item": {
          "id": "6a641b36-1b76-4fd9-8933-10b650c35b26",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "e34c5fe1-00e8-446c-8190-cd07ba1ddaef",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "e8918d92-365a-4354-9b07-1841031e84ed",
        "cursor": {
          "ref": "08fb48fc-c3bc-43e8-875c-5bdf906ee720",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "59676a06-3aa8-4113-8b70-3505d1e58ba5"
        },
        "item": {
          "id": "e8918d92-365a-4354-9b07-1841031e84ed",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "e8b193eb-0c6a-405f-a616-e7db965937f6",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "b8c26ae0-c6b3-40a7-bdb5-d664cac2871f",
        "cursor": {
          "ref": "93307a86-23b4-47dd-b051-53dfd2f03c3d",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "11c9c32d-a316-4518-bf4b-18b7624bf82f"
        },
        "item": {
          "id": "b8c26ae0-c6b3-40a7-bdb5-d664cac2871f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "4400af33-5ee1-432a-9235-2a6f092da87f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0630a952-3b05-413d-840a-084f356c8a8d",
        "cursor": {
          "ref": "7fb40e29-737d-407a-86f4-c6c1b1bf8c08",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "067d79f6-2e42-495a-91aa-b27c2f3debb3"
        },
        "item": {
          "id": "0630a952-3b05-413d-840a-084f356c8a8d",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "4c6ade47-f73e-4bb4-9c24-7b7669db420e",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "51cc14e2-cf5f-4390-8d5f-ade6a3b40dbb",
        "cursor": {
          "ref": "094fdaf3-feec-4e01-a9d6-1ec81196d2e5",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "e7af7772-3e0d-44e3-8f62-87c7df2a53ed"
        },
        "item": {
          "id": "51cc14e2-cf5f-4390-8d5f-ade6a3b40dbb",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "931a2cd1-5b7e-4cad-b5ab-33f24486c135",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "fd68b9aa-1304-467b-9f83-985fd1917932",
        "cursor": {
          "ref": "acf05fb0-ab43-44d9-9c6a-6cad3ec89718",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "3915c3cd-133e-4ef1-ab7b-e4703886e12a"
        },
        "item": {
          "id": "fd68b9aa-1304-467b-9f83-985fd1917932",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "5e311890-6e84-4b03-9356-0350769105f7",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "ef5500b8-f231-4365-8b76-1b54f1f24be4",
        "cursor": {
          "ref": "70b6730c-04dc-4849-a7ac-631cb5ee3f78",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "563202b8-e20a-4e6f-98d3-1dbdb9d33de2"
        },
        "item": {
          "id": "ef5500b8-f231-4365-8b76-1b54f1f24be4",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "6b795eda-01b8-47fc-a169-1a83698cd786",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "08d64df6-2fe6-4ab9-9023-de1257c7e2ec",
        "cursor": {
          "ref": "c80251e7-d76a-4d3d-bb02-7d5a944ba078",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "e03cf6f1-5351-417f-a443-43727f73c7a5"
        },
        "item": {
          "id": "08d64df6-2fe6-4ab9-9023-de1257c7e2ec",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "d4e94f26-06bf-40c7-a4c7-6fb718e7398f",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "47abe4e9-cb27-4bd6-9fa6-5e57aeefb879",
        "cursor": {
          "ref": "e6a66f49-235a-4595-bbc8-982e158c139b",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b611f07b-0485-45b4-9fbb-01f157005f12"
        },
        "item": {
          "id": "47abe4e9-cb27-4bd6-9fa6-5e57aeefb879",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "7ea0de5b-967f-4b75-8de6-fe2246014018",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "7b5bb5a3-edbf-44fc-909c-b731b90af5a6",
        "cursor": {
          "ref": "487f295a-e050-4f51-a0e2-fcbac2ca5a5a",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "9336a2f5-402b-44fb-891d-2d6c3546ae39"
        },
        "item": {
          "id": "7b5bb5a3-edbf-44fc-909c-b731b90af5a6",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "cf583c6f-dfc5-4ed7-81e1-51a0f76880ea",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "d94a9e8d-39a4-410b-b324-58ed0cbbc54d",
        "cursor": {
          "ref": "5b4bb5dd-b5a4-4b89-b9ee-1c9667719c4e",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "63f7388a-b7e8-4416-a2f3-27e9cc691450"
        },
        "item": {
          "id": "d94a9e8d-39a4-410b-b324-58ed0cbbc54d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "1ddfd734-fc9d-4388-bc09-286b886ad1d2",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "c00683bf-d7bd-403a-b136-6c18b1e35d6d",
        "cursor": {
          "ref": "c3c9ff0f-f96a-41c5-a77a-d57599675aed",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2296f4b7-038d-47f4-9857-1d242c8da6f3"
        },
        "item": {
          "id": "c00683bf-d7bd-403a-b136-6c18b1e35d6d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e411aa39-15dc-4b91-887d-6051e2ea1e7f",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "9db89e34-a4fb-44a8-93c1-641441917db7",
        "cursor": {
          "ref": "e11274cb-189b-4660-b6c4-b5bbc0d6172b",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "fe8836ad-1153-41b9-9d14-31040c3faa8e"
        },
        "item": {
          "id": "9db89e34-a4fb-44a8-93c1-641441917db7",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "74747edc-648e-40f6-99ca-d62054058fa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce47530d-9209-4c2c-bf3b-d55bb82c9b1e",
        "cursor": {
          "ref": "38b95467-e861-4c01-a1d6-dee2d8f53137",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f253a6ce-53bb-41a4-8f3a-06cad5e5f33e"
        },
        "item": {
          "id": "ce47530d-9209-4c2c-bf3b-d55bb82c9b1e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "25d31762-07c6-4b5b-92af-93394434a13a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15fcedb4-ec77-46f3-97eb-109d19e1572b",
        "cursor": {
          "ref": "84c6d822-cebe-4404-9283-c7417a77fae2",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a27e401f-dd01-48c1-b504-3db02d51fbed"
        },
        "item": {
          "id": "15fcedb4-ec77-46f3-97eb-109d19e1572b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "7d44b848-0c34-4b9c-81f6-a25e9ea3c817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f55a10-6648-452b-8706-1b8a5ec60504",
        "cursor": {
          "ref": "1ced225d-971a-4079-96d2-785efc2124bc",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "24b224e3-cec0-47f1-b991-887c4fcf7007"
        },
        "item": {
          "id": "f1f55a10-6648-452b-8706-1b8a5ec60504",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e0061fd3-2ebd-4233-9d5c-2345ec73af10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47f7fe6f-8d62-4712-bd4a-29c9aadcdcb4",
        "cursor": {
          "ref": "bdf0567b-6774-4245-99ff-3886a377818c",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b30d7dea-f237-4894-89e0-57282cb39715"
        },
        "item": {
          "id": "47f7fe6f-8d62-4712-bd4a-29c9aadcdcb4",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "ff83df79-6a3b-4d1a-adb7-0ac5021d87ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "120c28fc-e272-4e2b-9c66-cfe3a741231b",
        "cursor": {
          "ref": "8b072e8e-8415-4f64-a589-7dada818e8f7",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "004df37b-b464-49cb-b4c6-d513df2dbf68"
        },
        "item": {
          "id": "120c28fc-e272-4e2b-9c66-cfe3a741231b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a3630e40-8fa6-42f0-a1ef-85722ce27835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d0ac1cc-2f75-4eb1-ae30-79eb894abf08",
        "cursor": {
          "ref": "da3338c6-c560-414b-9138-24a95babbd0c",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "36de2a77-6dbb-4053-85a3-5a9e59450b53"
        },
        "item": {
          "id": "8d0ac1cc-2f75-4eb1-ae30-79eb894abf08",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a5776d8f-4816-4b8d-be40-042694030398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f99f30fa-98a0-4fbe-9e22-d9131f5031c4",
        "cursor": {
          "ref": "2808ed9a-1dac-47ed-a803-cae1692b489e",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "273d82a9-62bf-4a9a-a9ca-6b1b4c8b7ab0"
        },
        "item": {
          "id": "f99f30fa-98a0-4fbe-9e22-d9131f5031c4",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "e82eb980-24ca-4a9f-8e1b-557a79067fb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c63fc0ba-6016-483d-b7f0-fd7e0b8a63a7",
        "cursor": {
          "ref": "7f6121cb-e6ef-4f89-913b-4ae8905fd0c3",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "3172f3f7-a04b-47a5-b687-0422cb5e76c5"
        },
        "item": {
          "id": "c63fc0ba-6016-483d-b7f0-fd7e0b8a63a7",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "8c5291ee-71bf-4103-a352-921cb6347fa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "283b94c8-26c8-4655-823a-2bbf6f508e61",
        "cursor": {
          "ref": "fb13ff31-e0bd-461b-9a4d-6b5d84bb96db",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e26baab3-dbd2-457e-bd16-75c0d5c78c08"
        },
        "item": {
          "id": "283b94c8-26c8-4655-823a-2bbf6f508e61",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "43c82dc4-ab42-4be5-8b48-953b32e72602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eab0c8c-094b-4162-acb1-ffb3f485f26b",
        "cursor": {
          "ref": "c2a01ae3-24fd-49c0-ac0b-04e82d1ea311",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ff2a0641-dc80-44b2-94ed-940abb6d18ae"
        },
        "item": {
          "id": "8eab0c8c-094b-4162-acb1-ffb3f485f26b",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "7d6c0b70-a474-4645-8cea-f335983cdf0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b826a67e-9d40-49f8-8c1b-b531bc3c57fd",
        "cursor": {
          "ref": "868ec58a-e2ee-4e11-867b-bfba6f16ff41",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "179c6c0a-7d4b-48cb-9bd7-ed877232d55c"
        },
        "item": {
          "id": "b826a67e-9d40-49f8-8c1b-b531bc3c57fd",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "8c4fdb6a-9d0d-414e-a343-cd3dedcf57bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cc3304f-a64f-4c35-b03f-4eff8909a026",
        "cursor": {
          "ref": "af6ff41f-d29e-4a75-87ec-292c68e4c4a3",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "9cac8eab-f923-4a80-b8fd-09d8f3e6e182"
        },
        "item": {
          "id": "3cc3304f-a64f-4c35-b03f-4eff8909a026",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "0704a184-924c-4070-8563-47b06a3e1aeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c2fde50-265f-4676-b8fb-486a2b540a7a",
        "cursor": {
          "ref": "1aeee444-b1b9-4df3-9ed9-2674428edace",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "cb3f19f2-491d-40e5-b1b4-bd7dcb4028af"
        },
        "item": {
          "id": "3c2fde50-265f-4676-b8fb-486a2b540a7a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "020ff2c2-6841-48d0-bef0-4998e1761ecb",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "51d2e31c-3fee-4dc8-98fb-74a8e2c0ffdd",
        "cursor": {
          "ref": "2e88a8de-7a0b-4125-9d02-56efcfc010d5",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "df1dd2ad-9be1-4626-9eef-5f38290ff0dd"
        },
        "item": {
          "id": "51d2e31c-3fee-4dc8-98fb-74a8e2c0ffdd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "e0491c1f-1966-4247-93fe-40ff08054dcd",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "91ce546b-2bdd-4e1c-82d5-5474704953d4",
        "cursor": {
          "ref": "4bb8ce0b-005c-48f4-aff5-b419d070fef3",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "9e4eeac7-1c44-42ce-ab30-43bce828c6c1"
        },
        "item": {
          "id": "91ce546b-2bdd-4e1c-82d5-5474704953d4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "0173b71d-2958-4736-aef2-cc82d889b2ae",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "dccd4c15-65ec-49a3-ba62-4b5ea35963e8",
        "cursor": {
          "ref": "91428f58-b67e-4a29-a7e4-3345e15b5053",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "670da272-94e2-4fbb-b9cc-2a97be38343d"
        },
        "item": {
          "id": "dccd4c15-65ec-49a3-ba62-4b5ea35963e8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "a0a390fb-4deb-4b7b-be49-2c438ddf96be",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "c362b73f-fc71-4fe6-8c30-558e796edc4a",
        "cursor": {
          "ref": "7d383545-087a-46a7-835d-3b60590a731a",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "63cb706b-9468-4d8d-b428-c0ee351fd9fe"
        },
        "item": {
          "id": "c362b73f-fc71-4fe6-8c30-558e796edc4a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "ac1cb84b-8b51-4e9e-a868-48243708d20f",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "4ef8396d-660d-41a8-923b-c1ed3c2d855a",
        "cursor": {
          "ref": "610607d4-48e7-4bcc-a0fd-a2788244382f",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "77825324-bd1c-43d6-a5fb-a5ec7203007e"
        },
        "item": {
          "id": "4ef8396d-660d-41a8-923b-c1ed3c2d855a",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "aea4e1aa-85ab-4198-a326-29de8a128678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "661f0273-30a4-4f2b-b47b-32ad1b2be59e",
        "cursor": {
          "ref": "b6ac56d3-f904-4cb7-b2be-3c23118ea529",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "216f8fb4-4744-45aa-ba37-9bd98aa4e93b"
        },
        "item": {
          "id": "661f0273-30a4-4f2b-b47b-32ad1b2be59e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "18f0f9b3-dcec-4aad-9815-7fcbf72029f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efc085f5-6f66-41a8-b92b-21909c51b003",
        "cursor": {
          "ref": "b52362b8-53e4-42f9-8c91-50935b01d070",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "34cba797-742f-426d-a03d-1ab8783c1d6d"
        },
        "item": {
          "id": "efc085f5-6f66-41a8-b92b-21909c51b003",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "9f734dc1-5d24-4753-9629-1d4984da2c27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dfb9748-7dd9-4e04-b91c-2843aa22e76b",
        "cursor": {
          "ref": "33ee759d-f37d-4c8f-bdd8-4d6f1b85de15",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "458c06cf-bee5-40bf-bea5-6fcd78b20011"
        },
        "item": {
          "id": "2dfb9748-7dd9-4e04-b91c-2843aa22e76b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "2c4e89a6-3da2-467f-96ce-caa142b0ddb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a25d5190-66dc-4360-9c45-a1384eb27534",
        "cursor": {
          "ref": "b17b7a2c-625c-4af4-8b1f-d1a334903eea",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "58d12348-6442-4793-a99c-c1cc0f307ff8"
        },
        "item": {
          "id": "a25d5190-66dc-4360-9c45-a1384eb27534",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "77d844d1-0d3f-46de-b90e-cd5feafcc046",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "883038eb-1b25-45bf-befb-f1c0e830b3a7",
        "cursor": {
          "ref": "4b99f32c-128d-4a64-8c7f-09b371643f1e",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "1857029c-8bc5-42b7-828f-1ce85d748d2d"
        },
        "item": {
          "id": "883038eb-1b25-45bf-befb-f1c0e830b3a7",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "f6d834bf-ff8a-4966-a20b-9f0e18de7493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f79211b-cd94-4ce8-9709-2b8b6f23005e",
        "cursor": {
          "ref": "9b1997f1-813b-48b6-9eb6-d58dec39a416",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "99030515-5cf5-4aa7-a070-b8e5527f7c9b"
        },
        "item": {
          "id": "6f79211b-cd94-4ce8-9709-2b8b6f23005e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "3112657c-b996-4693-9934-43e3010ede57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a2641bd-8399-4ea1-b262-bcffbb96fa99",
        "cursor": {
          "ref": "eaa8cbb1-7e0d-4353-bb3a-8eda542f282b",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c703220d-14fe-4d95-8c2b-1cf8eb1fb1a9"
        },
        "item": {
          "id": "3a2641bd-8399-4ea1-b262-bcffbb96fa99",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "1d510129-486a-4676-9d4e-46f40bec10b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "292cba95-9785-4fa0-b924-6735d1673370",
        "cursor": {
          "ref": "543b00b5-d24f-4eb3-8715-7e0adc50fc10",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "7678dd84-1f1e-4a42-a46c-018ff179cc5c"
        },
        "item": {
          "id": "292cba95-9785-4fa0-b924-6735d1673370",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "6920437b-8afa-4908-a04c-1808f4b5aa8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c49ddb8-fb50-4c5e-9b89-182057ac023c",
        "cursor": {
          "ref": "4fbfbe06-ff9d-43b9-9107-f2483965aa17",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "1fb8d3be-cdb4-406c-aeff-e7b1d0378ac1"
        },
        "item": {
          "id": "1c49ddb8-fb50-4c5e-9b89-182057ac023c",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "6f0dcbbf-915b-4499-9678-1933a938205a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f899d171-248f-4b3f-b2ed-0d255916d3f8",
        "cursor": {
          "ref": "a17df29a-27bb-4fc7-8ca4-18c4da205665",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "253f4554-7e36-41d7-a84f-5b523f18e018"
        },
        "item": {
          "id": "f899d171-248f-4b3f-b2ed-0d255916d3f8",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "8804fbc5-a25c-435c-8b55-ec6f884c02ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c77b1213-87b5-4775-97b2-5380cd6d7879",
        "cursor": {
          "ref": "5916ab2e-e4d6-4415-8a21-6ae4fd315ad5",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c7f2a5ac-2d7d-455b-b45f-4e58e6e5cfe8"
        },
        "item": {
          "id": "c77b1213-87b5-4775-97b2-5380cd6d7879",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "db20bef0-f12d-4af0-a7a3-531a6a08eb95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "526519ca-2a68-4e99-99e0-952c7dcd10f3",
        "cursor": {
          "ref": "a9d3e65f-dbdb-45d8-a4f4-644baffe7865",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "833414fe-7e76-4e31-a934-4de77c373f13"
        },
        "item": {
          "id": "526519ca-2a68-4e99-99e0-952c7dcd10f3",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "880c3d1b-f229-4929-b8da-72d3a47a53d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d0842a8-cdf0-435c-aeca-89c48a6332db",
        "cursor": {
          "ref": "8876d2b4-4b82-445a-ae60-8196f11a7fd0",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "fa3fce5f-920e-4547-8afd-73689621ccfd"
        },
        "item": {
          "id": "3d0842a8-cdf0-435c-aeca-89c48a6332db",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "9288bae0-f66d-4312-ac02-0212a1a93caf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e14b1a4d-542f-4642-a96d-d46463baa9bc",
        "cursor": {
          "ref": "62dd7902-b369-4120-a28c-0933cd71dd39",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "df0faa5b-0431-49e6-831d-f616f719a55c"
        },
        "item": {
          "id": "e14b1a4d-542f-4642-a96d-d46463baa9bc",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d5f7592e-17ef-446c-ba7c-04b9b195777e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb53450b-abca-46ed-bd8e-1c9bad33045e",
        "cursor": {
          "ref": "58472054-b0bc-4fca-a126-ca6945cc2cbc",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "15c53b11-90b5-4b9d-8f66-3fe945c599e3"
        },
        "item": {
          "id": "eb53450b-abca-46ed-bd8e-1c9bad33045e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "dccc67e1-9f91-4733-8e97-ee614b5ab2a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92076d6a-7f50-4f49-ae98-d33583dc35af",
        "cursor": {
          "ref": "280e9826-9c18-4703-bbd3-9ca2bfd8a944",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "1bd12471-5db6-4efa-861f-ae121eb05d7b"
        },
        "item": {
          "id": "92076d6a-7f50-4f49-ae98-d33583dc35af",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "1bd4478c-e315-448b-8def-b848b0e902bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9072359-3d9b-41cf-a6b2-9e30bb31d850",
        "cursor": {
          "ref": "26e80098-a6b5-47e2-ac15-71f25655e0ab",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "594710c6-6347-4933-ae29-a1c583d0e9b8"
        },
        "item": {
          "id": "c9072359-3d9b-41cf-a6b2-9e30bb31d850",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "88dac0a8-ff9f-4dc7-a05f-d394fa4e7119",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a36961ab-7143-46a9-be08-3440df653b1f",
        "cursor": {
          "ref": "1bb1c3cf-4eb4-4a3d-b008-0a833914894a",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "39752fdc-41e6-47af-bfe5-393a63eac318"
        },
        "item": {
          "id": "a36961ab-7143-46a9-be08-3440df653b1f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "b95bf8f9-dbd2-44c9-add7-4edc0ef5b2e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "703098c4-b0f9-41ee-ab60-bbdaa87021ac",
        "cursor": {
          "ref": "45f7a66c-ff29-4e36-a432-357a4af25f6e",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "48d3e452-76e9-4aff-8ed9-096389f3b897"
        },
        "item": {
          "id": "703098c4-b0f9-41ee-ab60-bbdaa87021ac",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "e7dd90db-fd15-4d9d-98c7-f4b534fd84cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b17ca5e7-2ba5-425a-893b-612e7f35ab66",
        "cursor": {
          "ref": "4ea31391-0668-4a48-8393-9cb5d67dafc5",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "95e42dd2-b327-4d6c-8d93-b439b7e40a9d"
        },
        "item": {
          "id": "b17ca5e7-2ba5-425a-893b-612e7f35ab66",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4ea812c8-4ca7-444c-8e47-6f8dc84e6c7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94f7203b-1e2b-4641-8725-cef2381456e5",
        "cursor": {
          "ref": "7e687c40-d27a-47d2-b0f0-acaa511fd5f3",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2a5c14b2-8cee-4e77-a9b6-bac6d06d3f9c"
        },
        "item": {
          "id": "94f7203b-1e2b-4641-8725-cef2381456e5",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "9ad67db6-8dc1-4ad2-adea-591346ab8c00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5761e879-5eb0-4b4a-b7f1-cb8af210732f",
        "cursor": {
          "ref": "ab15bce7-71d9-487f-9869-10169435d628",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "1c5b5a92-51db-4138-aed9-04c0a97e8581"
        },
        "item": {
          "id": "5761e879-5eb0-4b4a-b7f1-cb8af210732f",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "81996240-74cb-400e-a936-d974311e6bef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e01e612-d2bf-48bb-83cf-8acece998a11",
        "cursor": {
          "ref": "91a5800e-ef27-483f-a5ad-b6d4853ff012",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "da74f9e4-1924-41e8-8161-b7ba6b671390"
        },
        "item": {
          "id": "2e01e612-d2bf-48bb-83cf-8acece998a11",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "2b4d0ca1-ac4e-49dc-8b57-0458402ed417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23354a18-3f29-478f-b274-ae12a2e8ab9a",
        "cursor": {
          "ref": "24cff96f-3b62-47e5-8261-54e5ec8a99cf",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a9bc3ce8-e497-465b-a98c-87a5f1f9fc21"
        },
        "item": {
          "id": "23354a18-3f29-478f-b274-ae12a2e8ab9a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "50c5e181-e65a-4a04-b010-df2008d2c5c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34a5dd57-ef73-4eed-9f98-6bf0c899762e",
        "cursor": {
          "ref": "57253d6a-d7e6-4ca5-a1df-ccba7c12965e",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "e9448249-ecba-45fd-941c-36abd65c8a77"
        },
        "item": {
          "id": "34a5dd57-ef73-4eed-9f98-6bf0c899762e",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "2a0a9959-6bba-42ee-b34d-39139248bd0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea2063ab-6ee8-47e6-b08c-28e25a07d638",
        "cursor": {
          "ref": "69031c2a-9161-4234-9662-730748a8fa90",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6f4182bf-a3c6-4042-a00e-992eb6a157d2"
        },
        "item": {
          "id": "ea2063ab-6ee8-47e6-b08c-28e25a07d638",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "96da67b1-8887-4b57-88bf-fdf39f784911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f08633c0-6268-4047-bbf2-34a4228c7ed1",
        "cursor": {
          "ref": "d412e3ec-90f4-4032-b7d8-6b7fa5083de7",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "403a1817-e1a3-43f3-bbc9-e9a605f8f3ab"
        },
        "item": {
          "id": "f08633c0-6268-4047-bbf2-34a4228c7ed1",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "97629874-e2b6-4f31-955b-e912f4faeea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc411de5-1dbd-4376-a81e-6f8c902b6d64",
        "cursor": {
          "ref": "7e1b0271-3368-47f7-8662-76512c49f5d1",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "bdb50623-c901-4eb0-84f3-b55a78c34473"
        },
        "item": {
          "id": "dc411de5-1dbd-4376-a81e-6f8c902b6d64",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "6ea47479-adce-43ce-9603-cc527a911340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aecda84-aa79-4abb-b3f7-e93a26e2a4c7",
        "cursor": {
          "ref": "ef94d45b-8898-4ff9-a15d-ba27852765d4",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "579d4beb-f404-4817-bd36-209ba1d8aee8"
        },
        "item": {
          "id": "8aecda84-aa79-4abb-b3f7-e93a26e2a4c7",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "0a399356-2440-41a8-ac0b-ffc652c85493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba699d48-6fce-4c46-8694-d47867e19477",
        "cursor": {
          "ref": "223b6270-654e-4a1d-98a7-75ceedf5d2b2",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "ed249088-b0e0-4c9e-a332-0bbdedf33666"
        },
        "item": {
          "id": "ba699d48-6fce-4c46-8694-d47867e19477",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "574c7b20-f505-4b2c-8a96-6e7b7dd5a160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86db46ce-cf90-46b2-ba2d-ba554b4e9862",
        "cursor": {
          "ref": "e76423fe-d9c1-4788-bfae-a3709f75bcde",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "547ce1f7-fce4-44c5-9e3b-abe27e545e76"
        },
        "item": {
          "id": "86db46ce-cf90-46b2-ba2d-ba554b4e9862",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ab77513a-8f3f-427e-88fb-c251f48037de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "188bcee6-d6c1-4a9a-9f72-07d3b69fbbe4",
        "cursor": {
          "ref": "d895ba69-880d-4f75-8767-80a4731aaa01",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "a1a78ab0-6288-493b-8c0b-7aace72bac13"
        },
        "item": {
          "id": "188bcee6-d6c1-4a9a-9f72-07d3b69fbbe4",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "d5bb84b1-8b47-4d31-9b45-8fc0ba49ce68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "f6489f58-b8d6-4904-a296-0088a9990e08",
        "cursor": {
          "ref": "a69fb96b-8759-426b-8d68-c5726f6559bd",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "1c74fd6f-c855-4afe-822c-b04cdeb27112"
        },
        "item": {
          "id": "f6489f58-b8d6-4904-a296-0088a9990e08",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d01b513f-1820-45a1-9e59-4083a622b88e",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff1b327f-0153-45ec-b4cd-487878114e19",
        "cursor": {
          "ref": "30061ece-7702-4c03-be13-5fe230a9f6ce",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "abbb89b3-b52e-4f0e-bfa1-95f45386753e"
        },
        "item": {
          "id": "ff1b327f-0153-45ec-b4cd-487878114e19",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "80ea8df0-7b4b-4ee6-bf4b-38bdc554cf0d",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8036176d-d22a-4361-b4c6-2bc91c9f8ff1",
        "cursor": {
          "ref": "b2b5dd47-a331-4747-b3d1-ecf0db48375f",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "1436c741-c831-47cd-87db-e618032665f6"
        },
        "item": {
          "id": "8036176d-d22a-4361-b4c6-2bc91c9f8ff1",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "bd1fe09c-733e-448d-8415-c64d6614bba6",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "815f2439-f7be-4919-827f-d046c3756c23",
        "cursor": {
          "ref": "5677a3b6-3075-4f7f-ae0f-4a919f438c66",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1a299aed-cec0-488b-b031-42516f574a6c"
        },
        "item": {
          "id": "815f2439-f7be-4919-827f-d046c3756c23",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "16e87b1a-6756-4cfd-b990-c19fd8116b65",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c8d1b4e-d3c0-4246-a8cc-5ddbd5b0302c",
        "cursor": {
          "ref": "bbe42394-3ebd-4d4d-b265-9a7b97db0bc0",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "ff34d549-0ae7-495d-ae7b-b4bf56062abb"
        },
        "item": {
          "id": "7c8d1b4e-d3c0-4246-a8cc-5ddbd5b0302c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "93794430-b2f2-446f-9bdb-fd26565dfaf3",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-09T00:36:26.385Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-09T00:36:26.385Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "50e65e62-886e-415e-aed3-fb24e356058f",
        "cursor": {
          "ref": "8e44e81c-8ea5-4df6-b8b5-5cbc8de5030d",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "ffbf5b14-4c98-4055-90be-0063fef16e09"
        },
        "item": {
          "id": "50e65e62-886e-415e-aed3-fb24e356058f",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "9f3613b5-536b-4ed1-a12c-d4ae8e920dba",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d2e47b-5ac3-4fb2-a070-8bd43c6bde0e",
        "cursor": {
          "ref": "bfbf58f6-dfa1-4af0-837c-679899d64a03",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "78d372a0-1fdc-4a41-a50a-02db4fbe59b9"
        },
        "item": {
          "id": "c1d2e47b-5ac3-4fb2-a070-8bd43c6bde0e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "9f1c84a5-0a14-4057-ac04-66531d439867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af52d829-6712-4db7-9618-d4dfd3dc829b",
        "cursor": {
          "ref": "4b506f3c-f921-4899-82a3-1d6ad0d8be26",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "9185c338-ecf3-43bc-920d-559a65dd3106"
        },
        "item": {
          "id": "af52d829-6712-4db7-9618-d4dfd3dc829b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "cddb1c02-94ac-41b5-90fd-75e37cca1675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0032de9-7076-40e2-bc18-799d4e1555fa",
        "cursor": {
          "ref": "daf97ad3-d05a-4d58-982a-4f767c195eda",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "87603544-2695-47f9-8b29-f6825d4ebd4e"
        },
        "item": {
          "id": "c0032de9-7076-40e2-bc18-799d4e1555fa",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "68552ace-6c14-4dc7-b41f-f68e21240124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2c68d50-1793-4e87-a581-6db477821762",
        "cursor": {
          "ref": "4cf43f15-ed7c-483c-867d-206c4abacc53",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "67765f86-385c-47db-904e-4ca9d721fec5"
        },
        "item": {
          "id": "a2c68d50-1793-4e87-a581-6db477821762",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "490f0d74-1949-47aa-8d0c-7c509f82d8a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6305a00-5610-4bb8-a694-980c9180a0a1",
        "cursor": {
          "ref": "06a4690b-759c-45a0-8151-1b9c9db7a108",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "8f88699f-2620-424e-9b5c-494e610bffad"
        },
        "item": {
          "id": "f6305a00-5610-4bb8-a694-980c9180a0a1",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5af80f1a-1a93-41e8-93f6-d26e50d8a885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c426e82-4c00-4e98-aaea-97b984b1acef",
        "cursor": {
          "ref": "2ae771c4-72b3-48c9-9bcc-33f5456b8297",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "07c1b8f2-d049-4b1d-9938-7a2457100f3a"
        },
        "item": {
          "id": "0c426e82-4c00-4e98-aaea-97b984b1acef",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "50beec52-01fd-423a-ac70-eab5b643ccad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d180dda-9cd3-47ce-911e-377805b8209d",
        "cursor": {
          "ref": "a2ce6e6d-f54b-4daf-b236-c99b0ea7cbdd",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "fe43a8fa-4255-4c86-991d-00cf8ffaa945"
        },
        "item": {
          "id": "1d180dda-9cd3-47ce-911e-377805b8209d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0500e0bf-2d4f-41e3-acd0-67ab0a89117c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "388b91df-afb2-4191-bd05-c1f81f29e14c",
        "cursor": {
          "ref": "863d9c70-45be-4638-8779-4aec0d0da632",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "eee4477e-33bf-4db8-baf6-3b173d6d936c"
        },
        "item": {
          "id": "388b91df-afb2-4191-bd05-c1f81f29e14c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c08731c4-89a7-462a-a268-f9fcded3cbd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "755d1d6d-b14c-45b5-9859-dada3b8d050d",
        "cursor": {
          "ref": "ea1a35f5-6915-42ef-8265-3b3f8db18374",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "abab0373-45d6-48b1-bec6-0bba52e35851"
        },
        "item": {
          "id": "755d1d6d-b14c-45b5-9859-dada3b8d050d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ef5ede10-8104-4f40-838e-7af424ca9d85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8967414-64e4-40e2-90c0-266eac3f3ea0",
        "cursor": {
          "ref": "48792c7a-ede4-4817-9868-d845dd20dfd9",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "e5f64813-0b59-41a0-a26f-876794d4977e"
        },
        "item": {
          "id": "e8967414-64e4-40e2-90c0-266eac3f3ea0",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f074d805-3460-414e-bc09-8e83ff9e44c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3e99a31-e5d4-4750-ba85-517e63041bdc",
        "cursor": {
          "ref": "fe52f103-7e52-4bd2-bb5d-4ba5ec865f43",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "52eace59-0162-4cf9-9979-b4e20542bae3"
        },
        "item": {
          "id": "e3e99a31-e5d4-4750-ba85-517e63041bdc",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a931a152-d712-4f0a-a566-98121578c83b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc84c80-3ffb-42fc-ab9c-1da628d199e9",
        "cursor": {
          "ref": "99fb9ca8-c900-479a-8e01-17f809c064c1",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "f82d9c5c-d468-4791-8854-a0a0a3013466"
        },
        "item": {
          "id": "acc84c80-3ffb-42fc-ab9c-1da628d199e9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "28e3c84a-19a9-4965-872f-84ebf5be826f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35a3e7ea-6638-478a-9010-e7b4f11fd5c7",
        "cursor": {
          "ref": "b8540e03-c48b-4058-9350-2aa4d03b9f8d",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "27b90d82-650e-4411-bcbd-6fc9581a080a"
        },
        "item": {
          "id": "35a3e7ea-6638-478a-9010-e7b4f11fd5c7",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "71da13d9-97f0-4427-ad74-0e95cbff36ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b9b792-c86e-40f2-983c-d38fa80a58ac",
        "cursor": {
          "ref": "119331e4-817d-4359-9e91-07ed50085ec2",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8195bc1c-41e3-4df5-bb99-073c76fc3f6b"
        },
        "item": {
          "id": "f2b9b792-c86e-40f2-983c-d38fa80a58ac",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5497e8fe-4f43-4295-b9e1-ba5f8d16bf0d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "195168eb-cf74-4fba-89a8-9150fb8f446c",
        "cursor": {
          "ref": "73bba14b-3595-4396-bcfb-dcb77085375e",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "176a6052-55bd-4705-8c1e-25fe1fef6469"
        },
        "item": {
          "id": "195168eb-cf74-4fba-89a8-9150fb8f446c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2304c221-3678-4ee0-b782-31b7bbd743d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ca258e2-1d2d-4af9-a461-c6492f05acac",
        "cursor": {
          "ref": "f1130fc7-b17d-463e-b5ba-60f48b4adc96",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c9074d09-7a97-4267-a25c-61dd0a5a13a8"
        },
        "item": {
          "id": "5ca258e2-1d2d-4af9-a461-c6492f05acac",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "20a177c3-501f-427c-9ede-df98ad404447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b079ed1-8523-408a-aa5b-d4d80d3dc730",
        "cursor": {
          "ref": "4524a5e4-13ac-46c9-b239-661784e47f44",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "88ee649e-d658-400b-9ce0-4ec8ecfe0aa6"
        },
        "item": {
          "id": "4b079ed1-8523-408a-aa5b-d4d80d3dc730",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d888bde5-2c80-46cd-a589-cd6cbb300ea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b270f323-5844-4bba-90a9-bcddd832784d",
        "cursor": {
          "ref": "7143e467-e99a-47bb-bbbb-1f64b50e5be9",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "5126ba45-8ece-4b9a-9c50-36cf0ae96d83"
        },
        "item": {
          "id": "b270f323-5844-4bba-90a9-bcddd832784d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "0567ef01-6586-4359-9fdc-080fbd73c910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "840a7107-c6a1-429b-8f24-3de9131fccf6",
        "cursor": {
          "ref": "1e762496-5ac8-4835-a7d8-d396ae655880",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "62dfed2c-79a8-4eb1-9274-70129daf14d2"
        },
        "item": {
          "id": "840a7107-c6a1-429b-8f24-3de9131fccf6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "02d769c1-db02-4372-b273-bd9bd3586775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d98f67ee-ccff-4a8e-9527-e601611b4efa",
        "cursor": {
          "ref": "f20955b4-92a8-4818-a1a9-ad7064768b1d",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "9a326f69-6564-484b-a4d8-057b5653c648"
        },
        "item": {
          "id": "d98f67ee-ccff-4a8e-9527-e601611b4efa",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "43e1c684-4153-4097-95ad-e8c37e877302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5159cb8-70c3-41ff-8ac9-33e914dec29a",
        "cursor": {
          "ref": "95f88a4c-8cbe-4cad-9447-a2c96c3ad4a1",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "273708dd-ec14-4e08-a669-b3bea7ac0f74"
        },
        "item": {
          "id": "d5159cb8-70c3-41ff-8ac9-33e914dec29a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2a5593f0-19b7-4cab-8e53-3f709a1ec6c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "020011fc-85cc-420c-8ad3-9211ea8c75c5",
        "cursor": {
          "ref": "eae05d98-830f-438a-ba60-c00fff41826a",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "83e31fa9-0fe1-405f-8b50-d535bc470f9e"
        },
        "item": {
          "id": "020011fc-85cc-420c-8ad3-9211ea8c75c5",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ac18de28-6c3d-4e5f-a844-37a1bb9ba4e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2e7d055-56fd-48a1-97fb-64c43d0f7e46",
        "cursor": {
          "ref": "897b1d1f-f153-46a8-b17c-36dad69fff9e",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "eba93275-49a8-4b8a-aef3-1aedcd0ea1d1"
        },
        "item": {
          "id": "d2e7d055-56fd-48a1-97fb-64c43d0f7e46",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3c7b4aae-c55b-4786-a0b7-ad04dd667062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e75bfb1c-f4c3-4b03-9d24-2e6a0995eb8d",
        "cursor": {
          "ref": "b4f3251f-cfc2-4771-aaff-9da24f873e61",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "3fb76f98-bee0-449e-9841-1616e4eec895"
        },
        "item": {
          "id": "e75bfb1c-f4c3-4b03-9d24-2e6a0995eb8d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b0e7c370-ffa7-4f9a-9597-76003197cc74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c95b875-ebf2-4b06-8f24-a16c2aa05bf1",
        "cursor": {
          "ref": "ccd7030f-799c-490f-a6fb-aeb2ccd2701d",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "1779b0ee-69bf-40e7-a7b0-b39630ea146c"
        },
        "item": {
          "id": "7c95b875-ebf2-4b06-8f24-a16c2aa05bf1",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2f1a17c4-23f8-4b4b-bad7-1129341c55b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e82e7c98-3d16-412a-b3b8-512a6c493a8e",
        "cursor": {
          "ref": "efbad494-428e-43d7-b377-49265e3bdf42",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0b73974c-cc03-4e48-8637-94cc168dc03e"
        },
        "item": {
          "id": "e82e7c98-3d16-412a-b3b8-512a6c493a8e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "6b5ac196-9bfa-4d32-bfc1-d2d2f310a49c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a3eaa88-b2ec-4250-8820-0f80bea7ce03",
        "cursor": {
          "ref": "df661c18-9d63-42c7-8e65-b4198fe9c187",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "a8181546-c04c-472d-adfd-501094804802"
        },
        "item": {
          "id": "9a3eaa88-b2ec-4250-8820-0f80bea7ce03",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "fe1b523a-9cc8-4ce0-ad07-4ce55b947fa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4ea1a5e-5f4d-4d53-a9d6-4f4d059b2aca",
        "cursor": {
          "ref": "ef309eb7-711a-4577-90e2-53de0c252196",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f3411f91-b63b-4769-b9ca-c6550b4c6c5f"
        },
        "item": {
          "id": "e4ea1a5e-5f4d-4d53-a9d6-4f4d059b2aca",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "921a096f-f2b9-4791-b1af-1c5d3677ce1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa6615ab-c6ef-4ea9-bb91-8e109c39f10f",
        "cursor": {
          "ref": "5c7879d3-cf52-4871-b77f-773f841a5920",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "191f7d90-6c36-4c53-9f36-6c6d055d552f"
        },
        "item": {
          "id": "fa6615ab-c6ef-4ea9-bb91-8e109c39f10f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "12f11109-80cd-4a6e-84eb-aad04e99e847",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee235e5c-9700-48cd-8cb8-a1b228864c9d",
        "cursor": {
          "ref": "0e6fd05f-90b5-4293-b38a-f0f73d7ea57c",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "c3fef9d8-4742-4c55-9ada-19780af2fda9"
        },
        "item": {
          "id": "ee235e5c-9700-48cd-8cb8-a1b228864c9d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "ac4f3ab4-a7c3-4772-9e6c-79ae5dded6aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb948f06-6e06-48db-8161-cda8400841f3",
        "cursor": {
          "ref": "a27e760d-226a-40b3-85c7-1f283c17a648",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "58f71c5d-6657-4b47-969e-5cccf578cf3e"
        },
        "item": {
          "id": "bb948f06-6e06-48db-8161-cda8400841f3",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b751fe81-9eb1-4521-bb85-b2506ba2662f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e402f8c-1f91-4848-a38c-47a1f90c9242",
        "cursor": {
          "ref": "4dd42f58-ab28-47e1-818e-b5360304142a",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "9eb0528c-9021-49d1-bc2a-86cc01cb7e86"
        },
        "item": {
          "id": "8e402f8c-1f91-4848-a38c-47a1f90c9242",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "3b6191af-653f-4f36-8aae-79bdaa77f63a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39cfa217-6743-4ad4-98d7-f974ff929e10",
        "cursor": {
          "ref": "23a34788-124c-4719-8267-1ce998ceb445",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "57f920f7-8af3-450d-a96b-ef3d242c6d0b"
        },
        "item": {
          "id": "39cfa217-6743-4ad4-98d7-f974ff929e10",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "1ee806e7-2c5d-4c46-a16e-5d04b9a35a4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a534c38-d5fd-41bf-b388-9e6326437651",
        "cursor": {
          "ref": "b8db5b1a-c489-448b-a68b-c802e466eb2a",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "0590d5bf-9f22-4f31-a8c4-ca8b2b857852"
        },
        "item": {
          "id": "8a534c38-d5fd-41bf-b388-9e6326437651",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "595d4f23-07e9-42ed-b61d-f6900a42f0fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4499f1c3-f2a2-4fc7-8317-4a58542693d5",
        "cursor": {
          "ref": "5016ba3b-37bd-4901-890b-12e6b074a0b4",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "be3738d4-16b1-4286-84c4-42161441362d"
        },
        "item": {
          "id": "4499f1c3-f2a2-4fc7-8317-4a58542693d5",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "e55306bb-4e8a-46a1-bb13-0ae2fc403165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0f1bcc-c9ee-468a-b01a-0b568acbc091",
        "cursor": {
          "ref": "4077905e-2d26-439f-8392-f3b710a4e458",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "fbc7d67f-32b7-4e3b-866a-4ebe0868ea23"
        },
        "item": {
          "id": "8c0f1bcc-c9ee-468a-b01a-0b568acbc091",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "658747da-80ae-48c8-88a2-da4e6907e492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "442bec01-3597-4fdf-81e4-82f9bd6ea300",
        "cursor": {
          "ref": "36fbb22b-e75d-4ddb-9820-76c3798513c3",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a4a35261-becf-44e1-bf6d-fb222ea5b7f0"
        },
        "item": {
          "id": "442bec01-3597-4fdf-81e4-82f9bd6ea300",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "41ab96b6-573e-478e-b4a6-1631cc235e8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6119ab43-8e75-468d-8679-877131bee520",
        "cursor": {
          "ref": "174801fe-3959-4f21-9ba3-fcb896b400cb",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d3f8098e-1ce4-424d-ab6c-a1e8424a6301"
        },
        "item": {
          "id": "6119ab43-8e75-468d-8679-877131bee520",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "df14680d-dc7b-4fb0-ab04-ccfeaa2d6f1d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5647652-3e1a-4209-a78d-73466fdacefa",
        "cursor": {
          "ref": "ac3ded11-a0e6-47cf-8b65-35af30e48775",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e7367851-f599-4c83-83f9-7a4f9ba50bf3"
        },
        "item": {
          "id": "f5647652-3e1a-4209-a78d-73466fdacefa",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "34370b1a-037f-4ea4-ab8b-1aa63a25fefc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5c8f855-0e10-4d5b-801d-269780e8e931",
        "cursor": {
          "ref": "5e29c27e-d5e5-4296-8378-83221d42eb89",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d67a12cb-5c1c-477a-b2c1-941aefca00da"
        },
        "item": {
          "id": "e5c8f855-0e10-4d5b-801d-269780e8e931",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "643f2a3d-e464-4057-90cc-82449df6278e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65deb997-b636-417a-8756-e007cfb4adfc",
        "cursor": {
          "ref": "9d53e7ed-4ca6-47ee-a66d-15b4b29134d6",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "2162fd0d-1b5e-4457-8c24-712f2e655330"
        },
        "item": {
          "id": "65deb997-b636-417a-8756-e007cfb4adfc",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "978c9328-8f70-44be-a5d6-ee0610f2ff45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "963a0dcd-ea97-4bb8-a131-01017db91bd1",
        "cursor": {
          "ref": "ce60b1e2-cb91-43fb-8e17-67a6006803ad",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "cb7bf095-3fb4-4d61-8ed6-67a4caec46a3"
        },
        "item": {
          "id": "963a0dcd-ea97-4bb8-a131-01017db91bd1",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c7326128-a5d8-450a-b081-b9fd10b10d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbea8e40-cb41-431e-a208-ca4134832db7",
        "cursor": {
          "ref": "9ba1c811-03e2-4375-81a6-d1d18e15e6d7",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "22afe6ca-ca6a-4043-9301-823307393e08"
        },
        "item": {
          "id": "dbea8e40-cb41-431e-a208-ca4134832db7",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "7a8d0882-b935-455b-b3f3-77c4e7cfeac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "021bf900-7549-4c8d-9f70-c8c59935f8e4",
        "cursor": {
          "ref": "745e3339-fa71-42f3-b40a-5c4e41f5feb2",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "ee576bc7-36ba-4696-b5f6-8dede73eeccd"
        },
        "item": {
          "id": "021bf900-7549-4c8d-9f70-c8c59935f8e4",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "13e4c71a-0543-42db-a1da-9c364e9638d9",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "6a061ac6-5577-4c9e-972c-034f54262d5e",
        "cursor": {
          "ref": "b600d91d-f5bc-4b1d-9fb0-7167ee8f9299",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "fd865162-e4f9-45ca-a894-423ceeba38dd"
        },
        "item": {
          "id": "6a061ac6-5577-4c9e-972c-034f54262d5e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ab0ea7c3-4d7e-4d05-9687-c275fb2bf751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf7f64ce-8314-4176-ada3-9188f00210d3",
        "cursor": {
          "ref": "18b60759-0555-440f-b1f7-64f1e7b47771",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a1f88ea2-afeb-44fc-8c14-5b140f5fa5a2"
        },
        "item": {
          "id": "cf7f64ce-8314-4176-ada3-9188f00210d3",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "525e04f0-8a95-41e1-b3cf-00033f211613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf8dfee6-93b4-45d5-a1a6-3cec87c3537c",
        "cursor": {
          "ref": "68044072-8b0b-411b-bcda-af7522902c9f",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "7ee6aaa9-7a81-4b64-b01b-46bdbbcc1365"
        },
        "item": {
          "id": "bf8dfee6-93b4-45d5-a1a6-3cec87c3537c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "64f95b59-0340-433c-ba33-63e5bf560244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81d8ed4a-8385-4931-908d-32649ff637fe",
        "cursor": {
          "ref": "2d8279be-7fce-4004-91a3-9f243911edcd",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "7e5cfc67-63bf-4b7c-b599-65786103b80f"
        },
        "item": {
          "id": "81d8ed4a-8385-4931-908d-32649ff637fe",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "22e4d3d5-582c-4c1f-b029-d4153a00a440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd39b696-cc60-4132-a8d2-cc02b719a7d5",
        "cursor": {
          "ref": "e735d484-68c4-4bf0-8533-45b4e13fbf25",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "68a05761-21b7-4f1e-88b7-63f0502eb35e"
        },
        "item": {
          "id": "fd39b696-cc60-4132-a8d2-cc02b719a7d5",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "92fffc16-3374-4a61-bc43-1863e1161814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "262cd92d-89c8-4f0a-a8b4-b53a2674c7d3",
        "cursor": {
          "ref": "d48cf9c0-0c26-40ea-b280-bdf946b511d8",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "f4ba81f6-242d-4978-8146-fa7e21c8294f"
        },
        "item": {
          "id": "262cd92d-89c8-4f0a-a8b4-b53a2674c7d3",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "93837749-6d56-4b2e-9706-649862aec34c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47248926-e2e0-4c11-94ec-cca8681f509b",
        "cursor": {
          "ref": "95b38d9c-bbf1-4a05-9563-029f55749720",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d86d15bc-93c7-40bb-ae13-837715f2aae4"
        },
        "item": {
          "id": "47248926-e2e0-4c11-94ec-cca8681f509b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "94b7d1a3-c99b-4a93-9a9c-733d006458f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a6421ec-1dbc-42f9-9ce4-fafce6b2aef0",
        "cursor": {
          "ref": "1d3a234d-de50-4e35-95f1-157ef74efc26",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "fdc3cfed-5a73-476e-968c-8a8dfa5b4dae"
        },
        "item": {
          "id": "4a6421ec-1dbc-42f9-9ce4-fafce6b2aef0",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "0e013adc-806a-4547-a976-9e04b35a6720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e389ab-3931-40bf-a339-2609b9db5ee9",
        "cursor": {
          "ref": "9d19dd89-1b5e-49fb-849e-5cccc63a989d",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "e22a1bf8-9087-4920-a5ed-f7afa98a8831"
        },
        "item": {
          "id": "27e389ab-3931-40bf-a339-2609b9db5ee9",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "26b1aabd-241d-48dc-9904-be126a2fa3ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "970c69ab-b148-4f0d-89f3-69a74af80bee",
        "cursor": {
          "ref": "d3ee2fe4-f701-4edc-bf53-bbcfecfaf0a0",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d7f3ef1a-5586-4274-bf25-985d9de51837"
        },
        "item": {
          "id": "970c69ab-b148-4f0d-89f3-69a74af80bee",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "783a4f90-0f39-4aa0-8907-8e49977920de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0d9bc0d-1072-430e-a246-9a3fc290d04b",
        "cursor": {
          "ref": "193877c5-4284-42ac-9b83-5eee8b0eec57",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "25b505b3-37d2-49a8-9d26-5a30dd4f7b4d"
        },
        "item": {
          "id": "d0d9bc0d-1072-430e-a246-9a3fc290d04b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "466dc59e-0360-4f03-89d4-2be7c1fbce9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02c2e130-1225-4138-8675-470f62061b57",
        "cursor": {
          "ref": "fffe9f19-96f6-4c3d-93a1-cbf5efbc2650",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "476e78c3-7109-450a-8bfb-93f0bdaed08b"
        },
        "item": {
          "id": "02c2e130-1225-4138-8675-470f62061b57",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "868b23f9-2f02-4d6f-a754-21e6ac0c5663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3842ac4-93b9-4710-828a-fad583bc4f9d",
        "cursor": {
          "ref": "94287273-64ba-4722-84c5-5486d5a4d154",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "32b7e2c9-aede-4a56-9340-f31c65dfeae8"
        },
        "item": {
          "id": "e3842ac4-93b9-4710-828a-fad583bc4f9d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3fbc43f7-d1cc-46ab-a120-af3e0e5f6c17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "423525f1-ed2e-4aa4-82b0-1eb2e70e8680",
        "cursor": {
          "ref": "364f19ae-afb4-4730-b98e-7e3804b5792f",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "3a22d0cf-2583-455b-ae9a-72bba880c72f"
        },
        "item": {
          "id": "423525f1-ed2e-4aa4-82b0-1eb2e70e8680",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "89e32161-db1d-4018-a984-e74af8cda118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "261aac0f-5623-49ce-82da-7824df27a60c",
        "cursor": {
          "ref": "b054dd49-0404-41d9-93f3-c3a0f22fa0db",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "275ce15e-c286-446b-a9bc-74ffdf0fc841"
        },
        "item": {
          "id": "261aac0f-5623-49ce-82da-7824df27a60c",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a91dd45c-aaa9-499f-8f2a-9dd57eb1e0e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eec1d510-7d08-4892-a03d-1d9f3c07d153",
        "cursor": {
          "ref": "aafe6fb0-004a-4323-aae2-f83a945c3a51",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "23a56618-d91c-4944-b4b0-fdc7995cb183"
        },
        "item": {
          "id": "eec1d510-7d08-4892-a03d-1d9f3c07d153",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "ff1f6081-6306-481b-981a-0dd38c64750d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6b31802-9487-4f37-b03b-bf048ff3fad7",
        "cursor": {
          "ref": "8bf7f1b8-2999-4641-a720-301155169ded",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "06776104-5dbd-4c3a-b624-5084bdbb992a"
        },
        "item": {
          "id": "f6b31802-9487-4f37-b03b-bf048ff3fad7",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a1d65b52-9b38-4e93-802c-006b86fe4531",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d4b84a1-7553-4926-8751-045592b5630b",
        "cursor": {
          "ref": "21a7c535-1024-4e24-b1b2-994bd6d6fa0e",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "5ca57542-f7e2-4756-9add-90d8fbd2bcf4"
        },
        "item": {
          "id": "2d4b84a1-7553-4926-8751-045592b5630b",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "323bc045-8846-4232-827d-abe65d9e67ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "058efc4d-f341-4ff0-a601-252d99cc13b9",
        "cursor": {
          "ref": "5508283a-0501-4cab-976e-589fce159b82",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "1f420d9b-9a63-41ee-81d7-214d5a327c21"
        },
        "item": {
          "id": "058efc4d-f341-4ff0-a601-252d99cc13b9",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "71938cd0-75e9-4e73-a0d3-4c9ed085b980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac490fe-1111-4daa-8e01-2dfa75018211",
        "cursor": {
          "ref": "e51c49f1-5b8d-4f3f-b500-11c946c8a2ef",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "fc9e91db-55e0-4d6d-bf37-8bf2ea2cf867"
        },
        "item": {
          "id": "9ac490fe-1111-4daa-8e01-2dfa75018211",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "49512c8f-45cb-4afc-a388-ef01ba411c40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c53110b4-105b-4893-a9aa-50a65b9f1438",
        "cursor": {
          "ref": "578eb0a0-78ce-4d46-b16b-f29af29adcfb",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "26d1b8c5-4ab7-4b35-9ebe-36a496372e6c"
        },
        "item": {
          "id": "c53110b4-105b-4893-a9aa-50a65b9f1438",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c5790696-12f4-497d-ada5-dc1d5454215c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2346e5eb-2e88-4882-88b2-34d78dedf73e",
        "cursor": {
          "ref": "bf6e0550-e352-46e7-834f-59477621bf1f",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "01020de3-39b2-4ab8-b2b4-e4037a745a28"
        },
        "item": {
          "id": "2346e5eb-2e88-4882-88b2-34d78dedf73e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f9ff7263-2528-4059-a66a-756afa6d3b70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "443de16f-19b9-4e85-bce0-691991756a68",
        "cursor": {
          "ref": "f984a9b0-bc64-4845-8d63-e991e71126a9",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e46f5a04-8ebc-4849-abfe-f6ce8c266c59"
        },
        "item": {
          "id": "443de16f-19b9-4e85-bce0-691991756a68",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "89b6369b-de65-43f2-b568-53e8c3bebc79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ba69b6c-4147-4d13-877a-e0f9e317c079",
        "cursor": {
          "ref": "285c8232-8c3b-47e8-9d0e-acc326cd79ab",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "dd38ac68-ac75-448d-ac2c-f581135cb4cb"
        },
        "item": {
          "id": "4ba69b6c-4147-4d13-877a-e0f9e317c079",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "aa509146-7c96-4f9a-8971-8d9672fb2d4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63d2b001-87d8-431e-b746-3583f9853dfd",
        "cursor": {
          "ref": "d73573e9-202a-4ead-9615-b5dd8b947b16",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "646cbc17-c789-4578-909a-e5036d8316e7"
        },
        "item": {
          "id": "63d2b001-87d8-431e-b746-3583f9853dfd",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "755393bf-0860-4a9e-ad46-829b23e62082",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96ad72de-36e6-4a6f-9529-2fe638f35ba1",
        "cursor": {
          "ref": "023a5765-768a-4325-aecc-6e09620b5d33",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "1a3428ee-468e-4a00-8bdf-8e156962850c"
        },
        "item": {
          "id": "96ad72de-36e6-4a6f-9529-2fe638f35ba1",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "0ce2f251-1643-422e-8681-60bf2155e0b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ed35a07-ca59-444c-9f93-01161bbf66c9",
        "cursor": {
          "ref": "0e0f487c-7701-43d7-9a54-145565083b50",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "0cc6d8f6-6654-4021-9bb8-135abff773f6"
        },
        "item": {
          "id": "7ed35a07-ca59-444c-9f93-01161bbf66c9",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "6c9122f5-1513-48d5-a7f6-804c28c415d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19002b7d-48a7-4efd-9779-a7d106d297b7",
        "cursor": {
          "ref": "a4677c9a-e884-4237-b910-afcd15900b57",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "909d575d-2b15-4348-8de7-9fb15a50542e"
        },
        "item": {
          "id": "19002b7d-48a7-4efd-9779-a7d106d297b7",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "10c35cba-9e8c-4d78-8880-51d130f98da8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "162335cf-ad24-41e4-a476-a6165fd03980",
        "cursor": {
          "ref": "ca750636-ef2e-4731-a7e5-90e06a207a22",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "dd2d2547-8bdf-4b80-a99b-efbc621a7804"
        },
        "item": {
          "id": "162335cf-ad24-41e4-a476-a6165fd03980",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "ddb5fc7b-fbcd-4c20-9c12-31e7c0a61cfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d92b0e2-7311-47ed-a0b3-8ed063601797",
        "cursor": {
          "ref": "7214f50a-fe30-4ca4-9920-4233bab32bfe",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "1abe995b-b5bc-4d8d-b3ff-7e3fb5ef35a3"
        },
        "item": {
          "id": "3d92b0e2-7311-47ed-a0b3-8ed063601797",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "a42a86d7-1737-47a3-a118-85d349c95c52",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "0b370c03-9d79-454d-a7ed-58425e827c38",
        "cursor": {
          "ref": "da7e1170-f4ad-47b3-ac2e-50e5cf97cfcd",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "9a788e78-ef6a-4e7e-a172-a10264146b39"
        },
        "item": {
          "id": "0b370c03-9d79-454d-a7ed-58425e827c38",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "861c41e4-5eb0-4ead-a0fc-162b03944431",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "06359d3d-b871-4bab-82d8-70d317a46511",
        "cursor": {
          "ref": "52ac232e-baeb-4d47-b63a-c516946ff652",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "02635f2d-f53b-495b-bfae-cf1247a6a12f"
        },
        "item": {
          "id": "06359d3d-b871-4bab-82d8-70d317a46511",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "6db1cf93-e7f1-41e1-b0f2-fe16058be841",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "cc392418-e0af-4b33-8c5d-228995e972d3",
        "cursor": {
          "ref": "e0ed70dc-47d9-4803-9824-e650785920c4",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "4f84c80c-0747-49c5-9bbe-60efe30191df"
        },
        "item": {
          "id": "cc392418-e0af-4b33-8c5d-228995e972d3",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "7cbc0616-e7e7-40f3-a452-7d5c334c3bf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bc5dddf-1083-42b3-b583-d7379ac37920",
        "cursor": {
          "ref": "462b769b-0c94-4fcb-94cc-6fa6a9167ec3",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "feafa909-3135-468b-8580-9905c1ce92c2"
        },
        "item": {
          "id": "8bc5dddf-1083-42b3-b583-d7379ac37920",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "45769b23-2aef-4a51-ac71-49f7ccc94e03",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "d4b4f85e-faad-423f-972d-a9b428e5895c",
        "cursor": {
          "ref": "8171d43e-c82b-45e0-b374-8f877a018408",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "828a22da-384c-43b0-a165-803a33fa803f"
        },
        "item": {
          "id": "d4b4f85e-faad-423f-972d-a9b428e5895c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b6b61f29-8fda-4c7f-97dd-3afc33836703",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "196580b9-f5b3-4241-99cc-b9e340830108",
        "cursor": {
          "ref": "ac7b97f6-36fb-4ef1-ab3c-45d4551b341a",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "1d3c0328-3c22-4143-af0a-1eaa23b17aed"
        },
        "item": {
          "id": "196580b9-f5b3-4241-99cc-b9e340830108",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "6fa291f7-1994-4401-8600-cb9078fafcf4",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "63313df0-0113-46dc-bc02-2c11cf6447cb",
        "cursor": {
          "ref": "3e9f5540-4939-45cd-8a4d-31677dd39973",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "95036319-59b8-45f3-8f92-80bd1b8ff055"
        },
        "item": {
          "id": "63313df0-0113-46dc-bc02-2c11cf6447cb",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b3ecc4f5-cd53-461e-a461-fd354068eae0",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "409874ee-52be-4e33-ba48-e70c8262675e",
        "cursor": {
          "ref": "05c3d271-882f-4811-830e-00322615d3b7",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "b7c68389-90f6-4af4-aadb-49abef490f5f"
        },
        "item": {
          "id": "409874ee-52be-4e33-ba48-e70c8262675e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "9decfc74-e0e9-4ebe-be17-0a6160622a36",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "2cbcfcea-c50a-4e8f-ab56-410c02d1699e",
        "cursor": {
          "ref": "699ec1a0-340e-4c78-b46c-5ed668c59a00",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "05081b93-9512-495b-8612-79e241bae6de"
        },
        "item": {
          "id": "2cbcfcea-c50a-4e8f-ab56-410c02d1699e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c913e7bd-e1f7-49f2-9af9-6d9ecfeea4de",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "95ba3e80-d107-411e-877d-c31f2fbaff77",
        "cursor": {
          "ref": "d8b59a13-a9bf-4b48-9e3b-0eeb048d8b99",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "dd6ee8bf-9045-4c3f-9a2a-e827cf4d82cc"
        },
        "item": {
          "id": "95ba3e80-d107-411e-877d-c31f2fbaff77",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "77a59850-787b-4278-91df-96b46844e0aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b69c8e-a1e4-422e-a86f-a9297cb3a29d",
        "cursor": {
          "ref": "11cdd048-9a8f-451c-9a83-dceac2c6a61c",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "57abaafb-73b4-4036-a9ea-5bd55d6d80c6"
        },
        "item": {
          "id": "a6b69c8e-a1e4-422e-a86f-a9297cb3a29d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b5985c02-5198-4d9a-a4c7-4481f6b79b2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4159e63-fcf4-4314-a35b-043b97d640da",
        "cursor": {
          "ref": "5f5f05ca-e8fd-4ec8-8cbe-f0e83a6f1928",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "a09ac075-5eae-47c6-821d-eec64b3230aa"
        },
        "item": {
          "id": "a4159e63-fcf4-4314-a35b-043b97d640da",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "4d54813f-a703-40a6-b9f2-a18e410ebe83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85c37ea8-3497-4a87-8ee2-76f1843ecb1f",
        "cursor": {
          "ref": "4fa48c54-6ed5-4064-b455-b6934ea9242c",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f379781f-0d01-4d1d-a952-0cd728ce1a05"
        },
        "item": {
          "id": "85c37ea8-3497-4a87-8ee2-76f1843ecb1f",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "94123b6c-12d4-4cfa-941a-79c6bc0c7da2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68da93ac-9bcb-4675-a688-8d40bbf62d36",
        "cursor": {
          "ref": "2ab7ff98-d8d4-4ce2-bb65-4cd58c1645fc",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "58d890e8-802b-4b2a-80f3-7054039a6e59"
        },
        "item": {
          "id": "68da93ac-9bcb-4675-a688-8d40bbf62d36",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "71040a85-e035-44d0-ae05-9fb7355c6454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "853b374c-4932-4dd1-93a0-ac0778652fbb",
        "cursor": {
          "ref": "b65c3381-5692-42ab-a602-e2fb266202ee",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "54d00452-e83e-40f1-abb1-5e8461c918a8"
        },
        "item": {
          "id": "853b374c-4932-4dd1-93a0-ac0778652fbb",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "5b9ae36c-ee58-4974-8edc-ac4ac05b920e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88f90245-0c2e-4b4a-8930-e0251fc769d6",
        "cursor": {
          "ref": "d4c4dfb9-524b-4348-9a8d-f215e8684e40",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4fc448aa-ae0c-4861-adba-0b1d8d03a7d5"
        },
        "item": {
          "id": "88f90245-0c2e-4b4a-8930-e0251fc769d6",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6a031d77-d4a7-46ad-b228-fc7e1e1d91ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9871ed7f-6c85-4b19-bf39-47e2557b818c",
        "cursor": {
          "ref": "204421c9-ffe3-4df2-a680-90820cc26436",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b90c1681-a665-429c-85e9-0fe535010bc3"
        },
        "item": {
          "id": "9871ed7f-6c85-4b19-bf39-47e2557b818c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e95a5702-0871-4f7a-85b8-e1a6a9322ccd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67d37904-226e-4527-9273-a27741106ded",
        "cursor": {
          "ref": "4cc2874e-f120-48e8-87d2-985871d510b4",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "3625fa70-d23c-4728-9b1b-25e0efc68a6c"
        },
        "item": {
          "id": "67d37904-226e-4527-9273-a27741106ded",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "126e94f1-684a-494c-91d0-d239626e313e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e40d05b-3280-45b7-b721-dbfa8377b7c9",
        "cursor": {
          "ref": "e3a55d62-c4f3-406f-9f5a-bed3ed91c515",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "24040ba9-5fe9-4972-bde4-f105bb797958"
        },
        "item": {
          "id": "7e40d05b-3280-45b7-b721-dbfa8377b7c9",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "d0bca24d-9569-48e4-a54a-6314ef1d663e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0911248-2738-44b3-9ded-bbe52f9a9724",
        "cursor": {
          "ref": "3248c493-fb4c-42a9-ac66-5cdc0866771d",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6a0f645c-f12c-4f14-9081-dcacd8f257a7"
        },
        "item": {
          "id": "f0911248-2738-44b3-9ded-bbe52f9a9724",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c9147d5f-6865-47d2-a573-4fe007268bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77800e7b-028b-433e-83c8-6dd44d2dfd35",
        "cursor": {
          "ref": "ab17238a-9be1-4886-b339-94ae91073a1b",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "9303ce70-6bcb-4282-94a6-3fc9eea1db1c"
        },
        "item": {
          "id": "77800e7b-028b-433e-83c8-6dd44d2dfd35",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "e3ca5def-c24a-4fa5-b150-be7f207fedb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b771ad40-7682-44bc-8641-cd89dd7aeffa",
        "cursor": {
          "ref": "0c6d41d7-86ef-456b-bfe0-d966edff5d78",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "111b8d9d-4b0b-4cf0-addb-b31c7296cca6"
        },
        "item": {
          "id": "b771ad40-7682-44bc-8641-cd89dd7aeffa",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "db8d908b-ea13-4e57-8dba-d2da395b7fd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0cf629a-fa2e-4edf-95b1-67003550a478",
        "cursor": {
          "ref": "e4d98ec8-ea48-4303-93bf-a26167688eeb",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "bdbfeff0-8a84-4ba1-8170-2a359f57c916"
        },
        "item": {
          "id": "d0cf629a-fa2e-4edf-95b1-67003550a478",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "b6dcef07-c9fe-4f16-b38d-27ed1dedbb11",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "43f9732b-2069-47fb-9383-339c33cef5af",
        "cursor": {
          "ref": "a405517e-14c1-4043-9969-c49c24f0c893",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "a6435c4c-1e0e-40b9-b5e6-b2847ab39996"
        },
        "item": {
          "id": "43f9732b-2069-47fb-9383-339c33cef5af",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "2cfe9d7b-a8e1-444a-9c61-e37bfe04f14d",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "5ec03378-3bf0-4d2a-bea2-258dfe44efab",
        "cursor": {
          "ref": "d0cf4ea7-63f1-48af-9a82-cc758f4ffc5d",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "4689c815-3a05-4f14-8d35-e99ce6d6ed38"
        },
        "item": {
          "id": "5ec03378-3bf0-4d2a-bea2-258dfe44efab",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "70f6566f-0838-4fae-8c8e-78a4f7525fee",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "fb82e852-0fb5-4aeb-9e37-5788c3637bed",
        "cursor": {
          "ref": "bd47dba4-d1bd-426e-a98b-72ab9da04d59",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "38aac4f8-a97d-46fa-b2c2-db75ac778047"
        },
        "item": {
          "id": "fb82e852-0fb5-4aeb-9e37-5788c3637bed",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b4e669dd-c911-4018-8740-8dfa1fc8566a",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "26edb99b-f7f1-471d-9641-2b24b09c255e",
        "cursor": {
          "ref": "ea46414a-a2e6-4030-a62d-505694e20377",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "7fd8145c-96b8-4a3f-bb33-420b70261e18"
        },
        "item": {
          "id": "26edb99b-f7f1-471d-9641-2b24b09c255e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "086243f4-504a-496d-ad95-26907260f87f",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "9e5f9c10-d62d-4254-b94b-8e49f47625e2",
        "cursor": {
          "ref": "7f42ef39-a05e-489a-9cd4-1b84a82a19da",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "216297e3-6edb-4302-b8cf-1a92d1fc4909"
        },
        "item": {
          "id": "9e5f9c10-d62d-4254-b94b-8e49f47625e2",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "6f8138db-2f03-4668-84b4-fd37d1660de2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b71b5c4f-4293-4ea9-a920-3075a0696aa1",
        "cursor": {
          "ref": "5472ff18-cc94-4efa-8774-12bc408bac4d",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f3396584-7ead-4d20-ad0d-25a302b468b6"
        },
        "item": {
          "id": "b71b5c4f-4293-4ea9-a920-3075a0696aa1",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ef6fd406-ae9a-4053-84c0-2a7f5f7e36dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c54f8020-76c1-4fa2-b04a-1084a40d1edb",
        "cursor": {
          "ref": "06de6808-4449-4179-9f8a-9a529388fce1",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "851f15b3-a126-4850-8beb-2d121310f9f9"
        },
        "item": {
          "id": "c54f8020-76c1-4fa2-b04a-1084a40d1edb",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "22eb1104-7e2f-4dd2-ae9d-f4b0b4886ee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba934f8c-df82-4319-ac01-ba09c52c7b8b",
        "cursor": {
          "ref": "6dd4d503-d86e-4e9f-850b-a0d812f7d1c6",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f1ab374d-bb6f-4813-956e-9d41169fbfbe"
        },
        "item": {
          "id": "ba934f8c-df82-4319-ac01-ba09c52c7b8b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "523566dd-7010-42d1-a1db-657c1bdbddf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d77d4f8d-7204-42d2-a769-795ef1a0ee5c",
        "cursor": {
          "ref": "f83af711-8fe4-4cdb-993c-b3283b284ea4",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "4d36436f-ff3b-454e-8856-e691a5e65306"
        },
        "item": {
          "id": "d77d4f8d-7204-42d2-a769-795ef1a0ee5c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "9f09d099-c677-446d-b7bb-47dc5b0d9d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85605d10-12fe-4e34-8b52-ee2a667ba068",
        "cursor": {
          "ref": "3e1bf88c-1149-4cd3-81b2-1d74434c5555",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "97f300ad-574d-4d89-9c2d-f0b0c916196d"
        },
        "item": {
          "id": "85605d10-12fe-4e34-8b52-ee2a667ba068",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "388a28d0-050f-4abe-8620-3148a1a09cc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03eb34a9-9862-4ffd-b6ea-701f26ff2fdb",
        "cursor": {
          "ref": "b3a6720b-1ec2-4954-8d60-75c130a09478",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "efa9e732-0aa8-46b1-a53c-1b76ecbda210"
        },
        "item": {
          "id": "03eb34a9-9862-4ffd-b6ea-701f26ff2fdb",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "632798ba-a0fd-46a3-a0de-6a5286336261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc4b29d-0f43-4f19-83e1-679e44296110",
        "cursor": {
          "ref": "bced1941-03a4-4f02-b17b-69bf9540ef0f",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "13bb3e6f-5aef-479f-8606-3e5a861e9f8d"
        },
        "item": {
          "id": "ccc4b29d-0f43-4f19-83e1-679e44296110",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c9950714-2ca3-4e07-8bf6-a19710f9a634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f64124-8f67-4ba2-92c9-31088fbffe01",
        "cursor": {
          "ref": "afe14c9d-802c-42cd-9695-edd589126d9a",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "2add1e79-89d1-4bbf-aa8f-a76604e20b14"
        },
        "item": {
          "id": "36f64124-8f67-4ba2-92c9-31088fbffe01",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "fec6f61a-9ccd-4499-814b-64d58f21357a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd5c6765-0f88-4635-98dc-beb9c1de140a",
        "cursor": {
          "ref": "54cc64f4-32e3-4ce7-b4ff-9c499cca9d44",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "8ede01d3-e639-4f8e-9998-98214d0897bd"
        },
        "item": {
          "id": "fd5c6765-0f88-4635-98dc-beb9c1de140a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "ba75a09f-d0c2-44a8-8510-250dc4a79ea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2ee1344-b728-4b59-af58-17b893e27776",
        "cursor": {
          "ref": "1045f443-effb-4f0a-a9f3-c0775b8e3a68",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "559d5f0e-e320-4bd2-af4a-95d3ac2a6901"
        },
        "item": {
          "id": "c2ee1344-b728-4b59-af58-17b893e27776",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a16cf7e9-338b-494b-af04-683be05fca36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af807eb2-7b10-42bb-a97f-96a1b75e995b",
        "cursor": {
          "ref": "952a3335-e36d-4dd4-b1eb-a9a31416a352",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "6763ddf3-4e73-45b0-bb59-999aec1b0c2f"
        },
        "item": {
          "id": "af807eb2-7b10-42bb-a97f-96a1b75e995b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f4de63b9-f3ea-4702-a8aa-05c8fa8a3a4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8519f06e-95d8-45b6-ae6f-2487c2b940f5",
        "cursor": {
          "ref": "9c10f2d1-91dd-4381-979e-4606367760c8",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6b1dbdb9-422f-4f80-918f-0353b6cb1ec9"
        },
        "item": {
          "id": "8519f06e-95d8-45b6-ae6f-2487c2b940f5",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "63350b9e-994c-425a-8fef-92acaed39fc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f6ceca7-aab6-4113-97d3-c179b87cd46d",
        "cursor": {
          "ref": "0ecb5791-fe05-4b4c-b380-8d5d14e80731",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "74d3eddb-b495-4f25-afd1-6ef2b4b42f8e"
        },
        "item": {
          "id": "4f6ceca7-aab6-4113-97d3-c179b87cd46d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "01030712-827d-4592-b6e5-d5e623df5e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41590ef8-7ed4-49c6-932f-8a7a290334b7",
        "cursor": {
          "ref": "b7b26de4-2fa2-4e08-9899-0ffe6880472a",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "5f6e01c9-957b-47a6-ab90-3cb749148329"
        },
        "item": {
          "id": "41590ef8-7ed4-49c6-932f-8a7a290334b7",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "17f767b5-8695-4e22-81da-a498e3b3329b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af216cb1-694c-4c1f-ab5f-41373a4ccad0",
        "cursor": {
          "ref": "d5c2e248-b522-41fc-9187-7ad6ced62cc5",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9ce733ba-8fe6-4392-b9ea-5416e94f9600"
        },
        "item": {
          "id": "af216cb1-694c-4c1f-ab5f-41373a4ccad0",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "cf95639f-b15d-41c8-b413-1f4a72f6e071",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b786678-c3e1-4de3-911e-1efbfd053158",
        "cursor": {
          "ref": "628d64d2-e7c5-4cff-8fab-e0d7e07e59c6",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "407258fc-816d-431f-9648-68c7a6676fcd"
        },
        "item": {
          "id": "8b786678-c3e1-4de3-911e-1efbfd053158",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "163d7204-514f-4ef4-a73a-5899fed6850d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a998677-7a57-4eac-8a72-10946c88fed7",
        "cursor": {
          "ref": "8a4a78f8-dccf-4477-995c-6afa51b7b1b2",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c0cb374b-4e06-412a-9119-179b1aca26bd"
        },
        "item": {
          "id": "2a998677-7a57-4eac-8a72-10946c88fed7",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "29552da1-1b46-4501-b21a-f94440571148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "304d5da2-0174-430d-8ebf-eafdb78359a8",
        "cursor": {
          "ref": "504dd113-c30d-4d19-ba4e-4b18f7e0363e",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "183cbf48-70f1-4903-99e7-b6d3d40d1117"
        },
        "item": {
          "id": "304d5da2-0174-430d-8ebf-eafdb78359a8",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "47963a00-46ed-4da4-8285-c702e74481f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fcfc8e9-6125-4a2b-ac0e-07d5d933fc00",
        "cursor": {
          "ref": "d66cfaf7-5c04-4ce1-a53a-da8da494f7b2",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "c877f240-68de-47d8-ad88-c9d8b29291ba"
        },
        "item": {
          "id": "5fcfc8e9-6125-4a2b-ac0e-07d5d933fc00",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "d86fb930-7e08-46bf-8a19-5091ab74d9d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd3bf106-1c5c-4560-88ec-febbc8084d16",
        "cursor": {
          "ref": "2c79f0da-839e-4995-8e8a-ce97836b9a82",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "06c3baad-6c92-4ffb-946d-6b6f7bf6d39d"
        },
        "item": {
          "id": "bd3bf106-1c5c-4560-88ec-febbc8084d16",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "2fa89309-f07a-4826-bcda-b9971d12cda4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdb8e714-a277-4fa9-9ed8-9b88fb37972b",
        "cursor": {
          "ref": "eb1c0aaf-9e8f-4f3d-8c40-631fb95218d0",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "9ac0b926-0b47-4de7-8e4a-5862de54ab76"
        },
        "item": {
          "id": "bdb8e714-a277-4fa9-9ed8-9b88fb37972b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "7fd50405-8196-4403-b33e-5a793fb85732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3a3cd82-b756-40b2-8b8f-9249090f3fb1",
        "cursor": {
          "ref": "d6ea3d7f-2bed-4866-88a3-702154a9a47d",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "59317557-4feb-4dfa-9604-c73f8ba9a198"
        },
        "item": {
          "id": "b3a3cd82-b756-40b2-8b8f-9249090f3fb1",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "1d104ea4-0462-4ce4-8b92-2304540342cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c863845-4fbb-4d72-a240-6102dfd18a57",
        "cursor": {
          "ref": "1b907d54-224d-4d63-8495-a15ee831fb24",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a569925e-c01f-4db5-81aa-cf0344ccc9ab"
        },
        "item": {
          "id": "3c863845-4fbb-4d72-a240-6102dfd18a57",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "098f5216-f610-4918-9979-34d05f6b9b4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8989f691-182f-422b-abf1-c79ec49f6173",
        "cursor": {
          "ref": "cd868b6f-a67f-484f-ab96-a5cd338bb1df",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "408cc470-6c4c-4946-9a21-a26dfb28c607"
        },
        "item": {
          "id": "8989f691-182f-422b-abf1-c79ec49f6173",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "96508abb-d40f-45fe-8a71-c869d2f7f1f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "814fea3a-ea6e-4762-a0da-f610958e35fa",
        "cursor": {
          "ref": "c97762d5-d3e2-4c20-86e5-7cdcf8385b93",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "624bbbf3-3438-409f-ac88-4ccc4c8b8590"
        },
        "item": {
          "id": "814fea3a-ea6e-4762-a0da-f610958e35fa",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "5c985128-ed81-47c3-adaf-87eb05870847",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bf54876-c7a0-4a41-b148-7693f0519f36",
        "cursor": {
          "ref": "0d18e10c-cf0a-4498-b11d-ea65ee4f9c22",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "c3e68e55-7232-44a4-bbdb-332c4b6d08d3"
        },
        "item": {
          "id": "3bf54876-c7a0-4a41-b148-7693f0519f36",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0b15bba5-c025-4d18-b257-64dc301b28ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ed1fbd-febf-4c5d-bb3f-6c896880d8cc",
        "cursor": {
          "ref": "26b4e5d2-6509-4bcd-8e0f-d8b7c370b5be",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f8f34a36-cf49-4143-8fbb-22f943e33909"
        },
        "item": {
          "id": "73ed1fbd-febf-4c5d-bb3f-6c896880d8cc",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "acb1953d-dec9-4203-afc9-2447b8abb277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5545e3c4-7400-4bfa-8973-9d61e9729bb9",
        "cursor": {
          "ref": "a21a528e-116a-4803-86b0-8ac721bd6c78",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "97b52fc7-710b-4f25-a036-1bb7c316d80b"
        },
        "item": {
          "id": "5545e3c4-7400-4bfa-8973-9d61e9729bb9",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e197f70e-e14b-4f4f-b2bd-a3d523a3c20c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bb4ce69-587e-42c7-9087-34fd532dc5e9",
        "cursor": {
          "ref": "26040bc7-6c0f-48cc-a34a-834b33e60ad5",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "1b4ddf2a-8487-4a93-b8e3-d1b4dafd5c67"
        },
        "item": {
          "id": "8bb4ce69-587e-42c7-9087-34fd532dc5e9",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a8d0c72e-0b93-4582-b255-6e75a6a50e0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0136f72a-c515-4870-a69a-fdbf642a1c6b",
        "cursor": {
          "ref": "4c8f86bf-a4a5-4572-bcf5-2c045850490f",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "42ec1d0b-fffd-4d7e-9a38-866220a6042d"
        },
        "item": {
          "id": "0136f72a-c515-4870-a69a-fdbf642a1c6b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "7addd7cd-f4f8-42b9-a415-637b1cb49436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e2b8ecb-bf99-41e5-8573-de92ae09b8e7",
        "cursor": {
          "ref": "7cdad016-d997-4344-a4fe-edda116359d5",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "19355548-d778-481b-838b-81f78fb2663c"
        },
        "item": {
          "id": "0e2b8ecb-bf99-41e5-8573-de92ae09b8e7",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "fd3bdc67-75c5-41f5-a7b7-5db07e2dee24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "337c90e9-2c60-4b38-aee2-3d6413e1632d",
        "cursor": {
          "ref": "adf8f833-5c1e-4102-bfaa-1f5109549539",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "2ac3c4d6-7095-4037-98bc-1775d680574a"
        },
        "item": {
          "id": "337c90e9-2c60-4b38-aee2-3d6413e1632d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "15964c04-f7f7-4682-a20b-40cc37e96151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05a12fc8-00d3-4c4a-8dbe-87ee4795bb13",
        "cursor": {
          "ref": "ddd1c5bb-fb34-40cf-b4d0-b5988650d11d",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "cba4fb45-67a8-4d4b-8291-d3553b724123"
        },
        "item": {
          "id": "05a12fc8-00d3-4c4a-8dbe-87ee4795bb13",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7a98e54a-5415-444d-b0a4-1011c31f5833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ffc991d-cd0b-4cb7-9861-12dde234efa8",
        "cursor": {
          "ref": "2c3be5d1-b3d8-4a08-bc8b-ebfcdfee7a30",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "35ce6f4c-21cd-4b3e-b2b4-cc7b811a244f"
        },
        "item": {
          "id": "5ffc991d-cd0b-4cb7-9861-12dde234efa8",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a3f1f7a6-a4f9-4487-81b7-336a7f732635",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a90c739-0367-4a41-98e3-5c826345fc79",
        "cursor": {
          "ref": "7d0d475b-b13b-4e51-98f0-30a7a505f9ee",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "986b04b6-fb33-446d-9678-5f16be6ecfb3"
        },
        "item": {
          "id": "9a90c739-0367-4a41-98e3-5c826345fc79",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "97ef3abf-193f-47c2-af5b-be8989448d63",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "c11a8128-f250-4124-9623-613ccf25e585",
        "cursor": {
          "ref": "28ee041c-d767-4714-9270-c9eb3939d09f",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "79701358-1de4-48ba-9f1b-a600d0411ef6"
        },
        "item": {
          "id": "c11a8128-f250-4124-9623-613ccf25e585",
          "name": "credentials_verify"
        },
        "response": {
          "id": "5bde443f-a9d3-426e-8d37-e639ac2453cc",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "42414c70-c5e5-4ae2-ab80-0d2fa77ca2ac",
        "cursor": {
          "ref": "6b4afbac-e5c3-41b3-8c17-a196920e696a",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4af6aa5e-208d-4cc9-b774-9cfe5c1f9d34"
        },
        "item": {
          "id": "42414c70-c5e5-4ae2-ab80-0d2fa77ca2ac",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "c3f094a9-6fbf-44b1-9f37-c4de244d570b",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad201c59-5726-4949-916b-2aaa843f8b9a",
        "cursor": {
          "ref": "13ac3a37-281c-4351-8e75-a868ce3619dc",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c540ddbe-b999-4b46-ab44-7037d936c3b5"
        },
        "item": {
          "id": "ad201c59-5726-4949-916b-2aaa843f8b9a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "45890d3c-ad10-481b-9aad-26c82cdad3d5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad201c59-5726-4949-916b-2aaa843f8b9a",
        "cursor": {
          "ref": "13ac3a37-281c-4351-8e75-a868ce3619dc",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c540ddbe-b999-4b46-ab44-7037d936c3b5"
        },
        "item": {
          "id": "ad201c59-5726-4949-916b-2aaa843f8b9a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "45890d3c-ad10-481b-9aad-26c82cdad3d5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "776be8e8-4230-4f7d-9235-260bea13b44b",
        "cursor": {
          "ref": "6c310ce4-d10d-49b6-b9de-7b0732d7680d",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "2c782230-cbca-459f-9761-5c8b9b5777c9"
        },
        "item": {
          "id": "776be8e8-4230-4f7d-9235-260bea13b44b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "bc796809-5c2e-49c5-b5f7-bf14ae693a39",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a9e432-bfa6-410a-ad98-e9def30073cf",
        "cursor": {
          "ref": "f9b48fc1-55ff-4891-91cf-8fab6da088b0",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b11f1810-371f-461e-afef-7b1f48e62221"
        },
        "item": {
          "id": "d2a9e432-bfa6-410a-ad98-e9def30073cf",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "da646571-fda2-4ae3-9e2c-de59c219e2bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}