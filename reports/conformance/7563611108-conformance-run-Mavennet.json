{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "df1e49e8-d315-43ce-8f20-8f688590e6aa",
        "name": "Clear Cache",
        "item": [
          {
            "id": "a97c767f-b16d-424c-9727-37496f606cce",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "90e7123d-f212-4c1b-88a2-57392c726b12",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "33d5db8c-2b4a-4783-800d-8a92db4db2a0"
                }
              }
            ]
          },
          {
            "id": "e02186e0-d2bc-44d5-b427-ddfe4851e9d4",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2d4ed742-8adf-44cf-95dc-d7ea9428dd44",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "56b4708d-2c05-4bd1-982b-7ab1bbf5d692"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "73c9f344-e71a-4f6c-a599-9dfe3ea97dbc",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "4f74388a-92d9-4ada-a0de-dc9cd964a9e4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "16106a4f-7a63-45c1-9023-ecc7b1a04edb",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e2af2d4-103e-4f25-ab8a-cb50fd923618",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "034584ed-be49-4db4-bd30-36d741441d18"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "192dade5-b4ba-4557-87af-0582fd5bfdc5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f19c4c48-2368-4f9d-9b9d-fcd3ce67fa42"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "196f9b72-6cfb-42ff-bc3b-62d86be3beb7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fd00ee0a-add3-48de-849d-a93cf4ff712c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "23682882-38c7-415d-889c-a4d74d7c0131",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "8f86a60f-b2ef-47c2-8c97-bcb39f96f03c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1ad66960-574a-47d8-b0b6-c96099a2930d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8db50a6c-4d9e-40bc-9fc7-a25be9de040c"
            }
          }
        ]
      },
      {
        "id": "ce8df720-f8d5-4d21-b4a7-c74ae2a40319",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "99b359d1-d569-4985-84ea-592c2433fc17",
            "name": "Negative Testing",
            "item": [
              {
                "id": "aedd2388-66aa-4e65-8270-f7755748e2c2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cf2612b0-c6d9-4360-8a35-302a59f0c206",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bde22d9-3196-4440-9f79-2fb8b5594d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef049a42-68d2-4f95-bc89-a4bdd40a1635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9738814-cd63-4999-9616-a060c1b34e4d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff151823-60ff-45fa-a713-f23abfb96d07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a1505a07-eab2-43c0-8b6b-e5f79d38374a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbfd8ab8-6cf1-4cec-995e-5f7cb4e0705c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29f030e9-8a7e-40ef-a82c-712878c12e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "70b42353-fda7-4ab2-80a6-ff2890892f5f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4627c599-29fd-4a62-ad91-b4b92c15e5ee",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c01198bf-b642-4fe0-baf2-d8686fea9947",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e09daab3-6421-4864-807b-c81d1594a8dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "98662cc7-55f8-43ac-b57d-53cff09422c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bce118c-fad3-4bc4-a7cc-0e476c012a19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ed4e65f-e491-41e4-90a2-db5db650ebd6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c589c797-1ede-4d59-ac4d-f986bacdc10b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cd2840d5-8ee1-4b7a-927d-fcebabd1e482",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "369f891f-c827-4ed8-ba2b-3adb4ba1723c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ac740997-60df-4180-9fbb-8d1c89bcf2f3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "77710220-f19f-4972-9c78-870767d1493f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "814af540-437f-4584-9e73-e712087c02de"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "df6592e3-866a-46dc-898e-86ca30448079",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "831f04b3-81c6-4d38-8cdf-5bd76e334b16"
            }
          }
        ]
      },
      {
        "id": "c6f8a54a-b582-45d8-beba-351a5f206443",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "16157153-1f00-49d3-b391-1460b1fcd565",
            "name": "Negative Testing",
            "item": [
              {
                "id": "07c4e8b5-9906-42a6-b382-61a2dc199da1",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "851a1380-4ef0-4e1a-abac-f3bff714c2cd",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d6ba79-b30d-41fe-91b2-cd8da33fc0c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08055cc1-5d4c-4b7d-b4bf-41287be48266"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5b1cec4-b47d-411f-a089-3541c6a2f681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "69412f0e-79b0-43db-8bff-f0ae2b46248c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0408a1c-d00f-4cd4-b41f-ad7745750cf5",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ecd5b44-656d-4b8c-a3e2-63743dae21ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3b8b3c4-36b1-4aad-b706-2a3f06a4a6e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a526ec74-1236-4e6b-ae13-ab2d62f4a7ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6dea65d6-6318-46f0-a7b2-b9a4c186ca64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4586cc3-b118-4b78-92a2-4d2499c6e129",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b611f798-3e67-474c-ac98-46cfc010178a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7c9950c-ba0b-491b-844f-352062e19fe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d093c569-be7d-4d60-bfdb-ccbfc3e255b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9277d6e3-f83a-4836-976c-111e68608cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0239cbfb-a795-436b-811a-b7b5faf7c1c5",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9c48a06-eb0c-4ecc-8e60-e2c63d6fc302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09a76bd4-b985-4a5e-8000-1af73b2eb370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c309ba8-708a-4984-99af-bb5bdbb0768a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29807417-7a9e-4e05-bbc2-7f68afd8c3cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7729782-8047-480e-ba3f-572ffa24055a",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6afaafe0-dedf-44e9-a73e-97c99a573f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23440dfd-5a28-47c6-a7c1-a0d0e2820b65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d5844d0-8757-4879-bf01-0df027a85672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0cbfb043-86ff-4e77-80bc-18897f0d1806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49808cb9-565f-42bd-8f37-9f26866d6b76",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d432138-3d5b-46b6-95ee-2f98fc82e8f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15c926c2-a320-49ab-b637-6d674eb42008"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeec2e2d-6d00-4ce3-be40-e2bef7ca9009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5fdb72a4-570e-4ba2-bef1-ccff24512853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed87c899-7954-47ef-8161-1059b7db4359",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbef001a-6e28-4760-ac9a-35f20d1111a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fa4a87e-455c-4000-838f-0d928e52f1f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b27be4d-41c3-497b-bcab-a0c8df188e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18450dff-b824-45b9-8859-e5eba8bd2eb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e18be27f-21d1-4ded-a46a-70cfca2e3733",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a06a9fb-58dc-426c-9c09-4231cc5d757f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f51c465-4f2e-4b4d-ba40-8f159f096640"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb385e45-41f3-4f93-9ceb-c54b4daef91b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95f21804-0232-41ee-9a5d-d3ae36099c06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "084e9a85-ece1-43a8-b8ef-8665ab2cf224",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc06b8ef-c70c-4072-bb48-207ecbff6167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b0fac82-92d2-4d15-baba-41425a99cbb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e7d96c9-7a3a-4d56-be10-70ce1c228ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a55cd2b3-6139-482f-bf6e-f06a99c3699b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e86b1ee6-67c9-45d2-8a1a-247fee7e7296",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f41175-73ed-431c-bfc5-bf650ff20ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35aa0cd3-36c5-4fba-82cb-01a99d2f4bdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa3cceb-30e8-44e5-8a8f-1cf9aa294c8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de8eaa03-373e-4635-819c-8f0fed3774d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dca65b2-9779-46db-a611-3c7b1456785d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb45dad-4634-441a-9e49-1e8724f56f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "649da34f-b92b-4f4d-b994-37b6b4c6e91e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a892428c-41ed-4492-aaaf-7b3b7e20c7d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae2cdfbd-0e0e-43cd-a651-08b484391e5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2934f613-b96f-4eb5-a812-bc7747e7bee9",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bdc5654-ce28-4925-8b20-975012a63b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7dee197-83cf-4b09-ab73-c30bcd75f1fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc27063-be44-4bfa-9bb7-aa8a0e7786e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5041fa7-3a46-401e-b202-0a4aa7f51aaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e84224d4-16cb-48d8-9c7b-b20118ce3fd4",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f83da5-417b-4162-8d8a-d5384b0e16fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5cdab62-e93c-4890-9ed4-40a757b195dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f00897f3-0277-4a70-a08c-3c6c035dd21f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "856056bf-37e3-4f41-998c-39b0514e817f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ff2aa3-43ca-4511-a67e-697eb1902b4a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a07f13c8-89f0-4f1d-8e85-3e5afd50896a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "144020df-2756-4fcc-a357-ea8b00d1f93a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aca646d-e8ab-4bb9-9d6d-39208eca43de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8db8440a-86bc-422b-a036-d0e460f33c7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8846af5f-5b85-48e5-8a3b-db7243f5771e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae39d468-1bef-413f-8288-21f111671160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4cf8a69-a55e-4bab-84fc-a8663af88807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ca67f10-1987-4f4b-8916-a409494d321f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dd6ff07e-6684-424a-9d34-97e347857d5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc5431bc-be88-4570-a39b-5bd58d5b8be7",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f052ea98-8937-4306-9ef0-963d6f86774c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6aa3f017-280a-4425-9be9-a76f2ceae8cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf31dff-6d97-4345-8eb5-d3b2af984433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81ef2c1f-bd93-4274-b5a9-79d6e74150f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b93fe21-8a1f-42c6-9cc3-584b8c997d32",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d0f9b9b-6bdb-462d-92d7-ac87deb55586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dd9f5a8-a942-4e4a-81e1-6dad6e65086a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7fbe951-280b-4b13-9e59-87964025862c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab1ba344-cceb-4e3d-8b93-112bd86aac91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b43427-14ef-41b2-ba4b-82cdb47f56d7",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "233724be-1981-47f5-af72-55ec9dc7e19f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f83b8212-e753-4dd9-ae62-13ec380418f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e7d486-a8c5-48f4-ac78-f5fd1eccce2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e65cc8e1-53cb-4f0b-8fff-5be31ea4df98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47248090-14d1-4cfd-bbd7-d6570cb2865a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0f61370-fe51-4cf2-a690-f1389c505ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c38cc9a7-18aa-46a6-a595-1d511b01338a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81f5235c-39c9-4750-8561-2b78738451a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9d4f2c5-c45c-4cc7-a128-3071ff83038e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fdb231e-830d-42af-8ba2-a769988ae988",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daaa6ced-462e-474b-abba-d5d303995ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a823d9ab-b77f-4be1-bbf8-c921c3cb669f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a69f35f4-4333-44f9-87c8-e37fc57476a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "624f3567-772c-4fb9-996b-1baa1da5bc0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49177acb-e00e-42e5-b2bb-d0ab354481a9",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b80b9830-3c7b-46b2-bf7a-f99bccf76e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2673cff-4adb-408f-a6dd-4d9cd2c3c998"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5aa0ef2-6cf6-4608-b725-9ec22de6cfaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "397fc507-b2a9-4bd9-8400-1b10823bf5e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a2ba37a-e605-4ec8-85aa-cb34f55afdcb",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56bb2502-ed55-4303-ac10-edad52ad1533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eace67dc-1314-4a1a-acb2-d5c4afb67a55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ead6a87-7d10-4072-85a4-9f2cb2f930f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d8a3b8e-d235-4636-a551-ed0116fadbaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "265123e2-5926-4224-8146-3afe1ef99f7b",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f490e8e9-1322-4c1f-95ad-a4f3a4ae1c13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05e898ad-eef3-49a6-8468-cf58422ad9e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a49987eb-0257-45bf-abf5-2c953fca4628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a9132f74-048a-459c-9e76-660a0107f6c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1be525d-0537-4fd6-aa50-f58776085527",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5ca05fb-c5d1-43f7-9c3d-e988b05daaf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20e99a52-d582-4b59-b7df-e983c6896d42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "326d4513-bb6e-405c-958b-e00446fc1e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4acaf58a-d66e-43e1-97ed-8640720d7b5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2439e9d-e3b7-4619-8c68-c60b69b89d0a",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2f70d9a-6316-4894-b5d7-26c426d0ca2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0970707-e140-4e93-83ef-0eb96902ab81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36ecb31f-6aae-45be-bb34-7cf70ef04c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2561b2a-93f0-4873-8034-428623dc10f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52080e6e-7021-4e42-a8f8-8cedafab014e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65041bd3-be71-4a86-9f9a-83c3a017fa86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c07cada-fcef-4e8d-b12a-246bc1294214"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b69c12-50aa-4586-97e4-9ab00ee48b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "333958a6-ab02-46fa-b46f-497c2be4df15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09b0e2ce-820d-4508-9c8d-e80ee611ca50",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb3e0d1-524f-4c31-92d5-280d3002f4c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a917f74e-ee20-4ce2-b7d4-c58ccd08af4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "343b24b8-e7f7-4362-b3e9-ef0a4eb8c7d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "17aac147-6a48-4de0-96aa-428d06621ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9b890ae-aa22-495b-941e-9cb02080c751",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdded6ae-b1c9-4411-8dad-b2e25da24f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d78096fc-3b97-4a2d-b97d-275eb31883e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "237ac622-f525-4cf1-af85-fb901a35f70f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "14934ab5-5196-441f-a2e1-a935be6f5662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fc6f3db-6d81-4daa-9826-7da25635608c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f6f787f-cb37-4704-9a32-5fcd95d65ee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8441f59a-7cc3-4618-98c6-8f59613ca44b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc75e2d5-8faa-43d6-b19f-44cd5647811c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "92b2f52b-3286-4934-bba5-7ae79fcefee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd11eda1-d236-44c3-8643-c4fd215db9ef",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dfa1a6e-18fc-484b-95e2-cc00e282b8cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1ecb2c4-99e5-42b9-aae8-f2bcd51b2652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "676ea47e-9ada-4239-af99-857def27d808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "77cd0c3a-888e-4317-9e3b-8694756fe2d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e34016f-3d11-4cb9-9ae4-f3a3bc0a0b6c",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "082b4bfb-2d3f-47bf-8af5-787222ef22d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ab29f06-4560-49b0-a964-71092df3643d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "272fba8c-30f9-402a-b30e-f6a86088a95d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b08ae16f-375a-4524-b3eb-d9a925a35769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3464538a-8687-40b8-8ac0-fd0d84cee5f6",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7254c610-0ebf-4584-b197-01112dee8fd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12d1465b-504f-4dd1-9512-7130486b3685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24dbf4d4-dffd-42ec-b093-2dce83be14b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "97fae85b-a391-474b-a3bc-b64466b504a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77713fe6-1515-46a8-bb41-0888b457f4e9",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd2b70ac-ece0-46b7-b74e-475c7bced42e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9734e7ef-9842-485e-887c-1556468ccb9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4bad908-8455-413a-8e17-2f616c056c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8623a31-3776-4584-aa7c-7606c1518c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae029e9-3d47-48d4-9ffe-88b208720190",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b920f3d2-40ca-43d5-a5b5-420177e3865c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5dcc2b3-cd0b-44f8-ab56-1e3306499879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f203301-3aba-4bdb-acc1-a62187ecd7f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e766fab-7d89-42c2-9553-93599a4eddf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7108a5ef-2ec8-4125-ac01-938bbea19bf0",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95ccf541-e575-48f9-9c10-3c5bf8df52b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbbf92f4-6e98-4d1f-be50-e84f85c1a869"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e0b4d04-fafd-4f4a-a544-fa1243c4e0d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "62dbe693-ac2a-4c68-bfce-04e98094e3f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95119de0-e1e3-4bcd-a90c-afe84c27922d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b88353f9-dd4a-4dbb-ade4-61e47e4cba04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "654a7b13-3888-4b56-bb07-3f724ed3e507"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ad4797-6951-433f-a6c6-eacdc081176c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c6767fb5-8dec-4923-b87a-07c12fb45338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a1e925f-8459-4957-a820-356371c1ef51",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b14fcba-cbd0-453a-9470-c2762eec6139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "830a11ff-dae4-4a06-8298-2fca89fa7646"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f02b215-d6c7-4823-8253-1eb779d379be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b7a3e47-f994-414a-b322-c747adff8f19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00d5415e-2796-40e6-809d-f7bd0fef9611",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62dd5fad-bd3a-4307-adaf-2a0db784e97e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9f7c571-42fe-4135-9c9f-3f1c2df84d86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdb75e6b-d2a2-4ab1-9b9e-58c582eab7a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd202ebf-3ddc-4e45-9bc1-13d12e829671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d189cda9-5b4e-4399-a669-95da14142c2c",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "925d14ad-e001-4735-bb27-c16d03e55ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fe22e71-7b02-4320-93ef-6cc164fb431f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7441a052-184c-4794-b507-6f38e9975dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5046da28-b0b8-460d-a9ae-273839bda16b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42c149b8-97c0-4c7f-90c9-9bd80b322ca6",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a02f4e8-d910-401e-8c54-cc098bc931bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bbe5388-7681-4069-954f-4111a28a3ed9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ed22846-1a0a-4573-adbb-84bb11c10ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e82bf23-da8c-47f3-abfe-9b2c3b5b1aee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc2fa174-6bce-4563-a136-2c6c8acd2427",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e3a8aac-7dab-4961-939e-142890fa55d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5adb57d6-92dc-4bbb-8191-9b1a7dc38fbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab20c2f7-d3b1-43c5-a56e-244fe325dc27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8362588b-9883-46b8-8bf0-43f478968087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b89d512a-e261-425d-8579-4916b171de21",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29c4189-2736-43d7-9ea6-a412564f4423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "262f601b-8b39-4e46-a445-0b2594ba2504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14ab63c7-0ed0-4059-b6a4-8eef5e6e2d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "a55b7e52-7bf7-46c4-a3ed-0f6f6a5c5138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e346d63d-e568-45cd-9fdf-dd7d26c2da47",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c6f8724-3549-4cc6-9632-8b4ac31c7249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b81207be-791d-4213-8a03-a42061ec0f0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e33726ff-3a25-4b3c-96c1-62239183e033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "91188cf8-c56b-4817-9def-0dba9054e3f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11252f4e-8222-4f5f-b70d-dab475a665d0",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27201f64-a100-4df7-968f-87b3236ae283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ea4f7d8-8e71-41a5-9ced-bb7bb9b430ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e34e36-bd80-45ae-a386-4bce5bb1b334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a9df60f-aaf8-46a5-80db-a5b6a969bb77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a76c244-c621-47e1-a7ce-29b283ab3299",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba07362a-7dc0-4135-8348-4a89ef3bd314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85df138f-630d-4afc-9373-d5728e7fb325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c6d24b-a6c2-4460-97dd-f4c89c8b1d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "04984d10-66fb-4477-9a51-52741ae58fae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa489fb4-6e37-45b8-82b7-44cc824a8162",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e98d6eeb-a0f3-4f3f-a7b1-c6fbb0e72276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14a736ea-3a07-4e10-8839-ae2c37693714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f598f017-c8b2-4e78-8ccc-ac1538744525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8cb88d5-d905-4688-beac-ae271a08bb91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b859ddb-5e34-4028-913b-4bbbde141042",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a3f533-57b9-4799-9399-810c7b90773f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1835a272-9060-4015-aa4d-13de9c0504fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "760c8795-4bce-43c5-9423-2cdcc0301da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "660ecdc4-7b16-4a95-ae42-7a7c461540ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e8344f3-1bee-4b5f-9905-d0591aecf179",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99979364-cbbd-4945-8b22-a6c7f50ac06d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ea9cbf4-02d1-4e9c-b789-2d8bc9b60bc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58c30e9a-f06e-463d-b943-c5586c40487d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "696125dc-8d5d-470e-bc06-e2eafdc1aa1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31ee0c34-5a89-40d1-bcfe-1ebbf3982cb9",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "579cabbb-bc59-4209-8804-3d43e1baab71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1449e19-d5df-47f8-a697-f156bee5ef3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba932fc-810f-4c6f-abc1-a0bbe6ba940e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c10019ce-6f86-41b9-8849-3a345982f2da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59e6bc5b-be75-4753-a7ca-8c04a4a090b3",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c551baf2-1cf9-4d7a-b49d-af7223f8a41d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e63505fa-bf0d-4717-9197-b6644f44c25c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44ed964d-566a-4df5-add5-5c2ef3bd5ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ad21297b-6e78-43bb-a729-e436e4bc6e43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d88f750b-d635-464e-8792-a54965d11f05",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2eca0fe-5c37-4b45-a996-a5facec02cd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0832b377-69dd-43b8-b903-25422e107c20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f330bd5a-5019-4c0b-9c54-e266dcdf2f5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec46fc9a-5e15-4aea-9987-302ce09dbd46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad2a35c-e6eb-4b75-a2c3-0fa359477894",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5749fc9f-98c1-4312-9c5a-fc3c0386b8c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f9e9b0b-1384-41d0-bb2b-f3261ee4af47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92c0f698-142a-4db5-b89e-8c6b97907f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e42278d-5ffd-49bc-8e91-079049269b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8307e9df-5a41-4076-b166-89a187bfc7d4",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "626fb945-357b-4caa-ab3c-c360debb2e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a2a3581-7e95-479d-8f7b-c20c1a4a9ad4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32c43ca9-b906-4a96-bbf9-66f464496b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e29a2f7c-aa7a-44dc-b4b3-17b05ecdb541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "777ea6c4-9f83-462c-a751-2fc40c0bb31b",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35c2cf10-9231-4d56-a39c-871647398755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d78b63b-4970-4567-abe8-d7a4fbf5331e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f46c9aa1-e249-491e-82ae-22f3d52932fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a738a95-09e5-4795-b00c-89f4795af5a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d334ff3a-5566-424e-a06a-b8316e1fc139",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "935182c2-dfe4-4dc4-9c2b-3f3a9eecf394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8389163-23dd-4e22-ba21-d61e6e8b34bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf541c1-1aba-44e5-941a-ed4456b17fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "807ba2ea-269b-445d-b900-9cae512e490c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a5e7b0-cc1f-4d32-9b0d-bccd25a3bcd1",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c3a9cde-d36f-4dc4-b52a-1f17f7ab49e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76e215a6-498d-42b9-99ba-0d248cc17181"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26220cd3-6770-47fc-91fc-989b7d5dfb96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "bbcc6a13-1182-44d0-803b-4f5756efe342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96df6504-d462-4274-8261-c5f69637ad91",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f6a6d6-0e07-4dd9-85b1-7769a428f523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70c3d49e-6828-4a35-8f36-f3f7bfe596d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55391dde-6585-4f64-8db8-bddd1f6ae74b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea617f9d-20b7-492d-a218-519d58379aa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2885420d-373b-4fce-9609-52abef127387",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f08dc34-4a18-4d13-b903-a974b66923af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "571c8c87-48fa-47aa-9fb1-96e2f9e7bb45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d11f1f-f8f1-4c08-9cb4-d030002fb76d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "77121139-7304-4a01-968d-f2f96514ef88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "805c4223-3855-42f4-b280-960ab57a1fbe",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfcaae05-eafb-4956-a31e-30a3c5bc8669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f8fab11-9d83-49ea-9844-5ce3bc038cce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c03e3d1-519a-4344-afc6-46b163aab685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8174ab5-5943-4218-bead-2d7af3a0c24d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad949b35-67ff-4809-a2f3-3ae66d5b622b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a5eabf0-7dd8-4fc4-bed4-246dac7f164a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "932ab354-290e-46c1-97f9-9aca25ce036f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39895268-7102-4762-8775-16ce11a992f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "948fc275-01b8-41e4-b8e0-c308d688abc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59db2e8b-e200-479a-bdfc-dc026ca42c2a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d451b70-7964-45c5-8a0a-15c22dec6651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32f019d9-b0af-4289-af6d-86ff4c01815a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "597e45e3-6a60-4033-9240-8aa9cdda044c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec94f745-61bb-4332-af60-96c89381fb2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53883624-b56d-4e64-b3de-b926e2e8b7b7",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ef52bb-3428-4fe8-a548-81ac1b8c074c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f1bf0b4-8cd1-4b67-9495-3036d24f2e33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a21ce919-4676-4eae-bdd9-2f602f68911f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "39c385a6-cd18-4360-9d96-a6ad9dc72183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fe43432-19dc-4a6f-8149-a0c336bac99e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87231a67-9f78-4e57-a8e1-5cf80a5fb0f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41f24631-4e88-490d-b6e9-af890b8b512f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52606ffb-ceaf-46fa-aed9-9229ac3fb18f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ff9cb3e-1da6-48d8-a820-babd57dc5dfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31e24ea3-dba7-435a-8490-0e3bcc40f7a8",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d6fdd4e-f3ab-4395-9e8b-1830569d700e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca1560ba-6523-4c59-82f2-04e04e877ae2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e522b0ca-8e24-4b9e-89cf-9e667dd7573f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "69a82b15-2472-4900-8240-8ee78612a1ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d7584b-87c5-453e-998c-d51ad5a5f148",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "982d1ce7-de15-4644-a26c-65db2737a109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0477d095-2e67-4e8f-abca-1baae91ee3f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "354dc400-11a9-48ec-99f9-b2016e61bc0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "889ea60c-69e5-40b6-a423-998188c0b088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8b75654-e12d-4878-86c0-59cf88f928d2",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cccb365d-8a0a-404a-83ae-98ac0cd56629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64629a4a-4317-49cf-a905-5ce75ed3dade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3037266-f55a-4931-9be6-7a9b9d200e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a13dc099-a9d4-4fc9-ac89-79bf468aba17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ada8af90-eac4-483a-8d7b-af54c39ae591",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "790a79d3-0bf3-41a1-a992-5d2c2e6b1af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98a1f107-8a78-42e4-912f-97f249839fa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79d4f983-8557-420c-affc-8b154a0a0e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "13f92bce-1331-4f14-b79b-db66cb44908b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc9d2cdd-dd29-4090-815f-6918db0ee8dc",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "105a816e-a62d-4f80-bc72-250b9682227c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae9c857f-b3f7-40f2-85ff-809f9f7699ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b237dc89-c50c-4bb6-bad6-18075e642366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fd52c26-a862-4a55-a01b-3886586d2cc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "006696ec-ee4f-40be-a7d2-e1e538734e8f",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c9bf43-98a7-4b1c-bf41-a4e5f3dd9ba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1caaf976-2f57-4371-b19a-d3f9d3b52514"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1bf7f97-46a7-4c1a-9157-a8f81e325624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "94066597-7139-400a-8711-ad1a20acd435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0d844f1-a908-4b26-9f3a-5976dc780764",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b855477f-1b61-476e-92d5-b4bfe653e365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7fc4e6e-53f6-4f07-a0bf-59dc8500cec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44f3f9e5-19d7-406f-8f6d-9376aace3288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1f3090b-ac44-4703-996b-5ed12aea075a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b91dbb0c-caa7-44a7-bd03-4db469a113ee",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe23dc6a-4a20-49c4-bb22-d392b5c24135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a3203d0-9323-4a6e-bc2a-3c5d42f32e3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a0e7b42-abd1-4252-a432-f6255a6cd6db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccaa7247-8cf1-44c2-9914-7d1b68c70564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27552db2-cb2d-4725-ba68-6a149cf7ed00",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a6c316d-7c4e-48d6-983c-e822f0c3d543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dc86385-3225-4e88-aecb-6435ec0e9e56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a7716c-9d0f-4cf9-b5f7-29f96efbe4ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "05f3778e-714f-4010-9ed5-8fba229872f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dc87491-0400-424f-8685-f1ee051fae45",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c9cd9f3-0641-4a72-a7ec-b59dee3a2235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd59d78a-f8d3-4807-902c-24455b9fdfd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39b4e46f-7a84-4220-8e27-6964a5c57124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "56caeef3-73ec-4591-9f37-02f492e3d6a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30a9322b-e24f-4fc1-bdbf-30c44d202702",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23eb7523-2030-4f6e-92cd-39bca0df7fc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f94f1426-7d03-4931-a268-ce5cbc2f2768"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb6108a0-c9f8-4a88-b2f1-de79f978b9ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b8206530-6688-439e-9f1b-ac3f7a6d57ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f2f729-6874-4bd5-b977-938aeaf88f72",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "077f1fff-c835-4620-b76f-9c70e0c72d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c03ac49-855b-4af2-9f75-8325dcbe8e87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b66ae907-65c9-4769-b405-793470cb5ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "39e75c47-6f39-4b37-9f92-832b6dfff2dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b8cbcd0-8b9f-4970-be4f-b3a045f75cd2",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6fde2e4-8acd-47da-9dd4-5c1dbc2cb323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f118cdb-3318-4c40-a2a6-ef62537e27ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "146b7faa-26cb-4934-b111-e7ff473d1679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "af5b147e-34b1-4e2b-920d-2a3a319404f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f07f58e4-c767-4f35-8362-6c69d3a25fed",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ea2174-67ff-435c-87c4-3d4462efb513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3153182b-9660-43c5-bbc0-6d813b5fce63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf7e5fa4-e64b-4945-b795-80fe26b93dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b62de067-69e6-4571-a766-90dde2a86263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "102eb810-685d-46c4-ba5e-9f70fbc0ae9b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c4472e5-bbff-4df1-886f-09f4df8b40e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e6ea372-724d-4689-9848-f185c1238527"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a1063e-5cb8-489b-a96b-c01a0fa3ed84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7b25c5f-26ac-4902-b04e-0a51003b1db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "420ef9fd-128a-469d-8476-3d659d23e299",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5af1d32-b728-4893-aaa5-21cc42237505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ab813f5-330c-4c65-9574-8a741057cb74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fff5e6a7-351c-4f24-bba8-4f17250af009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca1c82b4-267c-41f1-a589-cb1668810be0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a475714-f47d-4e54-b452-4136c5970200",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ae7386-b2e9-4434-a32d-d86a3d6d81e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e89560a8-b30a-4158-880e-43973bbe7a03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a112e7-5059-49e8-957a-4fbfd8893658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "daa8f9be-4522-4660-acde-a1b78cf6faef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e62ab9d0-297d-41f3-85db-eb35d07a5ef2",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "222e7c62-61df-49a8-89ce-05ecf00420b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4395a120-f384-4f6d-9591-73399cf6b44c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59a91d7a-5013-4e1d-943c-8058c8cb986d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea0c7b95-f1a8-4cef-9a0b-60f1cd3a1523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83945b8d-e2f3-42f1-adba-9c3c8985e500",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d389e5-0510-47c7-a6b7-019564a56f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8e6f92a-dd5b-4a9d-aeea-4a0b57ae3823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1848dfd-1b82-419f-bf42-b2998c97506c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f41aca4-0a3a-4a7d-a5ca-0a743718970a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf1f254-5f04-460e-8d78-0e36f9c0d3a9",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17cc2022-a564-467f-8b0b-36b56522a4ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c42f390-85fc-4152-a933-0e89781a359b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ee9d06-209a-4db0-a1bf-2387e6a88949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "73bc7048-270c-490e-b8f6-a6cd327e0eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06bdb1eb-a5a8-409d-be58-b2b3d66bf37e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e4f683-391d-4c19-81a3-cfc59cb1020f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe3294cb-2363-4341-8b27-46bd52b0cb1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa5a4e28-b6ad-4261-996a-465067148784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "42a87aa2-4c38-4fb8-864f-ea373265bafb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a3b4de7-86ab-493e-8204-6da4d97e219e",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3afe0606-302d-4159-a6a2-2fb00bb34730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "822eae11-c506-4059-a6fe-a528e72e5b04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "170a77a0-a5c8-4e7e-b780-ed611bc6946b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d8c86bfe-2afc-4418-8521-c9c7bb43ccdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76290e0b-afbe-44ef-a9d9-d682c9b678fb",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00c0aea3-880d-4db3-b96c-bb13beef8d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcfc28f0-b160-47b4-82e6-42718da63219"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cae9a19c-8ed9-4cb0-af0b-33655cbcdeeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "56a74e8a-cc2b-45c3-b3b9-c4ec7b6fcfc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d43024-45cf-4b4a-88ea-1b2c98f01a89",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2531b72-55ec-406a-b2e2-e16ee804cfa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e54672c-83d8-4a27-a238-1bd015133459"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b090389-43b0-4995-98af-7ecee477c2e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "71bb5f50-c39f-4e05-8b70-e470b5b70124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5010fe62-7d48-4121-bb42-ab4b8386817b",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b937514-240f-4c2a-b0d8-7784edbfd96b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56456534-1578-4a5e-aa57-dcbc31848cde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "483048b3-2f65-4776-81a0-c19919c41e23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf45ce05-4001-4abe-a84d-c23acb7f1883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "712f5570-b56f-4582-bca6-2620106c595a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5003de3-bcaa-4d49-86ac-2f78afd594e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed0506dd-c262-4ee0-ae0a-dd48c2316b35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e50ab55-fc30-463c-9e4d-b801dfd153e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "909f8788-a66d-4b29-9136-83af04b0f79b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23a1c122-da8b-4ed7-86a9-3722b9df5bd0",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e41374a6-1d15-4283-bd85-429d10e5af44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07ee58a0-19cc-484c-a984-91a473dfb207"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d363a7e3-b7c0-4bff-9b34-6935406b1ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6a2647f-1e3e-40ee-acb1-49c0a3becf6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cb90381-3ec8-4a89-b175-b991ce3103c2",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a5ebf96-836a-4d27-8b88-26acc013e0de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "454f68b3-8ff1-41a3-b8bc-97d743f83dfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ec75a81-1b66-4ad2-b698-00a0cf857365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ece3c211-dde3-4694-a9a1-4b707c57bacf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a6153ee-d4b1-424a-b3ca-069ec1785958",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8298b288-c216-428f-b48d-42999afa5edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "67a77c76-ab51-416c-9074-0d5706a3a079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb66b4d-d878-46b9-b26e-6aed28a9146e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b15c15b7-88ff-4581-92c6-42a62d965627"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f6d0f9ff-ad11-4a35-a5c6-2c4ddce4ef46",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b9ad4f15-8535-47db-ac16-96acb859cb96",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d15d0ab3-3cf2-4b1c-bc3a-7869d8c15405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "18fc8e9a-77ad-4624-a2ed-c36cd70f1a2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "634f6311-a793-456b-8a97-7542555dd84e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e18fcfa9-062b-476e-b1cc-199b80af0908"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "54ac410b-e156-4afc-863e-9f6ac03f8a52",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c3fd7865-10ba-40d4-a4e0-e6a2af84c724"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a59ee83-97b0-4674-8fc7-f83fc883df37",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8fe33908-860a-4ecb-8a66-2f953e180efb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3882d790-6b00-48cf-aa8c-0b1056fc7207",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c4c1614c-1d78-4e7a-a2f5-c9857acdab78"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8404c94d-6809-44a5-ad63-3c0a55482d94",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2e4282bd-405a-41c0-be40-d1a8afe4059f"
                }
              }
            ]
          },
          {
            "id": "09e39115-1dad-4243-aa0d-1451ca67e859",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2ec30623-3f6b-4930-9945-edde529bde73",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "d1f80ba0-1a8c-482f-b9c4-15712d80c69d",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9af812f6-c133-4ff6-958f-5f6603c2ea39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "73a4452f-6829-40d0-9352-411133e436d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1df100b3-df0c-48f3-8be9-e9157e593005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66abff3e-cfe8-49a7-bc8b-3cda214c041a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "308fb9f5-ffc7-44b3-9dc5-a38b9cc5b75e",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ffbc447-f396-45f8-9384-6938dd79c297",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0a53c324-a086-4047-8613-97d67dbadc86"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "481a7e8b-4c25-4bce-95c3-bde89f33d75a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bd2fe31d-3aaa-408a-847a-adfe2efd2595"
                    }
                  }
                ]
              },
              {
                "id": "e22ebbfe-f050-4d67-97c7-34238b1a5496",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "51cc8eb2-d8b4-4daf-8f19-7cfd2ab8c9ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f20d0663-5424-417a-8458-9f3c5ccbaf5b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec0d33d4-0d5c-461e-9d9d-c6494c65a8ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "03e34f19-0553-4087-924e-26b36d8db61d"
                    }
                  }
                ]
              },
              {
                "id": "a6e30fdd-dd04-467b-a160-799e3dca487a",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "27ec6308-95f5-4646-a98b-d5ad60652d2e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bfbc2d67-d921-4555-a05d-2ada5c5d51a7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0a250d24-0856-4800-8201-fa502bdf52c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "300f22fa-5ee0-4d83-94e6-f1d726491f3e"
                    }
                  }
                ]
              },
              {
                "id": "7b1af815-e327-43a6-a508-b1276cff97a1",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "05b86a17-83cf-4ffd-a687-f34b110d18d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ab02b55e-b677-4939-be1f-063f37055ffe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92da5a60-622c-467c-8bc0-a86fc49922ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "70c93527-120f-4095-ba64-942810c20459"
                    }
                  }
                ]
              },
              {
                "id": "06d3b432-1c3b-404a-adaa-860e34063c51",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bcb28f2b-b2cc-49e9-b0fb-f54c77d730f2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "430393d5-a38d-4bdf-9528-da494400599d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d1213fc5-4f98-4ba5-982a-bf364b61dc2f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d4f95a3e-1f11-48e5-8014-a4be3d7bb6ff"
                    }
                  }
                ]
              },
              {
                "id": "a1d7e9f0-b8aa-4058-b8d3-f2092979e676",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d424a83e-9ddb-470c-9b0d-8c2a75d8a0e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "44160b2b-56af-4195-8d53-6edc6fb418a4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "241686f0-a258-42ce-8eed-078dd6c33acd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3b60ca12-b6aa-47e7-b708-1f7e74a88966"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "939ea0bd-ae51-4f41-aff6-53f4d4e7125e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "61e2ce7c-7206-4fcc-857b-40a180cf4858"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "955bd6c9-ee6d-4495-b5bc-b49193a2e919",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c4314f6e-53e0-4adb-b486-909d1f9006fa"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "88f2a116-0af7-4422-9622-8d482e794dc1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "7865a987-a32d-4619-bac8-82ac7049e83b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2978cec0-92c0-46d6-aca0-d3c08b5b9e73",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7fecb642-d32c-48c2-b19a-97d5dbddff87"
            }
          }
        ]
      },
      {
        "id": "0555a45a-9750-475f-bbb0-ec5d91e51cc6",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a399e83b-f7ae-4cd3-92f0-bb9db5bb7893",
            "name": "Negative Testing",
            "item": [
              {
                "id": "31db8d29-8828-4e49-834a-042fc68fc25a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "582c3f89-ace2-4931-800d-283d94b34feb",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb64feb1-1083-471b-a371-edb285bc3e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c8169b9-c10b-4c82-b640-5b8ebd6256f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "998197ac-ab8f-4f25-96ec-33364680a399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fb01d24-1f94-4ed6-b980-dea74789f7cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfc1c1b8-d678-48a5-9822-6f01d6c4d7ab",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf81152-278f-4357-a65d-d365806fe189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df47efee-3fe4-4b03-a402-49bc819d5019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3662e94-8640-438a-8b3d-9a89210ff903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3dc6514a-2c9d-4d80-9ce5-b6ccd38d53ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "108c8ebe-e138-4906-aa98-d01c436a6e4c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3ed6d1-7ae6-4682-a2e3-39b92909cdae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "541bef4c-97c6-434e-8b74-ca61d2e27eee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0b997f8-35ca-4486-9058-27e72ad03bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a145908f-71da-4d3b-b78a-38245983e53a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "275d6286-37cc-42ad-88a3-28572a267e21",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b589e0-5d44-4c90-a3d6-4cb7324670c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4816c163-fef0-4c0b-8dfd-da4b6f42121d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79976c7f-7805-4875-8ac1-a23a44c93a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e7a67f7-112f-468a-94ec-f1736c3f4835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dcf0052-9c23-43b7-806f-e610b0c834aa",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc641339-bd11-475d-a193-d4680bf76684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb1f9985-7d2b-4c32-aefb-1c1eb9a8e0d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cbae80d-42a7-4132-b9f5-f66d27d05345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c593bec9-775e-4cc6-88ca-fb042d1922a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4093a321-fcfb-46f2-8b71-a15235f03eee",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a349cdf-cc36-4be2-9ba8-4d36c831dbad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b3b1bdb-6192-418d-bbfc-4c2c3a280938"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4341a3e-03d7-481a-97ce-7ffdce9d9397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6be0d4a5-a67b-480e-b582-fd2abd707fa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6591d4-7a44-4ec0-8e04-5d6be6b81dc0",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d63cd382-41f7-431c-84ca-e6b07f9e8046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d18a489d-3bd1-4195-91a4-7e71ebbf405a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d3eacb5-028f-496a-a221-fe372b067a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ab398ee-db6f-412a-a7b7-899fca2930ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29325fbe-b54e-4690-bf06-dd7db87ec06c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe3573b1-452a-4a54-a310-5007120e9048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27b15153-c9f1-4cc0-b68f-60d9850ab187"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11e33a8a-876f-4d68-962c-f60a39dd7402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b57e1aaa-5ea9-462c-a591-11804a8e0e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b41b597-3dd2-41c7-a300-c6df3d751d48",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be2ae7f-c652-496d-9a72-e2ac789b4aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd0dc762-18de-4c5a-9bad-82bbf8ec47dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82a2f8b5-a34a-46b3-a2d4-2fb56cff807c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca661262-7408-40e9-8b0b-ece366862a12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d44e3caf-b35c-425b-a11c-dff5f379d84d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cec7781-649c-4671-9992-562ef7025308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ffd77c8-889a-4d5f-a3a9-cea834d1ee4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a64b627-8929-40d2-bcd2-ed14228c9f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "43b2d85e-ca17-4c07-8f29-d75a44244a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc54dcd0-7acb-4c91-88e6-ff0dfed485de",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc0eafc-a581-445f-90c5-451c4e7a60a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0628e64-0bea-4f12-b37e-f2cadc9fda6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83ca267d-b7ba-4d0c-bdd8-fdaba3626486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "42fdbe00-59e1-4084-ac0f-e4c385633adc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10004d0d-84ef-4cdf-839d-169bc9379c4b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf49811-665e-4964-8522-2000c8dc667d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0869fc3b-b011-42a1-a631-7df1571125d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff6272e3-369b-4778-a8eb-e4e63b46486c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8b6b483d-4316-422e-8bd8-ccb31231bfb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06800196-61a3-45e7-b394-44898c687f0f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f381fe-9969-434e-9b9c-9fec826a72ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c502d911-554a-4b96-95b9-4d267fc0f03a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "697f4eaf-236b-494e-aefe-9c7d5918dcd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc137a91-4995-4cb1-a279-f186b01f6ef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dac3ebe1-4363-44e1-9ad6-3ee2f92d433c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7943874b-0aac-4ea8-99b0-163ac52eb99e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5596bc0e-315d-455a-bfd3-108fcf53bbb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb4b221-063f-4ffe-83ca-414eb54863ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "af3b1de4-b4c3-416a-9318-20c859eb656d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ab9329-0e2b-416d-989b-532be689ab29",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99dac37e-bedd-4449-923f-419cc9e21ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2051039-9c84-46db-958d-e951b1e06d0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57231c7d-6d10-4332-801b-e230408ff38d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c941a919-abe2-4108-87f8-0a1782f28b51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c2d0c3-7373-4fef-a2af-609f7fafce67",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "269b3d50-57c3-4a0f-b18e-68fefeb475b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f461a9f8-69ba-495c-93d4-ac123ea05bc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c44879-b085-40c5-8270-6427b9125977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "89138caf-6a8a-433b-9a06-1cea3195cb0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f74d7453-8487-4674-9c01-9fabcfe8b504",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a5a222-b926-46ba-a87a-7a8dbd6e98aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d4d8e05-6269-4c38-9240-d1690636a8d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3635377b-6020-49dc-842c-1b7d05c425e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e4c7daf-ba82-4ea8-b9f1-7b3f6ac623b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a4c62be-f9e1-43bb-a013-b6e5b74455d0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d75c508a-8f19-4497-9f99-55f638c9558d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adc78fbd-5943-4bd2-a861-672263dc1c08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "546968f3-acad-421e-9acd-a7144f47edd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc861f62-e059-43a5-8351-097ad0e428f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e06525a-b183-4ae5-99e5-92157a4c113d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeba7e90-12aa-4ce9-a7b3-086ee551f7bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcb4988d-0dc3-43d9-814e-2e9bec14b434"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec46ca7b-2ff9-47b6-8ca8-561b716b7831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac895b08-0536-4aa3-95fe-a3f6844d82b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc33050e-f1b8-4e62-abd9-87de42a33cf9",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27dcd271-128e-42c8-92d5-8d5aa134b6f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e090a1e9-d87d-4686-b052-8bbbe6f2fcc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c6ddf0e-d9ee-4b6e-96f0-815037b1e45c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5b7a8fa-30cd-4a4a-93c9-4f58fc70c9e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7847f2f4-a767-4911-8424-181c8013e3d0",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f57f030-1958-4b08-89f8-7505f31872e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7592ab70-fac0-4ab1-a640-c4f7103fcce1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92f90bcf-2719-4c04-928e-3ec978feebdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7ee2cf1-96c7-44d2-a95d-76eca92f3d4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1cf2080-a463-4372-b6bb-2a634d79e2a4",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8159ed7e-e571-4cc7-bbec-b1dfcf2d6873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aea184f2-d4a4-4366-9155-92839c837541"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bd8e09b-d72b-406e-8713-e34da8842914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "369d7273-42f4-4ae2-94a6-5235f21564ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0ae713d-6f8f-4b63-abd3-481f6cbd29a8",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2419edbe-d772-4956-bd22-c1ee09851bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e40878c4-21c2-49fd-86a3-6b39ff61bf03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f20d13fd-6b4a-4964-8aea-6fd4a898d06d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e1d17c0-e97a-4ec8-8dba-c3f1363760f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ac6f983-ce2e-4717-9ab7-0610b3a236a8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f739239-caac-4f37-8330-8777524f3240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72bf8a17-e050-4ec2-b359-91cd94804509"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a55917c-ca40-498e-8ba7-c5da322739ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4dcd0cb-7352-4e58-be91-922e24b7669a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "215d8389-45c0-43af-82c0-90f6b138d509",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e515747-cd95-4e86-b4f7-0a6420e899c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9ebb4a9-79de-4b47-8e52-7932587628fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "967b7861-59c7-4cc0-9c11-0c41186d9ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69a5a371-a7e3-4154-94cc-b63093269a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc72f2e-2687-45ad-81ba-95657c7da8fd",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e57a5a5-8290-4ce9-9cda-c22e25d66390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "292df803-7397-4281-b581-246ac59d29ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1f75c6c-6860-4f01-af96-c6e3ca3c5745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "733332e3-8020-48dd-a5ad-777b15e892ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a411500-c96d-4081-b481-50e0f01d523f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2350595-3623-4c61-bf43-7c81447be6c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a9802a1-0796-4c38-84cd-800af79c314f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fda89a8-a304-4f22-a805-d77a08152189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51aab836-3f3b-4644-9b00-ac9262b38fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "436b1327-6fd1-4da8-91b6-2b3d4f26371c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78cc48df-96f5-45b9-80c2-8d7ecd236b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5cfbf48-2bb1-4bad-a7f9-74e0af324eb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d601a99d-db9f-443b-9f02-88d781627ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "81655bce-6c88-41e0-8451-aa73a11b61d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "310a5d05-3cdf-4c10-bc57-f3bd5d997a35",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c75d0a27-450f-4838-9bcc-273c4ac89602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4237b7c-4ed2-4a25-b987-ab0911281148"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acca0266-176e-4683-bb35-460cb2f5ff74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff3f7436-3654-4c08-a804-88df816f49d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df1f9214-ea22-4adb-b71a-1a986c9e30cd",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9882fb8-bc10-4281-ad09-e28583cc8ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d3fba85-6d2b-4741-b92f-d11e50263b7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce251d35-983a-4dc4-b25f-e1da4205a76d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c916dd40-9add-4dd2-be30-9e844a08f326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "831184b5-a151-4a1e-b4c2-439ccf8925d7",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c4baebe-4d93-46a5-9599-78dbb73c190b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ebbb685-42c2-4921-ba0c-3a18e87d8188"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e721c91-7ce7-4192-9a2c-30d72a35655a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a1d57ca-6875-4ca7-9a61-4af81c2730e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96c92379-7800-4330-a151-732b917a5381",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6442c031-189d-4aad-857d-9c9b97704bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9ef7377-f647-4162-b903-e95c47d9fa22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3473499b-09f1-45b4-ad49-0cb2805e78fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73ab1bdf-71f4-43f5-80de-e0a41e1bf2dd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6dbf76f3-e51d-4265-8866-04e30764c3e2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9589b158-bb6a-4f98-8cdb-2b5bbc5fde93",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe4826a7-2be8-4b9b-9a93-71117eb7a659",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9a18c375-0302-4324-9f01-bc2d05fbe85a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa6a77d3-9fba-4ce8-b19c-05317d1e3550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a1677fe1-6937-4935-a238-2b00dd40d08d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "85a2058e-578d-46be-ad73-68236fadc279",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "28364a64-6ef4-4179-a3ce-eeeb44d6977e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aef178e8-1001-4e84-8095-70cd05d719f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb3a4c16-11b6-4a28-b49b-070cea6b38fe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f3c135d7-56c7-4af8-8f6d-f0089356fa64",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e04c6f87-7bba-45a4-9dac-818d811ec981"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8fd9966f-c169-4288-83de-952252f7beec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "34bf612b-e841-46f8-bef5-5a79e00f7aa9"
            }
          }
        ]
      },
      {
        "id": "da08e6ac-3969-4b95-8a70-440d0d9b9e46",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "ad500974-13e9-4ed1-86fc-9a4550b5faf7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2099d1c7-904a-462e-b28c-9a4278e2d501",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1cf6af00-5184-4205-bd89-babf96f85efd",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02333fda-d021-486b-87dd-1ec5764a8fdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0dd23ac-aae8-422a-8cb7-84363fb9767c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ade407-71f3-42d4-8ac6-3941d8cb37d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d011ac4b-489b-429a-b9b1-b8f355d8cabb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a95adcfc-fa36-48aa-ba7e-7761da4f3e5b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2a378b8-dca9-4c64-9d4d-4d040448842c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd84470b-d6bb-4981-a90b-7abf9ad8055f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d231191-a3f7-4901-af8e-da2b0851452b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d5d4554-bf44-47bd-a395-c651c7d237ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab967494-caca-414f-875e-7a58a7c8bc27",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c25f164-ce84-4d9f-9cdb-a56b96aab63e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fe23659-80aa-413f-af89-e4f506295607"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fbc957f-c8ea-42cc-812f-7e9ef318e093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e5c8172-9325-466c-87d7-1f0d5b2f7c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c02b98c-fc4f-47ea-a758-1ba7c1f7bbfd",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "751167c2-73d8-4397-98ea-a3ac893a62fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07cc86a3-c2da-4668-92af-349123e45b94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6901182-81d0-48ed-b992-e51e1aceab62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f8d20ea-67f8-44be-8657-0d40bcd68216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0552a59f-ac4d-42f8-aecd-27f72aca70d9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14cc578e-6d8b-410a-bbe4-758547dd4f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ac13a23-fa5b-4826-8974-0f28680c1c30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc0af987-ba3e-44a6-94f8-6d8a1a834852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ac0b410-fe11-4095-82cb-a99419476ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9260a62d-7813-49c7-80f6-c12ff652d88d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6432ee63-93e1-4e22-bf13-398d5e9db7cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ea42527-e2f7-4610-adf5-103d2e82a801"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0371a073-b745-47ed-989f-702796ed45d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8b837d2-0a9a-4306-8717-9ff1e9f30e90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73006427-d55e-4f17-89f5-73fd70f3d643",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae368fd-47bb-410f-a32f-7deaf94e2be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3bb7f06-7b84-4609-8edb-9a6465590bea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19f0b6b4-9cae-49ce-b47b-e55aafd2bfec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "49cca35b-5172-4c49-80d3-c7ff73abe62a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1b32c61-9d7a-4ce1-b8f1-6cdb1d3004ef",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07da1214-d5f2-4a2c-b9e2-8c505b9eec65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "537a67fa-ac19-4ab1-945d-25d2dd22f533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a593783-6f51-4d3c-8cc2-189ee87be2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1b516d3-5d94-4341-9766-ba32d5c3722e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a3e03cf-65f1-451e-a386-8a127581f3a4",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d62e1b-041d-436d-8516-13e88f657060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b480ae68-430a-4b83-aab9-495bf3c4d3ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "133b8d1d-d386-4c4d-a3ed-57915788f7a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6132bf21-3a39-4cfc-89da-832cc1ea1ff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a6df9a5-d6e9-4df8-920d-cc796f7910d5",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56852ea3-39d2-432a-a7cc-fb10a484d992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "225daeeb-4f94-4af6-9fa4-7f2e7df065fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "247896c1-5285-4537-9c99-274121f807f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "67b9c0d5-12dd-4404-89f0-94fd7763a0da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3290c04-2a7a-4914-b7b9-21f08baf3a37",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d711f165-9fbf-4418-bff8-12772a9fe290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e98a019-9550-4471-970b-ded46bd12052"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa7fcf6f-a3f1-45ce-8e08-8122b1d172fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "49c17187-0ef7-470d-b378-d3b023d9419f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "154b7e47-b038-43a6-82db-c0ea9ae5d4de",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c1c1ae7-aa78-4a58-a743-a9dc54dde6c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87faddb5-a43d-4a14-8a10-93f59c43d203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "777cb0dd-0601-405b-abf6-f1590c014249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "71485d0d-a2da-448a-8d93-6d8d723c512b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9cd4e72-6268-4fb2-a7a5-725059cf2968",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba14f4e-eb81-46cd-97b9-2c58c545bceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e21c0bd6-b317-4df4-b109-17b953892872"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b92b007-2203-45a1-abfe-e15c1184a196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f54bf471-ff6b-4178-85e2-0da42657908c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df58413e-021d-4d32-ae1d-343360f6e9cb",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e60b1b-893a-4918-9246-acfbdd726c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4732fe09-4dfc-4e07-b42e-84ef49221f7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a397f73-6f17-4419-8588-2bc5a2ab4802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b35fc34e-9a33-477f-9493-083413142eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8604e3ec-73d5-4394-abd4-86e061dd7000",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4b39b07-c72f-469c-a4b0-7475206361f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f99e1a5-9bc2-44b8-827c-6ff1179af18b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "763036ce-5d1a-4910-b78a-3c1e3f4bd7f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "440a17bd-45bd-43ac-84a5-33bad7fc7ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4848235d-6f2e-4e61-b399-55579c297168",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b2ff38f-f90a-4026-a913-32b780b22137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "716c00eb-413f-46fc-a86b-2f4fc5b02114"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6819c04c-6212-4a0c-bd82-84c81db68487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "aac28aa6-49f9-4474-afe6-a50ff105717c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88f628f6-3268-40ae-9d2c-af5e31f1c94e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5adafd33-5196-414a-bc1c-ed202a8114f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58daffec-67e6-4634-bd81-f66f791a0e71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc05dee-6a2f-4efb-9a98-cc7b57454e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "64aadab3-0d45-41b6-a275-1e6fcd5604c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e030444b-b633-4a9b-bd53-026dd8302952",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64ac2f74-0045-40b2-b31a-51dd7c55c073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95eed1f0-8748-4c2d-9b56-1db757ffafe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0cad112-637a-488b-ba88-fefcc4b01e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "94854869-e4f5-4a3c-ac83-ae2340ddf862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "653e688b-13b6-409b-8254-3f282f008b01",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca8e1be5-6c7a-4d73-a56e-79d32f7c607d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76ae7fb9-b8c7-41ea-8dcc-9caf1b73fa69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a55674f-e9e6-493c-8548-da6cb6bc592d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73d2b70b-6a67-4bdf-87ef-afbbb816f6c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63e1fe5a-964b-4b50-877f-01c08ef9a2b3",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4953b65b-434e-4b0b-851e-47509332fb2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "486ed37a-54a4-4524-b7a1-286029c65182"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eaefdfc-e46f-410f-b555-20a251cdeaa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f23f8ed-2e5d-4a4b-8d37-9876ae9f2c6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1baf87d7-b397-4063-9971-5a5e52511e74",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34151703-b4de-4d8b-867e-d1628060fd91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "362ed44c-89a1-4d19-9b88-b3e22f64a246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a74ae67-48a7-4912-b25b-6a50b448b0c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60711b4b-76b7-4591-8037-a05e65bd4f94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6e7f853-9821-4658-96c9-70f01fe0d023",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19966f59-2e81-47be-bb7f-a108e7add940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8824dcc2-e756-41d7-bcf0-78776469ad2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86c45391-728a-4c2e-9611-9b2c489d4bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de6511f8-e483-4ac8-abb6-591d98325140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d36a9b3-1182-4476-acd2-b891d20893f5",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "635c0304-dc8b-453b-ac89-13b8ab51da61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01e6eefe-2a22-4507-b081-b1a3e888300c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ab23ff-24d9-4484-b3c1-2e1d6ed256ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d898a4c9-47a6-4fd4-95b9-d7769e1b8cda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55c2f194-6b61-4537-86b1-3ebaaf90ef38",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc161aee-6933-40cf-9aad-43dacf85af22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13dffe3f-d58b-4c39-9b0d-7ef03d0a97c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92f7fe13-9c92-488c-8e66-5af1027a893f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf46f652-e7b2-40ce-bd1c-d70d43d6da80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52f9a7bf-1318-4f6d-a10c-64d65ec5bcc1",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d1185eb-d920-4286-b9a1-b55e3b32d9c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "150617b9-bbd2-4549-a059-698eedad565c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d0f321c-82c3-4a9d-a7a4-eeb91ef1ed91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75a72dff-522b-465c-afb4-6a4e79d68127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3df4cc08-82ca-4f01-b99b-a0dd5d6b9a7f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edd3c8e3-ac96-4e18-818d-c8ddde487753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "705d2e1f-fb88-4723-8478-e8e6b6a6cca6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb3490b-dcba-4cb5-a55e-bcf0bb1162f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49c58c5f-4c9a-444f-a7b7-3a33180704ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e900f4ff-b27f-4e82-8834-4efbfd49ab77",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e93595-abab-4bc0-97f6-ebd1d6944014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a2b98bf-6217-4dc5-b155-650c2bba83d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5cc5e23-5ccb-46b1-a416-ea624cce5d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42b1f781-7e62-4ad3-9e4f-c34da4b8b43f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53ca6cb9-805c-4803-a635-474df78aa3ba",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af24d528-b0dc-4aeb-a287-6b55b259b63c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0cdb513-a8eb-4737-8f5a-4ca754dbc041"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba24d19f-aae4-4504-8f8d-59055e2c9a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48c361e7-7b65-4244-b4b3-0561e8afe5f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d45a855d-e34f-490b-ae43-43e0b1fba644",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71065245-1865-4734-a542-21b52bd6fc77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f50a77ce-97ac-4b25-ad23-1defa4911856"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa2130f6-5b50-4fe8-b525-c97d82fc9f9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "493bbac1-bfdc-46f3-961c-5acbe82bb75f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c637a4c-c215-4418-ab0c-95d9ce300e33",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79bfb79b-f322-4a6b-8ca2-70983cdbe7de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abcc2f1b-ec3a-43de-85b8-ea89ece758b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05a63075-4734-4434-8156-b1dfaaed0876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b28594ad-b96c-49b2-b20c-71ba9ce6a55b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89809b06-7a33-450c-bcec-948473041dd1",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17fac53c-a27f-40e9-9b9f-8603f0473e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e2db0fc-aee7-4067-8849-6ec85b30bb04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6853b63-489e-4699-b681-cd93f123ae51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f01e245d-e906-4c4b-b560-e03dff96ee3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93ff5b00-0602-47db-869d-35ccd149418a",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f0b453-e169-44b7-8788-b3c9abb57a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b37b2ad-29cd-4faa-b3b9-6511409d4681"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38a11e17-928e-429c-a680-a0c5d5e15295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40462ad5-7fb2-4113-829c-bab4091c26c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba33f665-bda0-4e40-b130-5ec6e4372ceb",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58f1ba2a-c354-4ea4-8709-e192e0bbe52f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c448def6-cb20-477c-9153-61c74178753c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae32ead-42bc-40aa-a893-a1a407731323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed2b9070-7ca2-458c-aa08-abb07943fcae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d9eb10-3dc1-442f-9f64-a3b22e1cbdba",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c4f2391-963e-4359-bc70-e9551cd66116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06de2712-693c-4c59-87f4-85617a81a110"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caaac965-31ba-4859-b951-bc6b97adfb5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b0b0a22-071f-40ce-9096-44901885db14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b74e4572-3f0a-47d0-8166-5fb415b24781",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "853541de-5ff1-4696-bec5-fcdcb44b2458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a4aa652-4175-45ac-9151-97599f6a0930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63dee594-ef04-41be-9046-004fab144159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4dcceeb-2631-4b32-8e04-a8e9056d87e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66d35f70-8407-4965-a1e5-3d19a9ae4899",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c87df349-d586-4f4e-8def-930306925bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "044edf25-6c59-4552-ad52-5c65b4abf327"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fcb17de-6279-44f5-9728-55ab2f9d7bcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49fb1504-d85a-4b7e-9469-9c641978e322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b430272-ab79-48a4-9e61-21e0d3663eae",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ecd15d4-2b06-4f40-8c79-f5e93ed71a43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab26ee76-0117-4d78-bacf-e72b8b83e11f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95bb4f72-953c-4a72-be93-4dc7a355c691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c5fbd3e-f54d-4b05-9e5c-4756e4051f59"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "069c9fe8-7b4f-4650-b28b-237c6737cf8d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "12ef79cd-248b-442f-9f6e-1bead2bbb2d6",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db310fb9-f809-4481-9a51-d5d2b0e2bdd9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "40b60e58-c3c3-4bf7-9b4f-07bb76bb9963"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "467db75d-a28d-4319-b041-2817cefbbd4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "240e1d90-11df-47c3-9dcf-5ddb0ecae930"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d4dd324-1509-4314-be6b-8c5ca484649a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "23c54c7e-cf85-4f4d-9173-74b28ee10161"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1a9c696-fdda-465f-965a-07bd94b53b9b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9262a55d-396a-4689-9036-86e0159b490a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c28d2e68-0d5f-40cc-8be2-292c6ae6246f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f61bf5fd-ddd5-4bd0-9ce8-63429a6dfc77"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "49e90b91-5ab1-4829-9c5b-38e4d22bb5b9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c55d1288-fea6-4fff-81c8-ed317e7a8c11"
            }
          }
        ]
      },
      {
        "id": "5f09fa57-1526-4a18-9fad-6dc65a691ee1",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "381c97d9-39c4-4e22-aab3-8d88d2c5ab3f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cbed5052-970a-47d7-ba72-142007b1e87a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "eb831be0-fec4-423c-9402-c134d6a5bcb0",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "890ec0d2-cdaa-402a-89d2-6e8ca185cea7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4ca9b70-c742-4934-8305-b2f03a8f9acc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb1589ce-1b89-4615-a18d-b5b12b75f8ff",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e749ec61-18d8-45fc-956c-a658c2f129c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b590ad36-b713-44e9-a810-74fe31ca7716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d4b454-9f65-419d-a984-c6d2679e6824",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32b033a4-b6db-4805-8ebe-51a8a462fe94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3642641-e54d-4718-8b88-f602958d3da0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83622b2f-99a4-479c-b850-2728d5bab544",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c4dbe4-94c5-4cf7-809b-d71c6486914f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "481739cd-48a2-48ba-8da5-7eb1a3544b7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9861d30-7c60-4c4e-8caa-e23e5c890cb2",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d9861c-c5fe-4eea-9a6c-fcf041d9060d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f6a2121-3f31-4a19-9bc4-eb5f9658bdc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a675857-ac6a-4910-b914-19200a07fac6",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dcc5ae6-e87d-4e10-8708-655537de7c0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3df2b56-3b47-4505-904a-11447694a5b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "138f308e-1901-4dd0-9a60-212e1944350c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e719898-f6dc-49f6-abfd-cfad3e3e1184",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78a7d67b-6415-4136-bfe3-e339d30d054e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba906f1-beb1-4337-9262-68ef687ad8ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "461e2733-7c12-4c12-aa8e-55511f3004f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef8a816-67b4-4a63-b46e-2ef48b931068",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07595314-f0ed-490a-81ab-55014a268fa0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ad03968-5a90-4884-86f6-3bf0e12f6598"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "207b4636-d3d0-46e9-bf8b-e8022551cb32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe637aaf-631a-4a86-8433-a03381885232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eff3e12c-7fda-4e7c-bfe3-8ccf56479949",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c06c98a8-14ae-45d0-9f19-8b1ff7ca5ef2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d9d3c6a-3e88-4e68-8ca6-e5ba9dd15b48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a09afe-89fc-42ac-b1c0-614581481ee6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a6bc43e-e71e-45a7-9893-ea4cb1884e68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "474b4543-838b-4373-9480-7d26f66a9552",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57f99954-83cb-442e-96b7-895555df53b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee6a550f-d15a-4892-9930-48834978a70a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85acefc8-f2e5-490f-bc13-11875cead708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "143889e2-ec6d-4052-9c16-dea809ec49aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b150baa-8ff9-4a31-b598-3ada08602101",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2d24b4f-93ea-4239-b59e-02d2346ef61c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c09337f-2bcc-4f75-9657-a05e637da019"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a850ed2d-f12d-44ed-a6f9-d4be15ab4c11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "336bb318-c1d9-4b3b-b85c-49a872846b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb0d7a50-0f0b-40fd-b2ec-cee38df815e1",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4be143e9-3bf1-44de-9cfa-7005dd6e0790",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8f51b14-431c-4450-a270-6d4475cd229f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "269b7210-d759-4f1a-be17-081b61cc2cba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2c8f873-8532-41f2-9635-e2e82cf4f8a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d65213f-e634-4741-80ce-84b0eb3105e8",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfa724e1-468a-4631-9f3a-9acb6d6ea5e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3073b323-a0eb-43d3-b1c6-3c293c915727"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de3e8b65-0333-4635-a228-c7578b59325d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bd2589d-10ce-46aa-b2ba-bcdb2b371205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48e3e4b9-cdca-41f8-9fb6-807355b69d22",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b54e2df-6db7-4dd7-9ef5-59ef4babfea4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "807da403-b174-4fca-933e-e8413fee2a96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1407e9ef-101d-4eea-b6a1-4f6731ef8640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "355e13db-931d-4a47-8e0b-38cf109a84a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e18a25-d405-407e-a535-93dd6e698fa9",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3018a1e-5d76-4d33-a785-fd0f9a5c7d76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a906c3f-7244-4c37-9e35-3bfe821dcc28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc97e06-7683-4a9b-a691-c90c5276f79d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3ee4c7e-eb39-441e-9a78-6e999e9bb8db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "980494f8-dc68-49bc-845d-3edb1ef46e1a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ebf3b6b-932b-413d-af92-193dd1654adb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9425bbb2-65b4-4daa-a983-f89204d57fe4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d3ba2ed-4a29-4b90-989f-f3694fe2700d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf803d88-cb0b-4bed-9b0c-bcbc357d4850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b8a433e-3e3c-4753-aca0-b4a8d766f6ad",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4becad1-d85b-4917-9c12-22698ccfd838",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cca54ad-fa14-4c06-a9c3-278d9956db18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "feb51177-d978-4e80-9f49-a4bfa79e57b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0df173be-f2a7-4a5c-bce6-c771eb40a9a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49cff776-843c-4f43-9f0f-52d40d8dd198",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50f9c237-a806-4ced-9aab-3123cd974e49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d113e9f4-5f29-4594-807b-55a6ff2a1b62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f50e754f-c97b-4b83-994f-f82b67472c73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bd7af69-f9c6-450b-801f-635a461c69b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "938d0eb2-0577-4484-b3cf-796fde61e5bb",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66d6d667-6fc3-459c-9ef4-7ed8c498e64a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59c18749-1538-4e59-847d-1c2da33af647"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9be8a21-d382-45b9-bdeb-67f48dcac402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7a098ee-3935-41fc-8519-e7158e6bd39a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c182da47-b3aa-43c5-8109-849b064e9b83",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd075e2e-4234-40a8-b3fa-edd22dc82243",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5917d48-a0cf-4543-91a2-b0761e99719f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4994df77-9b21-4f0f-a482-fc38c03d2191",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b885358-6c08-4329-87bf-58f516912436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "748be3d4-33e6-4b2c-a616-df487417a8ee",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ec60a80-723e-4d65-9f80-c0cae4b44c6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7188ed9-eebe-4f89-a650-eff6da8ac18b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "497b83a8-a6de-4a15-bad4-4dd1ce643263",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ec596ae-3f5f-42b9-8934-73490fb0426a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c3f53c0-aa14-49c9-b584-256a2ea2190a",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81107ff6-cc07-40aa-bdff-4886f2b2e86f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdf57197-3609-47e4-9b91-f2a42dbc55f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "648c1271-5cfe-483a-9219-b1d0af947b94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7afe556e-5444-40d7-9f3c-ee03d74d2b4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64743929-3dbb-4ec4-9bdb-d196b3d8d5aa",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f0227d8-ceeb-43db-858d-952d55933975",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cac1b4a3-8e1f-416e-b854-97070da92b3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe96dfde-ac2f-466e-8962-2b66a23ef39a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69925afb-ac84-4e5f-9876-c0ac9551a0b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa31230-cf47-4491-8617-48b7b7b1a509",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae219ad6-2696-402f-ad8d-72cc963361f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0254a95-988e-4a8b-98f2-30e23b0605cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "195be590-3f9c-4a9f-897d-f087d51fbc22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f1bdf50-3818-4d98-a63c-0db01791ebce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "324c58f3-ad5c-4c1f-9221-a692367c13a8",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "919d4f6c-c0ee-44b0-8093-5125bb5b29af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78c1780d-29cd-4ba1-ac00-264cfabb4b9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09fc4ddd-c82c-4a71-afc3-729d0751e085",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b564e1db-fb7b-472f-90bf-51f4bc8dd340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad9e52c2-7f0c-4162-9115-138f5fbc1576",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db7f4dd5-8f7e-49e8-b764-11aefb83877c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50433691-4f8a-472d-8c26-80e86a9bd3f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ad93598-3b3f-4eb2-aec4-af1b2ea61027",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcc637cc-4efa-4a94-80e5-348ee67c1164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e977064-f3bf-47f7-bfec-3a666817556d",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b3a2b7f-3d8d-4ef9-af71-3316c67cf834",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62aa2b3b-7d8d-4f0b-87cc-f918b7f568f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "013e4aa4-dd85-4fb4-af59-6cb34d89bd4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d600906e-9d49-4a95-8bd0-bb662ce2dd4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91f79066-96a2-4485-858a-6e3126d59d0f",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57988433-0e97-4216-a5e1-90732c5eed3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "855e13a5-c061-4bca-8feb-908e3ea323e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b02affa-300d-4926-9879-055292a7b4e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2a916fe-6fb6-425b-a2f6-caaf5ab984ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cb37e4a-ec4f-4cb2-b971-be173fb024ec",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23b0f91d-d828-4baf-a1a8-bade425a381a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb44462c-93dd-4720-94f6-4b95a0e4ffa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54d1f55d-af48-4f2b-b0f2-44cb66c58253",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85e572e2-5a0c-4592-98cc-08a4d26d8e87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "859320d9-b239-4d02-9059-d166d78bbda7",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d13b5c1-3463-4ce8-8ac5-47a25e9c3043",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c3f7dad-9651-49a3-aeea-0cb0b1ced5b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe86a83-324c-45b5-a029-0a127855174a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1589563b-668f-4f9d-b84d-d7f0919b0c87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb1f6d1e-8fce-43b7-a116-335cbf23c4a4",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cf9decf-ad8d-4fd4-b447-ae540f4be201",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ecd9543-1bb1-4808-b569-bbafce55a78a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69f1fe2-ac94-4f92-ad51-950e221a21b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b1238ee-2509-4a1d-9d23-e910784c58eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d5e03ad-503b-4d01-8f54-4b8102979c06",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff0b1006-3266-41df-9368-ce98c21fe6e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31ffa0d9-2c25-4e91-88cd-e47f734428cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7685d737-1ba1-4e78-a375-74f5f0ff0cfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e8471c7-8006-401a-a8d0-2ea19a989548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31191eb3-be15-4b84-bd85-a96cf21103e7",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af51af72-7587-47e4-b339-369df365a536",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "742a1fb2-53ab-4b24-bb4c-ff67f6d09abc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ace612-2fa7-46b9-bad6-0614dadaf5eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd62c9e0-aabd-4b71-88a1-4ca33a660cae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3cd20d1-622c-40d7-a4e1-730a081ef430",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aeb9131-b5b8-4755-8c1c-07a63360c438",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa88bf25-17e5-4b8e-a02f-c13f8b813dba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82e58feb-5473-4e59-a4be-44c759ef19fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0103681-c8d3-4c7a-853c-74118dd1ed50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef3bba9-0f0e-4a93-885d-43845e54efff",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3d20f87-81a8-40d6-8195-dc3a006fd44d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "980de5eb-7bc0-41e8-bf12-7531beb0f33a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15d751f5-0905-45ff-878c-a60c41046c68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7e2802e-0f09-4b25-a12e-c7d2ee2f96bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "933b624d-8f71-4bc4-b92c-51a6142fdca0",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61f4c514-ba1d-43d1-98c2-580e81c93da4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55e626c2-eb41-4438-8041-cbd60cb6f354"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d808dd6f-3170-4a8a-97e4-c054d57ca4bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6572a2a9-667c-47ed-ae71-47a345b7e331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f870f072-f7c2-44a3-b647-df42eaa41322",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "624b1776-3bda-43f4-8a98-da5536d7901d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9d100eb-26b1-4c27-8397-748b8548c87b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c71cef9d-4f37-4d66-896f-41873a1d73f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dee3031-6a7b-488a-a94f-086ee7d605f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ba4a66-165e-4383-a8eb-33f81e48fa64",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b2082d-246b-4de8-b415-638da223d38f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b75638f8-0d92-4b3e-83fb-0b8eeef9318c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22636888-94fc-439a-a08d-a35447ccc994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f10b4ee3-1128-478e-bb4b-931136f15017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34cce3d9-b7ba-4470-ab93-101e62c68a5e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e19aa39f-a4ed-4005-b842-6d9c4d2d5b4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ab33dfd-82b8-49bc-9e12-8358af56ec44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa252fb8-bf94-4a25-9627-64ffa83e0f17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb7b2bc2-b283-40a1-8bb7-bab048e841c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beae5551-0f73-4d1f-878a-f713ac1187be",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a747d5-0fa0-4f36-93b1-a91987ae6afc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9ebb807-a5b3-48dc-8370-ed3ccc7b139f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8427de-1c27-4b5c-82a0-2eaefaa5f6ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0100aa8e-9ecf-4876-949f-c43ecd266da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fa31ec5-9701-4937-a41f-dd15dee82e47",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b697193-4bac-445c-adc6-63e0b1c79cac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f7c3ba2-af7a-4c15-8476-b8182ac32053"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c8de377-3ace-46a1-8bba-c681e566ea0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13cc938e-8736-4df3-8e62-2394491009c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c9b734b-3fdd-4412-abb3-9aef986aefb8",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5884d7f4-09b5-4fef-961f-bfdb372fe2c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "634dee8f-88c1-4b8a-9b92-3ceb78cab880"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "858e027a-af14-4a93-8d3f-af1a65e341ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94b8678c-a9c3-44e6-8da3-be3dd2c6a7f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d71f12a5-5dc2-4aa3-a553-932b4a7713df",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c92b4f82-c1bc-4dd0-bf6a-1442a43b78db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "873e3436-6ed9-4997-910d-927135cab9f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caee71e8-ce97-4d22-914b-ffa8c437abc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2f99cd3-d658-4dee-a798-c4507724bf9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0a985d2-8281-48dd-a4a6-9034bafabd3a",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb4998b5-e6bd-4f12-afa2-8532b9277ea2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b24b20ce-bdd5-4922-8edf-b09c50590b82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7be7d9a0-614c-4972-bcf4-91696cf217a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72607dd8-26ed-44f9-bd72-b61ce8e0695c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6082cceb-166f-4fd3-9aae-24cf86448c77",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e680ed7-116e-41dd-bb20-7e388b3d4ed1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e34ca83-18a8-4b4c-be47-d98a4327f66b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a04116cf-2154-4a0d-a8b4-70f8fbb6db0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f17ba12-6bae-4a77-bb2f-665fde843a30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be1ed99a-2ccb-42b7-a873-8536d92c7551",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc4be8e4-284e-4d82-8e60-cfe369d3b97f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88a67d24-b4db-43b7-84f9-37cdbce7becf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb9580c-d6ea-4009-ac83-68ddacc95ca4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1bc4688-738d-420f-aabe-41bf6b24bb2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a9b68d-68b4-4ddd-977a-c57e079bc13d",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92db18c5-c5b0-40de-ae9f-4c44b42eed3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8206f22c-7c40-47ca-a9e9-dd186388d6f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ddbf010-b434-4f79-9348-95175a469ba0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "356f1d0a-fc19-47a9-8482-349dd619d3f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c67bfe81-1329-49ce-b5bd-62c641e97475",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "749b9c7e-b477-4e35-a334-36784b247049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d48de14b-01e9-413e-aab3-44151f40d691"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af47dc16-f9a3-4bf1-9043-a2a44989e11e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3525660e-72c0-4dfe-bd9a-94adb68649c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed42eaf0-7be5-488f-8408-831968249bbd",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7bf6aee-8514-4cac-8748-b38a3720bdf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d30b6019-e165-43d8-949b-23a9f8afe57a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d216b88-5f28-45d3-b1f9-5e9884e1bc7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "151a7738-294a-4648-91c4-6daec975d189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1419c1ae-c3df-4f65-8437-40c3c6f66a53",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a69c32-f6b3-43af-a1fe-38d5f716c569",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dce589eb-7dce-49fd-b628-4b7ead19286f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97944495-73ae-4c0c-b4bf-0309406622fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb4f5e37-f82a-41f3-a946-af2e9e53918f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70d1bbe9-d260-4586-99ab-ccc802c38409",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4947931f-65d9-4a94-b3c6-73c88cc1e345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c4f5d6c-86de-4ddb-987f-d9d85e0993d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "208f7914-86d3-457a-83e9-c740a5bdb62a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdd0fcb3-aeaf-4791-a5e4-483d11023c09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5401186a-3763-41e1-9c79-654a7585f54b",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68fa4b54-f847-41c2-8e1e-40ced35cf735",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "494f7271-b199-487e-9281-78d51b037ae6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d3ff2a-6dde-498e-b1c4-db8896c2a638",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f20a43ce-cc80-436c-b00b-6f65524e990e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b721e8a-4d4e-4717-8a74-ac4563d2a862",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bceada63-0fe6-4f43-bfab-9634bb021bc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75eb8c69-0265-4c4b-a7c5-fd024f211b6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "280ad9d1-43db-41f8-94bd-2b82669b26fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "850116e4-315a-4bb9-8278-d7bc5da1f01d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e33bb549-f0c6-4f25-93de-59463bfdc8b2",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce401137-cd23-4e83-ba71-2f20d77f5279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82043560-6b60-4eae-a17f-6f3e966c6fdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d96028b8-8d46-46fc-a6a1-1bef6cc543bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49ff2b23-5746-4b4b-9d71-e42cfc9e2241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0f766ae-2dd3-4c98-8540-f89b2d720414",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "786edef0-ba0d-43c3-9bc3-c0b4ead3883e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fe3c7a8-c816-407f-a5d0-d1ea947625d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5426721-722e-4b89-873b-09af4c07b109",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee4ed010-1068-4813-8828-a0e5d3fb3732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1933b8b-905c-4040-9ebb-61065209a50d",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fddb568-ebf3-4fe2-8e76-516d305160f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff1696e3-002d-48f3-85ed-cd64ed9e16a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aac44b94-f266-43c5-a397-f9937f5ce3e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfccc884-593c-4c13-bfa0-318c25604d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8c0d45c-fc46-4246-994e-9d0837aa6841",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1458a6e4-4359-4bb9-a2e6-fdb9db3f404a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b443122c-37f4-493a-912c-aa7f004acafa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaff2980-dc93-41fd-9ae2-b02298f11e5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f5d71e9-22ea-4c8b-bf27-9358cf1aef45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "459b731a-fbdc-4eb7-9f6c-8023c63a2d11",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e4fa06-42ad-47f9-bfbd-85fbe295d330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c475e41c-1753-4f09-bbd6-a65ed3e0131f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e277070e-ccdb-42d1-8657-5e07413c5509",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de96b819-1517-484a-a105-e07d827a703a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a6eb73-2494-4c5f-8391-91b0e178d06e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e4e9f78-2424-4462-bd37-2e3ad2931241",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd8113ae-8435-40cd-a684-fd41c25b6b38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5660fe8-920d-4658-88e6-063e4691646e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e42b19e8-faa0-4a35-9858-8445e7211f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c4f7e38-a093-48f2-86a9-5dbe13a2b65b",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df556f1d-81db-4fe0-83db-24e0b708ad7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d93b8b0-e402-48c6-a88b-c988d0c72d1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e718bc0c-f224-41a1-90d8-5285fbce20a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9f43f14-f161-4d53-b330-520440cb32af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad27ca9-05d3-4a02-8ed5-1581db6551a7",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88be280e-06cb-445d-ac9d-90bd29066839",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "335ad4b6-0ab9-4c77-9994-b9dffb047484"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c9db6b6-fc2b-451d-83d6-3a9fe9765c7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "614ec5d2-2916-4a53-9732-560b10da4e68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc4cdc89-c49b-4777-8be9-727ae88667bf",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f9f36cf-849e-4ece-9356-ed0a55731753",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10a049f8-e0b0-4614-8ab3-bbd8557dd7ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4487a90-14c5-4807-8e26-d33639dfb477",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb0437cf-1056-418e-b3bf-415a6025526a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85fabf57-050c-48d6-a962-975d3cbcfcaa",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adfdff9e-8cf5-46af-ab8b-bf755bf824eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6493f1b7-95a1-4d60-993c-31c2f6d9f719"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d867c982-f3ec-4a0e-bab5-5e7e42aa98a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a04036aa-583c-41bd-8ab2-ce559a1b1420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d2930d-33dc-4aab-ac72-dbbbb9e001d5",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05d4fb14-25af-4ea2-8ac7-a59a70c0b83e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2368bd73-6c9a-44e1-a85b-1059dc3df75d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "580fbfa5-0ec0-4fe6-b29e-dcdefed6f741",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b126dea-944b-4d11-b92b-5ddeee4b3aef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e33dc6ec-5ae6-45c8-8269-412d051f79b2",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0bd1062-7e2a-4408-85cd-2cdb41a3bac3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f07c01df-9bce-44bd-915f-8e75024fdbf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c956565-c2f1-4032-9a87-9f31899f6ef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f1ee1d9-7e69-4c51-9c42-28cd4d74dc5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ace44d0e-389c-434a-b5a1-fab2aa79901c",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c52ef16a-02ab-46c9-ba9f-adc11ff21cfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fdac303-7cae-406d-b2ca-a8d0501811a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee28c40c-2c16-4c0d-b652-ace012707682",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d718aa4a-27ec-43f1-abc2-a84c382fcc63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6c2ebb9-bbfd-4abe-96e3-46d0115d65b5",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7076b0eb-5b85-443f-a1bb-a30b52535bd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82c9a419-4cd7-405f-b428-17b717fe6da6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffabb704-4161-4bd8-baed-55a8156a7b5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e74c6f2-80e5-4f02-813a-5971b7ad4209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e365240b-ba7c-4a73-b84d-c1ddfbfa9ef9",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e460a364-ab91-4c09-be0d-3d53eb2d917e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63cd60d3-68f5-4040-826e-b92e79ba6553"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f353c8b-5ada-468c-8ddf-9e10cc359e8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30d793e3-d944-4f0b-918a-5d7bbcce1e0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b306b2ab-32cc-44c6-8f3a-f4345f25e3f3",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41fdf5f3-3209-4f3f-a123-7f84eb328fbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f50746d6-7946-41e3-94de-028a22ad6101"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dedb554-646c-4606-a48e-260be27204c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d4a0a1a-4478-433d-8141-d1f2bd69c56d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d094e31-da17-410f-a57b-bff858b3e883",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aa48853-934e-402c-8a8e-fe24d776da72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "836b4fd4-5134-48bd-917f-15b19986036b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8262225e-768b-45bc-b6ee-795aacfe7518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9c34e3a-9a09-4f69-8394-e3769965778d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97cf6ed0-fce6-43fe-b92f-6c19a5aa3877",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea407ce-5853-499a-ae67-0c6d827ff587",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02ec4060-c6dc-4caf-8b8a-f083b7209073"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4da71a6-6596-45f8-b8c1-e96ae06900c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3841141d-85a3-42d9-9374-10d8d9cf2ff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c38d6909-6b8d-401d-b4cc-e806731d05bf",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ee2546-eb70-4ed2-aded-6038fdd127c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52b1ab00-7e09-44d1-bf80-b6c04951407b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d72224f-4056-40e8-8e6d-e49edd349db7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f554fe17-c37b-4b3b-b587-bb9f00929426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8047ec95-970b-41d8-bf22-1494ff33d5f4",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d525e6c8-4f52-4e16-bca2-c210a86b37b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0b68668-1297-49b4-9311-22c3726533bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e29b992-bbc7-408e-8e42-831545a9e539",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "746746ad-c328-44c7-9c43-491711537026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b918ac24-3dec-49b0-a91a-e85351f362bf",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cd28fdb-7519-49d0-8fe9-5802963eaa3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c6fccb3-6fb5-47ab-acc5-ae939c6e3039"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a95d58-f96e-4595-a757-480e6f75771c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8baecc40-9090-4f63-817b-664313566f82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b53e8aad-2117-4d28-8aed-8def16158860",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad33bb0d-1bdd-4a4b-aba2-a6ea4f821596",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86b51765-adec-4395-a4aa-df56a35d42db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d314fe-068c-4578-868c-f8fd36f7ca18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18867fe6-b653-454d-8ca3-abe0daa53c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d3456f4-58be-4e4d-ac05-885839d6a88f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2fd9671-6d59-44d7-86cf-6f0e6fee7564",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0a7dade-49e3-4078-a940-d52812dfbd6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c3eeb2-0905-46ef-a0f9-f0d79d77921a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d69eb99d-40e4-405b-ae37-108b7b935c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c955b740-1517-45f4-bfe9-49ba500871d9",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b6765f-093f-44e5-ac60-7fe453fb914b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3b2cc73-4e37-4f7b-8f8f-921a390ff628"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd97d70-120e-4573-abdd-dfd99fbfa3aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6be6a9e8-b5aa-46ec-8960-ce1ff085b3b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b61f2494-007c-45ce-9360-e26e4499d8ca",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a83f1abc-bf37-4dfc-8718-730b99f75392",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "083bd073-c07d-45fe-a410-25290fac693d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ff8e1d4-7aae-4173-8d57-539afce10a58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d98ac186-4294-4e54-9e9e-04bd5c1a0ece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a27079c7-28ec-4a12-80e0-05ab5bae27c6",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca90b928-c738-499c-80c1-d934f73112ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c40465d0-fbd0-4249-8ed4-91bdb7bab9b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38f0878c-6748-4272-948d-5b2913cc0b86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c173814-8ecc-4845-8f2d-9e0c838860a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1c33c6d-9129-4c12-8a1a-9822c5c0e8ef",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "710f8ca4-7911-4d21-8cee-e7c7e65b2463",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55f2cadd-edb1-4161-9f5f-764683f3272b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b37c350e-364a-47b5-b4e4-cf4fa420be28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be78403f-1bb9-410f-bccc-73ea7b3c8141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f0b74d2-0443-4339-aa6e-676b16c2c143",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80dd3296-bda0-4f06-ac47-e3527d202d93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "186cb10e-f0ec-42d3-b320-b7ef84a1fd68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42dcbdc2-1389-4cd4-95a2-dc983316b153",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "095d9e72-3084-46f7-bb1c-af91c0eb3459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0804f82-8562-4d40-8458-4473e2ff6b18",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a43cb3c-cc0f-4426-8445-bf806f3a3e65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e42364c8-7d04-453d-a271-c50514492135"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb6e5a8-e9c9-4bed-9b23-9a24c501e206",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8622604-c86a-4b63-ba4a-e4741c99c345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d377a2c4-40f6-4af5-84d8-39edf2cb1bf8",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1f2f429-2769-4c7c-93e9-ba296e95a969",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddeb7654-a056-4194-bee7-9eb5cba3bd61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcf7f624-55a5-426a-9c65-b73311133a2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0500a088-c5ea-476e-a654-418fb5ad96f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a34b2abf-ff9d-4b09-b333-d8dcc02d692d",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "453ad64c-4e75-40dd-a480-42bf39eb4e17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c657925f-a384-4e51-9536-2916e856a838"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d04871-0f3b-41bd-bc17-63c71f82b8df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "608414b4-2ecd-4d81-81ba-18eab13052b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dc7b1cb-822a-442c-8efd-34f581267ddb",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aa737b2-834b-474e-83c6-ee964addaaa4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbdaa048-5000-4054-b73d-2a6a78b4eefb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13518a14-9024-4d96-8264-ee63fa5b4162",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ef72be6-fb4f-4816-a283-cc0482319718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42e292b0-3ad2-43ad-b7a0-baab3ace558c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d68fdc18-ab96-48f8-a1c2-b6c12aa526c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ad9cb7f-97db-4fad-8b3b-f8a554e410b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1b9f50d-c5f5-49ff-a596-046dd2aeaf91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b466b3b6-c744-44ea-88d4-2f773e833d2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a2e3f87-0fae-49da-9ee2-45a48e0a258f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6515dde3-5100-45dc-93ae-91ddde96a8e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3ded07b-ae00-41b6-97cb-c342ac90a08b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcae9672-ecd0-4889-b4c1-41fbb130a063",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b2a7aa9-56db-4038-ac28-a5d6f2dc40f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "707002ca-e573-40cc-b081-82bfeb7535cd",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bb4f995-6668-4c19-9bcf-c9f5d39468d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f973f914-b68a-473e-b1f3-e91530f2e01b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c593041-b526-480d-8fb2-a0d42e70eb38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecd03b1a-6a83-4a8a-8ee9-5aab0d13c497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2568b3f-3001-4740-b33f-61726530c9d7",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e963d19c-5739-4bec-9ad3-bb93f7ee086d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fb5d4e1-1bc8-4eb1-8d61-0c8dc797a399"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ee06d7-0daf-4bfb-88ab-81e9b2502cf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc78dee3-2b8b-477f-9908-89d5170a0cc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a007828-50d3-4aa7-a848-2b7dcfc638fb",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ac4731-978a-4e8d-b8b8-6a972727e9b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "433c84d6-f147-4f4f-8303-d7e8632a3eb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb295402-598a-4d55-a381-a0ca1239b893",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "982e53bb-5e1e-412a-80bd-69251beaba61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c30fa851-cbfc-4938-bb8e-bf0018a78c68",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e3078ef-4117-4c1e-8587-708b453b72e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b7b7d34-becb-47cb-80be-a9520ac00df0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a760f76e-aab4-4b38-a8d2-a7ff7029e6ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d436b67-8741-4835-9729-2688c67e04e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb11466-5534-4f57-b517-c5994ae31976",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c67f29d8-40c8-4433-bbac-ae0ea4b247fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be335868-11c8-41aa-8531-05f29343610e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9454949-ad8a-4982-81cc-0ff7d22c9b94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69d7a685-4a4f-4ed1-9895-597bf4634490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66cd0fc6-a1f5-41c0-b774-01649ac456ec",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee163e82-6174-4c26-9c47-a1424baa62c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0758724f-8f83-4328-8fb3-cd5068754ab2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6adaa7f1-14e6-4a48-bfc0-97e0dd6de91d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40095b06-b872-4ca5-9f9e-002c881a999c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7478abb-2b53-40a8-949f-c59fc8940941",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1b36551-3d87-4c4d-8218-643364c7c54c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9959eb18-93f4-41d1-9763-3824f7fd1ae1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6bf90f0-e17e-4355-8587-a5beefe74bb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b76e24e-41fe-4bf2-a2b7-08a1129f93b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34960a21-8c4a-4535-b0ca-93edcf154af6",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c324b37-f4ac-4161-8b44-923dd0631f3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9593c123-3f37-4a5e-9203-b160e8787f2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac900ea7-3bd1-4092-91c9-3f47a95d2447",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "541633ae-550d-46d6-a79e-ac687d39b422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c7ffcbd-6cce-41b7-a623-d5bb802cbe11",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa9e759-bd42-48b3-a1b6-8ee7c2c9cdd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd2c6f2b-0bf7-438d-b8cf-6e418bd85def"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af00efb6-e998-4648-9986-f38966b0bc5c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f7db798-ecf3-4b87-8f0d-9be3367542e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34690908-a3f8-45bb-8284-4ef90d869d20",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb311168-9916-41c9-91d2-e8a204971193",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35a7541b-53f2-4b3e-94cb-96b1f58d40a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab9aa81-e5d7-4ac5-b8ac-2033866392e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1082e672-16b3-4a71-b68c-0e9136dfe24b"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e4229d4-ca1e-4e33-89cb-8c5f750b869e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c1910959-2639-4a0a-8db8-3af3799e1b81"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "af6a0e55-36f0-4c08-b9fc-ef0e6a5e77f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "602c7d47-4896-4a46-8349-5c8e2f7fc829"
                    }
                  }
                ]
              },
              {
                "id": "46a3a041-fa5b-4b32-9559-4049332ceb13",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4cd3d355-fe6d-4a3e-902d-177dff74290a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca49fe6e-f5cc-4762-90d8-45c764569e49",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6793938d-e654-410d-9a04-ceb702ea2416"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "045c9753-1826-4efe-ab16-5cdf7d109f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f67f082a-fd31-49f4-8ad5-2a9cc15751e8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "94f62db6-2d57-4724-91b5-75e433df97dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5eab5d36-35cb-4d13-a617-d543805c2bfe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "01a9136e-50e5-46f1-ac4b-76585fc1a6a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "362ce170-4a35-4044-bac6-1aa12f6013b7"
                    }
                  }
                ]
              },
              {
                "id": "71ec430d-d483-4b6f-ae5b-985682a410e8",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "dd15085b-e1d9-482a-acad-724aaa289495",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8fd6cca-b389-404b-aba4-f470a37f9009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "084d2ccc-9f46-4f8a-88fe-9e1ba6094bd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e98255fd-81f7-4716-bb1d-d6b5b448c861",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19e253c1-56db-4a34-85bc-ac35326b38c4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "47137952-f667-4558-a942-56956d8d3f70",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d0f57b18-de82-4701-b244-a38d64fecff2",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e20b5a9a-b25e-4cec-add4-9b1f315a91e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "987132b5-b1e1-4bce-8716-78b5d52d0d63"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e7840b5c-f376-4a16-a6ea-6a8144aec135",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e41ede56-cd4e-4e4f-9350-c90febc4d11e"
                    }
                  }
                ]
              },
              {
                "id": "5e56241e-410e-4e93-8830-aed96d9ea674",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "02a205c0-8cb1-4999-bf03-b090ec42804f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "de9a9e00-d33f-4e14-bb64-673164d17ef8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8a86e0e2-4b2a-4fae-9170-a3f20b95dd59",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5aab850c-213f-43b2-9039-e7842f36aedf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8d287bec-ec19-4505-8a33-13734decd462",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c31b1ac4-3ee3-4a29-bf77-53f2770fb710"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0479d108-8151-44da-bbbf-dc85c3abf118",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a0bf7962-5aec-4f7a-afa9-9a20d918503b"
            }
          }
        ]
      },
      {
        "id": "e070272c-eea7-4e00-8ca3-244687387e0f",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "13f2dab6-9ca7-4a97-b753-24d280c1aff5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "231c5b1d-6551-49c9-a414-c0386270cfab",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "852a05b2-ed3f-4f91-93c6-576fad478922",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd6020ce-b66c-47ec-aa3a-222afb1b7739",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "71cb2752-0745-46e5-8d1f-64d9705b2913"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d78498-5567-4f9d-8bb5-933085ccf534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "03f1c837-de0a-4940-a0fe-cac1a9f1ac45"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec9b6784-6fe5-47b8-86ee-029cce3d8905",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "96eb630a-8cac-4472-9700-2337e06f4927"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bfe3f7d6-cc64-4e63-88ba-effe167a2cd7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "335d3a73-e862-4f62-af4e-085b13213086"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a6908cb5-9959-4af2-b1b2-af83fdd37a8f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f6f1a611-ead0-42da-b5d4-29ecae162df0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6266f7bd-7937-42dc-a4cd-86116e0ac66e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4b8eaea9-f7ab-4203-8b03-d16939fb63aa"
            }
          }
        ]
      },
      {
        "id": "7e168005-3b87-4787-b332-ef25aecc02b0",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "ae70b6b8-d3a9-493c-83fe-2bd1c878f167",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7024a711-5d1e-4a14-a8a3-69314d2fc150",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e882bedd-9c45-409b-808f-731cbad8ef1b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ecb63d-c433-4204-b085-038a931751c6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67b4de88-4b25-4ba0-a1ec-d4b6f02208d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f360ef47-25b0-4cd2-9a9f-984255ceb3e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f1959779-4126-424f-9153-3c9da2846e48"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3229fd2d-f205-4df0-8190-c72cf19437ad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "775b6e60-3d91-4395-91d0-c5a9625be74c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "90824303-d8ee-4ad8-9cfc-b607fccf6f7d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3ac0ab2d-90f9-495f-a78e-f85fe65aa60a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eeee1559-a286-4d0e-b538-9f3ad2420b1d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c68020c4-5802-400e-bac3-e76df9a62553"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4694115d-7119-4da3-9b26-8bd72347aaed",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1827b469-2370-45bc-b8b1-315af201479e"
            }
          }
        ]
      },
      {
        "id": "10c090c2-8295-4bb3-a123-c5f2ee632b52",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b4356efd-4275-4016-be9d-792322c13af8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "aad8e450-0699-469f-961c-cb6b8c39d8bf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "29bcb3d1-e512-4edb-a88c-639d4a4a0da3",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ad8215-f54d-4c95-89cc-b14b887ab7b1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ace87e77-c288-4a70-af21-96ae9d81713b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c76b3ed7-a645-4967-ac1e-ec750f3bd79e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d323a37-e6e7-4716-80be-a1b64efed8a8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec5efce1-622e-4336-9aff-344fc28a6c22",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "85363af1-4793-4cdd-91a5-082ec0da02a2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0bd1d26f-f5a6-4512-8f7a-96722e8c8850",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a6b54473-075c-4b3d-b91c-265c0f251ab1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "73ceb5f2-504e-475b-841b-27d66af2f24b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2692399c-4bdf-4026-a0d0-34f9ec5f7b16"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "21e976a9-12a0-40c1-a304-f021d63b3675",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "54a4f2d6-605f-4e70-947a-390b25540dd5"
            }
          }
        ]
      },
      {
        "id": "df6c6521-de4f-4fdf-bd2d-98331f1e0ab5",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1dd31b4e-4ca1-46e2-b1a9-4477c4acec84",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "64efbb13-927b-458e-b16b-ced0031fbf2a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "93df7c6d-2a3e-465c-8836-a1f5ce3b321e",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "85671330-e33f-43af-a34a-07ff2bced0ce",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d0102f65-1369-42e0-8d8b-b5f7aab4e9a4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 99.59649122807022,
      "responseMin": 21,
      "responseMax": 744,
      "responseSd": 73.10287383630761,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1705538186092,
      "completed": 1705538224074
    },
    "executions": [
      {
        "id": "a97c767f-b16d-424c-9727-37496f606cce",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "9fc90ccf-cd30-401e-8401-fcf74449bfdb",
          "httpRequestId": "b32c105d-8622-48c2-94ab-5535ac105892"
        },
        "item": {
          "id": "a97c767f-b16d-424c-9727-37496f606cce",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "cfbf4f44-ffb5-4e42-bd0b-1dea826fdb63",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 0
        }
      },
      {
        "id": "e02186e0-d2bc-44d5-b427-ddfe4851e9d4",
        "cursor": {
          "ref": "698ad461-577b-4e56-a7c1-89f273bd22e5",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6dcd0dfd-e8e5-40f8-9877-cfcc4a834268"
        },
        "item": {
          "id": "e02186e0-d2bc-44d5-b427-ddfe4851e9d4",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "004f0dcf-f2b5-48f8-8e33-2c2eb654c0ef",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "16106a4f-7a63-45c1-9023-ecc7b1a04edb",
        "cursor": {
          "ref": "a49f2c10-ddcf-449b-b95d-b2f9a77fc6cf",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4a18df94-8e20-44f8-a8a9-29e42f71cdfa"
        },
        "item": {
          "id": "16106a4f-7a63-45c1-9023-ecc7b1a04edb",
          "name": "did_json"
        },
        "response": {
          "id": "2e51e70a-1ff7-43ea-a45b-281ce573c4aa",
          "status": "OK",
          "code": 200,
          "responseTime": 405,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf2612b0-c6d9-4360-8a35-302a59f0c206",
        "cursor": {
          "ref": "f4f1539b-58b2-4850-98aa-fd2321cd95ad",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7bc4209e-ddd1-4d27-bb48-5b040ed1e736"
        },
        "item": {
          "id": "cf2612b0-c6d9-4360-8a35-302a59f0c206",
          "name": "did:invalid"
        },
        "response": {
          "id": "eb910c9d-032f-4bf5-8815-061a82e5da52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 144,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf2612b0-c6d9-4360-8a35-302a59f0c206",
        "cursor": {
          "ref": "f4f1539b-58b2-4850-98aa-fd2321cd95ad",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7bc4209e-ddd1-4d27-bb48-5b040ed1e736"
        },
        "item": {
          "id": "cf2612b0-c6d9-4360-8a35-302a59f0c206",
          "name": "did:invalid"
        },
        "response": {
          "id": "eb910c9d-032f-4bf5-8815-061a82e5da52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 144,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9738814-cd63-4999-9616-a060c1b34e4d",
        "cursor": {
          "ref": "122b6680-be5b-474d-ac67-fb9a29dc8eca",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f7984b50-e731-4ec6-ab02-6f5c9f1d8437"
        },
        "item": {
          "id": "d9738814-cd63-4999-9616-a060c1b34e4d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f7c513f8-a1de-4c25-afc9-48907855d2d8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 135,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbfd8ab8-6cf1-4cec-995e-5f7cb4e0705c",
        "cursor": {
          "ref": "5685d14d-0f67-4538-9dfe-1b811298e3aa",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "64a38277-238d-41e7-aa1a-f4bd6e9a319a"
        },
        "item": {
          "id": "dbfd8ab8-6cf1-4cec-995e-5f7cb4e0705c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "605114b9-9432-4c02-a665-7d6cdca99f2b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 81,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c01198bf-b642-4fe0-baf2-d8686fea9947",
        "cursor": {
          "ref": "218f7946-bf71-4ef8-9b93-676b212d083c",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "12d1700a-3807-4787-9945-25c0279bb23d"
        },
        "item": {
          "id": "c01198bf-b642-4fe0-baf2-d8686fea9947",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8b3187b4-ef7d-4314-8cb6-a869ae483214",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd2840d5-8ee1-4b7a-927d-fcebabd1e482",
        "cursor": {
          "ref": "b95f2a8e-3d22-474a-a168-eedf1095a416",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ee1b1ca2-34d7-45d6-91bf-bdf8cdb3d89d"
        },
        "item": {
          "id": "cd2840d5-8ee1-4b7a-927d-fcebabd1e482",
          "name": "identifiers"
        },
        "response": {
          "id": "12a4b755-4d3a-4e81-b40f-77a334399621",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "851a1380-4ef0-4e1a-abac-f3bff714c2cd",
        "cursor": {
          "ref": "ed399cf3-e0f2-4be5-8d23-9584af397a00",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b98eaeaa-b803-46c4-aeee-af3856d2dfcf"
        },
        "item": {
          "id": "851a1380-4ef0-4e1a-abac-f3bff714c2cd",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d26750d2-d0df-4c7d-9606-4bded1250f89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0408a1c-d00f-4cd4-b41f-ad7745750cf5",
        "cursor": {
          "ref": "d80bc37a-f2f3-476c-ac83-1de70e465cc2",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "71c93480-5a2c-4141-89f3-d184bc594b8d"
        },
        "item": {
          "id": "e0408a1c-d00f-4cd4-b41f-ad7745750cf5",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d9ed8d97-26e0-401c-8508-45a90795bc99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4586cc3-b118-4b78-92a2-4d2499c6e129",
        "cursor": {
          "ref": "360a4869-1839-45a5-8543-59c301286b59",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ac737b78-ea7b-437d-991e-04dfcea11a94"
        },
        "item": {
          "id": "b4586cc3-b118-4b78-92a2-4d2499c6e129",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "17c792bd-da48-436c-b404-94a83860126c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 156,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0239cbfb-a795-436b-811a-b7b5faf7c1c5",
        "cursor": {
          "ref": "1130214b-dd13-46a3-bd68-93a62a3bb905",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f6723744-ebb5-474b-a1f2-67337bbdf500"
        },
        "item": {
          "id": "0239cbfb-a795-436b-811a-b7b5faf7c1c5",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "30f66bae-81c9-4b82-babc-2f7a886b6f59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7729782-8047-480e-ba3f-572ffa24055a",
        "cursor": {
          "ref": "da6b08c5-3d70-42bd-aba6-bb0606177182",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6f766101-a10a-4bd2-87c3-325f3a80eac4"
        },
        "item": {
          "id": "a7729782-8047-480e-ba3f-572ffa24055a",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "7d19cbe3-7c07-493f-a458-5869214532ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49808cb9-565f-42bd-8f37-9f26866d6b76",
        "cursor": {
          "ref": "0ddead41-5da5-4a37-8aa4-77ecc583407c",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "494bad7b-2851-4b67-86d5-9a750ea12efc"
        },
        "item": {
          "id": "49808cb9-565f-42bd-8f37-9f26866d6b76",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a750e029-eb2e-4188-8424-3f639718a199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed87c899-7954-47ef-8161-1059b7db4359",
        "cursor": {
          "ref": "b7f669a0-6f51-4058-87cf-55605c8ef444",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "600980c8-8676-4d4b-84e2-e1095747be77"
        },
        "item": {
          "id": "ed87c899-7954-47ef-8161-1059b7db4359",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "aa32fbba-76ab-4ab5-9ce5-0c5fdaabea34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e18be27f-21d1-4ded-a46a-70cfca2e3733",
        "cursor": {
          "ref": "0025b792-5511-4ea8-8298-8f9723feb1c0",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "1bef16fb-4b4e-4dcd-8fb0-5c09163a7921"
        },
        "item": {
          "id": "e18be27f-21d1-4ded-a46a-70cfca2e3733",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "867c3425-f4b2-4fbb-bbcb-30543c40c9b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "084e9a85-ece1-43a8-b8ef-8665ab2cf224",
        "cursor": {
          "ref": "c475fa38-1d3e-4622-a75f-2ed091b71e0c",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e2750363-7e37-455f-8749-ffab1aca56b7"
        },
        "item": {
          "id": "084e9a85-ece1-43a8-b8ef-8665ab2cf224",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c0df1663-c431-42d5-ab88-857df86aadc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e86b1ee6-67c9-45d2-8a1a-247fee7e7296",
        "cursor": {
          "ref": "7bf7e77f-1ace-4626-9ac6-2e5917303618",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6d6b06af-e803-44a3-9ee8-ae4075fb553d"
        },
        "item": {
          "id": "e86b1ee6-67c9-45d2-8a1a-247fee7e7296",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "bc6d338f-42cd-4b79-a70e-b1002cd61a05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dca65b2-9779-46db-a611-3c7b1456785d",
        "cursor": {
          "ref": "ad631bc4-f7ba-43e6-be57-cb2ccca27932",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3b43b963-5a3c-4177-ba37-6df7e43f41cf"
        },
        "item": {
          "id": "4dca65b2-9779-46db-a611-3c7b1456785d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "42ddc02c-64d0-4445-9b6d-511f983e8743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2934f613-b96f-4eb5-a812-bc7747e7bee9",
        "cursor": {
          "ref": "6f9af68d-5efe-4248-a949-84aa8306e4bd",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c56c0e14-6951-4315-801e-822da5a46315"
        },
        "item": {
          "id": "2934f613-b96f-4eb5-a812-bc7747e7bee9",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a0f3e130-a8b3-4eeb-b01a-1b3dc396ab53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e84224d4-16cb-48d8-9c7b-b20118ce3fd4",
        "cursor": {
          "ref": "b26e76fe-3649-4d0c-a431-65c891ee473a",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a6e8c58f-5571-46b0-83cf-f4cb097c2d09"
        },
        "item": {
          "id": "e84224d4-16cb-48d8-9c7b-b20118ce3fd4",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "5305b5ea-a379-4c74-a326-01d9a4da9970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71ff2aa3-43ca-4511-a67e-697eb1902b4a",
        "cursor": {
          "ref": "f994a8c2-c692-41cf-8ab4-dd9932405ede",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b942fb33-bf45-4949-964e-658eb38c6dcc"
        },
        "item": {
          "id": "71ff2aa3-43ca-4511-a67e-697eb1902b4a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "4f83615d-3f20-48a1-bf12-e418a8a6ff8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8846af5f-5b85-48e5-8a3b-db7243f5771e",
        "cursor": {
          "ref": "7d174fb0-2573-45d7-80fe-1f772980813f",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "3c3eac77-710d-4603-bec3-a670415d5af0"
        },
        "item": {
          "id": "8846af5f-5b85-48e5-8a3b-db7243f5771e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "7498eb75-5df9-4868-989f-2b723c104554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc5431bc-be88-4570-a39b-5bd58d5b8be7",
        "cursor": {
          "ref": "d5ef912d-4320-45d3-bbd1-da4285c3aff1",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c0714ef4-7f3e-4c5b-b26a-3ec26d1b860b"
        },
        "item": {
          "id": "dc5431bc-be88-4570-a39b-5bd58d5b8be7",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "66b8aac7-008f-4e54-8afd-106e3fc0b0e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b93fe21-8a1f-42c6-9cc3-584b8c997d32",
        "cursor": {
          "ref": "b5de8267-f65a-40cb-a120-059a676930a2",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9a7f4110-9f03-4b18-ab61-3aa7f564e19a"
        },
        "item": {
          "id": "8b93fe21-8a1f-42c6-9cc3-584b8c997d32",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "6243d1fa-151b-47a1-94d3-9d15c9c4c441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47b43427-14ef-41b2-ba4b-82cdb47f56d7",
        "cursor": {
          "ref": "c4827000-aa28-4e19-affd-fe5f9f6256ba",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "246cc575-d371-4f03-94fe-a52f061dadd5"
        },
        "item": {
          "id": "47b43427-14ef-41b2-ba4b-82cdb47f56d7",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "2081ab81-1ccd-4437-be48-1503ee403a44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47248090-14d1-4cfd-bbd7-d6570cb2865a",
        "cursor": {
          "ref": "0a7f783a-8288-4241-b870-07e23111a5dc",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7a73b7c5-5c9e-4a43-8fb3-efe1ae6e3eb7"
        },
        "item": {
          "id": "47248090-14d1-4cfd-bbd7-d6570cb2865a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4fb6da4f-c42f-4d02-bf05-1cf8f5dddba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fdb231e-830d-42af-8ba2-a769988ae988",
        "cursor": {
          "ref": "5ccd062d-10be-4e98-8022-a612ee346a17",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "41330cd8-4c43-44c1-8d95-1dc997fd0bee"
        },
        "item": {
          "id": "9fdb231e-830d-42af-8ba2-a769988ae988",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "41975fc4-74ee-4cc5-8bbf-691b73c8ba83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49177acb-e00e-42e5-b2bb-d0ab354481a9",
        "cursor": {
          "ref": "f30e4a12-8e34-4ac2-8a38-832519b1f303",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "7cc8b86c-b7e5-4fef-a28a-f06d79fe4d87"
        },
        "item": {
          "id": "49177acb-e00e-42e5-b2bb-d0ab354481a9",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "7a4c9121-4ac9-4d3e-81ad-9f840e05ebf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a2ba37a-e605-4ec8-85aa-cb34f55afdcb",
        "cursor": {
          "ref": "41a227aa-b4df-4bef-850c-817040ae9aff",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "7d207af7-1223-4b68-ac45-c9cb6c74fbdf"
        },
        "item": {
          "id": "5a2ba37a-e605-4ec8-85aa-cb34f55afdcb",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "399386a2-ac4b-43fd-9cd0-e2774d7a8705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "265123e2-5926-4224-8146-3afe1ef99f7b",
        "cursor": {
          "ref": "3efbf5dc-b7ed-41e7-a804-91d51b820ba0",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "69fb3e5b-6bf0-4d79-a6c6-d5bbec974634"
        },
        "item": {
          "id": "265123e2-5926-4224-8146-3afe1ef99f7b",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b9517072-4ddc-4c63-be80-76160c49b67c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1be525d-0537-4fd6-aa50-f58776085527",
        "cursor": {
          "ref": "877caad3-541a-445f-8304-d78bf61242d2",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c8ff77e7-165e-4151-9de5-0282c0ba5bf0"
        },
        "item": {
          "id": "d1be525d-0537-4fd6-aa50-f58776085527",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "b65fbbaf-b941-4d6d-8009-1320205728a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2439e9d-e3b7-4619-8c68-c60b69b89d0a",
        "cursor": {
          "ref": "961363e2-88bd-47f6-a83c-abbc43082bb4",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "dff8e0dd-fe57-46c5-8371-83cb81465586"
        },
        "item": {
          "id": "a2439e9d-e3b7-4619-8c68-c60b69b89d0a",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "ad0b52ef-32a1-4fd4-a4c9-6ba6f30f9c33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52080e6e-7021-4e42-a8f8-8cedafab014e",
        "cursor": {
          "ref": "f4b7d652-2c2a-4480-9544-03fa650a051b",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "4158416a-f089-4f16-a38e-23a5896b3fa1"
        },
        "item": {
          "id": "52080e6e-7021-4e42-a8f8-8cedafab014e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "3a39b9fa-e384-4c57-85b8-037f891a1c9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09b0e2ce-820d-4508-9c8d-e80ee611ca50",
        "cursor": {
          "ref": "74468f3a-e736-4441-bec9-952415093eca",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "5b9275e0-b116-4cf4-b81f-f7144d05ac98"
        },
        "item": {
          "id": "09b0e2ce-820d-4508-9c8d-e80ee611ca50",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "b228e63e-e1cb-4034-bcbe-64a0b94dc929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9b890ae-aa22-495b-941e-9cb02080c751",
        "cursor": {
          "ref": "7e6e6109-ab18-403d-9b00-4b76eba7b82d",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "776e082d-2437-4732-960b-075f4c4d5dc7"
        },
        "item": {
          "id": "b9b890ae-aa22-495b-941e-9cb02080c751",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "ba800694-66f8-48cb-96ee-8c82ed0a859e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fc6f3db-6d81-4daa-9826-7da25635608c",
        "cursor": {
          "ref": "e89a34af-fac8-4173-bd5c-2dca76ad0f5c",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "448ffa85-442d-45a1-a0aa-16aed7d59a6c"
        },
        "item": {
          "id": "3fc6f3db-6d81-4daa-9826-7da25635608c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "4f1eb095-5213-4eed-86e7-c4f57cc60871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd11eda1-d236-44c3-8643-c4fd215db9ef",
        "cursor": {
          "ref": "290ab693-d1e0-40a5-b1d8-efdb219ef4b1",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c04618d1-a2f3-4225-a988-aab781f696c6"
        },
        "item": {
          "id": "fd11eda1-d236-44c3-8643-c4fd215db9ef",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "df5e9155-13a1-4e55-a98c-9d544df032c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e34016f-3d11-4cb9-9ae4-f3a3bc0a0b6c",
        "cursor": {
          "ref": "1189fa27-1bea-4b60-bcf4-70699b1864cb",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "8407d5d9-0212-4d42-9c36-7e0871d75ec9"
        },
        "item": {
          "id": "9e34016f-3d11-4cb9-9ae4-f3a3bc0a0b6c",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "836765ce-64c9-4b81-8d87-78c2502955a9",
          "status": "Created",
          "code": 201,
          "responseTime": 744,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "3464538a-8687-40b8-8ac0-fd0d84cee5f6",
        "cursor": {
          "ref": "fadabaae-3e0e-40a7-8466-4928a9bd1a1a",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a16ba95f-2a67-46f7-9a31-35a5d9c6c314"
        },
        "item": {
          "id": "3464538a-8687-40b8-8ac0-fd0d84cee5f6",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "1b3b29d6-7dd9-4701-b75c-302bdf086d89",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "77713fe6-1515-46a8-bb41-0888b457f4e9",
        "cursor": {
          "ref": "41a61436-4eb9-4523-8d02-9ad45b6fcaaf",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "094e85b9-5986-44ea-b57a-516d554d283a"
        },
        "item": {
          "id": "77713fe6-1515-46a8-bb41-0888b457f4e9",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "5f0e3fc0-a44e-4cf9-9dcc-eb124dc4d822",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "7ae029e9-3d47-48d4-9ffe-88b208720190",
        "cursor": {
          "ref": "faabc3a3-7b3c-41c1-91c1-30b9e4355558",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "6611c956-b273-48c6-a578-82702f560c8d"
        },
        "item": {
          "id": "7ae029e9-3d47-48d4-9ffe-88b208720190",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "71338235-6e44-4648-ac4a-086714e840f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7108a5ef-2ec8-4125-ac01-938bbea19bf0",
        "cursor": {
          "ref": "b9196700-2883-44d6-b722-d0e54b09b99d",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "da964bdf-fa86-42f0-8c80-9855f2f50a8c"
        },
        "item": {
          "id": "7108a5ef-2ec8-4125-ac01-938bbea19bf0",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "408b686a-b4f1-4747-85e9-7bd3fe6c4a92",
          "status": "Created",
          "code": 201,
          "responseTime": 463,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "95119de0-e1e3-4bcd-a90c-afe84c27922d",
        "cursor": {
          "ref": "40d15e56-9673-41f7-97f6-e2031b17ce9e",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "df2ad936-008c-4175-a02a-9fffa22721ca"
        },
        "item": {
          "id": "95119de0-e1e3-4bcd-a90c-afe84c27922d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "00bc5f9f-ba70-4122-9e07-82706b6682b9",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "5a1e925f-8459-4957-a820-356371c1ef51",
        "cursor": {
          "ref": "1a8b7ccb-b40e-4a8e-acad-744912e65856",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1a5261f3-2c75-45f3-887a-818a2ff8ab25"
        },
        "item": {
          "id": "5a1e925f-8459-4957-a820-356371c1ef51",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "7bc8b5ce-240b-45f3-bcd1-9dccc1e6abf6",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "00d5415e-2796-40e6-809d-f7bd0fef9611",
        "cursor": {
          "ref": "07ef0d9c-3dce-4720-86e8-ef9b7204ea6f",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "621e7dff-c802-4456-8528-aee8160b94c2"
        },
        "item": {
          "id": "00d5415e-2796-40e6-809d-f7bd0fef9611",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "ee4642bf-5b6c-4b8c-990e-ec904c2b3f2b",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "d189cda9-5b4e-4399-a669-95da14142c2c",
        "cursor": {
          "ref": "e1c7a342-d976-4654-b753-474f59000482",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8c2f276e-3aa2-4991-8480-f7a7ccbe70b0"
        },
        "item": {
          "id": "d189cda9-5b4e-4399-a669-95da14142c2c",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "910b4e7f-5687-476c-b1d2-6d9ff003b690",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "42c149b8-97c0-4c7f-90c9-9bd80b322ca6",
        "cursor": {
          "ref": "5e74e73d-96fa-43d9-9cd6-73b778ab21cd",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b60a92af-b4e1-43eb-9e77-dac715e12431"
        },
        "item": {
          "id": "42c149b8-97c0-4c7f-90c9-9bd80b322ca6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "d0fa4f8f-3722-4c66-8eaa-f138a40b407a",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "bc2fa174-6bce-4563-a136-2c6c8acd2427",
        "cursor": {
          "ref": "a9a0e9d8-ee78-47f1-a269-752f3eb98958",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "44e4772b-dda6-4028-8336-b3995975887b"
        },
        "item": {
          "id": "bc2fa174-6bce-4563-a136-2c6c8acd2427",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "420879b2-bc2b-4f58-a437-2c0eac06d9ac",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "b89d512a-e261-425d-8579-4916b171de21",
        "cursor": {
          "ref": "b2d8eced-202e-43e0-8bc0-fb64a6a5dcd0",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "3209b308-fa90-4952-96bd-788747e1388b"
        },
        "item": {
          "id": "b89d512a-e261-425d-8579-4916b171de21",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "f4afef88-b462-43ae-9b1d-4881c5d7fbc1",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "e346d63d-e568-45cd-9fdf-dd7d26c2da47",
        "cursor": {
          "ref": "067eec0b-5e46-49f6-b7b8-b49377a31b9d",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "1aa2880f-ed2f-45e6-bb98-64888e407205"
        },
        "item": {
          "id": "e346d63d-e568-45cd-9fdf-dd7d26c2da47",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "ac57e97e-df59-4829-9064-93b5e6609665",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "11252f4e-8222-4f5f-b70d-dab475a665d0",
        "cursor": {
          "ref": "2594f500-1cd9-45dd-a5a6-b2cd70b9257a",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f63308a1-3ff8-4149-8ab0-89b74ec1dfc3"
        },
        "item": {
          "id": "11252f4e-8222-4f5f-b70d-dab475a665d0",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d99ead0b-75d0-4956-ac1f-f5cff872fecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a76c244-c621-47e1-a7ce-29b283ab3299",
        "cursor": {
          "ref": "f7d34d27-4f9b-44ee-bc86-8b9143098f8f",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "cf1c81de-7e03-4e53-8d4d-266d8ce79273"
        },
        "item": {
          "id": "5a76c244-c621-47e1-a7ce-29b283ab3299",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c5e49409-ee39-40ad-ae03-cf6c5c8f2ea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa489fb4-6e37-45b8-82b7-44cc824a8162",
        "cursor": {
          "ref": "99610e0c-eaf2-413b-85c6-70c81e0c2e4f",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ac29501c-bacf-4d1a-9b22-2aee52489a39"
        },
        "item": {
          "id": "aa489fb4-6e37-45b8-82b7-44cc824a8162",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "f5083373-915c-4506-80e3-52150b328816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b859ddb-5e34-4028-913b-4bbbde141042",
        "cursor": {
          "ref": "b0d00ce0-df18-44b8-945a-722b0542df8a",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "0e516843-aeee-4d52-b75b-8ac16e94c018"
        },
        "item": {
          "id": "2b859ddb-5e34-4028-913b-4bbbde141042",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "b345f4bf-ee40-4429-8aeb-524377cd3339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e8344f3-1bee-4b5f-9905-d0591aecf179",
        "cursor": {
          "ref": "7a523279-afab-4ecf-be3a-2e65abd10330",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "9522cb4f-6c46-4d88-a133-80c683a44215"
        },
        "item": {
          "id": "9e8344f3-1bee-4b5f-9905-d0591aecf179",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "0442755f-a469-4291-b921-fbc4311a6ada",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31ee0c34-5a89-40d1-bcfe-1ebbf3982cb9",
        "cursor": {
          "ref": "4f8be130-4181-4cf5-bc69-702b1ec1ecd7",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1b926ae7-286c-46ff-a5c2-d8f300ce1203"
        },
        "item": {
          "id": "31ee0c34-5a89-40d1-bcfe-1ebbf3982cb9",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "712f5e1f-b76f-445b-af83-a7cf5694b09d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59e6bc5b-be75-4753-a7ca-8c04a4a090b3",
        "cursor": {
          "ref": "542d7b7d-cadb-4772-9f39-48dac4d908ed",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "9fe85201-f296-484b-9d62-f456d7cdd9c4"
        },
        "item": {
          "id": "59e6bc5b-be75-4753-a7ca-8c04a4a090b3",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "557ccb17-3137-4aab-a15e-d91a8cdf8bfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d88f750b-d635-464e-8792-a54965d11f05",
        "cursor": {
          "ref": "15e868fc-8b2a-48ee-9805-8ec8b46697b9",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "7e76c443-284e-4ceb-9897-00e74f77154a"
        },
        "item": {
          "id": "d88f750b-d635-464e-8792-a54965d11f05",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "12d57a34-4a13-4a21-8bca-2ee681652a65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ad2a35c-e6eb-4b75-a2c3-0fa359477894",
        "cursor": {
          "ref": "88fcf891-7a43-401d-a729-76b047b64193",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "13c996d2-32cc-421b-b44c-c5b783c95981"
        },
        "item": {
          "id": "7ad2a35c-e6eb-4b75-a2c3-0fa359477894",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "20b167be-e1f7-4663-8cfc-0c46dfd175a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8307e9df-5a41-4076-b166-89a187bfc7d4",
        "cursor": {
          "ref": "0203c771-1630-4abe-9efc-af9f9a0dba23",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "46969869-a40a-4e2b-a039-7bcfccdb5abd"
        },
        "item": {
          "id": "8307e9df-5a41-4076-b166-89a187bfc7d4",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d31be704-b414-4c96-83f5-0f029071000b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "777ea6c4-9f83-462c-a751-2fc40c0bb31b",
        "cursor": {
          "ref": "eb2d092c-6e1e-4743-a1d3-5f6d9d3b0298",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "2f4802d8-5ee9-4403-a25c-91e511036d90"
        },
        "item": {
          "id": "777ea6c4-9f83-462c-a751-2fc40c0bb31b",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "553307a6-5fa6-44cc-b273-a9a95ffd573e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d334ff3a-5566-424e-a06a-b8316e1fc139",
        "cursor": {
          "ref": "2caff88d-b85f-4825-9248-f696edb6ebd1",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "a20db109-6a6f-4a36-8808-c86a48debff9"
        },
        "item": {
          "id": "d334ff3a-5566-424e-a06a-b8316e1fc139",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e4273b53-07ff-4cc0-9bb6-60164b8706c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a5e7b0-cc1f-4d32-9b0d-bccd25a3bcd1",
        "cursor": {
          "ref": "ef662569-86b2-4847-a034-89b968b66766",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "5ce4f064-2307-4cc7-b8f2-9acfb07f5bc6"
        },
        "item": {
          "id": "f7a5e7b0-cc1f-4d32-9b0d-bccd25a3bcd1",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "9a7c9d78-522e-4785-b699-62412ed10c19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96df6504-d462-4274-8261-c5f69637ad91",
        "cursor": {
          "ref": "9fc2eb46-fa7d-44ed-a4ab-414a88c6fbd5",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "ff550679-2370-4f26-b485-de551136d2a1"
        },
        "item": {
          "id": "96df6504-d462-4274-8261-c5f69637ad91",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "3cc42467-88b0-435c-a77d-d2decdd75b57",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "2885420d-373b-4fce-9609-52abef127387",
        "cursor": {
          "ref": "cf49ac17-9f4f-425f-b199-26a32e0fedc5",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "016ff047-6823-4880-b843-67ca0ca566cc"
        },
        "item": {
          "id": "2885420d-373b-4fce-9609-52abef127387",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "c3d463e1-2ef0-42e8-9f02-14382d3fb95f",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "805c4223-3855-42f4-b280-960ab57a1fbe",
        "cursor": {
          "ref": "16590e11-3c3d-4dcf-9592-f7ad221dfad0",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "b5c9683c-261d-4e27-b669-ef0192728630"
        },
        "item": {
          "id": "805c4223-3855-42f4-b280-960ab57a1fbe",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "4dbf3e47-3611-433f-a91c-dc094b1eb43c",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "ad949b35-67ff-4809-a2f3-3ae66d5b622b",
        "cursor": {
          "ref": "da2ea792-c844-454a-a7e9-d562563b1883",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a8c8c849-1eb5-4bc0-aa34-33287bf4ebd3"
        },
        "item": {
          "id": "ad949b35-67ff-4809-a2f3-3ae66d5b622b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8eef872d-4ab1-4211-a1c6-9e18a04d2e3d",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "59db2e8b-e200-479a-bdfc-dc026ca42c2a",
        "cursor": {
          "ref": "1884ef9e-adaf-4dd5-9bbf-ccecf06a7d2c",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "2167c84d-68a8-40e8-9690-10d703606107"
        },
        "item": {
          "id": "59db2e8b-e200-479a-bdfc-dc026ca42c2a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "8bdce535-3d21-48ef-aad4-811d64a8d929",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "53883624-b56d-4e64-b3de-b926e2e8b7b7",
        "cursor": {
          "ref": "bd4453c7-3c5c-4128-bdcb-846e7bdfe885",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "988f0232-9134-47bd-b36f-a86057042f83"
        },
        "item": {
          "id": "53883624-b56d-4e64-b3de-b926e2e8b7b7",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "0a15363e-6372-439b-99ed-edad6837957e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fe43432-19dc-4a6f-8149-a0c336bac99e",
        "cursor": {
          "ref": "8e090951-8dd2-44cb-801d-83679fff4b46",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "526ac965-f62e-4243-9457-b885a48c5c20"
        },
        "item": {
          "id": "6fe43432-19dc-4a6f-8149-a0c336bac99e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "a9cf6858-3729-4e9b-ba13-1be54accd128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31e24ea3-dba7-435a-8490-0e3bcc40f7a8",
        "cursor": {
          "ref": "c9e61bf9-5bfb-426c-88ec-e6d306d4b188",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "6747e656-018c-44b8-9df6-1e53765e5022"
        },
        "item": {
          "id": "31e24ea3-dba7-435a-8490-0e3bcc40f7a8",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "30013472-3178-4c44-9d10-28b7af82284d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d7584b-87c5-453e-998c-d51ad5a5f148",
        "cursor": {
          "ref": "b53e8184-a60a-4f54-85ec-c650dd8eb411",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "05c94960-7b3f-46cd-ad0b-18383dad2165"
        },
        "item": {
          "id": "97d7584b-87c5-453e-998c-d51ad5a5f148",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d31e315c-dd6a-4316-9ea4-dd8a2ed2ccbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8b75654-e12d-4878-86c0-59cf88f928d2",
        "cursor": {
          "ref": "ff9102e4-b378-4aca-8085-328aaac2f07b",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "438e962e-57b4-4cbb-9fe7-9b4c371035d7"
        },
        "item": {
          "id": "c8b75654-e12d-4878-86c0-59cf88f928d2",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "c2654fb6-65d3-4b7a-80ff-847b4fd74f1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ada8af90-eac4-483a-8d7b-af54c39ae591",
        "cursor": {
          "ref": "2816f48a-ae02-4668-b8e9-0abee7c71610",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "03684308-7cbf-4761-b9c4-05e7a0e60cad"
        },
        "item": {
          "id": "ada8af90-eac4-483a-8d7b-af54c39ae591",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "44985d3a-b412-4c4a-be3b-45600c62b5ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc9d2cdd-dd29-4090-815f-6918db0ee8dc",
        "cursor": {
          "ref": "1fd2afd5-af7b-4f6e-954b-ee3ac08bb245",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "3f307c18-2974-4c5c-8697-b477b7508949"
        },
        "item": {
          "id": "cc9d2cdd-dd29-4090-815f-6918db0ee8dc",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "7107c5fd-3b4a-4701-a096-4f17655c2081",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "006696ec-ee4f-40be-a7d2-e1e538734e8f",
        "cursor": {
          "ref": "afeb2ab1-b776-4606-9f25-2362ffb41ca3",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "e9fc8570-1462-4a93-9a2e-bbf61fafe633"
        },
        "item": {
          "id": "006696ec-ee4f-40be-a7d2-e1e538734e8f",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "68f5bc81-0299-4770-ac93-bdb66c01c6b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0d844f1-a908-4b26-9f3a-5976dc780764",
        "cursor": {
          "ref": "9f11044d-628b-4b3e-8b24-0c08102c0c9b",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "a00f2c82-ffa4-4c54-add5-fb541c581fba"
        },
        "item": {
          "id": "b0d844f1-a908-4b26-9f3a-5976dc780764",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "0a543896-1da3-4147-a882-a6bc3c1043bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b91dbb0c-caa7-44a7-bd03-4db469a113ee",
        "cursor": {
          "ref": "4d2d3975-1e51-493d-88f0-cec20dc65b5a",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "c97f2a48-6283-4d99-b48f-37ed12a57f78"
        },
        "item": {
          "id": "b91dbb0c-caa7-44a7-bd03-4db469a113ee",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "82aa57d6-c737-4b6f-828c-4e6d1f44257d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27552db2-cb2d-4725-ba68-6a149cf7ed00",
        "cursor": {
          "ref": "7a2038ee-a671-45bd-b95c-011f005944d4",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "34551aaf-eec0-4196-8268-4a3f7da39ba5"
        },
        "item": {
          "id": "27552db2-cb2d-4725-ba68-6a149cf7ed00",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "f8855148-22ca-4ba4-85ae-3ab9e1d3e4e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dc87491-0400-424f-8685-f1ee051fae45",
        "cursor": {
          "ref": "4b6f1a88-d0b4-4245-91ae-3348ec046891",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "326e549c-b540-49b7-a9ae-bb17a31b8d72"
        },
        "item": {
          "id": "4dc87491-0400-424f-8685-f1ee051fae45",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "6e8a55d2-6c28-499b-bdf9-f82fb90c01f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30a9322b-e24f-4fc1-bdbf-30c44d202702",
        "cursor": {
          "ref": "e4f0ac5c-8e18-4b8e-8dfa-a543cf2a074e",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "93ecc185-2858-4610-a5e1-02e57b38d6d9"
        },
        "item": {
          "id": "30a9322b-e24f-4fc1-bdbf-30c44d202702",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ee15d9d5-93be-4aff-9b8d-22268ca898a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f2f729-6874-4bd5-b977-938aeaf88f72",
        "cursor": {
          "ref": "9c94a425-cc3e-4d85-9a5f-5659f34d43bf",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7edb0ded-4579-4d74-a823-b24cb12eee61"
        },
        "item": {
          "id": "05f2f729-6874-4bd5-b977-938aeaf88f72",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "15550b31-6c2e-4923-90e0-59d0607e30e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b8cbcd0-8b9f-4970-be4f-b3a045f75cd2",
        "cursor": {
          "ref": "191ac2c7-397c-4599-a9c3-98c7204925ab",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a9794d04-78d8-46c3-a980-cad00dbee4a7"
        },
        "item": {
          "id": "4b8cbcd0-8b9f-4970-be4f-b3a045f75cd2",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "e7973daf-9dde-4035-b321-10c31d5072f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f07f58e4-c767-4f35-8362-6c69d3a25fed",
        "cursor": {
          "ref": "30d42c1f-a633-4f44-9615-b0741231cd68",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "87419979-61fb-4d4b-9c30-13fb63da432b"
        },
        "item": {
          "id": "f07f58e4-c767-4f35-8362-6c69d3a25fed",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "25862313-2c0b-4b6b-b7fc-244fb3054740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "102eb810-685d-46c4-ba5e-9f70fbc0ae9b",
        "cursor": {
          "ref": "c906dfd4-2bec-400d-9f1f-37d741310825",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "067ae03a-d350-472a-8096-4d2716239fc8"
        },
        "item": {
          "id": "102eb810-685d-46c4-ba5e-9f70fbc0ae9b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "009a3311-658e-4d7f-b861-550a92f8eb27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "420ef9fd-128a-469d-8476-3d659d23e299",
        "cursor": {
          "ref": "ac7a9701-7359-4240-a438-7e84400c4f16",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "da9af38d-45f4-47dc-acfa-a239b6f2eb8e"
        },
        "item": {
          "id": "420ef9fd-128a-469d-8476-3d659d23e299",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "59856d56-2d4b-45f4-8eee-ae69d3e66df6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a475714-f47d-4e54-b452-4136c5970200",
        "cursor": {
          "ref": "df2f7ac7-b2af-4e1c-84b6-e960f06d78ae",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "eb26cbf8-ac14-44d2-b555-1500121a3bba"
        },
        "item": {
          "id": "9a475714-f47d-4e54-b452-4136c5970200",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "1830f054-82dd-49f8-bdda-43284a5c2f5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e62ab9d0-297d-41f3-85db-eb35d07a5ef2",
        "cursor": {
          "ref": "fbf40801-0f2a-497e-a215-2a6342ff5772",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "668f96ef-f1df-4a8e-aace-3d6fdc8ae436"
        },
        "item": {
          "id": "e62ab9d0-297d-41f3-85db-eb35d07a5ef2",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "e34d36e9-8ec5-406f-bbff-a6c2f0b178ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83945b8d-e2f3-42f1-adba-9c3c8985e500",
        "cursor": {
          "ref": "6e479371-922d-490c-8aae-42062d12fbed",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ad330c8e-f1e7-4835-b095-e137b9e36663"
        },
        "item": {
          "id": "83945b8d-e2f3-42f1-adba-9c3c8985e500",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "36634875-1c3f-41be-a548-2780c91f64f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bf1f254-5f04-460e-8d78-0e36f9c0d3a9",
        "cursor": {
          "ref": "0e3ccf71-4913-49f3-a942-d47b34d44374",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "1785fae0-a1ca-45e5-b015-010fba00e47f"
        },
        "item": {
          "id": "8bf1f254-5f04-460e-8d78-0e36f9c0d3a9",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "9d813c15-d1da-4dd3-bd01-bc57e5693020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06bdb1eb-a5a8-409d-be58-b2b3d66bf37e",
        "cursor": {
          "ref": "b34ff606-6f5d-4f23-a442-fe966cf3aee4",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "7088db47-de79-4f28-8469-f51c5e59015b"
        },
        "item": {
          "id": "06bdb1eb-a5a8-409d-be58-b2b3d66bf37e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "c3a7b1f7-02ec-4d55-b4de-1a89d2a89ad5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a3b4de7-86ab-493e-8204-6da4d97e219e",
        "cursor": {
          "ref": "777ef1de-5d64-4611-9de5-e4dab57acb31",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6331b08b-1bef-4078-96e0-65e1ee6cbd30"
        },
        "item": {
          "id": "9a3b4de7-86ab-493e-8204-6da4d97e219e",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "4311b4c6-e22e-41a5-8005-53dbc6e2954d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76290e0b-afbe-44ef-a9d9-d682c9b678fb",
        "cursor": {
          "ref": "e1a9a894-1810-4a65-ab21-5dd83daad416",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ed17f1e5-2278-474c-b618-ad9be2576bf4"
        },
        "item": {
          "id": "76290e0b-afbe-44ef-a9d9-d682c9b678fb",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "92404c79-03d1-4d6a-ac68-2d4ff0076fd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73d43024-45cf-4b4a-88ea-1b2c98f01a89",
        "cursor": {
          "ref": "71e3122f-6901-405c-a0db-4f1263a47967",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "4cc67b9a-fdf4-48fa-9a87-f92366604585"
        },
        "item": {
          "id": "73d43024-45cf-4b4a-88ea-1b2c98f01a89",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c3c61410-5b1b-42d3-b26f-0c518828389f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5010fe62-7d48-4121-bb42-ab4b8386817b",
        "cursor": {
          "ref": "340395a1-09ef-4e32-9d48-6eb4788a9f95",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "782adabf-521d-47bb-8f74-6f40058d5ce5"
        },
        "item": {
          "id": "5010fe62-7d48-4121-bb42-ab4b8386817b",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "3e24c296-8d65-421e-a85a-e6243ae83c51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "712f5570-b56f-4582-bca6-2620106c595a",
        "cursor": {
          "ref": "fe9a4797-4a64-45c5-9b23-76bdf362629c",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c52ff0f0-73ca-402e-873c-64873a30b4f3"
        },
        "item": {
          "id": "712f5570-b56f-4582-bca6-2620106c595a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "10cb3ed5-7d03-452c-b3b8-aa8203382e71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23a1c122-da8b-4ed7-86a9-3722b9df5bd0",
        "cursor": {
          "ref": "c3cee601-80ca-45ef-ad08-09016ef114c3",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ec360bee-2b94-4c97-a8ec-0719b570c254"
        },
        "item": {
          "id": "23a1c122-da8b-4ed7-86a9-3722b9df5bd0",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "8c68660e-9436-4320-bfeb-10c4f0e6e8fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cb90381-3ec8-4a89-b175-b991ce3103c2",
        "cursor": {
          "ref": "5eb6ae07-20af-43a8-854c-577da811d441",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "17f2f664-170a-4972-959b-641bf16f677a"
        },
        "item": {
          "id": "4cb90381-3ec8-4a89-b175-b991ce3103c2",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a01f3f20-13d4-4fe7-a7fb-40c2dcc4712e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a6153ee-d4b1-424a-b3ca-069ec1785958",
        "cursor": {
          "ref": "df241d45-9751-4137-a59b-15bedb665bd1",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "8bb0f250-b503-463b-9464-4b289ef853ac"
        },
        "item": {
          "id": "2a6153ee-d4b1-424a-b3ca-069ec1785958",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c336da07-e88b-41b6-bea9-cc071add77e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ad4f15-8535-47db-ac16-96acb859cb96",
        "cursor": {
          "ref": "f1409d2f-dd13-4f7b-a6eb-c1c1c7b26f55",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "4ee4a7c7-b604-4e38-a45a-fefcd2773d77"
        },
        "item": {
          "id": "b9ad4f15-8535-47db-ac16-96acb859cb96",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "2d04bd79-19e9-4db9-801d-2a6801679970",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1f80ba0-1a8c-482f-b9c4-15712d80c69d",
        "cursor": {
          "ref": "6e138d0a-edf9-4c6e-91a7-9066b4b20777",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "0bd6614c-2697-42f3-930a-77e8e05bc7f1"
        },
        "item": {
          "id": "d1f80ba0-1a8c-482f-b9c4-15712d80c69d",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "7d55b383-c3e7-44cf-abf5-1d617f84353e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "308fb9f5-ffc7-44b3-9dc5-a38b9cc5b75e",
        "cursor": {
          "ref": "176bddd2-3790-4f67-87bc-5d8e582b7a2e",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "3c7c5afc-c331-488f-a663-667012e9f160"
        },
        "item": {
          "id": "308fb9f5-ffc7-44b3-9dc5-a38b9cc5b75e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "cbe0511e-1811-4ea9-9d18-c51a30b4dce5",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "e22ebbfe-f050-4d67-97c7-34238b1a5496",
        "cursor": {
          "ref": "051456d2-a570-45b2-bc40-f3ad92a80d70",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c5a015ec-57ee-4abf-af95-7529207b493a"
        },
        "item": {
          "id": "e22ebbfe-f050-4d67-97c7-34238b1a5496",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "25cbe948-8a61-45d6-9f51-0f29f6b9fa53",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6e30fdd-dd04-467b-a160-799e3dca487a",
        "cursor": {
          "ref": "4936b778-e9d6-4f58-8f32-4f1cdd6a8fab",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "b7884246-90da-41b8-afab-6539e616cc1f"
        },
        "item": {
          "id": "a6e30fdd-dd04-467b-a160-799e3dca487a",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "fc7d395c-140c-4f53-b66d-b77dc2e0f1dc",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b1af815-e327-43a6-a508-b1276cff97a1",
        "cursor": {
          "ref": "74e1a271-8c5b-4c3b-abfc-bd3ca5848829",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "5a55ae7c-9717-4e44-a6f3-086ac2457800"
        },
        "item": {
          "id": "7b1af815-e327-43a6-a508-b1276cff97a1",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "472a3a20-14cf-48f1-ad5d-c519bc1a1395",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "06d3b432-1c3b-404a-adaa-860e34063c51",
        "cursor": {
          "ref": "e038ccbd-e63b-4501-9eb7-a20e2e59c858",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "3211f28d-e9fd-4a75-a1aa-d0c94dededba"
        },
        "item": {
          "id": "06d3b432-1c3b-404a-adaa-860e34063c51",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "08043c70-c4d7-443a-a7b8-efc0216563fb",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-01-18T00:36:43.834Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-01-18T00:36:43.834Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "a1d7e9f0-b8aa-4058-b8d3-f2092979e676",
        "cursor": {
          "ref": "86daf035-4ca8-4961-8755-51ba63193bd6",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "15d49e48-b99e-4b06-9bee-aa6b1a8be7f0"
        },
        "item": {
          "id": "a1d7e9f0-b8aa-4058-b8d3-f2092979e676",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e22eef13-3a00-4926-9ce6-c969cac715e2",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "582c3f89-ace2-4931-800d-283d94b34feb",
        "cursor": {
          "ref": "c8ba71a9-0863-40c2-aa1c-f75eea870d23",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "10aaa626-91d8-4eb3-b323-613fedfee914"
        },
        "item": {
          "id": "582c3f89-ace2-4931-800d-283d94b34feb",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d5af9b70-9748-441e-a5c2-e1822055d23d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfc1c1b8-d678-48a5-9822-6f01d6c4d7ab",
        "cursor": {
          "ref": "6075e002-005c-4c41-9524-c0f3c8c909af",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3194c68c-64e8-4ce7-88cc-686bd5aeeba4"
        },
        "item": {
          "id": "cfc1c1b8-d678-48a5-9822-6f01d6c4d7ab",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "bbcf438d-cfa2-4037-b1bb-653b159be880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "108c8ebe-e138-4906-aa98-d01c436a6e4c",
        "cursor": {
          "ref": "0d051522-b7c3-4f6d-a924-d94ab8068a27",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "5e01c86e-a9c1-4b49-9b46-61481e8df844"
        },
        "item": {
          "id": "108c8ebe-e138-4906-aa98-d01c436a6e4c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b6ec9053-63b1-42ae-8268-37cce08a63c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "275d6286-37cc-42ad-88a3-28572a267e21",
        "cursor": {
          "ref": "253ad4f4-ea37-40f2-ba8e-698ad32cdb01",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "0a8d2189-bcfc-4a4e-afc7-f3f01f34e6b2"
        },
        "item": {
          "id": "275d6286-37cc-42ad-88a3-28572a267e21",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "96b9880e-ee37-4ce0-8d72-eaea8f771a1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dcf0052-9c23-43b7-806f-e610b0c834aa",
        "cursor": {
          "ref": "2c47b185-c838-435e-a248-7e55efa23761",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f4c19954-cb9e-47f9-aaa1-77426862a10d"
        },
        "item": {
          "id": "0dcf0052-9c23-43b7-806f-e610b0c834aa",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "10d2cea1-8ba3-4547-ba7e-a9058e94d775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4093a321-fcfb-46f2-8b71-a15235f03eee",
        "cursor": {
          "ref": "ec04af6c-0f28-4b02-96a2-5d13a7f3f14f",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "5a877a5d-f80c-4926-981d-6e6af2eec95e"
        },
        "item": {
          "id": "4093a321-fcfb-46f2-8b71-a15235f03eee",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "4c42c41d-1a7e-43aa-983d-378285d58609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6591d4-7a44-4ec0-8e04-5d6be6b81dc0",
        "cursor": {
          "ref": "ba09aa09-d0f5-4586-9b90-faf7486ddcce",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e30ebf78-dcc8-45d8-a1c7-7c70dad604b5"
        },
        "item": {
          "id": "9e6591d4-7a44-4ec0-8e04-5d6be6b81dc0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b1f6224f-7fc0-4a33-bcae-bcdfd301cce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29325fbe-b54e-4690-bf06-dd7db87ec06c",
        "cursor": {
          "ref": "1889187e-6955-4484-a323-aed78884373c",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "86b614c5-bcda-44f7-99a3-6c8e2c6a90e2"
        },
        "item": {
          "id": "29325fbe-b54e-4690-bf06-dd7db87ec06c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c4a6f26f-7ec7-4214-a7bc-85aabc2b82e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b41b597-3dd2-41c7-a300-c6df3d751d48",
        "cursor": {
          "ref": "b47d71a0-5c24-41af-9726-82014371c4ba",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "9ee94328-ce78-4a1f-827d-0edeadde6415"
        },
        "item": {
          "id": "9b41b597-3dd2-41c7-a300-c6df3d751d48",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9e1db371-f798-477b-b3f3-d93fd7caafbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d44e3caf-b35c-425b-a11c-dff5f379d84d",
        "cursor": {
          "ref": "2e2ef6c3-45c2-4033-b940-29da48accbe2",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "ebe3997f-3e1c-484c-a6fc-763e4a073253"
        },
        "item": {
          "id": "d44e3caf-b35c-425b-a11c-dff5f379d84d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1de980c9-03c8-4471-9d31-ea0d846eb6f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc54dcd0-7acb-4c91-88e6-ff0dfed485de",
        "cursor": {
          "ref": "925fc85e-2837-40e7-b0ff-5f982401eeca",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f5458ed6-ab91-4640-9835-26883e77ffd9"
        },
        "item": {
          "id": "bc54dcd0-7acb-4c91-88e6-ff0dfed485de",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "684c5c56-6b98-4818-8320-b3821865c98c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10004d0d-84ef-4cdf-839d-169bc9379c4b",
        "cursor": {
          "ref": "81af4339-455a-49b9-a454-05b98e3c6121",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "1ea04d41-bed4-4bb9-b3cf-b9cc880f0cff"
        },
        "item": {
          "id": "10004d0d-84ef-4cdf-839d-169bc9379c4b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "686dffd2-eda2-4e12-97f3-7a387d979a3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06800196-61a3-45e7-b394-44898c687f0f",
        "cursor": {
          "ref": "16c73493-c4e9-4f65-8587-1264a5ebea5c",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d91d6a92-6b25-45cd-8901-459ca75e35e2"
        },
        "item": {
          "id": "06800196-61a3-45e7-b394-44898c687f0f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5a544a45-c683-4de6-b5ba-235f10b383b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 129,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "dac3ebe1-4363-44e1-9ad6-3ee2f92d433c",
        "cursor": {
          "ref": "09445a70-e144-41ba-9c75-3415016ad2c7",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ad1d80b1-a672-49f5-b2f4-0824829921e8"
        },
        "item": {
          "id": "dac3ebe1-4363-44e1-9ad6-3ee2f92d433c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "89d73130-9d06-4c34-93b6-2c9405b4d694",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 117,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "c2ab9329-0e2b-416d-989b-532be689ab29",
        "cursor": {
          "ref": "0e4a308c-adbf-4759-9135-bdee3472de5e",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "a649a41e-597e-4c7c-a1c7-2a84a9fc26c8"
        },
        "item": {
          "id": "c2ab9329-0e2b-416d-989b-532be689ab29",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "44175a57-a902-4361-8794-64ae86373fb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90c2d0c3-7373-4fef-a2af-609f7fafce67",
        "cursor": {
          "ref": "c77d3434-1b5a-4d6c-8a0d-7051cd95227a",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "95fc0a4a-a0b4-4dc8-87fb-8427122e5b39"
        },
        "item": {
          "id": "90c2d0c3-7373-4fef-a2af-609f7fafce67",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0e6bbb89-e544-4dfc-94d2-3d2a47edc897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f74d7453-8487-4674-9c01-9fabcfe8b504",
        "cursor": {
          "ref": "0f1bdb9f-886d-4df1-92cd-2baaf5435fad",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c5f2e915-9dc4-405a-88f9-f863f0acfe66"
        },
        "item": {
          "id": "f74d7453-8487-4674-9c01-9fabcfe8b504",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "217519d9-56e8-4bb8-abc7-710d878e2ec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a4c62be-f9e1-43bb-a013-b6e5b74455d0",
        "cursor": {
          "ref": "fa37b32d-efb4-406b-a2cb-e1936a9a2d8a",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "0a02f464-eb68-44e1-9742-086bface03dc"
        },
        "item": {
          "id": "5a4c62be-f9e1-43bb-a013-b6e5b74455d0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1e843587-7a35-499d-beb8-653bce24aa9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e06525a-b183-4ae5-99e5-92157a4c113d",
        "cursor": {
          "ref": "a5bd5e3c-df4c-417b-a08d-4ee0eb98b681",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "5963d34f-a700-46f2-bb27-0700131e3b67"
        },
        "item": {
          "id": "7e06525a-b183-4ae5-99e5-92157a4c113d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "1292e923-4520-4cb8-bf24-d3c640a10b78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc33050e-f1b8-4e62-abd9-87de42a33cf9",
        "cursor": {
          "ref": "4e188997-33fb-48a7-ad8a-6b2758d84b59",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "3c91ce38-f08b-4b92-b335-f78977ec6eaf"
        },
        "item": {
          "id": "cc33050e-f1b8-4e62-abd9-87de42a33cf9",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7d658b31-93e5-40df-af08-0428da95546d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7847f2f4-a767-4911-8424-181c8013e3d0",
        "cursor": {
          "ref": "5faf8f55-05b8-4207-96d6-72147fda0733",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "d4a871d4-61dd-46fe-9a80-a2d864bfd9dd"
        },
        "item": {
          "id": "7847f2f4-a767-4911-8424-181c8013e3d0",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "14c4851f-fa76-4e5b-8121-a225b1d11732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1cf2080-a463-4372-b6bb-2a634d79e2a4",
        "cursor": {
          "ref": "7c35bcd9-7bbd-4987-b809-6a484a2b3b7d",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "7c92082c-e326-42bb-91f9-c59be4e15559"
        },
        "item": {
          "id": "f1cf2080-a463-4372-b6bb-2a634d79e2a4",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f6cc9521-2d30-44c9-8ebc-166d077c2898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0ae713d-6f8f-4b63-abd3-481f6cbd29a8",
        "cursor": {
          "ref": "3127d241-968a-4e12-beb8-3430e48f3d9b",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e4adec1a-c3f0-46cb-9885-585f887693d8"
        },
        "item": {
          "id": "f0ae713d-6f8f-4b63-abd3-481f6cbd29a8",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "7a0a0177-1783-4cb1-a47e-ca818c2e716e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ac6f983-ce2e-4717-9ab7-0610b3a236a8",
        "cursor": {
          "ref": "c359213a-367f-4b30-a7c2-91ec6ed2d9d0",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "2c94c690-7361-42e4-89b7-4d7fb0999500"
        },
        "item": {
          "id": "1ac6f983-ce2e-4717-9ab7-0610b3a236a8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4c7c02c9-6712-4cfd-85be-97738974cf71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "215d8389-45c0-43af-82c0-90f6b138d509",
        "cursor": {
          "ref": "d9366233-6311-4e7a-9d59-c19b9c195c0d",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "eeddd921-5aec-4308-bc19-db1de6ac2dc0"
        },
        "item": {
          "id": "215d8389-45c0-43af-82c0-90f6b138d509",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b2e86163-ff04-4ae6-a379-b46b868019b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbc72f2e-2687-45ad-81ba-95657c7da8fd",
        "cursor": {
          "ref": "8819dc32-4ea9-49a3-8981-45fb1f4a185c",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "6700a4ec-479b-46ef-a547-5b8152a49396"
        },
        "item": {
          "id": "cbc72f2e-2687-45ad-81ba-95657c7da8fd",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "60511d3a-1a08-4a02-b8e3-b1044d957988",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a411500-c96d-4081-b481-50e0f01d523f",
        "cursor": {
          "ref": "69ea6193-912f-439f-bd01-234903fc9975",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "61d05774-8917-4251-b9e4-7a407700e3a5"
        },
        "item": {
          "id": "0a411500-c96d-4081-b481-50e0f01d523f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1d4bf182-0f7a-49e9-84f7-bdf75374d519",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "436b1327-6fd1-4da8-91b6-2b3d4f26371c",
        "cursor": {
          "ref": "da3369d9-0fa6-4416-8292-d1779624fcbd",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "17f83cbc-1082-4ac2-a273-eae7bf3679dd"
        },
        "item": {
          "id": "436b1327-6fd1-4da8-91b6-2b3d4f26371c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ff5d4f59-be69-456b-aff9-97612a6fc8c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "310a5d05-3cdf-4c10-bc57-f3bd5d997a35",
        "cursor": {
          "ref": "744e3a97-9b02-4e37-9446-b166a301bb59",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "391b0c72-dae1-46e2-afbb-11a7aa40d306"
        },
        "item": {
          "id": "310a5d05-3cdf-4c10-bc57-f3bd5d997a35",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "cf84dcff-1798-47e6-9bd0-24f723a4e618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df1f9214-ea22-4adb-b71a-1a986c9e30cd",
        "cursor": {
          "ref": "47e99282-87a5-4401-b25a-650af7b2734c",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4d0cd8b2-30b8-4b64-b6e5-dfe3259b81ff"
        },
        "item": {
          "id": "df1f9214-ea22-4adb-b71a-1a986c9e30cd",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d254b607-7d7e-41c1-8f84-22b8d597ef5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "831184b5-a151-4a1e-b4c2-439ccf8925d7",
        "cursor": {
          "ref": "871b3b3d-c332-4554-bfee-2bd8145b8fe1",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "d500b2ea-c531-4b19-948b-eff6bd2530e8"
        },
        "item": {
          "id": "831184b5-a151-4a1e-b4c2-439ccf8925d7",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d7aea891-76b4-4990-b504-c9b2fe8ec993",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96c92379-7800-4330-a151-732b917a5381",
        "cursor": {
          "ref": "de617df7-db2a-4d93-a063-6f65a2620bd8",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8ef9c5d3-1f10-402e-9ff8-b709758d9786"
        },
        "item": {
          "id": "96c92379-7800-4330-a151-732b917a5381",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "d443e816-c8b5-46da-9124-6a4c51a32185",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 122,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "9589b158-bb6a-4f98-8cdb-2b5bbc5fde93",
        "cursor": {
          "ref": "f052cdbd-4791-4b3f-972e-9712ccff0d5a",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "6535186b-1256-4b4b-bdf8-4db46dc23d2f"
        },
        "item": {
          "id": "9589b158-bb6a-4f98-8cdb-2b5bbc5fde93",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "cb2a86da-ab07-42da-a25f-d985b089964b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cf6af00-5184-4205-bd89-babf96f85efd",
        "cursor": {
          "ref": "31ec8ff4-e0e4-4d73-a6dd-9133ce91d450",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f9494492-dbd5-4ad8-bf24-338683bc763d"
        },
        "item": {
          "id": "1cf6af00-5184-4205-bd89-babf96f85efd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1504c343-9c92-449a-a7c6-38c7ebc45913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a95adcfc-fa36-48aa-ba7e-7761da4f3e5b",
        "cursor": {
          "ref": "d7c3be6f-bc4a-4f39-9be8-5b84921ec105",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "103bb41a-ad60-473b-9d5d-7da778c3fc53"
        },
        "item": {
          "id": "a95adcfc-fa36-48aa-ba7e-7761da4f3e5b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4230a6e7-d5ea-4769-9339-ef050090e693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab967494-caca-414f-875e-7a58a7c8bc27",
        "cursor": {
          "ref": "50891779-5501-4c13-95d0-0d3d3d6a70c0",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "1e4b395d-f4aa-4758-8eca-821a2ac6f6a9"
        },
        "item": {
          "id": "ab967494-caca-414f-875e-7a58a7c8bc27",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "cb5da6f6-0169-4a9b-b381-5e98156dd9d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c02b98c-fc4f-47ea-a758-1ba7c1f7bbfd",
        "cursor": {
          "ref": "d9feb66d-fbff-4948-ba84-cfee3d8d5dce",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "67e0ec0b-0f8d-459d-9e06-7c0784ba23a4"
        },
        "item": {
          "id": "3c02b98c-fc4f-47ea-a758-1ba7c1f7bbfd",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9b64ed56-2bcc-450d-85dc-fd8c9cfd1fae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0552a59f-ac4d-42f8-aecd-27f72aca70d9",
        "cursor": {
          "ref": "d59c17a7-609c-4ce8-86a5-cde483bc7d9a",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "c3bb7b43-4454-4f01-885a-10eee2263efe"
        },
        "item": {
          "id": "0552a59f-ac4d-42f8-aecd-27f72aca70d9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "579d5837-86bc-4eb7-afd4-ceb1f7b60dfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9260a62d-7813-49c7-80f6-c12ff652d88d",
        "cursor": {
          "ref": "e6531201-98bf-413e-b6f0-79c1177a43f3",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "05a6b6e5-b87e-4d06-886a-70891ae26dbb"
        },
        "item": {
          "id": "9260a62d-7813-49c7-80f6-c12ff652d88d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "89cf66f2-4705-4a05-aef7-6a1ff8cd1864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73006427-d55e-4f17-89f5-73fd70f3d643",
        "cursor": {
          "ref": "c5d2914d-c886-475e-b111-dfdde842ab18",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "fc956ea7-201f-417d-ab10-c6c24d904952"
        },
        "item": {
          "id": "73006427-d55e-4f17-89f5-73fd70f3d643",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7ac603a2-a3d7-4751-b01e-0895edad1d72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1b32c61-9d7a-4ce1-b8f1-6cdb1d3004ef",
        "cursor": {
          "ref": "98674e32-168f-462c-b531-88508827c461",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8fa8b039-9f56-409c-a1cd-34a2e3c45ab4"
        },
        "item": {
          "id": "c1b32c61-9d7a-4ce1-b8f1-6cdb1d3004ef",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4001b695-f76e-44c9-bd0b-bc3e9c95426f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a3e03cf-65f1-451e-a386-8a127581f3a4",
        "cursor": {
          "ref": "73e74203-81e9-4150-8b52-bbeb2fc28344",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "623a9277-b8f9-4dcc-9bb7-935d7945940d"
        },
        "item": {
          "id": "7a3e03cf-65f1-451e-a386-8a127581f3a4",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "6056eabd-82ba-4c51-bd3d-da08001c974b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a6df9a5-d6e9-4df8-920d-cc796f7910d5",
        "cursor": {
          "ref": "800a20de-9815-4e02-a975-215b712f85ba",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "33c2b403-c573-43ce-b203-a3c691caee15"
        },
        "item": {
          "id": "6a6df9a5-d6e9-4df8-920d-cc796f7910d5",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5ebf488a-3d63-40a8-9404-cce740cc5121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3290c04-2a7a-4914-b7b9-21f08baf3a37",
        "cursor": {
          "ref": "65ed684f-4600-4748-aece-c24355919dfc",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "12866251-9509-4786-a3bc-e8c21af3dfb1"
        },
        "item": {
          "id": "e3290c04-2a7a-4914-b7b9-21f08baf3a37",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "36a9396d-2ba7-4c76-bfcf-49cae7e49748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "154b7e47-b038-43a6-82db-c0ea9ae5d4de",
        "cursor": {
          "ref": "d9314518-e223-4b8c-9d0a-290fb3bfe0a5",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "0a4bf2d8-c9d0-4cc5-a34b-2d96437c9242"
        },
        "item": {
          "id": "154b7e47-b038-43a6-82db-c0ea9ae5d4de",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2f6bab5a-5838-4185-b4c8-65e5309c1f43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9cd4e72-6268-4fb2-a7a5-725059cf2968",
        "cursor": {
          "ref": "f67c89fa-b556-4705-8c34-da403e46fe3c",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "52fcb0d1-dfd3-4b52-8522-8c885479fb49"
        },
        "item": {
          "id": "e9cd4e72-6268-4fb2-a7a5-725059cf2968",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b9c3cc10-0369-4181-8c6f-f7cfdec67795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df58413e-021d-4d32-ae1d-343360f6e9cb",
        "cursor": {
          "ref": "0f6e0f49-b48f-41aa-a69d-673a39a23143",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "47ee88cf-a390-4352-bc77-31108b612009"
        },
        "item": {
          "id": "df58413e-021d-4d32-ae1d-343360f6e9cb",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9aa1ace8-2cb5-4c69-a7d2-d072e0ba2c87",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 123,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "8604e3ec-73d5-4394-abd4-86e061dd7000",
        "cursor": {
          "ref": "5c9bd3ad-da05-4036-ac66-4895cf97782b",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "6441b562-e14e-489b-817c-cf29ff75381f"
        },
        "item": {
          "id": "8604e3ec-73d5-4394-abd4-86e061dd7000",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "09e4835f-775f-421d-87ee-adc176103462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4848235d-6f2e-4e61-b399-55579c297168",
        "cursor": {
          "ref": "563c52f6-427f-47fa-90e8-dc6191234dec",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "ff056630-97d4-43bc-b310-5b3dc7e41693"
        },
        "item": {
          "id": "4848235d-6f2e-4e61-b399-55579c297168",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "600f306b-7532-4ad3-b474-ecc116c4645b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88f628f6-3268-40ae-9d2c-af5e31f1c94e",
        "cursor": {
          "ref": "bf035346-4cbc-44bb-9c9a-14eeed5c89cd",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "089b49de-2f66-4fc3-a3e6-32c4c3cea496"
        },
        "item": {
          "id": "88f628f6-3268-40ae-9d2c-af5e31f1c94e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5253fa24-7663-471d-87d5-3dedf9ce25aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e030444b-b633-4a9b-bd53-026dd8302952",
        "cursor": {
          "ref": "922315ef-fc52-4703-8627-1f740c70f2f0",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "4727e8ea-2fb1-4867-8077-3d365c263469"
        },
        "item": {
          "id": "e030444b-b633-4a9b-bd53-026dd8302952",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9016ccbc-89b5-4d0a-a9f6-4b75a12ea0f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "653e688b-13b6-409b-8254-3f282f008b01",
        "cursor": {
          "ref": "d196bbad-e6b4-4838-8395-08498afb1a57",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "88e7d2ca-b5d8-43a8-aed9-46a86896602d"
        },
        "item": {
          "id": "653e688b-13b6-409b-8254-3f282f008b01",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b731245c-4349-48b9-a556-4b60290fb298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63e1fe5a-964b-4b50-877f-01c08ef9a2b3",
        "cursor": {
          "ref": "9bec683f-2ea3-4767-9299-a9050c40e875",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "6aef590c-fa71-433c-8b25-4e898e49bfcd"
        },
        "item": {
          "id": "63e1fe5a-964b-4b50-877f-01c08ef9a2b3",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "5d1e8ee1-8a5a-4109-9840-c28246666fb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1baf87d7-b397-4063-9971-5a5e52511e74",
        "cursor": {
          "ref": "60b89038-4518-46ed-b8cd-d17208cfe7ba",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "34556624-0326-43b4-8a2c-2e203515fa30"
        },
        "item": {
          "id": "1baf87d7-b397-4063-9971-5a5e52511e74",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "65799648-edd8-42d1-b6ee-11b23593497e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6e7f853-9821-4658-96c9-70f01fe0d023",
        "cursor": {
          "ref": "18467f01-c6e4-4c62-8959-7842d661fa08",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "488decf0-beee-4b19-97f1-6a117e8bcd83"
        },
        "item": {
          "id": "e6e7f853-9821-4658-96c9-70f01fe0d023",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "129ad9ca-e653-4365-8b68-8394a2c0af19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d36a9b3-1182-4476-acd2-b891d20893f5",
        "cursor": {
          "ref": "fbc0eb01-880b-4a04-9a10-1d9a2348daec",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "2c31a185-9d3b-4788-b646-2b2b18cc6a35"
        },
        "item": {
          "id": "6d36a9b3-1182-4476-acd2-b891d20893f5",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "4448b0bf-a278-4405-ae98-81656b4daa4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55c2f194-6b61-4537-86b1-3ebaaf90ef38",
        "cursor": {
          "ref": "903b59dd-7d40-479b-9c17-58f4a752da82",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "2ac2dbeb-ee17-4206-95eb-f5eaceb5fe71"
        },
        "item": {
          "id": "55c2f194-6b61-4537-86b1-3ebaaf90ef38",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "421a199d-2b7e-4c5d-b6df-21eeba74f723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52f9a7bf-1318-4f6d-a10c-64d65ec5bcc1",
        "cursor": {
          "ref": "20be4dfc-2ea8-454c-b5b5-8d5d049165b2",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "a428ee0d-153a-4ee8-a076-a3380f73af08"
        },
        "item": {
          "id": "52f9a7bf-1318-4f6d-a10c-64d65ec5bcc1",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "9bb69f91-f1c8-49d0-94cb-2f848724ed8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3df4cc08-82ca-4f01-b99b-a0dd5d6b9a7f",
        "cursor": {
          "ref": "0fd6af26-4f11-412b-a011-368146c2f399",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "75d4a55f-d3d5-4567-8e1a-6447992b8f6a"
        },
        "item": {
          "id": "3df4cc08-82ca-4f01-b99b-a0dd5d6b9a7f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "129ac3bb-cd3a-4d3a-8966-2364f0c5d45b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e900f4ff-b27f-4e82-8834-4efbfd49ab77",
        "cursor": {
          "ref": "2bebecdc-63f7-41d5-9b39-e067bc329c7f",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "b4728beb-a488-4d27-9a3c-e65f6d55ad60"
        },
        "item": {
          "id": "e900f4ff-b27f-4e82-8834-4efbfd49ab77",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8f0bb305-3594-45ab-8647-06abeb6c877e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53ca6cb9-805c-4803-a635-474df78aa3ba",
        "cursor": {
          "ref": "ecfcfb57-dec6-454f-b5d9-c8576a415761",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ba7a9c02-d8f3-4633-84bd-1cedaa323031"
        },
        "item": {
          "id": "53ca6cb9-805c-4803-a635-474df78aa3ba",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "682dd48d-6920-4a7f-846a-8479426954ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d45a855d-e34f-490b-ae43-43e0b1fba644",
        "cursor": {
          "ref": "51b4afcb-82f3-4298-a09c-925ff692e1ad",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "fae2fbd2-a4b2-455d-9259-474bedab0379"
        },
        "item": {
          "id": "d45a855d-e34f-490b-ae43-43e0b1fba644",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a6fd29fd-ad84-486f-8750-2af6d432a3f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c637a4c-c215-4418-ab0c-95d9ce300e33",
        "cursor": {
          "ref": "71af43df-39c9-4297-8ae1-101cd54ad117",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "ea09d455-da82-403e-a3ec-44171b185030"
        },
        "item": {
          "id": "5c637a4c-c215-4418-ab0c-95d9ce300e33",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "01afca88-994e-49b8-9f6f-d49606bc4180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89809b06-7a33-450c-bcec-948473041dd1",
        "cursor": {
          "ref": "da022cc3-d9b5-447f-b87f-e739e9dbc783",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "490b0d5b-5914-4c3f-9923-f5f64d825b63"
        },
        "item": {
          "id": "89809b06-7a33-450c-bcec-948473041dd1",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e324e867-508d-408e-a8e8-de4d6744e0ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93ff5b00-0602-47db-869d-35ccd149418a",
        "cursor": {
          "ref": "e8c97870-18a4-4abf-b8ca-20746320954c",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "b53bda9f-f891-4b91-98af-dca10893df1c"
        },
        "item": {
          "id": "93ff5b00-0602-47db-869d-35ccd149418a",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "ba3a7a53-2ed3-4c81-96a9-1cfe1a30a970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba33f665-bda0-4e40-b130-5ec6e4372ceb",
        "cursor": {
          "ref": "6ce7a74e-25ce-4bd4-aa88-9af0a4297ab1",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "c9429eca-b977-4454-8824-97d08721a3a1"
        },
        "item": {
          "id": "ba33f665-bda0-4e40-b130-5ec6e4372ceb",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "7420caf2-7902-49c8-bc0b-a1351e52299b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d9eb10-3dc1-442f-9f64-a3b22e1cbdba",
        "cursor": {
          "ref": "62576f35-5c72-4c46-bba4-c221360edf17",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e707b29a-5c48-477e-a2bc-c629e9e1465d"
        },
        "item": {
          "id": "c1d9eb10-3dc1-442f-9f64-a3b22e1cbdba",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "fe306cc4-0e4a-4b5e-b0a4-99db5f511bc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b74e4572-3f0a-47d0-8166-5fb415b24781",
        "cursor": {
          "ref": "74ea5a5d-ba5c-495c-9682-16ede88a2a09",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e52716a3-4a0b-4ae3-a260-44bffc8b2a7e"
        },
        "item": {
          "id": "b74e4572-3f0a-47d0-8166-5fb415b24781",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "5c43045c-da25-42e5-b94d-97ea650446f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66d35f70-8407-4965-a1e5-3d19a9ae4899",
        "cursor": {
          "ref": "f3b84096-b8ff-4bf2-a4e8-6e018bfb25eb",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "57225349-19b3-44ae-b559-3306c4a057e9"
        },
        "item": {
          "id": "66d35f70-8407-4965-a1e5-3d19a9ae4899",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "0f8416a1-5f5f-42c8-9b54-1ef62d752b28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b430272-ab79-48a4-9e61-21e0d3663eae",
        "cursor": {
          "ref": "fc7d6662-6a9b-4ede-bb0a-088ea8e2ac40",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "35c32be3-07fa-4c83-9753-0b87b8924cea"
        },
        "item": {
          "id": "9b430272-ab79-48a4-9e61-21e0d3663eae",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "d9ab8cc2-c623-49b0-a87b-122d0031d2dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ef79cd-248b-442f-9f6e-1bead2bbb2d6",
        "cursor": {
          "ref": "96468610-ad70-4b42-a3a6-36bf73d942ea",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "9bc1b1ba-f9e7-4aed-9b0b-22c70accaa0c"
        },
        "item": {
          "id": "12ef79cd-248b-442f-9f6e-1bead2bbb2d6",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "19956076-7cd0-48ae-ae6f-48208515af75",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb831be0-fec4-423c-9402-c134d6a5bcb0",
        "cursor": {
          "ref": "ddc6fc69-f68c-4f3f-8244-6e7343e5a60c",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b4084a8f-2b87-486a-b114-5d547fb4833b"
        },
        "item": {
          "id": "eb831be0-fec4-423c-9402-c134d6a5bcb0",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "70964204-35df-4769-890e-6e0922851fbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb1589ce-1b89-4615-a18d-b5b12b75f8ff",
        "cursor": {
          "ref": "209e92b4-982d-44a7-bfc8-ebec0c92ab15",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a23bae68-2eda-4e66-88d6-620b6649eed3"
        },
        "item": {
          "id": "eb1589ce-1b89-4615-a18d-b5b12b75f8ff",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "4e5b4b12-39e7-4317-8d06-cdacf90d7e5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2d4b454-9f65-419d-a984-c6d2679e6824",
        "cursor": {
          "ref": "f6925613-c20f-423b-9240-9825aecbf4da",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "923f8412-906b-42b8-bda4-1d690ab43f8e"
        },
        "item": {
          "id": "e2d4b454-9f65-419d-a984-c6d2679e6824",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1adb96f1-13e7-4005-946f-ace13c3698d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83622b2f-99a4-479c-b850-2728d5bab544",
        "cursor": {
          "ref": "e2f862b0-0f33-407b-a305-120b9c8b6715",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d5fd836e-92a5-4ae7-949a-94cb7c8b0833"
        },
        "item": {
          "id": "83622b2f-99a4-479c-b850-2728d5bab544",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "88cf6f78-d1ee-449b-bddc-50758a98802e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9861d30-7c60-4c4e-8caa-e23e5c890cb2",
        "cursor": {
          "ref": "20df4792-0477-4052-9e46-2188627f4aeb",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "e77f754d-3ce8-417b-8798-72241d367be5"
        },
        "item": {
          "id": "a9861d30-7c60-4c4e-8caa-e23e5c890cb2",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "cb9f4c44-62b0-4e39-9f8d-c88c453427c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a675857-ac6a-4910-b914-19200a07fac6",
        "cursor": {
          "ref": "bdeaf25d-cda6-4e1c-b96a-5c3b1374f36b",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "91426d3a-4730-4c3c-a06e-709571aef175"
        },
        "item": {
          "id": "0a675857-ac6a-4910-b914-19200a07fac6",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "78981b36-2a4a-4187-8783-8e7fdb977919",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "138f308e-1901-4dd0-9a60-212e1944350c",
        "cursor": {
          "ref": "5e0cc435-6bc8-4ca4-aa23-cc64311e3c1b",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "8f7b44ec-aea4-4b46-b965-bf6ccde83893"
        },
        "item": {
          "id": "138f308e-1901-4dd0-9a60-212e1944350c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "f3e6dcad-33e9-4708-9f03-7ef525f26b0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef8a816-67b4-4a63-b46e-2ef48b931068",
        "cursor": {
          "ref": "e91fded3-c18b-4894-b005-52aaf91a06a8",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "19be8d3a-6b98-4f9b-a360-491b09d11638"
        },
        "item": {
          "id": "4ef8a816-67b4-4a63-b46e-2ef48b931068",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b659a7e9-48f4-4d33-a8f5-84af3d216aa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eff3e12c-7fda-4e7c-bfe3-8ccf56479949",
        "cursor": {
          "ref": "3927e920-6fb4-4768-a9b1-fae83247e7a3",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "67245e78-2f1f-4a9d-9676-dde538a85567"
        },
        "item": {
          "id": "eff3e12c-7fda-4e7c-bfe3-8ccf56479949",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "5cfa059e-7a8e-44f0-8520-6b5471627638",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "474b4543-838b-4373-9480-7d26f66a9552",
        "cursor": {
          "ref": "dee338d2-55f1-49af-9bf4-dd84557b6714",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "1bc01601-e329-410b-8b30-24d00c81017c"
        },
        "item": {
          "id": "474b4543-838b-4373-9480-7d26f66a9552",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "edab679e-2161-425b-99e2-1a5348b3f791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b150baa-8ff9-4a31-b598-3ada08602101",
        "cursor": {
          "ref": "7721ab58-1bb1-4a4a-bf80-e26b93328751",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "f3c2a231-11d1-4896-9a5f-fd8b64c47b91"
        },
        "item": {
          "id": "3b150baa-8ff9-4a31-b598-3ada08602101",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "47e8d309-2de7-4b56-a3f5-d5e37bebba1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb0d7a50-0f0b-40fd-b2ec-cee38df815e1",
        "cursor": {
          "ref": "6d021ce3-373b-4dc2-a16d-da06be88802c",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "1ff9a463-7cad-4e69-9e1d-d1a18ecbc183"
        },
        "item": {
          "id": "eb0d7a50-0f0b-40fd-b2ec-cee38df815e1",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c52b305d-9ac3-41a9-8334-c510dd0a1b16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 140,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d65213f-e634-4741-80ce-84b0eb3105e8",
        "cursor": {
          "ref": "c7168168-2755-4419-aaf6-de250e0d812e",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f0b18ead-0d4a-4f66-abcb-40edb5e9d66d"
        },
        "item": {
          "id": "6d65213f-e634-4741-80ce-84b0eb3105e8",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "c9d33931-320f-4ab7-86ff-3c1a3856fb29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48e3e4b9-cdca-41f8-9fb6-807355b69d22",
        "cursor": {
          "ref": "5aaefa18-d25c-406c-bad1-60055d0d418e",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "21ddaad8-bbc8-4713-8199-144084cee101"
        },
        "item": {
          "id": "48e3e4b9-cdca-41f8-9fb6-807355b69d22",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "ab060e99-9f44-411f-9c40-d4c00fd08c3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e18a25-d405-407e-a535-93dd6e698fa9",
        "cursor": {
          "ref": "aef3dcf1-f15d-42fb-9935-35270abcf97d",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "56af7c42-268b-4d7c-937d-eb0c695b494c"
        },
        "item": {
          "id": "b1e18a25-d405-407e-a535-93dd6e698fa9",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "9389f5b0-db0a-4981-824c-46d2f674f0f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "980494f8-dc68-49bc-845d-3edb1ef46e1a",
        "cursor": {
          "ref": "0af065c7-617a-4ffe-b2d7-9923db86faf0",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "0f3e93ff-7bc3-4f12-acf8-8126467b64f6"
        },
        "item": {
          "id": "980494f8-dc68-49bc-845d-3edb1ef46e1a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e4bdf909-496f-433f-914a-3cc66f6a1fd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b8a433e-3e3c-4753-aca0-b4a8d766f6ad",
        "cursor": {
          "ref": "f9b6e731-4e74-4a15-b7fd-9166d01248cb",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "21e559fe-5de2-47f2-b7f1-019844b751d9"
        },
        "item": {
          "id": "5b8a433e-3e3c-4753-aca0-b4a8d766f6ad",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a75c001b-788e-45d8-95b2-0d16ddddbf13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49cff776-843c-4f43-9f0f-52d40d8dd198",
        "cursor": {
          "ref": "be34ee24-b103-45bf-9b90-419104d14421",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "95fc8a62-35f1-49f8-8146-73aa588b25bb"
        },
        "item": {
          "id": "49cff776-843c-4f43-9f0f-52d40d8dd198",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "e0d311d5-3feb-48c1-928d-dd7cdfb63520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "938d0eb2-0577-4484-b3cf-796fde61e5bb",
        "cursor": {
          "ref": "fc9c598e-f6d9-4d87-a63e-4113560aa941",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "f85c0e68-fa89-4449-9322-7c22c80433b8"
        },
        "item": {
          "id": "938d0eb2-0577-4484-b3cf-796fde61e5bb",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "8be0c7f2-67e4-4074-9d17-bf5e3c7e96e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c182da47-b3aa-43c5-8109-849b064e9b83",
        "cursor": {
          "ref": "e7938a80-35ac-46d5-85d0-5d90b5b6b191",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "1824b99a-ed20-4e57-99e2-6c88de784869"
        },
        "item": {
          "id": "c182da47-b3aa-43c5-8109-849b064e9b83",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "969c27e4-5852-48ca-99dc-adb2e7dd4e1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "748be3d4-33e6-4b2c-a616-df487417a8ee",
        "cursor": {
          "ref": "3c2c720d-9fff-485d-97c7-807cbb161023",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "6f648328-034a-495f-8e3a-36d04bec8135"
        },
        "item": {
          "id": "748be3d4-33e6-4b2c-a616-df487417a8ee",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "577d71da-23f2-4857-8c90-f9aca0784bb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c3f53c0-aa14-49c9-b584-256a2ea2190a",
        "cursor": {
          "ref": "8d5deb58-7219-4ef9-958b-8ec582441cbf",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "eb02b37b-e465-4fbb-8544-09663938ca80"
        },
        "item": {
          "id": "8c3f53c0-aa14-49c9-b584-256a2ea2190a",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "3a29dce0-cf6c-40e3-948b-2090b98bf479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64743929-3dbb-4ec4-9bdb-d196b3d8d5aa",
        "cursor": {
          "ref": "70bb300f-1f86-46a8-bd19-d92f47bbbcb0",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "8bbdccfd-5979-4e38-b9b0-a30afdb8fb83"
        },
        "item": {
          "id": "64743929-3dbb-4ec4-9bdb-d196b3d8d5aa",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "583d306d-e3da-4503-8861-8be1dc7fdfff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aa31230-cf47-4491-8617-48b7b7b1a509",
        "cursor": {
          "ref": "50715b27-90ea-4b21-8d79-e7123c7ea095",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f2d2ddce-e334-4628-89ae-35059255c703"
        },
        "item": {
          "id": "5aa31230-cf47-4491-8617-48b7b7b1a509",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "22d9b227-f354-47b2-9e7c-046c6777f962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "324c58f3-ad5c-4c1f-9221-a692367c13a8",
        "cursor": {
          "ref": "0b8503b1-e535-4c89-97d4-4e8859b63b50",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c30ed3db-c0cd-4339-b344-1ec025b30229"
        },
        "item": {
          "id": "324c58f3-ad5c-4c1f-9221-a692367c13a8",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "a7d79687-f018-446a-9845-0228acfe346a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad9e52c2-7f0c-4162-9115-138f5fbc1576",
        "cursor": {
          "ref": "51186fbc-4a45-406a-8d99-ee60d7650ad5",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c60c5770-f86a-4e27-85d9-1d62fa6568c7"
        },
        "item": {
          "id": "ad9e52c2-7f0c-4162-9115-138f5fbc1576",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6d1df475-f623-4f92-ab5a-3673fd186512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e977064-f3bf-47f7-bfec-3a666817556d",
        "cursor": {
          "ref": "279e81e0-3439-442d-addc-9861e577d931",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "6dc933e1-1bb8-4aaf-9ebb-ada2c1c5f6f3"
        },
        "item": {
          "id": "6e977064-f3bf-47f7-bfec-3a666817556d",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "a5b61f24-9190-4c9b-a41e-7c0f3dabff4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91f79066-96a2-4485-858a-6e3126d59d0f",
        "cursor": {
          "ref": "87b3b3df-d25a-453f-884e-2b08bf79ce24",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "8b701822-a3d4-4eb5-8073-c022b34970ef"
        },
        "item": {
          "id": "91f79066-96a2-4485-858a-6e3126d59d0f",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a03e953c-cc07-4903-ad64-1c672edb2ff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cb37e4a-ec4f-4cb2-b971-be173fb024ec",
        "cursor": {
          "ref": "4d13cf45-c587-490d-8312-f68eb6776cc9",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "ba3de998-e462-4783-af7d-2c77109067a9"
        },
        "item": {
          "id": "0cb37e4a-ec4f-4cb2-b971-be173fb024ec",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "1e02c513-0d94-4901-81ba-9fb18cc16628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "859320d9-b239-4d02-9059-d166d78bbda7",
        "cursor": {
          "ref": "07c70f0e-a329-436f-9568-7b8af83323ab",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "a3b5c760-afcf-4015-8c7f-dfbb3a8dc0cb"
        },
        "item": {
          "id": "859320d9-b239-4d02-9059-d166d78bbda7",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "215a552e-f9b5-4f25-ae51-d8302741b99f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb1f6d1e-8fce-43b7-a116-335cbf23c4a4",
        "cursor": {
          "ref": "398d9bf9-1b35-4712-8e32-4a8f0059a7a0",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "0f43d28d-e852-4e2e-a3bb-cff8d44c442c"
        },
        "item": {
          "id": "bb1f6d1e-8fce-43b7-a116-335cbf23c4a4",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "cd1c1ef1-3e64-4b2b-9148-16976564116e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d5e03ad-503b-4d01-8f54-4b8102979c06",
        "cursor": {
          "ref": "5b6cbeb3-84bb-44ba-95d3-79c196ff3fef",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "06a93807-4c35-45d1-a947-5ceb149940fa"
        },
        "item": {
          "id": "5d5e03ad-503b-4d01-8f54-4b8102979c06",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4c6620c0-3996-44ae-8964-a33ca1ddaad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31191eb3-be15-4b84-bd85-a96cf21103e7",
        "cursor": {
          "ref": "3cf0e55b-7a62-4e23-8521-caf03baeba17",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f2a12f24-a8da-4cda-a5bc-8b16786c7e12"
        },
        "item": {
          "id": "31191eb3-be15-4b84-bd85-a96cf21103e7",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e5742e9c-0d7d-4db8-a9b7-828cc2a58015",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3cd20d1-622c-40d7-a4e1-730a081ef430",
        "cursor": {
          "ref": "122e2512-e7f5-40a0-a839-90a59414fe54",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4a49ec72-3dfd-4bcc-addc-91cd866178e2"
        },
        "item": {
          "id": "d3cd20d1-622c-40d7-a4e1-730a081ef430",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "77bf23aa-4318-4a60-a840-84789fd98a5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef3bba9-0f0e-4a93-885d-43845e54efff",
        "cursor": {
          "ref": "ac8591dd-c22c-4bae-b6ab-699b93e07fd6",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "4c763035-2a8f-4aca-8b07-7fe42442daf2"
        },
        "item": {
          "id": "8ef3bba9-0f0e-4a93-885d-43845e54efff",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "967d7ac9-96e1-4f15-8248-f21bd4b04a6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "933b624d-8f71-4bc4-b92c-51a6142fdca0",
        "cursor": {
          "ref": "93a12a20-bb86-4dcd-b20f-a8eeadb90939",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "1346e078-f20d-4d41-8f68-8751e0b5daed"
        },
        "item": {
          "id": "933b624d-8f71-4bc4-b92c-51a6142fdca0",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "7bfc5ab8-86c5-49da-a919-66bfb4cb16cc",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "f870f072-f7c2-44a3-b647-df42eaa41322",
        "cursor": {
          "ref": "a840593a-720c-4ef2-a26f-e321d775a3c1",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "4f8fa9f1-9b97-4cf8-935e-c32f9f781dc9"
        },
        "item": {
          "id": "f870f072-f7c2-44a3-b647-df42eaa41322",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "fd628c4a-fac0-46de-ad74-73d0a49a4901",
          "status": "OK",
          "code": 200,
          "responseTime": 213,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "40ba4a66-165e-4383-a8eb-33f81e48fa64",
        "cursor": {
          "ref": "dcd6ceba-5604-4fbe-9a7b-eb2e529191f4",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "9b1aff9b-77c0-40bb-9740-72e61f1e7438"
        },
        "item": {
          "id": "40ba4a66-165e-4383-a8eb-33f81e48fa64",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "32172be1-a395-4aeb-8311-6ea99308d138",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "34cce3d9-b7ba-4470-ab93-101e62c68a5e",
        "cursor": {
          "ref": "b597df88-6a8e-46ee-b766-2195fd65d54b",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "5ae4c952-9306-4c55-a30d-d927bd4f4928"
        },
        "item": {
          "id": "34cce3d9-b7ba-4470-ab93-101e62c68a5e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "01438bba-720c-4556-a075-0724ce094c87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beae5551-0f73-4d1f-878a-f713ac1187be",
        "cursor": {
          "ref": "0b223f3f-3f47-49cd-881a-8d3f11280add",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "673101e8-4331-4b50-9881-6e4012c9e85a"
        },
        "item": {
          "id": "beae5551-0f73-4d1f-878a-f713ac1187be",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "4352cd31-a0ae-4278-bc87-6cb4f296e209",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "8fa31ec5-9701-4937-a41f-dd15dee82e47",
        "cursor": {
          "ref": "9e8e7a32-aa27-4d6a-8e2b-a52f9262ffbd",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "3b6e96c6-3d5c-41e3-bc7f-755d1bf58f95"
        },
        "item": {
          "id": "8fa31ec5-9701-4937-a41f-dd15dee82e47",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "02a392e5-b478-4845-8969-0faa96e277ed",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "0c9b734b-3fdd-4412-abb3-9aef986aefb8",
        "cursor": {
          "ref": "f731c401-f5c4-40b5-b553-b36554ef3ba1",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "39ddc718-fa1d-4917-9671-a0a1e05c9f90"
        },
        "item": {
          "id": "0c9b734b-3fdd-4412-abb3-9aef986aefb8",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "64ee94cf-f410-49a4-9e89-0fdb2c55b9c6",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "d71f12a5-5dc2-4aa3-a553-932b4a7713df",
        "cursor": {
          "ref": "16cc4218-b6ce-429c-9e25-3c870033add4",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "503c3b0a-0c9e-44c6-9caf-eace58fa5a1e"
        },
        "item": {
          "id": "d71f12a5-5dc2-4aa3-a553-932b4a7713df",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d6fa86a4-83cb-4d88-b545-1d1c0d7d40e4",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "b0a985d2-8281-48dd-a4a6-9034bafabd3a",
        "cursor": {
          "ref": "647f38c3-fe10-4b49-a537-226b2c66bd37",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "2f510093-f987-4f21-9b8c-628d501d2c1c"
        },
        "item": {
          "id": "b0a985d2-8281-48dd-a4a6-9034bafabd3a",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "15f10272-5aa6-4b68-8e32-994c37022b1b",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "6082cceb-166f-4fd3-9aae-24cf86448c77",
        "cursor": {
          "ref": "3a579f4f-95d5-4fdf-99c0-ff2530dd44e6",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "36af37b7-cd2b-4095-a9ba-6971ba9928b5"
        },
        "item": {
          "id": "6082cceb-166f-4fd3-9aae-24cf86448c77",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "b26ffa45-72ca-4ebe-a085-ee1f6573f7a9",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "be1ed99a-2ccb-42b7-a873-8536d92c7551",
        "cursor": {
          "ref": "8c76a38e-1e01-42d2-85ae-0d2e29b3e9fd",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "bafb04c1-e3ca-47cb-b14f-29c5f66b94db"
        },
        "item": {
          "id": "be1ed99a-2ccb-42b7-a873-8536d92c7551",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "8c0e966d-1554-47a1-a34a-cde627d5e5fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a9b68d-68b4-4ddd-977a-c57e079bc13d",
        "cursor": {
          "ref": "4f4c15a5-d661-41dc-a390-c712d5399728",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c408f3fe-0508-4f58-b8a3-30b4e21877a2"
        },
        "item": {
          "id": "f9a9b68d-68b4-4ddd-977a-c57e079bc13d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "132c766a-f707-4b39-bd37-571612140483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c67bfe81-1329-49ce-b5bd-62c641e97475",
        "cursor": {
          "ref": "4ac71d7a-34c4-470a-8e3e-1612603336a6",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3dcd375a-f94e-4431-bc4b-05c83ac6bf54"
        },
        "item": {
          "id": "c67bfe81-1329-49ce-b5bd-62c641e97475",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "fa9a555e-a990-41c2-a3aa-51c97d49a868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed42eaf0-7be5-488f-8408-831968249bbd",
        "cursor": {
          "ref": "2ef72b4c-4ef9-4f5a-9203-0acc9a7daebe",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "aee562d0-4a2b-4a3c-a69f-9b7b6d3e1ff4"
        },
        "item": {
          "id": "ed42eaf0-7be5-488f-8408-831968249bbd",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5a2d6fe8-c986-492b-b9bd-1220c3cf0d3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1419c1ae-c3df-4f65-8437-40c3c6f66a53",
        "cursor": {
          "ref": "da741610-b631-4d6d-807b-d335da5b6594",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3c9d5655-1421-4ec8-b799-bf6d3c026083"
        },
        "item": {
          "id": "1419c1ae-c3df-4f65-8437-40c3c6f66a53",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "336e76b2-7025-489d-8107-9cfbf27530d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70d1bbe9-d260-4586-99ab-ccc802c38409",
        "cursor": {
          "ref": "89a2ee63-a37b-4181-89b0-1ed8b01eda4e",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "b2f070a2-ee6b-4371-a0d5-8e6d1bfdf2c4"
        },
        "item": {
          "id": "70d1bbe9-d260-4586-99ab-ccc802c38409",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "3ee14f46-e9d7-4797-be43-31b7e987a76d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5401186a-3763-41e1-9c79-654a7585f54b",
        "cursor": {
          "ref": "498f2e1b-33d4-476f-b752-aad69cccdad5",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "3c787ebf-eba6-406e-b85a-fc23a536ada3"
        },
        "item": {
          "id": "5401186a-3763-41e1-9c79-654a7585f54b",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "96841828-d3b8-4ba1-a527-a1a990a62916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b721e8a-4d4e-4717-8a74-ac4563d2a862",
        "cursor": {
          "ref": "ca17f77e-bcae-4637-a520-c8b377932697",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "432f4b28-7782-4b2f-8072-09c7b3fb1119"
        },
        "item": {
          "id": "2b721e8a-4d4e-4717-8a74-ac4563d2a862",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "57971ab7-4fc9-46dd-8d76-10698fd90bf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e33bb549-f0c6-4f25-93de-59463bfdc8b2",
        "cursor": {
          "ref": "61d5a6b2-7601-4c41-96dd-56eaec1f6201",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "aba357f6-f32f-4ca7-8c3d-e2c4a6141c2d"
        },
        "item": {
          "id": "e33bb549-f0c6-4f25-93de-59463bfdc8b2",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "cf7108f3-85df-4957-81f7-0e27f1ab6ee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0f766ae-2dd3-4c98-8540-f89b2d720414",
        "cursor": {
          "ref": "96996d78-7cea-41f0-a751-02dd3ec58e52",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "ecec4182-098e-46bf-a368-66d72cd06b2d"
        },
        "item": {
          "id": "e0f766ae-2dd3-4c98-8540-f89b2d720414",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "9ed3b858-31ad-4218-8f39-5d37dece1600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1933b8b-905c-4040-9ebb-61065209a50d",
        "cursor": {
          "ref": "d4bdf5cd-65f7-4623-9e85-27a5dd969ebf",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "5dd7f3f9-957f-4521-9bab-46fb9d12b6f6"
        },
        "item": {
          "id": "a1933b8b-905c-4040-9ebb-61065209a50d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ebf9b6ce-b9a1-4ec0-b894-f082ee82855b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8c0d45c-fc46-4246-994e-9d0837aa6841",
        "cursor": {
          "ref": "20d8ea9a-0343-489b-9748-6424787bfba5",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f8bdc831-9f37-4a61-9adf-b0ef0687cb05"
        },
        "item": {
          "id": "c8c0d45c-fc46-4246-994e-9d0837aa6841",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "c48b4632-cf90-4f98-abbd-b28090146e80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "459b731a-fbdc-4eb7-9f6c-8023c63a2d11",
        "cursor": {
          "ref": "b1d098e4-dae7-4962-b3b5-8e36db90087e",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "6fb2d17b-d612-4687-8e5b-dbb07a265f9a"
        },
        "item": {
          "id": "459b731a-fbdc-4eb7-9f6c-8023c63a2d11",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "9efea216-e1d6-4eca-900b-c6c591a40363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4a6eb73-2494-4c5f-8391-91b0e178d06e",
        "cursor": {
          "ref": "26137c57-ce4c-4776-9aa9-ba3a74508d4e",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "2430a1eb-4198-420c-91d3-538970bf4346"
        },
        "item": {
          "id": "c4a6eb73-2494-4c5f-8391-91b0e178d06e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9f190e1c-a0cc-4519-b988-0185ed134015",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "5c4f7e38-a093-48f2-86a9-5dbe13a2b65b",
        "cursor": {
          "ref": "b7722673-c94f-4d96-871e-4ab04cd5f5dd",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f912024a-6cda-42b1-ba2a-d599fe9679ce"
        },
        "item": {
          "id": "5c4f7e38-a093-48f2-86a9-5dbe13a2b65b",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "0640db08-4bbc-4379-a308-e6076b5ff97e",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "bad27ca9-05d3-4a02-8ed5-1581db6551a7",
        "cursor": {
          "ref": "460d699a-d1d8-411c-b4d8-cd6807ab8c82",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7eb91de8-4a68-45eb-b30c-96de91376bc5"
        },
        "item": {
          "id": "bad27ca9-05d3-4a02-8ed5-1581db6551a7",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "635dfba3-787c-42fb-afb2-c070dda260f3",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "dc4cdc89-c49b-4777-8be9-727ae88667bf",
        "cursor": {
          "ref": "dcaf909a-e181-4dd4-8ea3-a1236aef72a2",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "65acb9fe-d897-466a-a33e-78c0e3c39e84"
        },
        "item": {
          "id": "dc4cdc89-c49b-4777-8be9-727ae88667bf",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "eceb739b-8b84-4a65-a49f-78ca95ed9389",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "85fabf57-050c-48d6-a962-975d3cbcfcaa",
        "cursor": {
          "ref": "8be121be-95ba-47f5-995b-141dc619b0f9",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "2f09ebaa-d797-426f-bce3-3afe117f7401"
        },
        "item": {
          "id": "85fabf57-050c-48d6-a962-975d3cbcfcaa",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "dee0d065-5096-44a1-9c13-9080027105f8",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "a6d2930d-33dc-4aab-ac72-dbbbb9e001d5",
        "cursor": {
          "ref": "97b85b94-b1e1-48c4-93ec-30e56dff2644",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "7f8dd1f2-6e6b-43e8-bdff-9a48adcc289f"
        },
        "item": {
          "id": "a6d2930d-33dc-4aab-ac72-dbbbb9e001d5",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d713df7c-2986-4597-a587-995abfafc19b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e33dc6ec-5ae6-45c8-8269-412d051f79b2",
        "cursor": {
          "ref": "03d53056-2644-4044-919c-c927a0d6bc08",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "7bd23c9d-b5df-4887-8347-823fba5c7c6a"
        },
        "item": {
          "id": "e33dc6ec-5ae6-45c8-8269-412d051f79b2",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e4abd75c-352b-47a9-9025-2acba798fe81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ace44d0e-389c-434a-b5a1-fab2aa79901c",
        "cursor": {
          "ref": "b451841d-00e4-417f-b211-6e719aa617d7",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f0c90371-43d4-4a8f-b879-7866b416cca6"
        },
        "item": {
          "id": "ace44d0e-389c-434a-b5a1-fab2aa79901c",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "4a26269b-0e9b-4c26-8a95-9204434c4d7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6c2ebb9-bbfd-4abe-96e3-46d0115d65b5",
        "cursor": {
          "ref": "b01de611-c811-4dd9-ac92-7dd738deceea",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d50d4582-def0-4c88-85f4-39bda9fc6a89"
        },
        "item": {
          "id": "b6c2ebb9-bbfd-4abe-96e3-46d0115d65b5",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "712dd84a-6662-4ec1-b2cb-1df199910f1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e365240b-ba7c-4a73-b84d-c1ddfbfa9ef9",
        "cursor": {
          "ref": "a5626562-df78-4560-8d0e-4d26828e6579",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "16c3ebfe-9ae7-42db-a8fe-fc3c22b64fe9"
        },
        "item": {
          "id": "e365240b-ba7c-4a73-b84d-c1ddfbfa9ef9",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "35884ed1-222a-4d20-94bb-47791c09036c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b306b2ab-32cc-44c6-8f3a-f4345f25e3f3",
        "cursor": {
          "ref": "5063dc7e-9b0c-4d86-a572-22e2342344ba",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1f932953-7e06-4042-b0cc-5250ae70f87e"
        },
        "item": {
          "id": "b306b2ab-32cc-44c6-8f3a-f4345f25e3f3",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "19c9a481-608f-4282-9283-91438e58bc90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d094e31-da17-410f-a57b-bff858b3e883",
        "cursor": {
          "ref": "0e7d4976-2a60-4921-b225-4ef44b9aa2ce",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "5cc0a62f-84cb-4302-9e9b-84bcf02e27ee"
        },
        "item": {
          "id": "7d094e31-da17-410f-a57b-bff858b3e883",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "51d899a1-1bcd-4709-9d50-a4413839920f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97cf6ed0-fce6-43fe-b92f-6c19a5aa3877",
        "cursor": {
          "ref": "86128e4c-300d-40af-a0bd-b42add3e2042",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "676dd579-b5e9-4e95-b8d0-9aa695986900"
        },
        "item": {
          "id": "97cf6ed0-fce6-43fe-b92f-6c19a5aa3877",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "4617fb6c-ae6a-4616-8c4f-641daf07cf8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c38d6909-6b8d-401d-b4cc-e806731d05bf",
        "cursor": {
          "ref": "87ce9396-d4da-4b82-9d5a-7904facad6b1",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "113bc17d-4f5f-4742-a196-a0ab9882a664"
        },
        "item": {
          "id": "c38d6909-6b8d-401d-b4cc-e806731d05bf",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "f31cb119-3ed5-4672-bc6b-4926c56822ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8047ec95-970b-41d8-bf22-1494ff33d5f4",
        "cursor": {
          "ref": "30fb06e9-e83a-4d64-9b23-4a97a523ae13",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "8a350b91-fd6c-403c-a302-352fc758e948"
        },
        "item": {
          "id": "8047ec95-970b-41d8-bf22-1494ff33d5f4",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c398065c-293b-4318-80ef-76d08dd04a59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b918ac24-3dec-49b0-a91a-e85351f362bf",
        "cursor": {
          "ref": "09be374d-61e0-4d22-963d-f560ecf96910",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "c665032d-2748-4585-8966-e6fc0ee89959"
        },
        "item": {
          "id": "b918ac24-3dec-49b0-a91a-e85351f362bf",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "65ff2362-f080-4d8b-93d2-48cc4ca763ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b53e8aad-2117-4d28-8aed-8def16158860",
        "cursor": {
          "ref": "60f6906f-6918-4444-9fe9-3fe3d4fab3df",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "096dd905-bb17-4470-b8f8-cd672f8c347b"
        },
        "item": {
          "id": "b53e8aad-2117-4d28-8aed-8def16158860",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "e78db122-0071-4f85-83e1-f809b7b1d5bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d3456f4-58be-4e4d-ac05-885839d6a88f",
        "cursor": {
          "ref": "409bed35-2c35-4327-8688-78adcaf5f550",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "4061a1b9-81d1-4012-aea0-b6ca5a7cf80a"
        },
        "item": {
          "id": "6d3456f4-58be-4e4d-ac05-885839d6a88f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "99eee853-e2f1-4bb1-b519-37567217e5e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c955b740-1517-45f4-bfe9-49ba500871d9",
        "cursor": {
          "ref": "af71da5e-9520-4abf-8374-234459790cf8",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "4f27748c-4bfb-4322-8c00-611cff665a0c"
        },
        "item": {
          "id": "c955b740-1517-45f4-bfe9-49ba500871d9",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "28b84174-9f76-416f-a075-ee71a7829a94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b61f2494-007c-45ce-9360-e26e4499d8ca",
        "cursor": {
          "ref": "9da91239-b205-42c4-8e44-c53c2db3da59",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "6b9c42ea-2eb5-4190-900c-3345b29420e7"
        },
        "item": {
          "id": "b61f2494-007c-45ce-9360-e26e4499d8ca",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "5abc6200-9828-43b2-8017-6fd0b51415a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a27079c7-28ec-4a12-80e0-05ab5bae27c6",
        "cursor": {
          "ref": "b5e3507a-9ca1-45f0-bec7-f6c508d7a80f",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "d03ee6ae-2d78-426f-9957-b11b8166d106"
        },
        "item": {
          "id": "a27079c7-28ec-4a12-80e0-05ab5bae27c6",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c705606b-5176-4f5e-9617-47bb6599e27b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1c33c6d-9129-4c12-8a1a-9822c5c0e8ef",
        "cursor": {
          "ref": "41186904-a778-4b4a-ab0d-a8bd07e90006",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "b03df3be-3a86-4dbe-89c3-07ebdef4ff67"
        },
        "item": {
          "id": "d1c33c6d-9129-4c12-8a1a-9822c5c0e8ef",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "08bab9a7-252d-409f-b690-990b4333ccc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f0b74d2-0443-4339-aa6e-676b16c2c143",
        "cursor": {
          "ref": "149225ea-5758-4e4a-a969-d72c029d48e0",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "2f37090d-4079-49ba-b0ae-ac4c9d56ce5e"
        },
        "item": {
          "id": "9f0b74d2-0443-4339-aa6e-676b16c2c143",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d0dbab2a-7559-48d8-90b7-c516959a6cd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0804f82-8562-4d40-8458-4473e2ff6b18",
        "cursor": {
          "ref": "152ca9b2-8287-4010-94e7-0fb8428e98ee",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "25a6bd68-936a-4930-b1e7-0b3ffa0cf0fd"
        },
        "item": {
          "id": "b0804f82-8562-4d40-8458-4473e2ff6b18",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "6606600f-4a5c-4eaa-a23b-1f9917dfc893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d377a2c4-40f6-4af5-84d8-39edf2cb1bf8",
        "cursor": {
          "ref": "fadb82e4-9b61-41ef-b105-36c459a347cc",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "288cfe9f-f503-4991-9dba-d64cb7ff9051"
        },
        "item": {
          "id": "d377a2c4-40f6-4af5-84d8-39edf2cb1bf8",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e374ec37-f228-4041-afb4-8bdca019f388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a34b2abf-ff9d-4b09-b333-d8dcc02d692d",
        "cursor": {
          "ref": "2e16b38e-900e-4f72-b3cc-bd7404ed7b3b",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "2b9d9fde-b0d2-4f9b-9bb9-f9f8e86d4d47"
        },
        "item": {
          "id": "a34b2abf-ff9d-4b09-b333-d8dcc02d692d",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "6b7a52d8-2782-4f04-94e8-a5d6e02cd130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dc7b1cb-822a-442c-8efd-34f581267ddb",
        "cursor": {
          "ref": "9faddb64-887b-46f5-a818-1cb12c8382d8",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "d20ce6e4-29b5-4c72-8fbd-48d64b0fdfbe"
        },
        "item": {
          "id": "2dc7b1cb-822a-442c-8efd-34f581267ddb",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "68a465d2-f212-4477-ad0e-7578d9ac9264",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42e292b0-3ad2-43ad-b7a0-baab3ace558c",
        "cursor": {
          "ref": "d3b474e7-8edc-4834-913a-14deb5c36b67",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "a5ca6565-81e3-488e-8b62-1207ea61b931"
        },
        "item": {
          "id": "42e292b0-3ad2-43ad-b7a0-baab3ace558c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "66fbb47a-6af9-4bba-ae52-0ebbac11ac97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a2e3f87-0fae-49da-9ee2-45a48e0a258f",
        "cursor": {
          "ref": "bd6730b8-edd2-4838-8392-59c644f9b54d",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "208cbbfe-1c50-4a5d-8ab3-173219869385"
        },
        "item": {
          "id": "6a2e3f87-0fae-49da-9ee2-45a48e0a258f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "94e2d540-d7c7-45b3-a62c-95542121b624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "707002ca-e573-40cc-b081-82bfeb7535cd",
        "cursor": {
          "ref": "ee7946e3-baa9-457c-84c2-0622c046e713",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "0f1ff67a-7e33-4642-8a44-08e8bf671e45"
        },
        "item": {
          "id": "707002ca-e573-40cc-b081-82bfeb7535cd",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6c47b60e-7954-473e-bf16-d41e48453d19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2568b3f-3001-4740-b33f-61726530c9d7",
        "cursor": {
          "ref": "5ab07ea3-a89c-4491-8e51-a942e9550151",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "db2882d6-513f-492e-9fa7-bd6b6037f1af"
        },
        "item": {
          "id": "d2568b3f-3001-4740-b33f-61726530c9d7",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "2015af7b-8129-46a1-920f-72cc2315e016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a007828-50d3-4aa7-a848-2b7dcfc638fb",
        "cursor": {
          "ref": "def00cc6-3a75-4d42-9416-ca215116f23a",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "44e526f1-26cb-4960-94cb-3855b68ebd4e"
        },
        "item": {
          "id": "7a007828-50d3-4aa7-a848-2b7dcfc638fb",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "bf76aca8-7c7c-463e-9e1d-9d62de6eccf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c30fa851-cbfc-4938-bb8e-bf0018a78c68",
        "cursor": {
          "ref": "7789ba0d-513c-41db-8e66-67f770ee6fac",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "b82e2a1b-277e-4eaa-806f-963824f25bb8"
        },
        "item": {
          "id": "c30fa851-cbfc-4938-bb8e-bf0018a78c68",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "f792a31d-d641-4d85-b99a-b7c69acbbc7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bb11466-5534-4f57-b517-c5994ae31976",
        "cursor": {
          "ref": "0d947960-330d-4872-a69e-7b1c8ae66c37",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "80582e29-33d7-492e-8938-79d71d253f53"
        },
        "item": {
          "id": "5bb11466-5534-4f57-b517-c5994ae31976",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "2f15f6e7-3c99-47b1-8541-ad097dbb0a48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66cd0fc6-a1f5-41c0-b774-01649ac456ec",
        "cursor": {
          "ref": "ecebd12b-3cee-4d5e-8bd9-3511fc603eb3",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "aa38bc57-da3f-4121-8567-aab1a3015f22"
        },
        "item": {
          "id": "66cd0fc6-a1f5-41c0-b774-01649ac456ec",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "7901ac60-2804-4978-96f1-9087626b5d8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7478abb-2b53-40a8-949f-c59fc8940941",
        "cursor": {
          "ref": "92db3b74-b032-43f4-bb04-3465be3e4047",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "59713a63-f69b-4f42-9c2f-028cc237344f"
        },
        "item": {
          "id": "e7478abb-2b53-40a8-949f-c59fc8940941",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "6e5207ec-5e93-4944-88b8-33a627e59e7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34960a21-8c4a-4535-b0ca-93edcf154af6",
        "cursor": {
          "ref": "1ee36eee-7cdd-4cfe-ae0a-679e5c6c7dff",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "28fbb906-f0dd-4402-9b93-9a70cc698f91"
        },
        "item": {
          "id": "34960a21-8c4a-4535-b0ca-93edcf154af6",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "7e203e5b-e114-4983-8b99-bd76f4d3d3d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c7ffcbd-6cce-41b7-a623-d5bb802cbe11",
        "cursor": {
          "ref": "dbb5d0f8-d287-40b4-a96a-681455ca71e1",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "2f1ae580-5a75-41e4-8d2d-e46368c0f9e4"
        },
        "item": {
          "id": "5c7ffcbd-6cce-41b7-a623-d5bb802cbe11",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "d7eeb6c5-aa20-476c-a1ba-126a66083792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34690908-a3f8-45bb-8284-4ef90d869d20",
        "cursor": {
          "ref": "a6ed1fad-3ea3-404f-8945-6670202ca0a7",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "51618755-ea04-4460-9a44-a48c48ec0afe"
        },
        "item": {
          "id": "34690908-a3f8-45bb-8284-4ef90d869d20",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "5d8f4b21-d26d-4570-a152-178f15e4b00d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cd3d355-fe6d-4a3e-902d-177dff74290a",
        "cursor": {
          "ref": "c970bfea-28a5-4f55-a873-396911f17a04",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "d04f18a9-e0ed-499f-97a8-fa5316407635"
        },
        "item": {
          "id": "4cd3d355-fe6d-4a3e-902d-177dff74290a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e0962c1d-8540-43d9-9eb4-e5baaea8e356",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd15085b-e1d9-482a-acad-724aaa289495",
        "cursor": {
          "ref": "49a1e567-1806-4cd7-9cf5-31549f8215de",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "93ae6768-5ec2-4a6c-af3d-12db1426cd4a"
        },
        "item": {
          "id": "dd15085b-e1d9-482a-acad-724aaa289495",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3d1504a9-c3e6-44d3-990a-25265330427a",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "d0f57b18-de82-4701-b244-a38d64fecff2",
        "cursor": {
          "ref": "9367250c-bc5a-4e53-b170-8c674de529f8",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "41327b89-12ec-44f9-b21e-2a5afe895dc5"
        },
        "item": {
          "id": "d0f57b18-de82-4701-b244-a38d64fecff2",
          "name": "credentials_verify"
        },
        "response": {
          "id": "1c6e12fd-9ad2-440e-923f-ed7f0c8e126f",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e56241e-410e-4e93-8830-aed96d9ea674",
        "cursor": {
          "ref": "d4f9bb4f-ff1d-402d-9a1a-93d4152c76fd",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "6210d76c-8382-4934-929e-9f06e3bd1eef"
        },
        "item": {
          "id": "5e56241e-410e-4e93-8830-aed96d9ea674",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "52782354-a010-4131-aaef-6d41e091b8d2",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "852a05b2-ed3f-4f91-93c6-576fad478922",
        "cursor": {
          "ref": "4884f994-c9fc-49ed-a1b3-bf39e1991c38",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "1ccd0723-d6cd-4206-83c5-79eded060f51"
        },
        "item": {
          "id": "852a05b2-ed3f-4f91-93c6-576fad478922",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c687dfa3-7470-41e6-ad65-5884157b1b37",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "852a05b2-ed3f-4f91-93c6-576fad478922",
        "cursor": {
          "ref": "4884f994-c9fc-49ed-a1b3-bf39e1991c38",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "1ccd0723-d6cd-4206-83c5-79eded060f51"
        },
        "item": {
          "id": "852a05b2-ed3f-4f91-93c6-576fad478922",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c687dfa3-7470-41e6-ad65-5884157b1b37",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e882bedd-9c45-409b-808f-731cbad8ef1b",
        "cursor": {
          "ref": "f4aed527-855f-4756-897f-2056b0896982",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "c320af5f-4427-40c0-8ad6-ebc6b9b54dc2"
        },
        "item": {
          "id": "e882bedd-9c45-409b-808f-731cbad8ef1b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "001350ef-939b-4a1e-a448-e3083ceba628",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29bcb3d1-e512-4edb-a88c-639d4a4a0da3",
        "cursor": {
          "ref": "45bf755b-15b4-4767-b3a8-130be854400f",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "22934f9f-0c85-4401-921a-1916ef946d36"
        },
        "item": {
          "id": "29bcb3d1-e512-4edb-a88c-639d4a4a0da3",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "247a8f9d-f2c8-455c-8d94-ee0bd321cf9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}