{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "643496df-ead2-4802-bff1-ec0bf19cc713",
        "name": "Clear Cache",
        "item": [
          {
            "id": "3a60ede1-ac8e-4af7-a16f-80e3a31c390a",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "97770fa9-7b41-431d-bece-ed9c6487cb92",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1e5cff1d-6238-45a5-b62c-1beb387d0b9b"
                }
              }
            ]
          },
          {
            "id": "0972a886-fc3c-4d4e-bba3-5dc6a1c27426",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "73a1cf10-d034-4c9d-bb6a-7792c5db5cbe",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "24c2f2a0-b3aa-42df-8644-b6e998ab6d3c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "25c9755c-4f09-4cd6-9100-e3a90ad8fd12",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "3a0b770b-78e2-48e2-b3b4-39d20b907f16",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0a593df1-1734-4a6c-a247-3d10f0d35b07",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c5387a0d-4d38-43f0-8490-3fb1260a257d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "570a6fa2-76f5-4fc2-b43c-345e453f5187"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "daa43b11-b0fd-4a32-869e-68b6fb6e05c7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a16b25bb-192b-4648-8ade-c59258983f24"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1dfd82a7-55d1-46d6-8c2c-914c7f6d42c7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d9475b0d-4c2f-4acf-82c0-3a5bd28df109"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "53ccf901-4d6c-40a1-9751-8f9eb909c952",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "3b8ea61d-7c11-48a4-af13-4c6269036167"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c6b85812-3709-46ba-a3c2-538ec0c9570c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ca49ad8f-3eb7-46fc-997d-8169d906f0d2"
            }
          }
        ]
      },
      {
        "id": "388eee68-dc88-47f4-858a-54485f8d8a64",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ae040106-0b0c-42cf-bbc6-9a295a6bb6be",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8ec83917-9b1e-4da7-b3cf-322df2680a16",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5abc1eed-b9d5-4ebd-b905-6688fdd318f0",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae4af7b-62b0-4311-83a8-275ae6796505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a9f61aee-fba7-4ae3-bfad-a230703c5b25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fdfdf05-c440-494c-be24-b67cba73f379",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f8995e4-f5c6-4185-8aca-b4a3f3b4a9f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2b0d9bfe-9e5f-46e5-ae43-48891a0c9048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4914f312-0418-4147-968c-a852a652d1e4",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5d8e1ea-a90c-4c4f-9acb-fc6900762248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "88b598d3-bd80-497a-8174-fdd73d4b7890"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "321ea66e-8e21-4d6a-8b54-daa579aef3a7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c47a73a1-7cd2-4a32-a61d-f76d914d5450",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e45f603-eea3-476f-9335-af12c9836415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "adc424f3-7b0e-4fd9-b047-33dbce8693bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9099edc3-cee1-4b76-a7c6-8f6a9dbb966a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a128ee7b-0e01-416c-b7ca-153511adec60"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ed70dc63-fb9e-489c-a9ef-f28f1c37cfc8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "40992c27-8b3b-42af-9afa-e5f9d2fefadd",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7a20199-076b-40ac-9e5a-9c5c748de6f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "2f3a6d48-87a3-46bd-8469-ce647e93dea6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2c23c8b2-ca5f-4cf5-925e-6f2f1afc9a71",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "484b8273-91ad-4f81-9a35-8973b9766ec3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3b8a96c0-a5be-4c86-8217-99b0d60a1f49",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c02c8faf-311d-441f-94c0-7ed0e627246c"
            }
          }
        ]
      },
      {
        "id": "4f11e03c-5de2-4950-99bb-08e18695b8e4",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "b744b433-ee92-48ed-b3d8-9bd18dcd3e75",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a42d1cb6-ee08-42f5-b869-e46e531471a1",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ff24e979-2fdc-40c1-9591-ee2367bc0cb3",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79df62b-5f10-4821-9bdd-e55b1850ac52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f76f9541-3c65-4d6b-86cc-f57920081890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b8b3d30-aed9-43c8-8081-b45986a6b145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49c387aa-0354-4aca-aa71-a397472abc5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b40265eb-7d99-46c7-a9f5-0ba080a7acee",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ebad6c9-2b2c-464d-bbd3-7fa504083058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34a24246-dadc-4c08-afc1-28ff3dac9c0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dffc615e-193a-4a64-8bfd-e30f52db4367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e4926a43-dba9-4a4e-acbd-c8a6ae79d0ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f022fb-1a1b-4531-8da5-35190f2a8ac0",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54652a96-3a78-41bf-9f92-8123eeb55994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dde4df72-6535-4e2f-9e68-05dda6627b0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f826358f-daf2-40a9-87fd-9b713b6c3cac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db4c6225-c401-4625-81ec-d6db5ac6cf3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0f03715-9cdf-4024-aab9-be399fcb5421",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edea0ed5-c8fe-4ec7-89a0-9aecb21b44e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3fa3504-81d8-4988-9e10-c26dc0c01c55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc83ea7a-0d47-45a7-9f05-8a5b6781de75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "853371a4-80b9-429e-bc13-44780a3080ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d06ddd9-43b1-46ae-8008-b18190d4cdaa",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55f12e19-ea99-41eb-86c6-f7d4c5715394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32c4272e-a87f-4fd8-9c96-d464503b021e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d963721-56b6-424e-8640-53d5bd5b903b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9d4769f-fb71-4a48-858c-bd9530928af7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5c38441-ba83-4238-bb61-d8f2e3056670",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f914362e-145f-49d8-9717-c4d9d5efeea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bab223e5-72d9-4b75-94d3-9e45c293160b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5d03e8f-7bfd-4133-9272-017fcc847808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b819dcb5-cca7-4305-ada7-0fff00827455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8227094-e8f8-4276-b9c8-108ff0225a7b",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b99608aa-0575-4d26-bbf0-96eba1981a18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c3e1817-5439-4f33-9a36-aef5f44562f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f520c67-0f49-4df8-a547-7418c91993c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "adba8561-4908-4399-bf9f-1fb232de55d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f1e1383-9c67-4e8a-adbc-9e8107bcfeef",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbdea3e4-e6c9-44ef-bc3c-c190a19e6231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9438f7a-8cf9-4191-b3a4-3f894068bdb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "592df519-f2c4-4ff5-b077-b2f0da488e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "acfe3adf-25cb-430a-9017-152fe163073f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0482e916-6bf7-453f-94db-894fb3ef5911",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5685a81-66b7-4426-b2bd-6e1f9fd86fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9f45cfd-0db2-4a08-a364-c2a4123dd34b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "278661a8-17db-48cd-98be-a2a92e4fc801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "323a63e6-4581-4440-800e-066e59e23a81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33a8ff1b-0eb3-4eb1-84fa-b808fe7612de",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "245ed77a-1aad-42fd-b614-9ed2ea2a4d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d0d1234-0719-499f-ba72-d14bba711ffd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e13584-b839-41d5-9d76-4f8056ba6cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "800602dc-059f-44bc-a13b-407668ba5b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee6c0bc-62bc-442f-804e-d8ec84e3ed56",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b021df0-1aa9-45d9-b233-41e68eab98c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35d0ce6f-4e59-40e4-a223-d7e9bcf1aa3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd1f91ea-6342-4211-a28a-bb6ad1d07551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7114abaa-d078-4a75-83fe-2c36bb837ea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aa59587-3ca2-442b-a0d4-6d317e1a9dbb",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60c113de-aa15-49d0-aac3-d6a77b79c5e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b801cdf-264e-423d-9d7d-fae7b58d437e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c709340-471e-475d-bf60-45af548aa4a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "846b522b-2a5f-4805-994a-e51c4bcb625d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa11d9f7-0d32-437c-8652-4e18c92e2ba5",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc281d40-c462-4c78-abc1-9f373c31f956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e14cf1a8-2f9c-4260-b872-4b0e43006475"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a552e2be-f42b-4da6-a2da-4193f19d75e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "58425c23-4fef-44b8-92ff-df9025591ff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c675571b-50c2-4b10-a933-f3de97df7b91",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68fe0d51-bdd3-4b18-be1f-8c6a79d38c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfcfc31f-5d78-4fb9-a6d0-a025e5efa89d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2869a642-8b00-4974-a07b-c9e2c0d3786d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "770d2389-f15e-434a-aaea-434ce2fe0789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19b18151-d633-457f-9572-9acc6593365a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f2ae6b-0688-49dc-8f13-fd17a6a22468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "807631b6-beac-4af7-8a2f-d9db2e51a74c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7626ae9-b581-48df-ab94-38dbd52d8c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9924b328-b1df-4d6a-b6f9-e380b7e1ff24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57386b1e-6bfb-4a98-bfb4-d71edee93de0",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa331e2-b12f-42e6-9814-1d74bcdf2d28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfd2dcf0-121e-48ae-a75f-5aeaeb367d31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47b90a1-44fc-4b6a-a5ab-b9184502ea33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92de45ce-0f7f-42c1-a754-81c3fc939079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "269092b5-206a-4c3c-a27a-ece76b4c7ecd",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab586f3-2d92-4f17-ba09-e147e3b8d5b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "648d43e9-07a4-4ce9-81cb-33a94e9d2253"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33e72de5-df97-4f88-a67d-9e944ebdc10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "846087a9-0766-48f4-be1c-36ece93c8be0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2399b21f-0d19-4041-ae52-efbc11daf73d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eea4f0ac-2804-4daf-a87f-fc3b492ffb08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72df4151-2a63-45a7-8b67-00cb838819d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33c59587-578e-48e4-8808-81e2d598e3a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ac44222-e7a6-4705-bc14-b32754848cc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b78ae6d-0a5c-48c9-b957-05e476a26ae5",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f00637bf-1827-44dc-afe8-77a81def30fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa41ec2b-8484-42df-b430-ca259b1c616c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70692165-bd86-49df-9f49-3c2385caf457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ecb19c4d-62cc-4213-9d12-04d5ee736296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ebdf3d7-753f-41ff-b9ed-087749dc4fa8",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "354f4e17-e808-46dc-aa6f-b10f2635b658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35cf7a62-4f14-4bcb-944d-ef761b871275"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce808e07-0b34-4caa-82d2-3d52148c84b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0978f0cf-53b2-4625-b0a4-9978abe1afe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10eed4d5-904a-419d-ab5e-64b5d31cc131",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "419f3a1b-3a1e-425a-a1b4-8407e506ced8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82c12667-8044-4af2-9e99-60e958f31b22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83bf3ac7-1c19-4fda-8ddd-37a009151f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "afaf6942-42d5-451c-abd7-4345272428f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85ba1c27-9902-4843-a570-ea0d65400076",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f0a6cf2-aba6-43df-85cc-e7dd2cf785f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f59187b-0819-4747-a198-be7342957a2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd8ceb3d-e32c-437f-8fcb-d2bf5c584b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "84a9f93d-8030-482f-a260-43e9f994eeda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1f26670-4613-490b-9a6e-19cc62a8dfde",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46dcdff1-8cb9-40bf-81dc-bd7fa6baf70f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3b2306f-8977-4f5f-a99a-57f5c6234c17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27bbc6a1-8348-47d3-8cb9-43ac48ac2d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "60129986-abc9-442f-995f-ab23e59734c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a785de-08c2-4bd9-b9ab-8b2e53d88856",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "402078c1-7211-4f0a-9702-f6f0e0cd6f2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d8ab1b0-bbbb-4c15-a4ba-a22b6b7362b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5be3257e-a5a9-40d4-8316-0302bc113a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa9fca31-98e6-4dc7-bcda-78c194c1c364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83456e7a-6b8f-453a-a926-af20aebdd466",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35137903-804d-4663-999a-8f2d4e9a955c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a87ce0f0-76d6-4409-8142-e1e7406d1130"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc28fed-7ac2-4f6d-9a50-374c1251b094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0304d897-6eda-492b-be87-2cd208ea742b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6ce8eee-e347-4444-b39d-4164d0a94678",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "155724a1-dc7e-4569-84eb-375aedc48501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1c298f7-ba9c-4754-94f8-8c4d8ee59b8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afdda480-f9e3-4a47-a5b2-fd527b6fad53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "00ce8723-01a1-4199-9622-4ba6af26bacb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e4b5288-12c0-4a21-bc65-72ebe3cac346",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cef3a75b-3f26-40d2-962e-38dad39da084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07ed7425-92aa-4a1a-a355-8b24812e9cc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb10b5e-e5a9-4924-9848-9e4a8d33872d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba85c9e2-396f-4317-895d-0d0404527b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6267532-10d9-4667-97a5-3ffef21451d2",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c1ab7f2-567b-4eaf-a132-65beb926a0fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "361975e7-017d-4a72-9ac9-88cbf2936844"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4543382d-3d27-4fb5-93c5-1d243d6d6ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9c578d2-7c94-450a-82de-14b4fa004d02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb3557f-fe54-41a8-93a2-871de4c36b42",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f31f295-aaa7-42ef-84e9-1e272d1e0d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e311a4e5-16f5-4c11-9e98-bf841401ece3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5625aef1-0f1a-436e-aee3-6e524a90da60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "59f8a02c-46c2-4bad-b47b-e3818785eb5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dfcf856-dc75-4b36-af29-728bf06da8b7",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ed69c35-724f-4fce-99a8-ce93dda8ba1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23b16d7a-cdaa-480e-b792-88f510a3a286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d05cc6ae-10b9-42fc-9512-0799e525f1b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "35a1ea73-c356-4ba2-a66f-6b26c3b06fd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "082d3503-7fd7-455c-b750-91cbc66e0282",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47ca6c19-d273-44a9-83c9-b81dcfc7bb61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32c03593-cc65-4c36-b6a0-8b8a46819203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8acdce8a-db93-44ad-be6d-644ec87575cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c2b57ff-ec30-4d6b-84cd-63502aa55453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e99bc847-9158-4903-bb52-4a7ca8821a48",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65626e08-f8d9-4b8c-a428-c68f4597a108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "482f2665-454c-4137-b8d0-1bb010137265"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a2ae04-d094-4865-83bb-79327c117b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "55594ba0-4966-4385-b732-4cb8e0a8d518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e940ec6f-3016-4913-8ed6-d89440c76069",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3477b09e-eb40-4ba4-a7dd-72725b3546a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7df99b9-06d9-4680-b06e-a763ece1571c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe854a98-5d5d-4cd9-b23b-618020faeee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ff1c936-06ac-40f9-b751-64e006ed5509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7242f059-7e71-425f-b093-887907a2050d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8dda9d-6fd2-45ba-9ab2-bf16b9290d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ebdb867-db23-4250-a881-8e27ad4deef1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21fb3378-a18e-4429-8b23-5128a3d4011b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "857f0b78-8029-4020-a4e4-4357d8c9db09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e9f4a5-4f02-4d9b-a141-46cc31a22f88",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45afb86d-e2ad-4f56-8e64-b9e76d89548d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e4a0f9f-0267-4784-b53a-2d96820f483b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a968b1f7-fa33-409a-be29-ac3055af7d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "fd18885d-41e2-44d2-9005-1da94330db09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "325cf4e8-1570-4a28-b0e7-2241d86050bd",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e96cab-586b-4147-bdf4-8a262534a0b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "57fe510a-c8cd-4a08-8ef0-b2eacda374d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beb11fae-99af-49f0-963b-a35cd2f63af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6b586beb-84be-470c-a3ca-b30573b43ea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d176e21-346e-43b6-93cc-0b8bc8f92f3c",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc11ccd5-e78e-43fa-9627-c594d755814a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "312c7993-db1f-43b2-a10d-9e10dd7cb655"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fb4e2c1-0475-49e3-8750-61a1fc18c83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "961a1f11-c2c3-43d1-8381-50f9c2ad8cd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6183cca-97e9-4b72-a0a9-abb173134939",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a843ee06-c3aa-4fde-9842-ec7d4d33ed07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc9f83a6-0cda-4ed1-9d3b-4bb02331bf9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26d18b90-14eb-4902-980e-1e469a48ef7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a56e7f8f-7be7-41a7-abfb-1b98965c4df6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0779243-8c8a-4757-8ea5-6b4ea8a3ce2c",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "387f9e0c-3075-477c-ab7e-d8eb86255818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deb8b986-d7bd-42e9-a143-12f0af88b875"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e559d54e-4693-4aa2-807c-dd8844508868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d962de38-93cb-44af-a0d0-5dda09cf22ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eb6a53d-ae19-47d8-b894-a70d1c636cd1",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b7b918-5e3a-4018-8eed-b57f7c6dafc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62c67e6a-7133-4ede-9487-a6c1418d7386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c548b6f-8ed4-41a0-859d-a4dd8d716244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9878da2f-ebc8-432b-8d2b-a9526416067d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f80005-94a4-4a61-860d-ac71ba2e114a",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a654ee6d-11ee-4e9b-828b-f4d3f1eb3bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72f9c3d1-3c34-4ffe-b254-9296f633faae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5b2b15f-5eec-4306-b5fd-9b98ff868c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2efb359-c03c-47b4-8fa9-3a3ef8009ee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a7e2313-f550-403c-8911-33d5c7058090",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "333463ae-45c1-44e0-805c-131d5b55b71a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d3b853e-8d45-4cb8-9c01-fc82463a10d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b31f65c-3d49-4ce1-9d58-e6d3e6ad6f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "1959482e-d621-4cb9-8838-d78673ceedfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b083710-e514-4126-9bd0-8999ba671c56",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dafbf4b-cfc4-46e1-8e7b-915e6e025993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "882184cc-7969-4da9-91a5-49035d8f04f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a307c48-a737-4373-aa6b-9e9e2a9de22c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce26fa8a-d444-4e6e-ba2a-f2d7786ffc25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5701d8b5-82cf-482f-b18f-e9ff7203db4d",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39d20c1b-c94e-4d7b-96e2-f798bf9f7f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a5f7df8-9d28-4695-99a7-72888c798672"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a655a330-96fe-4eb7-af14-1084743bb8a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "95794dc9-2b50-42ee-98a5-192c9ffb0526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc9cf0a5-fb0e-4f24-b2c2-cff3fa4a9c2e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3630da84-8eba-4d67-a521-d23e26d37320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfb67ffd-fcf3-4d5e-bce7-32a6633024b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a28af88a-283e-44d1-8520-8a910ba43ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d06635f7-3368-42fc-9375-5d0528f33c3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3f176dc-8109-4111-8aa8-c7bfbee4bed0",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f139526-44c6-4a9a-b756-3eb642f1dfdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca315a72-6fc5-48e3-9097-615ecc4e2e4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aeb133f-0655-4e17-9e72-6077dd5b64f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2709cd17-ea71-48b8-b20b-1dd343b21f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2db3ecd-e28d-4500-a849-887faa8c4047",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb64ebde-2b9a-4513-89ba-08c0d740ab9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96241d62-be7d-4256-8611-0a2c658df563"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42ac45c2-8fba-4138-9334-7f6ea4401cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2c45d75-4cb7-41cf-b616-e949deaebfa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d0013a0-462c-4d8b-a24e-012f7fda7579",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a7daa00-5a19-4d2a-ab87-a5e516e3f9e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9400461-9fb2-4238-8344-84f04afad274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae34957-96fc-4de6-885f-59b38f7776c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1e4ee60-4d7f-4fd7-95ab-702340f0598e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea38f5f1-b680-4036-82ff-d0e7a5aae7e0",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f799471-7b6d-4ea1-a37f-f1c2194628d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9456eb1-e301-4f97-8e08-7bc968f1a198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e382a6ef-cc63-4530-b027-80d082c1a502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a538cf2-7179-4390-ac11-de0216105dd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f23415b-98da-48af-a0c8-38316bcf89b8",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf2f6f99-16ef-46f6-a3a8-884df535190f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b511882-1c53-4cde-abab-4bc28444a4d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab419a09-790d-49e0-99bd-aab2f9bd0567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fbc6bf1d-4c2c-4074-bd2e-f164dad74ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da3f8c6-e72f-4621-ab03-7644ab0d5e1b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a5e775e-b1f1-48cd-a6a0-830256242e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a65b718-a30f-498e-9e0e-54ec6eb22284"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f53616-d3de-46ea-b920-ca94808d6671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b48986b-2744-49c1-a1e1-addc4a1cfacd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29455f9c-b7b0-4148-93ae-79e14cb29a5f",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec13aee6-4c66-44cc-a8b7-43336f69f799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c902ad7b-6fef-4995-9a12-ea0ac7ed82ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed2544bf-ddf8-4015-b901-b84320c831ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d597892-df91-40f7-801b-d6bef1525832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a914d2-b981-4582-a304-8e5846917a13",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d70cfb9-22fd-4bc6-930e-86f6149068ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3d6d162-9583-4037-b201-8949cbc902b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b644cc3-efed-42f1-a856-a06ec06613d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f1df090-7505-42b5-8645-55e30543c851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6753175b-4f6b-4cb4-b67f-12debfecdeaf",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab865f2c-687e-452b-abb6-5aa77bdeb71a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70179174-0a14-4451-a7ce-1562b2f274df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "499bc942-e5a6-4b39-9658-181b18d8e3d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "89404c97-104a-448a-8089-7e6779151aaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cfa732a-294a-42fc-84d8-cf02ce12b643",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2977a2aa-23c3-4a32-b4de-873b2670b025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0b4ee8c-4120-4ff1-b13c-5dcd7d90c9c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2902fd03-2917-4ddb-b2a4-10f0bd11e707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "79178aad-df9b-46eb-b9f6-338394afff86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d162153e-37c3-4b78-8b75-eb14ebbf4dc6",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed44d510-3078-47ae-8aa6-5f59bde54c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c170c5d8-262a-4c5a-ab26-77459645f280"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45ea5197-2367-425c-a409-7194b294d219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "bc9c8b9c-fe8a-4b7f-95fd-76f0025e85fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb3f6f72-c922-4ca8-8c5c-ba478b5d886c",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c622f7a3-f372-4bd8-8d56-ed2836d640fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bb184fb-559f-4f45-8d85-010de294aaf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d604f24d-ca0c-4a9b-955f-d0a02875d2d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd100ae0-5218-4ae2-b611-3e4a6cbc4ff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b63dbf1-e9ad-4217-86a8-c1d9ca0cf822",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f011a9e-c78e-46cd-a65a-a711360835dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57f70c15-982c-417e-9560-d756c5c85a67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a07f77-e5b2-4887-acca-ffd1d21c6d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7499cf32-f88c-4564-a154-70c195d8a67a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60715d82-1b67-40b9-a542-307b052674a5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f6b92b-f19f-4262-be99-0c007ca84533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9ed0285-173f-49dd-8e75-f337bf37444d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6079e8a7-0788-4f8b-a993-e39d83292d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "be767758-4208-4abc-b69c-843abe1469ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb6eab8d-91a1-467d-ad49-88af423fd2f0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d63e692-bf4b-4f30-9fa0-ca556cb54b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a479e078-0b53-4edd-a00d-ff8a45e832ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d3a5a6-da97-40a5-952a-584d7de96c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd84bb75-1c9f-4349-a250-0cb354dc12ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70c9d676-4a33-4474-8125-aef1d92a577c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efa7bcf8-fb32-4680-9557-5fa506170e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7555e8c7-45bb-4940-b9db-e43a1db64e16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88708d4b-6dab-4733-b068-a009168cd8b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9fe227cc-9802-4f77-a245-d0169ac8fa53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07164896-5ed1-4033-b8e2-0980cd3bbed7",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89e9c59c-acc6-4f1f-8807-183cd3d43116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac9cfd66-f1f5-4029-a416-15750f10329a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8820f227-6c0b-41e2-b599-513bb360b801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4331d6f4-ba1f-4b98-a19f-66737d99ec40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd87406-cf56-4f2e-9e76-aaa157c953da",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69003249-27db-45d9-aee2-b653ac54709c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9b8f012-5b4e-4221-9f97-315355b1435f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe9f810b-f194-4090-894f-42b8676f8d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "66c1dafb-d33e-4304-a18a-d004c255f1d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aae377b-ffec-4aed-819a-2ba7020ad42c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efa30700-844f-48c4-836f-f5513c134a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3a0c7a5-d14b-47bf-8418-f070e62aa768"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da05ccb5-6ae3-4048-9292-8c7ca0c89a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e572faf-c467-4af6-b7fe-86d89a4729b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50e25574-dff5-4cb3-93a3-dcc8f2d051a6",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "696698d7-5c7e-419d-9be6-b5b7220f44ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f07b210-bb82-4c97-a94c-903beda95373"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36b7ec5e-9cfe-4e51-8e12-80401cf3c5f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed234756-12ef-4125-b880-096401de3b5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba0154a3-f8bb-4fda-b909-7c50d2336e12",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdd3c447-271a-4bc5-a250-fed1bf26004d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2746dae5-2859-4311-84ea-3ab93262d5bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1174d376-f995-4aee-94db-288b39ff4a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "97e330ce-98b0-4ec2-bde4-82199eb997d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "121fe34f-615d-41e1-a0c0-de672889fa3b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0b9432d-59f2-4f71-bd9e-9f430ace28a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c5b06ea-41bd-452b-a877-ee90bd3971a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb39967-32e6-4396-bd1e-5ae68495b209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "463a8799-b9fb-49e0-b231-eb5f8df92fca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d0235bf-923d-43e1-9ecb-8cec1cd727cd",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb4a8339-b096-4ff0-a4c2-8b6b5d5f4f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8508495b-1f85-4753-ac9e-185b13c18f16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5761587f-c52a-4585-9f08-32f6110bdf1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7f0bc06-2584-4376-b066-14d1b0d3fe43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21abec03-19d9-44fc-be58-2b7bf01b7736",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0ebaabe-56be-4bf8-a914-da7d8ecfb3a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13a856fb-67ee-4d2b-b04f-6a55196eff01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8901920e-f386-42e1-a322-fb6d9cd26218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "364e1f57-9e1d-44ba-a1eb-1b7c3e257e0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af42598-95fd-44ac-a16c-d847f1bed1e8",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f8002a-eee5-4d79-b7fa-64fe4c507232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64a4084f-bd61-4421-88ee-3370c12de810"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b6c6580-fd93-4f05-83a2-0866c50170d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2406139c-1a3f-4644-bdff-12634e6331fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daf98f77-3039-4c8a-8337-5d2a3cd210d5",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1f2ca1-3825-4ed8-badf-223a8b9f7d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "614a7721-cf4b-4dbc-9bde-1dc81e9bc0ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc6e616f-4ceb-4466-88a7-e9b46ac45707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8fb88e2-929a-4053-91e4-e6ebfbd4fc66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37740690-f72e-4c45-80cb-d87a79eba2c6",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91576e4d-1400-430a-9416-c9985918053d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6844313a-6129-4455-8ecd-d025dec23c66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb3727d2-2490-4191-a787-43e9da005a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ebc8737-d8a6-43d2-8d58-89589ab5b45d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d7de1e-4469-433e-a732-05f18e5a92e4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c05a7f0e-25da-49b5-a54a-a8e47c65ce46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb9ab13c-432a-4564-893f-28b5d39ef4fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8e02560-dbc4-4c29-b2f3-13aab623411e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "898683df-e241-4199-b9ea-059739a1e8ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6213f6cb-548f-4212-9a3f-d0ad6582ff8b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fb1bc73-399a-452f-a7cc-385d8f6ec272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bfbe85f-4dfb-449c-ae7e-160027138be0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01855639-232f-4577-9f51-90247b73345b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ad7901a2-ba75-4bb7-8a09-75e7034f7844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81488ae2-dcbf-462d-acd4-d2fa4eb7ca49",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87253aa1-1fae-481e-bd81-56bb82fa9a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1407fd4-ac77-4460-8dd1-6d4883590387"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4272ed4d-b0dc-44bf-9bca-5ec6fb107aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6dae232d-108c-4185-bace-fb21db0a6f97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee95b6e-f7d6-4fde-9d08-59f21f3d28cb",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "949bdd07-1ea6-41bd-a9d2-969a9e0dd602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fc4d8b6-afd5-4d8a-8d5f-06d988a68fff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abf86b22-38fb-40ad-bc56-7b74e0a35e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f72dfb6f-e4d3-4fc1-9efc-f7e629aea301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a810190-6ac5-44c9-96ee-afea53e2d46b",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9cecfd1-d597-4d13-b0d2-977ed5401508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fca5447-9b10-4b51-a997-9a110886b7bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03d57545-5a81-490e-900b-11a7ab25b831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "89f12d7b-4d32-4baf-912a-f25406a344cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "698ff83d-626d-40c3-9105-a6ffcc340e80",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db73415-472f-4765-9353-5e4e0fdec2d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6149f459-9069-44f9-8da3-1be361ee89c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "669f5b86-9427-4edf-b03b-ce6b317eeb9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5564257-842c-4882-8730-24cfd969f8a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f73865b-43aa-414a-a8d6-282058a89ba0",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b36f6a5-c918-4d93-bcd7-1aff6786a8cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "850c4cd6-7e01-4200-aa03-36a49532bbc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85b00d7e-4dc2-44ae-bf98-6d38a914c261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "84d3b40b-8bc8-4324-9958-d4274364d5a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "653d523e-0f5c-401b-9598-ffab619a7383",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "262dfdc8-1fef-4920-b070-c5f15e104630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17c6bf2d-ba10-4b12-8da6-3c503c332341"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7c85e4e-a266-4736-9ff6-1a12c636ee75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2ee7d285-312f-4310-8c18-067818a178f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d1f793-7b68-4fc4-b8df-e6154995b721",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe3f714-b942-4176-883d-07f0142e4ed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56a360f3-ef96-4728-981e-bc3c6b63330f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1740e93-742d-45dd-88ea-4b68d5d7c8c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f44af708-96f5-4780-8880-58b1d1d6a9ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02553df5-df74-407e-a8b2-b1a5681161a9",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f799470-a1b0-488a-89e0-e54bb9c556a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b612d35-3161-44d0-8e39-842efbd4a82c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eabe2b35-be08-47b0-9f88-b076d88cce07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fcf436e-0d21-412f-ab39-a64d65b0af89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "804f76ee-e3d7-4984-9d58-ce27fe9a7647",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c81efd89-f17c-4819-8efd-d95e728f876b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7adb6721-b4e3-4afb-ac96-f3f37ca28ece"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2010797d-b24a-44fd-a42d-e389d780164a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "11c8e771-6f5e-42f0-9893-d09b76a0e8e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aea6693-72d6-499e-962e-aac48bae9cd4",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c284e2c-74f5-4f8a-bf0d-b6b7ca7dc5f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0de2c15-8519-4449-a9f6-728006c2f5f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49536716-29ae-41a2-b5a6-c719625a6bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a26692e7-3002-47b9-89d0-ef78c022b238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "368b260b-d213-47e9-9725-e18dbd860845",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9012efa-5eb5-43d7-88a3-1baa4a32614f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "274fdaec-1b78-4951-b39a-7c30918b47b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01c58024-e3fb-422c-968f-2c1f55f0c26b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0771ce7b-e504-4f5c-b479-70178498ab3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "532b0a78-5c86-4377-a47c-653fd6b3e074",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c04aeb9e-4944-4ab2-873e-f518dc51ae55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "833eabe0-684f-443f-9113-f02ce4ef4b4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e399879-3ea5-4715-8027-6337152e40e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a823b08-9838-467c-b740-40c89f6d2322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68d2cac-ce31-4302-9730-80601aabc290",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "878414d1-2be3-4ca2-b48c-bbd9300534af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f918273-4bf8-49df-b1c6-fe8b70fb31a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7a56035-e188-451f-b79e-34a74e544382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5de797fe-51b0-44d1-ba12-ab074155e74d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70ccf39d-11ce-45a9-ba26-f58a6ec2e5f4",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "170570e4-4d71-45fb-a520-1ebc195d0f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "911b4aa5-e4ce-4f9b-a442-f66ba47c8fa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d399fd71-598f-4c0f-8b77-33068601b63c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0241a7eb-945d-4dcd-b4c7-1815043364f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac4389d7-0fdd-4308-a0c6-c7cf41ee58eb",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f844eca0-f906-4526-9f8a-a2d5ffe88e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6561722d-9f99-4147-ab47-2a084d3f77f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b505e7d5-2be2-40ab-83a0-ed1b78dc0da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2e6f847-ff9b-4216-bbaa-400b417d0313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2a961ca-0990-4e2a-9f1f-d11651f05af4",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f94b1d1-61ae-480b-9b37-548a9ef2850c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "079bcd33-b902-4773-b45b-5af4d787b718"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "437f5e69-6c2f-4486-8b3c-9c878f674669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ddc40d23-c553-4fa4-bfbb-e9c6663b2a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50368a5e-8f1c-4133-848c-19b4d1b491a7",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81730a6a-7fc4-4207-bbfb-fe828df4e70f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b3957bf-b8da-41ab-a001-80f702260d0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e44a5060-aca8-4022-8814-c17eabf22a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d6fccb0-c94c-4e8f-864e-91874dd2a9f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5554073f-154f-4df0-9a00-55ba0b051cc8",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c2bec7-6ed4-4693-a207-38efea60b7c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "48600bec-51ee-4992-9086-8ad25d355975"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ff5123f-af71-4a61-9b72-310f5e0f1636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d4b52fde-b04a-4abe-8780-da2507750ea5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f9b23f9b-baca-4603-8af6-7a42f882bc81",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "18a9d603-a11b-4e95-9267-ebb57f15a7c1",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9011d2c6-58b1-447b-a8b9-812db095cd4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4365c284-837a-4d22-bf86-0355a220a0e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "634290b8-0305-49f6-bbbb-556d7580ae9b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "82f8c326-7c5b-47e9-ba65-496a77801704"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "35c3b450-7deb-4fc0-aecb-526d0526dbc1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d9823a5f-551e-47f2-8e02-64db93430aec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e319bf3e-dfae-4ad9-a6b3-d765f7468035",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0eaf6c6-ec5f-48e4-a6c4-7502e26dd2be"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c16fc954-9213-4c76-be2f-62d076a49710",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b016719b-776e-484d-830c-35e2cd267fbc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "781b84b5-c43b-4e0f-bd7e-7d0aa89b5df2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1c013e42-6348-4500-af07-6da6389fd532"
                }
              }
            ]
          },
          {
            "id": "19fa5a85-79d7-4b63-b156-90772e88b9f3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0da8355a-fc19-4377-bd2c-1148e2495b84",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "49594eb1-ceca-4c92-aba4-62abdf7a1bc9",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f143ab4-166f-4825-a049-a8eb83171ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "2d8fe056-f3b0-4ffc-9699-d186eabd5bae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "327df5f7-1559-4731-bae7-df94a5f1d529",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cf2361f-2ea5-481a-b672-fd53708f85cf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a963a6a4-f359-4073-9348-088f9913d05a",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8db0abed-5211-4cfc-84d6-3b6638a75243",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7faaa226-ae3a-4019-b3f6-2ba568de0567"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d3757003-abe2-436f-9566-fcd518f5db29",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1bc7201b-63e4-4c3d-81fd-438b7d76f61a"
                    }
                  }
                ]
              },
              {
                "id": "e3503ed5-3b10-4985-8422-e5a66baa8a16",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5499f321-ade4-4d80-b54c-0d95aa55e5a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5d447e2d-ab9d-4bc9-b52f-4d4603f11258"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "88de5d99-8d0b-4d2d-b5e4-7ccd37caac75",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "32817fa5-cd16-47c3-b944-2a31d48ea10e"
                    }
                  }
                ]
              },
              {
                "id": "d3395744-cda9-47a7-83ba-be4856a0bfa3",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e75e148-0901-4c06-97d0-9b349af01ff2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0edf65c3-07a8-4269-ae22-a092146de226"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f36aed80-3582-42dd-b97e-9d75065be90e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f6363217-8745-449e-b614-a470c5e34b7a"
                    }
                  }
                ]
              },
              {
                "id": "4e4a5151-b6d2-4ddd-a0fd-f243b6415933",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ac586ec-46bd-4654-886d-1896d054d7e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6b07c510-b60c-42f0-9e09-fa41eda760c8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "689a53b2-b55c-4732-8c48-9d47ad775c99",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "d63edb20-94e2-4256-aa6b-e80952191dda"
                    }
                  }
                ]
              },
              {
                "id": "4a9c7496-2393-4279-9cf3-5a6470f6aa44",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "da5e3a8d-04cb-4e54-9909-6f85cfb7095f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ef29fb58-ed2a-4e69-b6be-324b698a3727"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1e8c4147-9d1e-44dc-9832-83f72d4a4dea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ce0f87f8-4b6e-4993-a92a-f273a6b8f208"
                    }
                  }
                ]
              },
              {
                "id": "381285e4-7cc9-4cf8-8be8-afdeca7cacb4",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e9b9ce9f-bfd4-432a-a527-c3f38880b9ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ceb4e8dd-044f-447d-9a1d-a363589426d8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d9522726-adf1-4255-b8b0-fac9321aeab4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a2f63396-0704-4609-8a4a-2e8c1e7cffce"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7a1ae125-2487-4e88-a060-6f801c6f34b5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a65b28ad-026f-4138-aa01-00ed2886e493"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6ed7fa53-bb9a-4b08-97ec-c1906f96bb14",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9f882049-36fb-491a-b7d6-04bcd860e307"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2fc2b4ea-403a-4d55-9817-20ed2b88a92b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "620b6684-3449-45df-8851-11ec03725394"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6cdc35ab-7015-4d88-8f86-6001f8029cac",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "53612f1f-5d84-4ee6-8ae2-1ba556cd7aaf"
            }
          }
        ]
      },
      {
        "id": "03e7075c-6ba1-42d5-8d61-a2c3915b9786",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "cc67ac72-7015-4d5c-9ea2-d6671ff9a591",
            "name": "Negative Testing",
            "item": [
              {
                "id": "293c0be4-a396-483e-8762-c51b160478fb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a469dfc6-96d2-4565-9883-02a4de0448ec",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9997f17d-29fb-4955-bb14-37c36975d298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3206953-bc5f-4875-9751-0bcecc0f3504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63aca3d7-0111-4fdb-be89-e1609967ccb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "064aa5aa-20f9-4e64-bc57-5295eeba6d6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6abd8125-ea36-46d1-a097-25dbd3b8dd4b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f65e3259-a28f-48da-951f-23c0de87e0dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "557b5765-d672-412d-baa9-f7ba08910f09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6044d158-faac-4f4e-be0b-3b20f02b67fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae2d8c68-9049-4fe2-984a-d4aaefd51585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65158f73-265e-494f-a03a-8eaa74223b32",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0160e85c-1fb3-4d8e-b645-95054566986f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6081f453-6c19-40fa-9ad2-352cbff3467d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "addfc37c-6949-48a8-8a58-8989e9133846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "00c217d3-1b93-47db-8440-9442c61890c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fe6a83c-4317-4ff0-9cfc-ab837e00f93a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71287019-0100-4ce2-852f-322e6f6b62fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f022b52a-9e99-481d-b47d-b8c626b11fd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "666a5391-201d-4943-82a8-86d4bd11b539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb5bb0c6-fde7-4af9-b425-f9f2ab5b9fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a18cc4e-3796-46b2-a815-183f26a5a1fc",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "508f318c-4898-4e27-b391-5ec9779b1010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c70e32c-4ede-43ec-a3a3-56fefa4c47be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d2dbd7c-f9ca-4834-b496-b48453903c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "53bbd705-7a0e-42c1-8519-4a8edf93d69c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c61c93-55a5-475c-ad5e-b26a3a3e00ee",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41981ae8-cc66-4ef1-98ef-b15514ca6736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "333702f1-7931-4b5a-a27f-fb0a011279a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4071b2a4-0738-4ef7-be9f-7efbffc53023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8de24918-0cf5-4dee-8402-1a33849eb4f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab640397-1c62-4a2f-87b5-cf6bfd599bc7",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "865b4ee9-3bd6-4f9e-a261-2a51ab5c52df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e97810d3-bec7-4dd0-9a1d-85cd74aa2fb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "856c9289-a804-400f-b340-66a658914bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6bf2dbb-530d-42e8-8046-240e23fb252c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "801f065c-2836-4e29-a8fa-0c0e7d20a38d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd3a16db-fd45-4916-a652-a193ed312671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dd5ca72-6b28-4242-910d-f91342068332"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efedbbf4-2319-4797-bcfc-3713f53bd063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "29c76fe1-6676-4a69-bd15-ca7feb43e7ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83861bde-1895-4dbb-bda8-dae83f123d20",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf9070d4-94dd-41dc-8e36-8efc8bf5ae0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7825a05-e9b3-45ed-b95d-62f8974a975a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae89b7d-65c0-4de7-931d-e7cceae95f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "66fc7af9-0149-47eb-84b9-c5a47c7ff919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16eb8526-6af8-4440-b120-016cab10a358",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e454bbd-0262-4b9f-a6f7-c5064b08b6a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be3ea3de-2e7d-4ae5-8638-991caf35529a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f649f3f4-d8e1-42a3-a914-c9c0b39624c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e2413f1-7580-492f-9784-2a612893e21f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08758a18-7db6-4085-8cd3-902741139759",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dae2ff9-e9cc-49c2-a58f-edfdbd12bc6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83a153f2-cfbd-4689-ad98-96e8d6a582a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0976c3e0-c0db-4d5c-ae84-9ec2fdae498a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "7b61b235-4ce1-4aec-9a63-b9ce2fc9d026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d36dcb-62bd-4dcf-ad5b-c5f916f1f01e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d4c6f2-60c8-44ff-9ffc-0e83a701ef73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77dd9987-188f-4ad1-8f56-b0a9b96ac0bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "088fd8d3-83c9-4a5e-b69f-dd52aee59972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "933c49b0-b7d2-42da-9c65-3deaaf9c94d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e9af3c2-8256-4c9e-888b-7c57a50978ad",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f6ab2d-3100-4bf6-a3f0-c1f3c5ad3e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46b5f506-b156-4395-9c9a-76a55608e360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4fd090a-c6e6-45ac-b140-5b6b713a5f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4ea700c-a75b-45d6-8658-96fa61e27208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd82d37-7c30-4bd8-b860-6711685eed9c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c449f0-3870-4807-8991-df3766970d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56e3e0e4-c3a9-40ef-a143-4b7357a0f334"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d25338-3ee8-4d7d-b516-966ec774ce5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "87fa10b4-9c5b-4e68-bb10-76899a5a266b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "432810dd-c793-4589-8d9d-91608291e5f3",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "554bc362-c315-416f-95be-d4f72d7cb0be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e3df000-ccc6-4571-8e92-e72db2286eb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0816b9ac-e969-4cff-811b-c3b50b967fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cb6c4cd-430a-4464-98a5-8dda3c6eca65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa0971cf-a439-4e83-8c50-ae9564e3fc7b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7680d907-d097-420e-8b52-8709c78c3e13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0630c10-ce04-4644-a000-acd3af64ea0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba8cdccc-fdf3-47a6-af8d-300bcbd8a5bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5e5ed20-5f00-4132-82c9-bf919d44b1d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c10c0ce7-27fd-459e-8218-4388a81b698c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75536b0c-6730-4629-959e-3a33eea5906d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a14f0049-78c2-46ea-814c-04aef63104a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a567f51-dbc2-4b09-b3b0-6df2330fe8d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "664ce80c-52e9-4d59-8823-391c3448b6c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79259933-4f4a-42a1-9768-1d99af41cd25",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a00d11d-0a95-4410-ad8c-8d508a270661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7a5dd13-67c6-41af-a12d-f362f2ee0527"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf8308ef-94b0-4b18-a01c-73b63ce1eb0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6bcfb2b-c65d-4a18-91f8-7720823c8888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e1aa531-2bbc-493b-9d02-394f90991164",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b90057dc-d8a7-47d5-879a-9f97c1970f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f16262d-8b70-4f01-ac90-f548f91b888c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3768ce1-ee90-4355-a57e-29235718b4bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d506556d-ce59-43d7-b499-fc11f40b5014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f97aec-f6fd-48c0-a376-63f9325827f0",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a5890a-cf3a-468a-9972-ffe6f9fa29f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d34a6fab-52b8-4578-8929-ced3d0f3dc18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5131b310-a7a6-4805-8182-f354532844a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41137ee9-9dbc-43e3-95ec-7daf5f7d32a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e35bf7d-1f43-4c91-9862-afe016ef2a53",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65a0b3f4-36ee-4bb3-9ca5-3ec004921180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edd546ab-7d8e-4e28-bc2a-74786fc7bdaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8848ebe7-738e-43d5-8756-7b63cd842b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "165eecc3-8a54-4d99-b406-ea64a9f795e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae220d6-24a0-45f5-bf58-e1218e47e378",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e38a0d-6aa6-4f9b-a688-0f49ade1aa2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4f60fc8-8d74-401a-873e-bfaefcf2cf76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b544b99e-3efe-43ad-8ff8-13a5a70dd01c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d171040d-9e63-498c-8f5f-023dcb1615c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4510be37-80ff-4349-b29c-f2851691efa9",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f26471b-1867-4ecf-b5cd-c1cac2547676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74fc34ac-5c0d-4e97-b098-1d5ce996b1df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51a8c429-a4c6-4f07-98ec-e8e50eeac015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "30c167c0-08e0-4d7b-afaa-8d3fab2a1a35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2cab5a0-23a3-40f4-911c-71a10c033130",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e964319-f358-4b1a-b49b-7a0d55c8fc5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3e0dd64-b8a5-4cf1-bb94-f49b8b46fd6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb4edddc-00db-41e1-9cbb-9dbc8b1e700a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bc2e825-9bd6-4c99-b289-ff815b314f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1125436a-0f78-47dd-86c9-1a3489c26f30",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde6647b-e5d0-4c6a-89c3-f913ae4c459b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8edb3300-edf0-4e9d-b8c4-42e7dbf18c47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71d3879e-5bd3-4c93-9f71-279771208091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a79ea601-2536-4bcc-9eb5-a6127370011c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a5187ac-5f64-4f3d-bd68-7b6542f92e14",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de4cf7b-bb56-498e-a42e-48903fa4598f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d3e0fbf-d9d9-406c-910a-265cb9850a89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9578ac4-06ed-42b3-91c3-c2f9240d5a31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1509128-c0ac-4307-b15d-e4a7f8634870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2a1a756-5596-4eb1-9697-26f0a631ed4b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e136f10-593e-4721-8529-80e3cc5a16d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed5a7615-f911-4732-9262-e64b57377e4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00ecfd79-b389-4599-8112-50d813a53e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bf7a466-e08d-41c2-8f09-b5c638cb2493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "379378db-77a2-473b-97e8-631b60ab0e3e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bead86b2-7fb3-4eab-8092-357acc8c6caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15e08d4b-1ad8-4286-9323-ce794cdb6ae2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a035d598-8968-4614-8d04-24cb43172cd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1e2a6ba-ab01-427a-a639-c100e4645337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4dabfe6-49ad-4695-bc9b-0bdc4295a767",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92445636-8348-4ce3-9119-de7ec973c84e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f333f268-3a45-41ed-8589-c61d6804619b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90ab2168-34ff-4f81-9518-0fe163e37080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99df1a42-b7c8-4907-a7ea-3aa8e41a186e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58e5bb92-e87a-401a-9a79-b15e8f558563",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e9d928-7308-4c9b-978c-df6760bd3490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a41e249d-a025-43f5-9856-14fc87a6a919"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a870bc-5e81-47c2-8341-93f75a99b4ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e746ac7-2d9b-440a-a38a-418b7fbee6bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e01ba666-16c1-4e56-a8fc-3a247d5f837a",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abcd95c5-832c-4c5b-a7e5-b452ff700f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14feb9cf-6c0d-4e99-a814-9f977bfaccdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "950f4ee1-8670-485d-8ba0-5c35a058ca79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "785d5ecd-8be8-4a4c-9129-5516e9a3aeec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ee9e76-3658-4e27-9e42-a0d6b0bb7aa8",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef462936-c088-492a-92ca-cf34a58ee9c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5136d573-eff4-4446-935b-827cf2bcbc89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9effb3c7-411f-4fc6-ab3b-a0e7c4893a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "54c6e1c3-1d80-4b26-93e9-6ba379c38c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8107abd-23e7-4e45-acc9-d26a5277f3e2",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a3327fd-2bb5-4342-b838-7112acc9cea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "506a5958-8038-4af6-abe0-3bbe0ea94740"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daca1dfa-097a-4db5-9e83-64e92a0f379d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "adfe0a15-5a60-49da-be39-94b908722e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f6c51e-69c2-4392-b058-987053ea055b",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "188f2389-cafd-4f92-8eb0-2b4a816293a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73f77a31-e8aa-451b-a65c-e15441b57fd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "563cdb14-a420-4b25-b523-e1cfba292346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "627ce238-73ba-4cb7-9071-b65a09728a6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48103b6d-364c-4f74-84b8-494a8f00bbfa",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b4c4f01-4a69-447c-b567-8a84f3d92b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d04cdcd7-08c3-48f3-a77f-05616e2c05fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7332607-918f-4156-9a1c-75675ce7ca1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ea32b48-afa7-49ce-9c9d-1cdb6e72b711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87e9af7e-cf29-4846-acdb-0962e94b10ce",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f39e273-d7f0-4440-a53b-2abb30c0490c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7c4b7e8-68ed-4867-839c-9c0c4541145b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b7eb62a-7218-4618-977c-96ec9fe5bd39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b5e5608-d4d3-4c5f-8b2a-093265b8289a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9703ce0c-28ea-4520-a87a-951d7e955d7d",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4de5d0c0-ec5f-4af3-90be-dd7037154906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb2b98c0-b6a9-4021-bcf7-40ef7058908d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a54cf7-0442-4519-8dd1-1db4cb0c33d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b695c3cf-3c66-4b2d-b5af-10b6c4701e3a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3aacb2e6-0220-435b-ac22-d075729cd91b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0233c4cb-88c7-4b59-8716-a1fe0556ed4b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3342368-0626-4003-b819-fbc0cd93a0f4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "453344ea-8c73-4c9d-a102-8bf2004f19ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c49e80-9e20-42b5-802f-3732db0ebb4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7111ca1f-693c-46de-8410-d42f785d4129"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a46ad2eb-6ab0-47f9-b3ac-74c59e82939a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7136cd6e-b8d9-477f-a098-5c40102f7a44"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "396174c6-c784-4706-85c9-69cee1968e60",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7ed91cd-fe9a-4677-ac68-97c7af03c69d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1c814e21-74d1-4854-847c-6fbce6068113",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4e0ac2a8-ea60-454f-a86e-aa037447d637"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b43b7a35-35c1-4c6e-9c54-5d77093fef46",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b9f52808-e130-4b3c-a4ea-c659f907e9d4"
            }
          }
        ]
      },
      {
        "id": "d18a503d-b052-495d-ac23-075f6a0ed433",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "a0e7b5ba-6ea8-4fd9-addb-fe74b8b7d4c9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5b0bea8d-f830-4090-acf3-e21e6f640456",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c42e1e23-c6fd-4568-b70f-0bb4788e4fae",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b46d7ab1-a1e4-47b2-ab02-de8a3ca8c2c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9830edbf-6d49-4e71-ad5c-205047ead9bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2951f295-92e5-4a50-95f6-a560698bb02b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36fedfbe-99f3-4622-9c20-cb029b44eb48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f418d445-830b-4080-a95e-591696d60347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d19560e-7cf0-4cea-9501-2cae4d228f06",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec46aacf-2db4-41e5-8e09-f12c640bb55d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56afd997-7b91-44df-b3f7-7140d3eab88e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1544f28c-b200-4187-a3e7-b7ecc0e37fdc",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a84b90ae-d4b3-4093-b8e8-417f37b311d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c580980e-bcc5-4c7d-bd79-f5207d550034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80928db8-40f8-4220-8fbb-ab68325a1542",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "766c3199-ba04-4a50-9d18-2f6f7b4aa5d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64d5f132-8cc4-4f11-8cdb-17c9fda3b42b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "195ec04a-251b-4ff3-9a07-a1277156669d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91f6e08f-1531-4e2c-bac1-d41b35684c78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "918c62ad-a5ab-4e3f-a438-be99f90bb098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bfa8edc-0ffc-4796-8777-69b46b06b147",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71f2c8a9-bad5-47fd-9a02-63763bbb31e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b538b431-81d7-442e-88b9-4264be8facc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "137cf086-192b-4cc2-9f57-ab3dbbbb36de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad40bf20-ca93-40c9-839d-328ea983f8ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d5157f-2d96-4d58-83d2-8a1f2b44d6f8",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8b3231d-5673-4e21-946e-c39024752b00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1db0824-2d2d-4ab3-8870-8567c9eeb52f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69eaf0dd-ebe7-4f63-a826-34590065b64f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92fae92b-b6d0-4fb2-822a-fd95d7372999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dbb1981-3569-4f70-bc36-52e806411eea",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0edeb56c-0375-41a1-b2fa-9767d1168ea7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f57dd8e5-6c23-4dfc-b882-95401f24bbec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e62c8dea-85e3-4d74-a4d3-bf62657a98c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d85342ee-ece3-462c-9781-e97383119515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5723573-49d7-4854-a1bd-49edad1c2b74",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6add598e-ffe5-49f1-9c65-cd00fcc51a26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16fae036-87ef-44ac-a415-dc02eec1e02b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc54277e-a49c-4f0b-87da-6f4e75b528e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1de5df97-5208-4744-9ce9-cbd47416d7e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b222108e-4def-4a20-a0d7-917204c4dd9b",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4815a78b-2867-4b61-b5a5-c318f5f32970",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c6e2359-2ea5-49ac-9a11-a1639edc565e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6087983-5b1a-41b2-af7e-829135c24bbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79598bb3-f3f6-4257-9cdd-956b72821a90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "598966c2-d0cb-40df-9450-73bc431f4814",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e61435dd-c468-4484-b81e-d5dc7d235737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91200448-772e-4828-b38c-e9e8cb103c24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3228b9d2-f155-4e53-b77d-cb80e1cc8c14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2587c8b-85c5-4ccf-b2f6-87f220379e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e269c1c0-38c0-495a-8153-de311c5e3660",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b23778a-6d47-4877-b725-74ef883fa090",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "807f7ab4-6ea4-46f0-a93e-3665e2d32d9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "673c76ac-65f5-4014-962b-5bdd5a3a7451",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3b94ded-a459-4ab5-99d1-f4a489de6394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86066043-e163-4302-bf36-0a8f94aee294",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90c20207-4547-452a-b9d9-f1bbc54c9a51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "284724fc-cafa-4057-a8b6-28906a4ed16a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e0c685-edf2-4d9f-b525-6a8724e52981",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb2ba903-d447-489d-9f5f-cbaf4aeaf2f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a313db-4a38-4861-a095-cb29ee615adb",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65361f94-0dbc-4e6a-a9b8-7375cad87fec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a9945af-26b4-413e-a6f3-ad94cf36200b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e61630-5503-40b8-a9fc-fa7a4fe28559",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61e1fdba-6e6c-477e-b1cd-4f94890d9c90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "138fa457-a82d-4788-bb92-3a89b9d29e7b",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d287fd-957e-4706-8bd8-f8965267a920",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fea97ae4-893b-47da-b93f-67c677b0f38c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b33b3d1b-5ee1-4d3b-8022-6fbb43c11a80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6a4a044-5286-474d-aa4e-447f5b516608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee44f4f5-5ba8-488a-8f22-26a9fffdab50",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b480a6f-718e-4172-a3fc-9acd3dfa70c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cba3264-0e33-474c-8b75-565433267d57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca325ba-4ca2-4e1f-8eaa-e906ae974373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a74aa6c-ea0f-4b63-812a-81091fbde645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4449d21-8c40-4d5e-bb06-2d8ebd144e20",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4178b864-3322-467d-ab5c-1536c46da7fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4deb68c2-ed5c-4a09-be0e-cbd4f61cfa7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "070183a5-b9ca-4e75-a13c-7a6e35eb74a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d02172e-f7c1-4577-86e0-7ff51c1baf0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "541389e7-1ad0-4f3e-bcd8-c88115af4b3c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd69662-3639-43d1-9ee1-671f0cfb6bbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dac3f808-1887-42bf-ab80-4f83173fbaaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed59a0bc-5030-4175-8b30-83d3046c263d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1496d92b-55eb-4db6-a02e-ac7befa1cc52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7077b68e-0999-4f1b-8157-23faa0f2e140",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32137051-0198-45b1-9e59-806e83159f8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8937101-a275-4717-8565-22ee8b56f8c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c26ec73a-c884-4aca-b328-14e1290e5720",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e71a2ce7-1b7a-48d9-996b-2057b20d20bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "644a99e9-86d1-4648-a636-07fbab510967",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4314ca2b-158d-45de-98fb-5cc42da1083f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e80fc5e3-2f01-43a5-ba74-96f1874579e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da5442b0-df3a-421f-bbd6-bacd6b6d36a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "908d51ce-7169-4b22-97f3-54c75bce28ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b1550e-3abd-4900-8092-6e7bcdc1f7c6",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ece233-d41c-4f63-b2ad-ccce73d0000c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c58a052-4416-442b-b703-8beb1a8c5c73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bda41051-369e-425f-84e3-2024195727e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "317dab33-3bc6-46d0-9633-9ac6d5d384c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaf1dadb-a72a-4ddf-8a02-337dcfcaafa4",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d895858-14a9-4a6f-bae9-b7c48d4778e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50635e84-a652-4564-8481-55874af69693"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8275e407-41ed-48f5-8216-67f419a5580c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbb9e549-2d07-4bf2-be39-79deb45644df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdee6e2c-8f17-4691-b5e9-cc8424632f06",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df7d863a-4601-497a-a6ec-67cba9a4f0b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd9f76a6-29dd-45f9-8ed0-c89afc8a072b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b71bb0c2-d907-490b-95d9-417eb9444b09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4ef5747-432b-48b4-9c4c-7239866ca422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7c717ad-c29a-4ed1-87b9-e0cd6dd2d5e0",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cb446d4-3a5c-40e1-a400-72734132b94e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "354bc652-bcde-4bf4-9ca0-69cd28cd0abb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6377153c-b492-4a28-bd92-5b2aeaa8cfd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b348c350-4a56-4d36-b362-08cbffcf1e4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd9c1199-32d2-4733-9249-ca90fb213daa",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d5f005f-0fd0-4e84-b24d-990f865a50ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9618b71d-f3b1-40c1-b9d5-2b3cf079fafc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f10e48fa-6f74-41a3-b8a5-7db349dea98e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6eb7535-4493-4d23-88cd-2c2778d21800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffe97eaa-a731-4acb-8ee3-ecd272a12a16",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c7e6d3a-db06-457c-b3d5-8b870ca5a2ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7509140a-e875-4fb5-ab64-1b3298b3b994"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d60748-818d-4676-9165-5d96bfed9dfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33d71ef1-cdd6-4007-8663-a991627cdda2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb6dcf3c-863f-4372-8c80-3fcfef34bf49",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df258770-2ac5-4961-93e3-1f242246d822",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d786c155-4ae4-4c0e-acde-8cdb65823aa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa81b8f-3b5e-4bfb-94a4-33854e8da960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1f8f8fa-57af-44a2-8d88-9cec0254a98f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "954b9de3-ca76-4f1a-8af6-1adeda53cf84",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9266ef48-0006-41f3-b9e7-83ed55529d0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd6bf5e0-031e-434c-818a-8b162084ec8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b377f6-cce7-48ab-912a-1328fff1e022",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "018156d2-cd22-44c3-b886-87e4234a5d13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe589dc6-0686-414a-b748-a3e0da42a2e2",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2904a59a-cfe8-4892-8e2b-1083c43b7546",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ed4a4b3-e0b5-4583-9264-5b9064585746"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c313283e-8825-4419-b75f-718dc28fdc59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92d7330e-d251-438f-868f-52267b75267c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6886eea9-70a7-42ee-81b9-c3502c2d982d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c64ae93-b78a-4032-b843-8a2d1e20e1ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45d6fbc0-25a1-46ad-8c27-457777c9f2da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a96b884-9c3b-432d-b511-ada8c27f4043",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d3427ac-67de-476f-9e9b-45c181fa5505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1567b46d-db15-4378-a860-5a8a6af2316b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0096d2c0-f384-43b3-bd59-c52868cfb112",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9427eb50-58e1-4a25-bd93-90681d66aee7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a337a40f-987f-4319-9c19-94e91fa7005e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61584a20-879f-4f25-b49d-db2b24697196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eaec4e2-65f5-41ea-8195-bb06869611b7",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1c82915-6df0-40cf-8011-1a7ac1b0cb43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb78ced1-e4cb-43ca-b9c4-7aff0913cfcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "134d41ca-995c-4769-84c5-782d98d67b2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80e6bf4e-6b01-4e4a-86e9-ff9b3dcbe359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9519d696-24e9-4fa8-9170-376aa6d2376d",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1144c1e-a480-4b82-91b2-33fb00a0ab21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4dba892-02b7-463c-be6b-3d937dfd631e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd747af-82b5-4a90-8b99-380d8a3c5259",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "955a75d1-101a-4c6f-967a-6d50e2e06d53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e76dd5-2de2-4b20-b98e-e92d31820d90",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d58fd00-5027-4e29-8045-2a9f46a4ea32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "495fe274-7140-4a8d-b6b2-291fd9f9b33c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e97ba1-b3ed-48d6-9d26-e2dfbc4a0dd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40267c20-16ee-4313-a955-f0d304a9d1d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "666fe75b-e9a7-4b1f-b784-2d0479f1dd57",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c072eb22-73e4-47ef-87ff-ce6e80b34b5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06b70964-f0d3-4525-bc72-b4dba5fbb2c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5c8e0ca-c161-457f-ab0a-a74f88dffb9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad9ec9fa-d780-479b-bc03-efeb6d1e942c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9172939-cb6b-4e81-9436-1bcf5b524008",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b54e2e0-80bf-4ddb-afe1-833c94217112",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ce18660-28ff-4545-8124-836511b28e3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9698898f-d63e-4b41-843a-5ea3eca6b9f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "408cca62-a074-4dae-a827-a50c4a99efe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb257d33-f674-4a56-b933-d1a1b349b81f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fd33390-b7a9-4a53-a167-a31e189c3438",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c5925a7-d039-4fa4-881e-9e9390b71cac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "585458b1-a8a3-4a7b-b06e-90ca54101664",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f8514a1-1122-4a03-9f20-7e099b890aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf2484ca-951c-40a8-a09d-af2653616ea0",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "317e8f82-fa5d-45d6-9d3f-f88584fd63df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f74a85ab-a708-45f2-9e31-7ff3e6e955f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c99aacd4-5fa3-44aa-b60e-3702cd3c0c84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39e56538-f4d9-448a-84b4-3856537451cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40c18d73-0c25-4f9a-9cc7-880c1dc07d0d",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68a59174-465d-4278-8e5f-4f75dd1230c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd65ab1a-b34a-487d-95d0-34883885a078"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c684cd7-938b-4193-94b8-3ae4fe978d93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0ee299d-6993-41f9-b7bf-d67f0b982693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33838509-dc6e-4904-b4d8-9af04c4420f0",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "300a4f6e-ae6e-45f0-be66-d32fcb653378",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "446442eb-f0ea-43ce-8512-9717550e7130"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea5db1ae-77c9-495a-8c8c-47859a7cf1ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7971806-031b-435b-a8aa-96ab1b0b3e97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c31fd6-964a-48be-a0e3-0496a4c10601",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa2329b1-56bd-4417-a586-ce84dc292781",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29c2bf99-d4f4-43ca-8510-6f44b8bf1a9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9954560c-be88-4cc1-a714-bddc8cd93325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7fd03ca-ac95-4712-af24-744142584966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "056d9e78-6e6a-4fca-b75e-f685d940068f",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa84ab36-3675-4818-9ae2-32e504c82f60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9915a40e-8932-4d4f-8faa-fa1475b25604"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "883c9adc-fcd6-4fb0-a941-6d3b6d81edfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a91458c-e3d9-4c2e-a85a-feda27ebac3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef3e6d12-e818-4783-90ae-27fed072218a",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc5a27f-9304-46db-a790-789397b9d281",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91b541aa-76ae-41d8-9a3d-4dda2f30e4b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdc5a0f6-0b09-4bfe-84a6-cd76089118dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d6d5cae-ae7f-4490-8a2f-976752f404df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1328ffaa-1186-4ead-bc88-42e959f6b920",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d07c2e66-260d-405c-b18a-6a3eb6caaf15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c6c760b-0e77-46ae-845c-f74059c59330"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c463a48-e595-4c2a-bd83-71fcd70e708a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25be2c05-b55f-4d32-8e1b-73f25c774856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0f6500c-e12e-4a2f-8f7d-6e19fe75269f",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43e162f2-6318-44dd-b236-2fd4a2e97e48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b38c87f-2c3d-421e-80bf-fc13bf2f870d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae11dab-6812-4ac2-90bb-91b574a7ef76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4901f63c-775f-47f5-8295-5e35a90baf86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "772215c1-83fb-468c-af96-1ecba0840f73",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a84c9f6-13f1-49f1-b030-0cee3c0c6d49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae5f9c2a-e0ab-4af0-86d9-a0e758276e40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3ca21ef-997c-42a6-9a74-aa4b9559a71b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef9bf772-7ee3-42d8-8d3c-661041cc21c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d81de9-ee84-4cdd-b29d-938ba0b9763d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec42c9e-c11a-44d1-b19c-12a7648b3271",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d669860a-8291-4333-bbe4-b2a67221aa6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34211a27-3f3c-408d-9d93-5fde3235ae05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11444594-4aeb-419d-a6b6-e2c23f0db4b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d648e1ab-3bc1-4766-a2cb-f7dc9e9944f0",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3578d1e8-29fd-4d6d-9865-5fefaa01313d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76a8dcb0-5287-44a5-8f66-81faa78b39dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9553667-f28c-4592-97df-caeb02051b8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3431b5e-4fde-458f-9951-3d0727519de6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d71d2f0-3d24-4150-b776-d398109072ed",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd3f01f8-9511-4474-a270-fa5cb9a711f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb3331e6-f732-4967-8f7e-59984b640133"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0509bd90-156e-4061-8c6d-a8db9295b40c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00d856fb-5831-459d-848f-ec1508b0ec75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17f4e58e-2e45-4955-ab43-bfaeb07ddc53",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12d35a4f-f4b5-437e-be7c-0ad749d3b213",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "babf858f-3b84-4f66-bf14-9ad82ec2ff41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92b7cebc-64cf-467c-9af6-13d2580c6325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb46db50-b315-4956-a4dd-3d7388048c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45c1ae1c-3253-487b-9701-065335c0cdbb",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8abdd8d-c805-4eea-9dce-f2601f923f2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35cfb16c-7182-497b-9d92-08e62bd0066b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "701625d4-1e85-4372-a2cf-bc3defcd8771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3205b048-a864-47aa-acca-9ee07df40780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e140e17e-506e-492b-94b6-57650269ecb2",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f17b676a-5041-4873-a5de-2f8868928c91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8455e2c6-7a59-4da1-be6d-d4a226bdea81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df12b65b-1cf5-4f79-81dd-d1a0693287ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c4c301b-ca5d-4d58-89f0-24d9c92af835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac24c2b-3f79-47aa-805a-e960a11c81f6",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebd7fd43-1345-4ea7-8d2d-09e7a8a2a8c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bba8cffb-1430-4fa1-951c-e06cc4fa44a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25607f2f-cd93-4bb1-85c1-0184e381c857",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80f6daae-f63d-4504-baa6-ce97570b5fd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa3c453a-1898-4f1d-981f-4b31503a76ab",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45572800-ee14-4bf2-a3f1-a4f44fbd4b8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b761a150-2a76-42fb-802e-5ca69aa03e7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "553e8434-1f9f-4414-b80c-1610b34c3685",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29c2e41b-0bf9-488c-b5f9-759532c07635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dae2e6b-6d5a-4c6e-bf1d-220854c7c007",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73b06338-96ef-49f7-8bb2-a5965af7968e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a162c71-ea59-44fc-a136-aabe873c26a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8813468f-e2c2-4b7f-8b0e-e68f2f4f3ba0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e2e3375-c323-4874-9b5a-524a5f56c4f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b944293-7402-44d6-aa7e-e56862b3c8eb",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ba2943b-39e8-47ba-8877-6c15bb89d762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95a40247-bbb4-480d-ba32-6d9604765023"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd18a11-ec9b-49ad-ae27-4d36e39256ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64218e2d-0e02-4503-b676-34d839e0750e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af6ab0f-8f09-4754-8815-d79909b93bc5",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "062696bc-921e-41a4-bf66-e2c670ffdfa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df0b6377-ba15-4191-8c33-3c685f31389c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e1968a-bb0e-41a5-925e-0ae1a395c10f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f5ce133-065d-42ab-a8c1-fb3d9b9090e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c71fb4a9-2879-4f26-876d-7a7fd00f9b7c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3df58087-8678-4317-b5aa-6ee095d8af65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0736b23b-67a6-41d4-bb8e-9d66e7ae05fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a92401a0-b878-440e-834f-f278241ee55d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb1e07c7-e818-429e-96b9-7e5fd22b1e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee84a706-0b16-49d2-b3df-e762ea934ac1",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bad90ff5-5e77-40f2-8b6c-53b5e5c35917",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "498bd784-528b-4eea-b542-9f9dbf48086f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f69022-f887-4d29-bd80-1aaa56e94178",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdb7781e-b8f6-4de3-a1b0-140915da0307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e29200b0-bfe7-496a-ade7-2feb136f2e21",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0092fd3b-509f-4ee1-915c-0a289bf9c17b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7511cff7-1bdc-416e-8262-3f3258b1c948"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0fb24cd-b344-43e6-a44b-17d46d823450",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "616ae1ee-0c6b-444d-a71a-84229a3fef77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0b1bb1c-54af-4c8b-a601-1dec9f2e1aac",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1665716f-e7a3-405c-929e-37a350dc2707",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94fe2c07-18d6-4193-9786-6e485fc325eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe72f050-e174-450d-9f5c-c62f982c5a95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55e5d127-f34b-44c5-93fe-d92e4065da6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9873544-71c6-456e-88fa-21b9f137c15d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f98f3936-1e18-4049-b66f-403c4227fd73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1139132-cacb-44f3-a2cb-47e8cda4a848"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "130b13ba-aa55-46d3-9039-ae46d04bc449",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1059d889-1624-4ef4-a3d4-66ead2a89606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8879a893-8ffa-467c-9c4b-19a712746640",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f01b11e-add6-48f3-a79f-083c07843c95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c7f70da-91f6-43b1-8845-bcd03ca8817c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c44d3da7-5f15-4320-86f2-23e20f187283",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c63d3dc-027c-4414-b973-e798015e833d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3d3b51-3622-412a-86db-cb7840b5cc31",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6defd1d-1bee-4a5c-8ce5-d7f71e84a2d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b57f619a-63df-49bf-8f0f-8ef3d5ecaac5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "826c345c-2093-41f5-a2f5-33654ffe6a68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e793627d-3cac-4820-bb31-162edc6d4674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f11a1348-db4e-4ae1-9f21-8ef4741410ba",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8108d71-4330-413a-b2ba-482d8eab766e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcc29431-c20d-43fb-9fc9-6cd8efe4cd93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5466aa-ea6a-46d2-8a0d-532b147f474e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e1f1d7c-bd49-4c12-99af-b67f62ac692e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d6c27d7-cc9c-42fb-a1d8-a31b35910c4d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5edd5033-ad92-42e6-9e09-d701680887d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c909d041-a061-4303-a4ab-83f3eee1bb77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1842308-705e-4ad3-b048-4c2e128f72a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47058b92-4fee-4ad9-b163-9bc2d0935791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "294ef5f0-e17a-4e44-a731-b03f955d25ff",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f18cdeb-70cb-4f12-84ae-afaa6887c90f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8dbb8a00-9f77-4ebe-ba1c-a06b95d6abfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aff0465-62ef-401a-9ebe-0c57abcbb38c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "880e5212-b77c-4214-8282-b2901ae35d41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f98e1159-cc96-43bf-b953-c214b4df6787",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e9be35-2ab6-4bbd-a2ac-89274ff29e0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b8db346-d8f2-4250-a674-cf465b65efb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54f59869-61d2-445b-a8ac-20f56e44842f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5a69fd9-5250-4cf7-b04c-fc63e0863d5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aba2d8f-9ae6-4877-85b2-4a814daf8506",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e040189-4a6f-4c85-b934-e5a626f2f0c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e79f825e-b0fb-4f79-8239-1430a2b9511a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f768398-82b5-48e4-b3f8-6f8a00eb5bfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b76d085-c38b-48b1-ab4f-501b46da23e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "318e4eaf-db5e-4af4-a595-ac258ecfd1c9",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77e7c2a5-ff65-4871-bd3e-80baa0fa3f4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c4ee8e3-52e5-4634-af10-0644a4f96a9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd08a4e7-95a9-46b9-a2b3-bc832430481c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "495fd445-1088-4782-87d0-2570497c93ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14700dc9-6d6e-45e9-9c55-6c48bd174473",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ccfb901-e59e-4c29-9fd2-b66d539ba0d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84f5d893-0668-4fee-b7a3-a5f7095b4f82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a547055-7b90-4e12-bfad-bc335dae167b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d73581db-faf1-4702-914e-6a24d7edd327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b4261ed-ac4e-4c3f-b249-b8fe73d760ed",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5dc2bbf-9276-466e-bd3d-17de6332e30f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15c982ed-c179-40f7-954a-1c3e18cd1b40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20d238fb-b8f0-48ed-8ba5-e28ee1c369fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c622685c-c2da-45f6-b006-9d71ea63ff4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c592eee-1ce6-439c-abef-24fb694cd21f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "041b522e-60b5-4a82-b036-10853bc6581a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd5b26ac-fc1b-41d5-a965-610dbe1d75e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b131f25-604c-4592-98a5-ba3fbf213fe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12fddafd-ab65-4da5-978e-597498ea9a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fe0a0c2-49d4-46a5-aabd-78ed1f40065b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "211b6266-2fe3-427e-bb1a-54ff9a6e5eec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "713afedb-4886-4073-a240-8ec4d4ee15ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b7ceb9-8f2e-4756-b6e9-a3fbdd3896b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffc64ef1-074d-4c5a-b087-f01a5944feef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ab2b81-0643-41a3-8004-eeed5b76176c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c6eefe2-cf87-42ce-99ef-cfd3562b9af9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbb88f05-ba96-4e33-9dba-0b01c8340103"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a60d2495-79c1-447d-9b32-b10abaf881e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2c827f4-a984-4d45-85b0-49ca781b637a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3072d5fe-3442-4632-bfb9-232a57a1b422",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0322b38-21d8-41bf-b7fe-e52a82816646",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bde03521-2dd8-4ba1-8e55-6715eaf23ee8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb188062-61e2-48d7-8c37-4970364df786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "827a3c67-3239-41b6-80d8-a7ab9f515fc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ba4d0ed-74c4-463f-835c-374cb9f8fb47",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "484c81ed-f8b5-4a98-bd9b-63e2b77384ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb1f5956-890f-4bee-b1ad-c43a571a9fa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "288e5d88-815a-4f32-97b0-617b4de11980",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59b7a53b-1eed-442a-a4b0-245e90a4ca74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "970d0ec2-921e-41bf-a53f-fb58fc21335a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33e20081-ff5b-4a7a-b0db-3be915a16d7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a80462c5-e5ac-4f63-be39-2c067d6fdb42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "deaa37c7-d8b4-4504-bacb-021fb0feb95a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd7148e2-3023-4855-a1f1-9006c098fba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9218234a-8af7-4ae8-b310-916bbfce718c",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81592918-b31b-4f12-87a0-923be9b047ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "437a9583-4cd8-4dd1-87aa-8830c4f55552"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9899fd52-6bd7-47ae-872b-2811f5b7f1e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b512196a-127a-4dbe-82e2-1e6ae7a28084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81075178-acbf-4337-af92-f5d6a304a132",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9197bc90-ded6-4eaf-90b4-66fed15ef60a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff2f1e7e-9716-4d7d-b55f-2dcc4a0888b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f12c12-457d-432f-8da9-6cf446c195c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f4cbf56-f037-470a-af15-95a14abea00d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "049551a2-cd6d-4e55-909f-4bdb8063df63",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7da7fcd6-8d0a-4a8e-a2d7-ee8460d3137f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb37f18b-6d2e-43de-ae54-137376efc945"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89dd6376-02f5-43ab-b79f-ca32142d9fdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2050c872-7a6d-461e-b516-bfd66f767255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8f44804-feb7-42c3-92ba-8c71c642172d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f278748-66c6-4dbd-996d-02de223968d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bbf0011-d0bc-4554-90ce-bc2010494086"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d02d837-719d-43ca-aa83-349f45c8ff0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "790c70b3-0c6e-461c-b71f-90be621dc51f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf66109-f994-4461-b33a-57dfe0b92585",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c5605e-542c-4eec-bd69-230bb812ac97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36745d04-5c85-4628-976c-140bb00670e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c094224c-6d55-48ba-b5d4-af00239aa079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8900e08d-7474-4c5c-8a15-16fcc37ff6bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5326a47c-60bb-4cb5-a39f-396c18beb6de",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c0f3d7c-3efd-4099-b393-8f65d7bb8203",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "077c4ae6-a8dc-4407-bcb4-eff14fc95e5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd6026e-30c1-42ed-b193-99e251fb196a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fe6255d-0f5e-470b-a239-8e32e223ebcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c68b872-21a9-48ad-9d40-c54a999ab99f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c15af7e5-39c8-414e-8580-7ea8a02b81d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c58bc629-6cf6-4540-aafe-546121ba8691"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed4e09b3-644b-4e34-82f9-cdf37a7191e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96f2eeb9-e163-49fc-8d9d-d24c3c03a663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db3780f-e00e-477f-85b0-4d57a4cd7c56",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f63d8356-f18f-434b-8b29-5a3c073e7c77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ba2d591-bb9d-4f05-b053-c88e0e9ab676"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9567019e-c523-4e79-a7fd-0427b9de1f85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60f3ac15-cffa-4df0-9e9f-1edacc64fdcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "818b3a8a-dd2e-4969-9095-8f4e76a86fc3",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fda38665-f56f-46b0-9c0d-c8adc4ac6f74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9835887-2528-4b0d-97b6-83b0a85ef3a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3544d43b-38f2-4235-981b-a6fda53c8915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b360860-519c-4c7a-a4ba-0bb782b69f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "535d5c6d-eaf9-4579-a16b-b26ecae6cada",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "677c0ec6-1049-448f-b3fd-9354d9c6ad1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f4c9919-1b2d-44f6-94da-24e62ed60520"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d25021fc-496f-4e8b-b43d-ba1b3147eba5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf2d7ce9-22fe-453f-b6eb-48d07ac84b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a88043-6893-47c4-a132-5dec62a8d87e",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "642d1be3-4947-434f-9632-63918d8e289f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0373eae-5860-420b-9ef1-ba7f0e7c821a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7238372c-d48f-4306-95a6-1904e0e3ffe5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02020984-e302-47cc-9138-16bd3fd90a4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f7023ab-0707-4c77-a31b-30ce3a4a6316",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba3947a2-92a7-4138-91b4-9883673a6d5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d7a897e-50ac-407a-9447-2483d14a301f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd3a8f58-4b08-40d8-9641-6107e007b4eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aee3787-3654-44ed-a606-519f9c4ae68d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa0eda13-3785-43a8-b0a3-c4bfed4a3e3f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c54c9d0a-25b5-4a4f-a603-386dfab180f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82a36ea8-2f1c-491e-904c-1f23a88fb41a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56eaf9ec-802d-4bcf-9da3-c4e5363f7dfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "691f3a03-68d5-422e-b111-ffc367361380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d679e32-8618-4d21-8268-88c3ec16160f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95626346-37fa-4fc8-9c12-f747da82bdaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "550a6e89-b1cf-4c09-81f2-4969dc263bdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bee77996-e914-4812-b58d-0d167b351c22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad8a850d-ff9d-4eb8-b639-eee15e1c0f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "589f232f-8cb5-4dc0-8a28-3d0ac43a7d3f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f31199-28c8-48fc-b1cf-646f908e80c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ce41f8b-5e2f-4ecf-a120-4b574fbae2e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9342939-1b7b-4320-9a85-18ad15fb57cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af45ef2d-b870-4d10-a3ac-d808369bf777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e714b744-bc6f-4bc0-bb29-05b7627c9fc2",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a92dc7-859e-4c65-a5c7-50d635e500ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d98b522-725e-41ed-bfce-20c3c786b920"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17861c70-f3f8-4f35-92c1-729b9dccc73f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "179596a8-306d-4f42-a1d9-aef1931555f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6828647b-e463-451b-a791-5be074fd4b1b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a3e109-2312-4142-8e3d-86c2d71023b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84c9c1a4-3625-4a8f-94b6-a391f6cbb876"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3df7e4c-76cf-4253-a2aa-5fcc4776afa1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43758692-f132-46c0-ab70-125deea8ec2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "060ac80a-824a-4290-ae8c-94b3a7f9e3b8",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d2722d-e758-42ed-a870-cbfbf400845d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "045c851f-80df-4e2b-a265-6cf43850bf7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e2d3dc4-2a0a-46cb-a501-efcb1252c51d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08a4fbc9-5df9-4eb7-8b08-1f9ecc37a198"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "337106d3-ef89-4be7-871d-0855faa88aa9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e12295a-a387-4e86-bd22-496a9c687d1b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "90b48c93-16c1-4033-8311-a77bb4e7dbeb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e79caead-c56b-4cdd-9eff-0633b696db61"
                    }
                  }
                ]
              },
              {
                "id": "72f46b2d-ad9a-4aae-84e0-f2136a844e2c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "51618190-0d55-4c26-bc46-33cc3ae785f3",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecebbd00-41e6-40b6-9541-c7c736db847c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8e33b214-862c-4ab3-bfdd-cb2458e1d37f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad6eb9c8-b7e5-4255-b3ec-f5e150ca3b91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "569b815d-8307-45f4-962c-f1382e0de8b9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7da513a5-ddb4-4190-be30-3af55ff7552b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "26f93891-ae7e-4090-8100-3666ade888cb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c103e01-3a7c-460b-b2ec-1790c66f42f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ddcb192a-02cc-416b-905c-4b0882c371e1"
                    }
                  }
                ]
              },
              {
                "id": "d50bcaaa-b7e1-45ac-b800-291353ab6c0f",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6019138f-a4d4-487d-88f6-40d9ee7f68ce",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5efe8b59-ad20-4ebe-8515-472e56694687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "53cbd0ef-e542-40eb-8b04-056faa66fc78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "053dd97c-b2c1-4c29-b228-134085258ae8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6a2f430-80a5-4228-af24-88779fd8daea"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3c125f4f-6a0a-4133-8941-fc6a9eac344a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bdf21c87-2c4f-45f0-95c4-e9e6d169802b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "65b27fc3-4075-487b-929f-f5bda220191f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "70778577-bfc9-4602-8007-5b73af7f2124"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21d3c98b-8873-479e-9ba6-2b56e3944248",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f81e950b-f13d-4a56-885b-257d07408c20"
                    }
                  }
                ]
              },
              {
                "id": "ecc66210-deb4-4e3c-abfd-1e3c68869caf",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "442ffc90-55c4-4880-ba57-486f5afd0643",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "43bc22c5-b159-4449-b1c8-472dae1ed825"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3080e21b-25d1-43c1-84b5-9c1ffd5c49c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b2b8658b-5e44-430a-b33a-b1682d94e66e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "31b79ea0-ae4d-42f4-a226-975fdea3f532",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "3f1a5d8f-200a-4308-91fa-d557a74fa693"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "62a835b2-0094-4bed-ad47-e324c2589b67",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6d3621ce-bc7e-4d0e-859c-101e395fd71c"
            }
          }
        ]
      },
      {
        "id": "03e2c051-8017-412f-a60e-8e25b7128c6a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "5e79db8e-7c05-48a3-9850-62ef04cc53e9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "837d033e-9c1e-43ee-82a2-4c3d49b124ce",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d44a5612-8ea6-46a4-93ee-49ccb66143d8",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6296360-5bc2-42d3-9e3b-358b6ec5bd87",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d2cd2485-07e7-4ac8-aad9-d00979102166"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65cc5b7a-ba7b-48e4-96df-8110ee73c1c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "62d491f7-97c4-4e80-a142-8ea23ea07c68"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bfffdf02-159b-4b28-8f45-4462a0bf4ef2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b0402a80-ba2c-4813-a123-052b7834f477"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a99920f-1cfb-46c6-800d-96abeda1b574",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dc4e81da-c031-4b2b-ab75-f211c39f340c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4dcd678d-c0af-489c-92d5-62a235b28220",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8b68d90a-a17d-482c-b21c-04d03bcd98e4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "88603bc9-e21e-402e-a197-64754df6cda2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "06d62c18-7cee-4df0-bf7b-f3d06eae455e"
            }
          }
        ]
      },
      {
        "id": "83ac0c13-d407-446d-a180-539507905c36",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "ea501907-65b8-45fe-8899-b6f82ced0ba4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4968d56e-abc6-4cad-a069-918cfd997c0e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c8209879-fedc-4dbd-a5f0-d089f7beadb8",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3697b055-2983-4785-b20f-175d1aa3fd74",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3f9b662-d22a-44d6-b426-4d08575a6f2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ceb4629-3961-48c6-8630-10631dc7cf7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2445a6f-331c-4b63-bf64-a19683bde423"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f9fc37f-4479-4d7f-8a86-3401af36e8d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ef9623e-c3a2-4edc-badc-9a263ff6c53a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d543842-9fd1-4d0b-a7a1-eb4adeef65ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9580e178-6089-41bd-9779-17d3bf4de84a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "925445be-1581-4bb5-a772-8556b4ea5bf2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8159bcb3-e0b6-49d5-89d0-0eabd2c343a0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1ebeb9ff-3b2a-4359-9fdd-ced2302f94bf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "11a185fe-a423-42fe-9c66-af5530cf8eaa"
            }
          }
        ]
      },
      {
        "id": "9f3643a8-6b80-437a-8a39-6f8e75aec702",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "f2de3f4f-3d3d-42f7-8974-a4ca73773e79",
            "name": "Negative Testing",
            "item": [
              {
                "id": "92522beb-253b-47bd-b18d-fed66f14ee7f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "acefb7e7-7fb4-4b52-9179-09d930f1c098",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5864479f-8f8d-4d5a-9199-64578ff9c1a8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9d9fd3d-68ca-407c-be11-ea04076ed2b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eaafcbf-cf3f-428f-b3b9-548eaeb86b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5de05b8d-f8b8-4f6e-a8c7-28077e965497"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b70359f-8fc6-419c-acef-e3173d0d6636",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "59a5e228-7313-4708-80fa-9c1cab2369b2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "132709b4-3775-437e-bae9-2ea57565da01",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ba66678-e730-4462-92b9-dd71f8d720e0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "455e29a9-5792-4516-8541-cde309e8f388",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d6b6d2dd-8961-47e5-acbe-c5e49774ab1c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cd089673-aef2-4e7b-8266-28c06cf20bb2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a2c75887-e891-4250-813f-df272345efc0"
            }
          }
        ]
      },
      {
        "id": "2df5ecd0-460a-47cf-821c-c26a8ec533b9",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "df2ce83f-3ac4-4bb2-a18e-8bedafbb83fb",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "188df0c5-09bd-4d9a-84a5-c9a61e79fa21",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "cf2d07de-51f1-4e51-be53-4826b999ef20",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "99122407-7990-492e-b982-0f8563e48e28",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "752b2cee-d40d-45a5-be38-9d7f62ca40fb",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 70.03174603174611,
      "responseMin": 7,
      "responseMax": 743,
      "responseSd": 87.13011949003743,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1717288825693,
      "completed": 1717288852223
    },
    "executions": [
      {
        "id": "3a60ede1-ac8e-4af7-a16f-80e3a31c390a",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "706d5e34-f814-4b47-a0a2-b83a922b92df",
          "httpRequestId": "949db474-7d5c-4476-8e3b-149dd2e03400"
        },
        "item": {
          "id": "3a60ede1-ac8e-4af7-a16f-80e3a31c390a",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b68a696c-5451-43cd-87d5-32f1b072c1a4",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 0
        }
      },
      {
        "id": "0972a886-fc3c-4d4e-bba3-5dc6a1c27426",
        "cursor": {
          "ref": "ef3a1d29-8c6b-4655-ab51-57d311931d5f",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ce72cdb6-dac5-4cef-91a1-6ccf2db554c3"
        },
        "item": {
          "id": "0972a886-fc3c-4d4e-bba3-5dc6a1c27426",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "6c4d83ca-dd21-45da-a140-480bbd91185a",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "0a593df1-1734-4a6c-a247-3d10f0d35b07",
        "cursor": {
          "ref": "b45f22bc-b82a-4e67-9043-797988f82cc6",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "320cc71d-18ec-47cf-b778-64607b06ad8c"
        },
        "item": {
          "id": "0a593df1-1734-4a6c-a247-3d10f0d35b07",
          "name": "did_json"
        },
        "response": {
          "id": "b2f4d0a2-d29a-4179-864a-14a4c4d2734e",
          "status": "OK",
          "code": 200,
          "responseTime": 470,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5abc1eed-b9d5-4ebd-b905-6688fdd318f0",
        "cursor": {
          "ref": "9a46dc9c-22a9-4d12-9763-2925121ebb02",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "96d99f6a-7519-4d35-9f11-6778a1850e0c"
        },
        "item": {
          "id": "5abc1eed-b9d5-4ebd-b905-6688fdd318f0",
          "name": "did:invalid"
        },
        "response": {
          "id": "a7945a4d-4a56-420e-84ee-4b3a3e4f2711",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5abc1eed-b9d5-4ebd-b905-6688fdd318f0",
        "cursor": {
          "ref": "9a46dc9c-22a9-4d12-9763-2925121ebb02",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "96d99f6a-7519-4d35-9f11-6778a1850e0c"
        },
        "item": {
          "id": "5abc1eed-b9d5-4ebd-b905-6688fdd318f0",
          "name": "did:invalid"
        },
        "response": {
          "id": "a7945a4d-4a56-420e-84ee-4b3a3e4f2711",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fdfdf05-c440-494c-be24-b67cba73f379",
        "cursor": {
          "ref": "a7b632d6-be48-4ed4-a558-ef200cf6df3a",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a45c4609-f81a-44b2-b72c-ad1046bbaa06"
        },
        "item": {
          "id": "6fdfdf05-c440-494c-be24-b67cba73f379",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "acfbe0b2-4f41-4531-9070-da4a5a840abd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 308,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4914f312-0418-4147-968c-a852a652d1e4",
        "cursor": {
          "ref": "950619f0-a720-4a2e-ab5a-a68734006f5b",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "b176e6c1-ae3e-4c9a-b342-d242e826a05f"
        },
        "item": {
          "id": "4914f312-0418-4147-968c-a852a652d1e4",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "91fe2888-40cc-4448-b290-b6e4d9bf6555",
          "status": "Not Found",
          "code": 404,
          "responseTime": 67,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c47a73a1-7cd2-4a32-a61d-f76d914d5450",
        "cursor": {
          "ref": "96216a88-c043-4e40-9f20-36db426a073a",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f16bb9c8-6621-41ea-8a4a-1e2577f2569a"
        },
        "item": {
          "id": "c47a73a1-7cd2-4a32-a61d-f76d914d5450",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "48de33a9-5159-4a22-90b2-651bec88a1de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40992c27-8b3b-42af-9afa-e5f9d2fefadd",
        "cursor": {
          "ref": "8ce6807b-9316-498a-bdf5-27c26ee2a1b3",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "77b9403b-f6c1-452e-b95c-e755239b7535"
        },
        "item": {
          "id": "40992c27-8b3b-42af-9afa-e5f9d2fefadd",
          "name": "identifiers"
        },
        "response": {
          "id": "0f20e707-5688-415b-8c02-4bab74c2bf7a",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff24e979-2fdc-40c1-9591-ee2367bc0cb3",
        "cursor": {
          "ref": "200c3f22-dde8-44ce-b719-1915bc7082d9",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "3ce76fae-e349-4184-b666-d843d935035e"
        },
        "item": {
          "id": "ff24e979-2fdc-40c1-9591-ee2367bc0cb3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "8236a340-c1aa-4ee3-b96b-ad907caa1a54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b40265eb-7d99-46c7-a9f5-0ba080a7acee",
        "cursor": {
          "ref": "ca5ad910-83c4-4e7a-8902-f1d5f68e77df",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8d1593c1-3001-4066-a5b0-0f8dce0330da"
        },
        "item": {
          "id": "b40265eb-7d99-46c7-a9f5-0ba080a7acee",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7c835688-c7eb-4ea6-ab4d-8611401ac075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22f022fb-1a1b-4531-8da5-35190f2a8ac0",
        "cursor": {
          "ref": "35c782e4-7fbf-4f5a-820d-1c4fd2e8d448",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "bcda0695-e25b-4a97-8f6b-455515dc7830"
        },
        "item": {
          "id": "22f022fb-1a1b-4531-8da5-35190f2a8ac0",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "deff8ff4-5415-4718-8df2-e9f1e4506d6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0f03715-9cdf-4024-aab9-be399fcb5421",
        "cursor": {
          "ref": "aed42706-9aa9-4a8e-a9c6-9f4c6e2512bc",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "93ffb880-6ca3-40a9-b60b-5d7c0fecb1b3"
        },
        "item": {
          "id": "c0f03715-9cdf-4024-aab9-be399fcb5421",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "f9661d58-4dda-4799-bc94-bd68d685a0cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d06ddd9-43b1-46ae-8008-b18190d4cdaa",
        "cursor": {
          "ref": "5dda148c-a924-49b5-b9e0-17e2f9037510",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "634bb1aa-9dd7-471d-995c-af22da97ce97"
        },
        "item": {
          "id": "0d06ddd9-43b1-46ae-8008-b18190d4cdaa",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ef9f7ac0-2721-46b0-be76-6b812b4de5c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5c38441-ba83-4238-bb61-d8f2e3056670",
        "cursor": {
          "ref": "537235e6-c3d5-4628-b2f5-0022a712a3ee",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "cc70be86-5ba1-40ba-adfc-cef13fb3eb72"
        },
        "item": {
          "id": "a5c38441-ba83-4238-bb61-d8f2e3056670",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "51694610-8eb5-4ad0-b9bf-ba4531c28b4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8227094-e8f8-4276-b9c8-108ff0225a7b",
        "cursor": {
          "ref": "2d2aee85-3647-42c5-a79c-540efbda75e6",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4604ac24-4864-47bb-8f55-68f931780a2f"
        },
        "item": {
          "id": "b8227094-e8f8-4276-b9c8-108ff0225a7b",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "11c04a51-dfe4-4e29-a66c-0bc2b9075537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f1e1383-9c67-4e8a-adbc-9e8107bcfeef",
        "cursor": {
          "ref": "3a984063-1561-4587-bfc3-c2e7c08c07a6",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "12ab134e-38d2-4ff6-a258-d01689bb4787"
        },
        "item": {
          "id": "3f1e1383-9c67-4e8a-adbc-9e8107bcfeef",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "a59d0dcd-8eb0-412e-ad57-d3adb65728d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0482e916-6bf7-453f-94db-894fb3ef5911",
        "cursor": {
          "ref": "30789b9d-2004-4eac-b473-ed5916927acc",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "b5401728-a232-4319-906f-5ee7b1679ccf"
        },
        "item": {
          "id": "0482e916-6bf7-453f-94db-894fb3ef5911",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c03ba4f7-b7c4-4845-a8d2-7a4554d2adc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33a8ff1b-0eb3-4eb1-84fa-b808fe7612de",
        "cursor": {
          "ref": "ec130c00-25b9-4c24-b183-35a6e39b0920",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "bc5744a0-32cf-4d1c-be46-73d82dad44cd"
        },
        "item": {
          "id": "33a8ff1b-0eb3-4eb1-84fa-b808fe7612de",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "100b9647-ac2a-4494-8f40-a6ef5614eb29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee6c0bc-62bc-442f-804e-d8ec84e3ed56",
        "cursor": {
          "ref": "866e130f-1be9-41d2-9715-08ff422fb640",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ef7d54e0-433a-4d8b-a7be-388eadc741d7"
        },
        "item": {
          "id": "fee6c0bc-62bc-442f-804e-d8ec84e3ed56",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "9decae4c-449f-4a16-8685-7c5523ad1658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aa59587-3ca2-442b-a0d4-6d317e1a9dbb",
        "cursor": {
          "ref": "5de70682-a045-4417-851d-8f19b90096d0",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "de4de23e-e8ac-4186-9e88-6b925c9e69fe"
        },
        "item": {
          "id": "8aa59587-3ca2-442b-a0d4-6d317e1a9dbb",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "8bacb81b-ffc1-4077-b305-c408f7363329",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa11d9f7-0d32-437c-8652-4e18c92e2ba5",
        "cursor": {
          "ref": "de14a520-a46a-4186-ab48-83fe40d5678a",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a3a3c8ff-912f-4ca1-96bd-c7c46bc86b87"
        },
        "item": {
          "id": "aa11d9f7-0d32-437c-8652-4e18c92e2ba5",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "394fcdc1-37b8-44ff-816d-b6d36ac49065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c675571b-50c2-4b10-a933-f3de97df7b91",
        "cursor": {
          "ref": "fe0f08da-1aeb-441c-8e89-944f5373336d",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "037e6bd6-94ab-4607-bd37-4f311dc9bfc5"
        },
        "item": {
          "id": "c675571b-50c2-4b10-a933-f3de97df7b91",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "dc4b115c-db9c-4589-9fa7-9fbf3f585c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19b18151-d633-457f-9572-9acc6593365a",
        "cursor": {
          "ref": "456e28c2-063b-40e4-a926-5c0496677d0e",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e579cb57-ecdc-47ad-94d2-3b0d0935c2bb"
        },
        "item": {
          "id": "19b18151-d633-457f-9572-9acc6593365a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "ad290fc5-dc74-4ba0-94bb-d804864e4471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57386b1e-6bfb-4a98-bfb4-d71edee93de0",
        "cursor": {
          "ref": "39f579ae-039b-4801-8b91-ee3d48c9012f",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "bbed9c9c-3aaa-45ab-b5b4-648b7a6310e3"
        },
        "item": {
          "id": "57386b1e-6bfb-4a98-bfb4-d71edee93de0",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "57f85e3d-03f6-4f2a-8b12-66d3a4a1bf52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "269092b5-206a-4c3c-a27a-ece76b4c7ecd",
        "cursor": {
          "ref": "a88caa40-9da5-4206-af72-39a3e520bd4b",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d1c88d90-9ae5-4c22-9cf1-2ae4ff26a507"
        },
        "item": {
          "id": "269092b5-206a-4c3c-a27a-ece76b4c7ecd",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "b3c55cbb-ca28-491b-a093-be1bb483b44e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2399b21f-0d19-4041-ae52-efbc11daf73d",
        "cursor": {
          "ref": "87f88f55-c121-4ff7-8e29-c6c56b2d2f1e",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6c57dc54-e755-4380-9434-7193743c33d0"
        },
        "item": {
          "id": "2399b21f-0d19-4041-ae52-efbc11daf73d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "f0afb634-bd95-428b-9658-674a07a8c4ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b78ae6d-0a5c-48c9-b957-05e476a26ae5",
        "cursor": {
          "ref": "dee1cae3-8496-4090-8e7e-cec2142a994a",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "5d4f0671-a496-43f7-9181-2bb0851fd384"
        },
        "item": {
          "id": "9b78ae6d-0a5c-48c9-b957-05e476a26ae5",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "5bb75068-ea8a-4c4e-912f-baa022ab9289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ebdf3d7-753f-41ff-b9ed-087749dc4fa8",
        "cursor": {
          "ref": "08c035d7-22c2-4bbd-8786-59a82d92a6eb",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c45bd5ee-f963-456b-9aac-6e9247f93b41"
        },
        "item": {
          "id": "8ebdf3d7-753f-41ff-b9ed-087749dc4fa8",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "a399b994-a911-49b4-bfa0-dc5f7b5ad65f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10eed4d5-904a-419d-ab5e-64b5d31cc131",
        "cursor": {
          "ref": "b5f7fd8f-0e0d-419b-8e81-d7d248faaa34",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "41b6972d-d1b6-4e15-b311-afdbf119fc9b"
        },
        "item": {
          "id": "10eed4d5-904a-419d-ab5e-64b5d31cc131",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "3e30eb09-9f01-4a3d-b921-7f8a78a4d5a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85ba1c27-9902-4843-a570-ea0d65400076",
        "cursor": {
          "ref": "8c9224e4-e40d-4405-9257-e138d4d57514",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "aba2dec1-6afb-40b0-a7b4-a9a07c0c14e7"
        },
        "item": {
          "id": "85ba1c27-9902-4843-a570-ea0d65400076",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c1d572b3-0bb6-45f4-9dcc-bc95f046a4d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1f26670-4613-490b-9a6e-19cc62a8dfde",
        "cursor": {
          "ref": "a50854c1-b9af-459d-ac2b-3c923d892548",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2b820372-0921-49ac-8ea6-601da47e8f1b"
        },
        "item": {
          "id": "b1f26670-4613-490b-9a6e-19cc62a8dfde",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "1899a0c5-3c0d-42ea-a969-608b5fdc09de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24a785de-08c2-4bd9-b9ab-8b2e53d88856",
        "cursor": {
          "ref": "b816bb57-7fa7-4f7f-8b24-0cc857b365b8",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "69b9b686-70bd-4a35-a6a3-9a83de1bf5bf"
        },
        "item": {
          "id": "24a785de-08c2-4bd9-b9ab-8b2e53d88856",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "ff301a0e-bccd-482f-9910-67a875cd6d97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83456e7a-6b8f-453a-a926-af20aebdd466",
        "cursor": {
          "ref": "208d6051-1724-49d6-ba67-7b0cf0aa665a",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4aca61e6-3cec-4d42-b140-b9f239083893"
        },
        "item": {
          "id": "83456e7a-6b8f-453a-a926-af20aebdd466",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a4252d48-77a9-4d50-810d-d4db03ad88dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6ce8eee-e347-4444-b39d-4164d0a94678",
        "cursor": {
          "ref": "590b51ba-1fe1-427e-a0d5-ae0c17097eb1",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "b7278193-60df-4b0b-872a-f29627cf45a2"
        },
        "item": {
          "id": "f6ce8eee-e347-4444-b39d-4164d0a94678",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "23ea5669-32b8-4bc6-a9b2-ff7921b34026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e4b5288-12c0-4a21-bc65-72ebe3cac346",
        "cursor": {
          "ref": "85d71e51-c43f-4bb6-b454-e3d0ae8e142e",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "75965e17-0ef9-465e-973d-daeb227470cc"
        },
        "item": {
          "id": "7e4b5288-12c0-4a21-bc65-72ebe3cac346",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "5ae56733-21af-4bec-a829-390329617123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6267532-10d9-4667-97a5-3ffef21451d2",
        "cursor": {
          "ref": "28de7b05-87d8-4fbd-9172-a280bd5498ec",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9789ded4-8eb0-4103-b10c-eeb62c92fba9"
        },
        "item": {
          "id": "f6267532-10d9-4667-97a5-3ffef21451d2",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "7f7937bb-1dc6-43fb-ae13-96ffdca12f77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb3557f-fe54-41a8-93a2-871de4c36b42",
        "cursor": {
          "ref": "2a8d8368-f85b-42a4-b464-d54fe13fd7d5",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "85284c88-f428-4150-851d-247ea8c6c619"
        },
        "item": {
          "id": "deb3557f-fe54-41a8-93a2-871de4c36b42",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "56137314-7f47-4631-a47e-4e00e8b088c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dfcf856-dc75-4b36-af29-728bf06da8b7",
        "cursor": {
          "ref": "b44bb370-400b-4b56-a091-891ba3d3d9c2",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7e589dc9-1172-48f9-a3a6-4d5966786711"
        },
        "item": {
          "id": "6dfcf856-dc75-4b36-af29-728bf06da8b7",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "6c756ebe-b47f-462f-8b27-b4f73616a206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "082d3503-7fd7-455c-b750-91cbc66e0282",
        "cursor": {
          "ref": "449fbb02-a9c0-4452-9528-69bd714121c6",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d49c9259-7cb8-4d57-a59d-6ccd2699dc9a"
        },
        "item": {
          "id": "082d3503-7fd7-455c-b750-91cbc66e0282",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "8eea8a71-5829-4bfb-bf9f-14cb046dd95e",
          "status": "Created",
          "code": 201,
          "responseTime": 743,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "e99bc847-9158-4903-bb52-4a7ca8821a48",
        "cursor": {
          "ref": "57181848-977c-4b9d-b9ba-8f8310f95611",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "f18cba45-2c0a-415a-a7b9-35f2c44cb5a3"
        },
        "item": {
          "id": "e99bc847-9158-4903-bb52-4a7ca8821a48",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "557a41ed-527c-4469-b001-0e36670317c2",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "e940ec6f-3016-4913-8ed6-d89440c76069",
        "cursor": {
          "ref": "322d5614-45dd-48dc-a815-5997bf5a2d50",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0b433591-9ee8-4161-9871-5013f878e3c1"
        },
        "item": {
          "id": "e940ec6f-3016-4913-8ed6-d89440c76069",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "4216f90e-c9e3-4a14-9eb5-6e72536b712d",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "7242f059-7e71-425f-b093-887907a2050d",
        "cursor": {
          "ref": "63c0c488-13a4-4e18-a068-c3e06e363146",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ca344387-71ea-4145-8e2f-2ac7f3947e66"
        },
        "item": {
          "id": "7242f059-7e71-425f-b093-887907a2050d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f285f2c0-d8aa-4f3e-ace8-8ff42a584bd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75e9f4a5-4f02-4d9b-a141-46cc31a22f88",
        "cursor": {
          "ref": "4ff2cec5-4e1a-41b5-b7bd-9ddc6afd2192",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "799258c9-a99c-4146-ad47-190300355f32"
        },
        "item": {
          "id": "75e9f4a5-4f02-4d9b-a141-46cc31a22f88",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "bc649bd5-6317-4699-aedf-5597679a7c9d",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "325cf4e8-1570-4a28-b0e7-2241d86050bd",
        "cursor": {
          "ref": "4a219073-af51-4896-9402-fc7f6caea06e",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "987c642c-8bac-453f-ba27-7553de38f2e8"
        },
        "item": {
          "id": "325cf4e8-1570-4a28-b0e7-2241d86050bd",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "5778d528-49ce-4742-9353-790589dae404",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "7d176e21-346e-43b6-93cc-0b8bc8f92f3c",
        "cursor": {
          "ref": "243b4aff-05d1-4447-841c-13e80e7fa711",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a993779b-079f-4895-83d8-0eaa8cbf96dc"
        },
        "item": {
          "id": "7d176e21-346e-43b6-93cc-0b8bc8f92f3c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "639ee0d4-9286-44a2-911b-ed8fba39a72d",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "a6183cca-97e9-4b72-a0a9-abb173134939",
        "cursor": {
          "ref": "4dd7844e-c439-4da7-bab6-9f301552f209",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d0b9fdbb-3885-4989-a555-5085f26b9530"
        },
        "item": {
          "id": "a6183cca-97e9-4b72-a0a9-abb173134939",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "add33aa3-217c-47a6-a61a-e36b784a3c6e",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "f0779243-8c8a-4757-8ea5-6b4ea8a3ce2c",
        "cursor": {
          "ref": "341d4b65-ca93-4155-8d3b-6039c0ac6ec1",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a1a56d70-978a-40f8-8cf3-8e7a33dabd22"
        },
        "item": {
          "id": "f0779243-8c8a-4757-8ea5-6b4ea8a3ce2c",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "2c40f34e-7415-4a36-b59c-738de074c961",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "1eb6a53d-ae19-47d8-b894-a70d1c636cd1",
        "cursor": {
          "ref": "2931c7de-7e39-49a5-b1ed-64d473d316ba",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "4010d55c-cf2b-4003-8a62-f34f48d1a729"
        },
        "item": {
          "id": "1eb6a53d-ae19-47d8-b894-a70d1c636cd1",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "1559afb2-e40b-4585-ba2c-fbc0ba9dc7af",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "80f80005-94a4-4a61-860d-ac71ba2e114a",
        "cursor": {
          "ref": "f19dc08f-b256-4d05-9e0e-723d4601e138",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e917c6ed-39b2-4d0d-a5c5-e350c0ccdb47"
        },
        "item": {
          "id": "80f80005-94a4-4a61-860d-ac71ba2e114a",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "f10c278f-fa99-4054-8bfd-a76e8323685b",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "0a7e2313-f550-403c-8911-33d5c7058090",
        "cursor": {
          "ref": "24332470-cb5e-4d60-97e3-5f66d29b7ba0",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "73cbfb4a-3599-42a5-9504-9a763acc8e3b"
        },
        "item": {
          "id": "0a7e2313-f550-403c-8911-33d5c7058090",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "7aa66287-1ae0-4212-a61d-68417d2590a3",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "3b083710-e514-4126-9bd0-8999ba671c56",
        "cursor": {
          "ref": "21c1f6e3-a862-4d52-adbe-3f65429707b8",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "9742ce0a-d801-4af3-bf9f-8c0e28769b29"
        },
        "item": {
          "id": "3b083710-e514-4126-9bd0-8999ba671c56",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "dd6505b6-a259-403f-9bcd-e23df800abb0",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "5701d8b5-82cf-482f-b18f-e9ff7203db4d",
        "cursor": {
          "ref": "1a0aba46-3b70-4719-a1d1-a45524d64fbe",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "b6f0ffef-a7d5-45a3-8c68-0401c2381fcb"
        },
        "item": {
          "id": "5701d8b5-82cf-482f-b18f-e9ff7203db4d",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "055e0495-9e36-490b-94f7-d5fa87a62df4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc9cf0a5-fb0e-4f24-b2c2-cff3fa4a9c2e",
        "cursor": {
          "ref": "7aa7076e-c27b-4266-b423-4af1166f5279",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "7ebc33d9-b435-473b-b231-69fac817b276"
        },
        "item": {
          "id": "bc9cf0a5-fb0e-4f24-b2c2-cff3fa4a9c2e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "34e589c4-6616-462c-b1e5-9284f93aaf22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3f176dc-8109-4111-8aa8-c7bfbee4bed0",
        "cursor": {
          "ref": "0f289d12-b2ab-4173-9a21-e1cf9dc2dd2e",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "adbf8f54-42f8-432f-a4b8-7c6b4e94c236"
        },
        "item": {
          "id": "b3f176dc-8109-4111-8aa8-c7bfbee4bed0",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "5c5d6900-3ac8-4e55-90cd-1e39635975a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2db3ecd-e28d-4500-a849-887faa8c4047",
        "cursor": {
          "ref": "a8faf517-1098-4f93-bcef-a9e95ac1d185",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "f8253657-6bbd-4c48-96c7-8c75490dd59e"
        },
        "item": {
          "id": "d2db3ecd-e28d-4500-a849-887faa8c4047",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4a2c7da6-758e-4df2-bad7-2996f3f10dda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d0013a0-462c-4d8b-a24e-012f7fda7579",
        "cursor": {
          "ref": "77cc262b-caf2-4117-be5f-45087fd5fac3",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "df661c39-d4cb-4839-9cac-0daf74afb8cb"
        },
        "item": {
          "id": "8d0013a0-462c-4d8b-a24e-012f7fda7579",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "10978e91-d155-4282-ba34-a2cf35c46f10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea38f5f1-b680-4036-82ff-d0e7a5aae7e0",
        "cursor": {
          "ref": "d9104640-1ab5-47eb-83d7-2d2c060ad189",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "03de7a84-5350-4f30-88e6-a74a1bc9b57f"
        },
        "item": {
          "id": "ea38f5f1-b680-4036-82ff-d0e7a5aae7e0",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "7b523c88-5ccb-460c-bb13-aeda132ef275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f23415b-98da-48af-a0c8-38316bcf89b8",
        "cursor": {
          "ref": "3fcc0f97-31d2-4718-919e-4b824ad3480e",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1fbb8fef-5bcd-491a-aa22-ef28454bd13c"
        },
        "item": {
          "id": "2f23415b-98da-48af-a0c8-38316bcf89b8",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4d6cc123-04a6-4376-90f0-8dd558e46238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2da3f8c6-e72f-4621-ab03-7644ab0d5e1b",
        "cursor": {
          "ref": "1911cf7a-0a66-4a32-8803-2782593a1221",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "14a3a777-5f03-415b-9cc8-fb4335b93eb6"
        },
        "item": {
          "id": "2da3f8c6-e72f-4621-ab03-7644ab0d5e1b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "018ab1e7-5e04-4cc2-b4bf-a8951915cea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29455f9c-b7b0-4148-93ae-79e14cb29a5f",
        "cursor": {
          "ref": "9af5250a-a63d-47a1-89a2-1b2831e04378",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "e35181a4-945c-4e41-9d3a-94129a5767b3"
        },
        "item": {
          "id": "29455f9c-b7b0-4148-93ae-79e14cb29a5f",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "beed2fd5-9df3-48a2-a06f-56127626f403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85a914d2-b981-4582-a304-8e5846917a13",
        "cursor": {
          "ref": "71942c28-48b3-4e23-9c81-407add1cecaa",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e7ce29cd-cf5b-4cc3-b2c5-313b6eb82f88"
        },
        "item": {
          "id": "85a914d2-b981-4582-a304-8e5846917a13",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "9a95218f-35d8-48c5-830c-7ea59c570a8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6753175b-4f6b-4cb4-b67f-12debfecdeaf",
        "cursor": {
          "ref": "747bb125-98c1-4fdc-afb0-36402a2a2bd8",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "00507a6a-2c1e-4ae8-8dcd-17dfaeaab3b3"
        },
        "item": {
          "id": "6753175b-4f6b-4cb4-b67f-12debfecdeaf",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "c4069ca4-78a2-4257-8fc9-832f349984ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cfa732a-294a-42fc-84d8-cf02ce12b643",
        "cursor": {
          "ref": "85a0c6cd-79a5-4638-a798-781a5c090142",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3c5387df-4e59-412b-8388-3a84960770a1"
        },
        "item": {
          "id": "9cfa732a-294a-42fc-84d8-cf02ce12b643",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e94f05be-7448-4d27-9243-ecf8ca71bf6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d162153e-37c3-4b78-8b75-eb14ebbf4dc6",
        "cursor": {
          "ref": "409f452e-521d-4807-9815-6ba2f26c0d1a",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "ea246e3e-68b9-4037-a910-62c5b5e35204"
        },
        "item": {
          "id": "d162153e-37c3-4b78-8b75-eb14ebbf4dc6",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "888cc40a-79f5-4a78-aa14-a46bc43cff64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb3f6f72-c922-4ca8-8c5c-ba478b5d886c",
        "cursor": {
          "ref": "b496ef21-a470-4053-aaec-49c91cdaf8a7",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "931a6dc0-19f5-4ed4-9510-9e13a5f5da37"
        },
        "item": {
          "id": "bb3f6f72-c922-4ca8-8c5c-ba478b5d886c",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c639ee56-6683-4eb9-9cd4-5419f6555dcf",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "2b63dbf1-e9ad-4217-86a8-c1d9ca0cf822",
        "cursor": {
          "ref": "e44b33b8-3e02-41ff-936a-f3db42c4314b",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "26d6341c-e60d-4860-a994-6a180c30b842"
        },
        "item": {
          "id": "2b63dbf1-e9ad-4217-86a8-c1d9ca0cf822",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "1d997cbe-4be3-4b21-990f-a422bae38b1a",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "60715d82-1b67-40b9-a542-307b052674a5",
        "cursor": {
          "ref": "13cf84c4-caf4-4a3f-b2b6-95796df2ea02",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6986c767-1340-47a7-adaf-be770e7ccc7a"
        },
        "item": {
          "id": "60715d82-1b67-40b9-a542-307b052674a5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "24ee71b3-ec66-424d-ace2-e9a18fee338e",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "cb6eab8d-91a1-467d-ad49-88af423fd2f0",
        "cursor": {
          "ref": "3c1995b1-5134-4513-8100-88b6ad2667de",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7e9c3a9c-4a52-4bd6-aaed-6e18ea16872e"
        },
        "item": {
          "id": "cb6eab8d-91a1-467d-ad49-88af423fd2f0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "b5543eca-0915-4631-a17e-2253ebadfe76",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "70c9d676-4a33-4474-8125-aef1d92a577c",
        "cursor": {
          "ref": "63671cd9-0487-4a50-b003-3e24434cadb4",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "334cadcf-bdff-4334-9e56-d4d16161d71d"
        },
        "item": {
          "id": "70c9d676-4a33-4474-8125-aef1d92a577c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "5c82b6a7-1c19-41ce-b259-1672f7108d9b",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "07164896-5ed1-4033-b8e2-0980cd3bbed7",
        "cursor": {
          "ref": "610f4ed7-e9d1-4ebb-82a9-4dbede2b82d3",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "94d91c42-3167-43ca-adcc-69a55c7cd909"
        },
        "item": {
          "id": "07164896-5ed1-4033-b8e2-0980cd3bbed7",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "fe65863d-7f4c-462e-b8d5-01acda290edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efd87406-cf56-4f2e-9e76-aaa157c953da",
        "cursor": {
          "ref": "d7b5ccc1-db21-45b5-ae93-70e871f52c37",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "63d5477d-2bea-4c99-b0d7-a2331af8d3be"
        },
        "item": {
          "id": "efd87406-cf56-4f2e-9e76-aaa157c953da",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "1579fbb7-1506-4b28-adf9-4549052edd26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aae377b-ffec-4aed-819a-2ba7020ad42c",
        "cursor": {
          "ref": "35a331ca-3b78-419b-8511-f148ffc71cef",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "6619110b-68b9-4c87-ab82-a6d4a715cdb4"
        },
        "item": {
          "id": "2aae377b-ffec-4aed-819a-2ba7020ad42c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a132a84a-e7fb-4e4f-ad1e-5fee7dbad43b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50e25574-dff5-4cb3-93a3-dcc8f2d051a6",
        "cursor": {
          "ref": "e21c1b4e-f7f2-4e10-8543-1be572041e28",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d03b8cf9-ef77-43ce-bd07-35db7d65cb56"
        },
        "item": {
          "id": "50e25574-dff5-4cb3-93a3-dcc8f2d051a6",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "1bf55da4-b92c-4b54-8f5b-1618a48232b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba0154a3-f8bb-4fda-b909-7c50d2336e12",
        "cursor": {
          "ref": "0e4972e5-c531-46b5-989e-afea1c34cd0d",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "904d3953-e541-4f0b-ace8-c542105c86e3"
        },
        "item": {
          "id": "ba0154a3-f8bb-4fda-b909-7c50d2336e12",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "04d00b7f-d32c-4d42-8348-2bda5b660254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "121fe34f-615d-41e1-a0c0-de672889fa3b",
        "cursor": {
          "ref": "172e6d66-e57c-4936-bc60-9ba83e125bc9",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c84bad61-0c9a-4ae0-8035-c1d5ce4a5b27"
        },
        "item": {
          "id": "121fe34f-615d-41e1-a0c0-de672889fa3b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "093cd7be-add3-459b-aa51-31a6b4ca2dd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d0235bf-923d-43e1-9ecb-8cec1cd727cd",
        "cursor": {
          "ref": "16933f3e-2d19-4cbf-9aa3-e215da568715",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "008d0f75-e496-45d1-9578-2e3b409b4a68"
        },
        "item": {
          "id": "2d0235bf-923d-43e1-9ecb-8cec1cd727cd",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "127c3d4e-a831-42a0-8bae-a358133db627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21abec03-19d9-44fc-be58-2b7bf01b7736",
        "cursor": {
          "ref": "9a0b48db-ad40-49c2-9e3f-d0f8e0be71d4",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "bf02f4e0-e1ff-42cd-aa12-3e04af0ba357"
        },
        "item": {
          "id": "21abec03-19d9-44fc-be58-2b7bf01b7736",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "5c399862-d301-4e83-8c64-051141ebc576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5af42598-95fd-44ac-a16c-d847f1bed1e8",
        "cursor": {
          "ref": "21182e42-3170-4a07-bc94-5299e98fc069",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "7bfe5315-d41d-421e-ae6a-90d4852e7482"
        },
        "item": {
          "id": "5af42598-95fd-44ac-a16c-d847f1bed1e8",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "5bd37475-8077-4e94-b258-4b8bcaa24ecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daf98f77-3039-4c8a-8337-5d2a3cd210d5",
        "cursor": {
          "ref": "2416bc18-07f9-4704-a567-f9d8611f7110",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "925041a9-5b4e-4aa2-a985-1fa73af5f6ca"
        },
        "item": {
          "id": "daf98f77-3039-4c8a-8337-5d2a3cd210d5",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e13cace7-cba6-43c8-98bf-675c803e3269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37740690-f72e-4c45-80cb-d87a79eba2c6",
        "cursor": {
          "ref": "c986b295-261a-45b8-9393-245992ffe7fd",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "69bbcbb0-638d-40d6-b64a-93ceaa29e05f"
        },
        "item": {
          "id": "37740690-f72e-4c45-80cb-d87a79eba2c6",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "a93171bb-5108-4ac9-b771-d77aab605dce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69d7de1e-4469-433e-a732-05f18e5a92e4",
        "cursor": {
          "ref": "9c359ed1-7b30-4684-9225-901d0577af2e",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "05be8503-6655-4261-b53f-9618ed073f52"
        },
        "item": {
          "id": "69d7de1e-4469-433e-a732-05f18e5a92e4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "f314bf49-f66e-42a2-a5c0-b3688ed7b7b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6213f6cb-548f-4212-9a3f-d0ad6582ff8b",
        "cursor": {
          "ref": "f4305949-e660-474e-a8be-65b6f1b0780b",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e8ce2f6e-3251-48e3-b79d-e7af6a44749a"
        },
        "item": {
          "id": "6213f6cb-548f-4212-9a3f-d0ad6582ff8b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "6ca85600-e32b-4827-aca4-269257790aa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81488ae2-dcbf-462d-acd4-d2fa4eb7ca49",
        "cursor": {
          "ref": "1297cda0-af99-4026-96a8-1f3dcd7e4286",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "178fe565-8c11-4239-b3d6-da1f02bdc95a"
        },
        "item": {
          "id": "81488ae2-dcbf-462d-acd4-d2fa4eb7ca49",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a27b808b-34f9-40e3-8b5b-bc913e3c58ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee95b6e-f7d6-4fde-9d08-59f21f3d28cb",
        "cursor": {
          "ref": "db79371e-d95e-417e-b996-f01a3811121e",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "fb4722b4-ab09-441d-a7e7-4a028a97fa5a"
        },
        "item": {
          "id": "7ee95b6e-f7d6-4fde-9d08-59f21f3d28cb",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "885fcca6-404c-45ce-bcec-1448d69d8d94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a810190-6ac5-44c9-96ee-afea53e2d46b",
        "cursor": {
          "ref": "14e1f008-cae9-4c28-a888-2a7203fda5a1",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "0f755166-a8ee-4716-9d65-6ecbbe42ac25"
        },
        "item": {
          "id": "5a810190-6ac5-44c9-96ee-afea53e2d46b",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f566020e-a80c-4fd4-bcfc-657e67bf8603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "698ff83d-626d-40c3-9105-a6ffcc340e80",
        "cursor": {
          "ref": "be928ae8-a263-471c-98e0-5cacc9d59bc8",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "6c9455be-da35-441f-b946-5b633fb00c91"
        },
        "item": {
          "id": "698ff83d-626d-40c3-9105-a6ffcc340e80",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "db8e1724-8c4e-4f0a-b348-de08d7558856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f73865b-43aa-414a-a8d6-282058a89ba0",
        "cursor": {
          "ref": "38d0cde0-a38e-497e-965f-1d68a842fa4d",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a1e466bd-63d2-45bb-b9ab-a44266af0544"
        },
        "item": {
          "id": "2f73865b-43aa-414a-a8d6-282058a89ba0",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "53cf57fd-f359-4149-85ba-a71131f5a828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "653d523e-0f5c-401b-9598-ffab619a7383",
        "cursor": {
          "ref": "90609251-ab90-44f1-9482-d5acf7543765",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "36813ae5-52dc-445b-95b3-9c479ed6470c"
        },
        "item": {
          "id": "653d523e-0f5c-401b-9598-ffab619a7383",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "0d5c34b0-7a3b-4bf2-8a75-5e14860ea797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78d1f793-7b68-4fc4-b8df-e6154995b721",
        "cursor": {
          "ref": "f8cc2cf8-0a86-4ca8-bdb3-48a1a0c9153b",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "c2ae8d3c-5927-4c9a-834b-27040a02000a"
        },
        "item": {
          "id": "78d1f793-7b68-4fc4-b8df-e6154995b721",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "a3e05af1-be20-4af0-b3e0-a7a8e912c118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02553df5-df74-407e-a8b2-b1a5681161a9",
        "cursor": {
          "ref": "beb1e3f1-d138-459a-80f0-585be63e058c",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "3055e72e-881d-414f-9add-782573fdf4e9"
        },
        "item": {
          "id": "02553df5-df74-407e-a8b2-b1a5681161a9",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "799580c9-9b8e-4f67-a9f0-a72efade3094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "804f76ee-e3d7-4984-9d58-ce27fe9a7647",
        "cursor": {
          "ref": "d2a31c5a-204a-403d-90e0-156f45f6e8e4",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ec5e2ac6-786c-40e6-aade-1c555dad14a8"
        },
        "item": {
          "id": "804f76ee-e3d7-4984-9d58-ce27fe9a7647",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "9483aab0-e25e-4900-b3de-143dd7c9661f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aea6693-72d6-499e-962e-aac48bae9cd4",
        "cursor": {
          "ref": "03aa1a5f-2213-4922-995b-f61d4863a8cc",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "df04ad9f-944b-4329-9448-399e094fffb9"
        },
        "item": {
          "id": "6aea6693-72d6-499e-962e-aac48bae9cd4",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "7922327a-45e8-4e4e-bf34-62f2937678e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "368b260b-d213-47e9-9725-e18dbd860845",
        "cursor": {
          "ref": "38f78eac-3935-4b47-9b67-c73062c5127b",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "10d42d5a-5e09-40c1-908f-4b4a04e25091"
        },
        "item": {
          "id": "368b260b-d213-47e9-9725-e18dbd860845",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "91012456-759d-4eb5-98e4-519e822d5000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "532b0a78-5c86-4377-a47c-653fd6b3e074",
        "cursor": {
          "ref": "91d1aae3-73b0-40db-8ccc-3cea734645ef",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4846a2a2-8639-4dd9-b256-3b0bf44facbc"
        },
        "item": {
          "id": "532b0a78-5c86-4377-a47c-653fd6b3e074",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "64417056-e580-41e3-ac96-ed4f3a1928d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f68d2cac-ce31-4302-9730-80601aabc290",
        "cursor": {
          "ref": "e4a42ea5-704e-41ac-8355-3e4f7f753be9",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "aeab44fa-e385-475f-a9b5-5c3c52aedee6"
        },
        "item": {
          "id": "f68d2cac-ce31-4302-9730-80601aabc290",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "f1e56faa-93cb-4345-80fb-5dc7fba269cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70ccf39d-11ce-45a9-ba26-f58a6ec2e5f4",
        "cursor": {
          "ref": "f5a3258f-38b0-4c97-9c30-73519d27268e",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "2067f65d-d0c4-4a37-9354-42c7cb841a55"
        },
        "item": {
          "id": "70ccf39d-11ce-45a9-ba26-f58a6ec2e5f4",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "59ed5e2e-9c51-4d3b-8f8d-b734aefc27ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac4389d7-0fdd-4308-a0c6-c7cf41ee58eb",
        "cursor": {
          "ref": "4becd32b-abaf-4b89-b7d1-20085ddd4fed",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "53ff1242-b137-4ced-91dd-de95904828f4"
        },
        "item": {
          "id": "ac4389d7-0fdd-4308-a0c6-c7cf41ee58eb",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "7522cf65-81bd-49f6-bd56-4f48b8e1c2b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a961ca-0990-4e2a-9f1f-d11651f05af4",
        "cursor": {
          "ref": "0cab9690-8182-4efb-a51a-95626d76718d",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "599432f2-4e68-47a7-94a5-486cd1832ad4"
        },
        "item": {
          "id": "d2a961ca-0990-4e2a-9f1f-d11651f05af4",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a0b56b32-75ba-4342-9a6b-0c8002586f19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50368a5e-8f1c-4133-848c-19b4d1b491a7",
        "cursor": {
          "ref": "1bc30973-c06a-494c-82b7-d55f53dfd626",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "2ce69631-1b6d-41dc-b03a-2e67507e966b"
        },
        "item": {
          "id": "50368a5e-8f1c-4133-848c-19b4d1b491a7",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "28dd5e88-fa4a-4163-bc60-d9b176e8d2c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5554073f-154f-4df0-9a00-55ba0b051cc8",
        "cursor": {
          "ref": "742bd974-5ad6-486e-9d79-9350c8c6ffa0",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "6eb1fdaa-3eb4-4cda-b71d-ab244c05a3b6"
        },
        "item": {
          "id": "5554073f-154f-4df0-9a00-55ba0b051cc8",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ad156699-b783-445b-a32f-19e018aa4ea0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a9d603-a11b-4e95-9267-ebb57f15a7c1",
        "cursor": {
          "ref": "79eb979e-1d50-4237-a917-ef1d5558e5dc",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "5506ba2a-5afd-4239-a7c9-91e646b83e22"
        },
        "item": {
          "id": "18a9d603-a11b-4e95-9267-ebb57f15a7c1",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "290209d1-91e5-4f9e-886f-373825275705",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49594eb1-ceca-4c92-aba4-62abdf7a1bc9",
        "cursor": {
          "ref": "c25e362e-58b9-4052-882a-8822e01e1c29",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d6f26089-ea31-4657-b87e-e5b25ba7045f"
        },
        "item": {
          "id": "49594eb1-ceca-4c92-aba4-62abdf7a1bc9",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "dab1e0ca-f178-48b5-81db-00db82a15c10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "a963a6a4-f359-4073-9348-088f9913d05a",
        "cursor": {
          "ref": "f3bff9ba-f81e-44ac-bc7f-7af60e8ec078",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "ef9b42e6-9689-436d-aac8-1ca33fa4560e"
        },
        "item": {
          "id": "a963a6a4-f359-4073-9348-088f9913d05a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "7c1bba51-46c4-4e22-b9ea-c7da432082c7",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3503ed5-3b10-4985-8422-e5a66baa8a16",
        "cursor": {
          "ref": "653860a8-7970-48cf-be19-1b4eeba5d692",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "717a9686-80f5-4be1-934d-a4b9d23eb13e"
        },
        "item": {
          "id": "e3503ed5-3b10-4985-8422-e5a66baa8a16",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "0739ad98-1ec0-408e-9d75-25f4bb5767d8",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3395744-cda9-47a7-83ba-be4856a0bfa3",
        "cursor": {
          "ref": "fb2fc7b2-3d5a-412d-9694-ac923a7b9da1",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a73ea3e4-bc3f-417f-9c2f-652adddfb2b5"
        },
        "item": {
          "id": "d3395744-cda9-47a7-83ba-be4856a0bfa3",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "3f8adc11-7a55-4ad6-afea-7ac9f2048e7d",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e4a5151-b6d2-4ddd-a0fd-f243b6415933",
        "cursor": {
          "ref": "333dcac8-c1f8-4653-a016-db2440ac9e49",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "74dfcf62-1b01-404a-b171-b07585f5c646"
        },
        "item": {
          "id": "4e4a5151-b6d2-4ddd-a0fd-f243b6415933",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "973fb22c-2354-4df5-a949-55a703723ba8",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a9c7496-2393-4279-9cf3-5a6470f6aa44",
        "cursor": {
          "ref": "3c8279bf-62f8-4f98-9c2f-c0267e644127",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "44f85ee9-fd24-405e-b09f-bf19577e29fe"
        },
        "item": {
          "id": "4a9c7496-2393-4279-9cf3-5a6470f6aa44",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "211f002c-0840-4b15-b27c-523118bbda83",
          "status": "Created",
          "code": 201,
          "responseTime": 338,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-06-02T00:40:40.537Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-06-02T00:40:40.537Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "381285e4-7cc9-4cf8-8be8-afdeca7cacb4",
        "cursor": {
          "ref": "eaaa6334-4e86-404d-98b0-58f665fd7adc",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "116708b5-fdad-41c1-a60d-03a57a70a7e4"
        },
        "item": {
          "id": "381285e4-7cc9-4cf8-8be8-afdeca7cacb4",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "28cfea5f-f92d-4aa0-98ff-67508b56489b",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a469dfc6-96d2-4565-9883-02a4de0448ec",
        "cursor": {
          "ref": "37742cc3-554c-4a67-927c-2ee0d079626c",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "64413080-a7b8-448d-8279-5ab58f88055a"
        },
        "item": {
          "id": "a469dfc6-96d2-4565-9883-02a4de0448ec",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7b844299-3352-477f-88be-8f9d51eb74e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6abd8125-ea36-46d1-a097-25dbd3b8dd4b",
        "cursor": {
          "ref": "4ca08523-26fb-4cf7-b7aa-1ca1c35dac18",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b816940f-fbf9-4fbb-abc9-220253ef3426"
        },
        "item": {
          "id": "6abd8125-ea36-46d1-a097-25dbd3b8dd4b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "aa42ebb5-1a6b-4bc1-9d5d-6b733d08130a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65158f73-265e-494f-a03a-8eaa74223b32",
        "cursor": {
          "ref": "fb00257b-7c50-4483-ac87-df2d051c3ef6",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "93f976e9-956d-46d6-8cdb-2a51647173fe"
        },
        "item": {
          "id": "65158f73-265e-494f-a03a-8eaa74223b32",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "386f2182-1f26-4061-8543-7ddabce40efb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fe6a83c-4317-4ff0-9cfc-ab837e00f93a",
        "cursor": {
          "ref": "ec6fa956-5f8e-41ad-89eb-b7b10c27c694",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "da824a10-c273-4013-b17c-3520d31dc67a"
        },
        "item": {
          "id": "7fe6a83c-4317-4ff0-9cfc-ab837e00f93a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6fec4d9d-e686-44f3-bf58-951e04695b49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a18cc4e-3796-46b2-a815-183f26a5a1fc",
        "cursor": {
          "ref": "5dd95d5e-17bc-42bd-8381-a1f10c8a24fb",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "354aaed1-d744-43bd-831a-6fe8fc5afc86"
        },
        "item": {
          "id": "0a18cc4e-3796-46b2-a815-183f26a5a1fc",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "78003919-7c85-4318-b91e-d93502897707",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c61c93-55a5-475c-ad5e-b26a3a3e00ee",
        "cursor": {
          "ref": "e6e29ca8-1076-486b-ae9b-0ecd67067c80",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "203cf1f5-4bb4-41b4-85be-f6182cd364b5"
        },
        "item": {
          "id": "d5c61c93-55a5-475c-ad5e-b26a3a3e00ee",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "45139a95-c362-46ca-8434-afa4f4658fc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab640397-1c62-4a2f-87b5-cf6bfd599bc7",
        "cursor": {
          "ref": "799175ac-44d5-45b5-a7ad-df2b61fc6c10",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "62aaa2ba-3437-4b1b-ac3d-83da0695dad7"
        },
        "item": {
          "id": "ab640397-1c62-4a2f-87b5-cf6bfd599bc7",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "dbb76489-7f31-4795-86ec-ae646cdc9099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "801f065c-2836-4e29-a8fa-0c0e7d20a38d",
        "cursor": {
          "ref": "8fc23e2b-11fb-4749-9df1-a747373aeb80",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3ef8b306-e034-4a06-be92-fcdb339dab6e"
        },
        "item": {
          "id": "801f065c-2836-4e29-a8fa-0c0e7d20a38d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2e50bca9-d251-4cf2-ae80-5748e7712f39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83861bde-1895-4dbb-bda8-dae83f123d20",
        "cursor": {
          "ref": "689066e0-7ff0-4fea-b28a-b2155b16502d",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "5e5b5b7e-8bb0-471d-9eb5-aef2eea346cd"
        },
        "item": {
          "id": "83861bde-1895-4dbb-bda8-dae83f123d20",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "76639c68-8fa7-4223-ae7e-5905ca1556cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16eb8526-6af8-4440-b120-016cab10a358",
        "cursor": {
          "ref": "08c8bd9d-c44c-4bb6-9f4b-ec9d0ac3a907",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "584b376b-26d8-4cdf-90f6-e222201af2c3"
        },
        "item": {
          "id": "16eb8526-6af8-4440-b120-016cab10a358",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "43fb0c21-425d-48f3-8b77-0196b6f9de87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08758a18-7db6-4085-8cd3-902741139759",
        "cursor": {
          "ref": "28e720fb-38b7-41c1-9a5f-d685f9f7a1f7",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "912cb6e1-b517-4eff-8848-30beb68a0753"
        },
        "item": {
          "id": "08758a18-7db6-4085-8cd3-902741139759",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c2f2e472-3bb5-4eac-80aa-78c72ebfede3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d36dcb-62bd-4dcf-ad5b-c5f916f1f01e",
        "cursor": {
          "ref": "e70e5177-aff5-4cc1-a338-ccdef7e72a39",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "7bb00159-7475-44f8-a27c-b3373fc03bb1"
        },
        "item": {
          "id": "32d36dcb-62bd-4dcf-ad5b-c5f916f1f01e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7b7af826-b7a4-478f-8a3c-bc445b57f3e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e9af3c2-8256-4c9e-888b-7c57a50978ad",
        "cursor": {
          "ref": "f444ead8-6175-492e-bc40-a6a1da7fac16",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "cebdbcfd-b684-43a4-87bd-a8a5f9f611b0"
        },
        "item": {
          "id": "4e9af3c2-8256-4c9e-888b-7c57a50978ad",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ed518efb-a054-44b5-8312-fd6503fb8c52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cd82d37-7c30-4bd8-b860-6711685eed9c",
        "cursor": {
          "ref": "94dfd522-2f96-45b2-aca8-2fc2ee01e8ac",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "1f14ab37-ffe7-447f-9064-c5f644ba3f7f"
        },
        "item": {
          "id": "9cd82d37-7c30-4bd8-b860-6711685eed9c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "393b6782-9163-4ab7-9fe7-a5c49ed6746e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "432810dd-c793-4589-8d9d-91608291e5f3",
        "cursor": {
          "ref": "98b08a43-8605-4163-91cf-b03b07ba0d13",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "86b66d7a-3ddd-4bd3-a744-0a8b5db6f0ad"
        },
        "item": {
          "id": "432810dd-c793-4589-8d9d-91608291e5f3",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "aeca495d-8561-45d5-977d-f8b05a770fd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa0971cf-a439-4e83-8c50-ae9564e3fc7b",
        "cursor": {
          "ref": "d24dc208-6ab0-4cd4-96c6-ec4da6c90231",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b90e0025-8db5-41f6-8085-8af51fc33aba"
        },
        "item": {
          "id": "fa0971cf-a439-4e83-8c50-ae9564e3fc7b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c3899dac-e631-42c9-ab8f-b219931d729e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c10c0ce7-27fd-459e-8218-4388a81b698c",
        "cursor": {
          "ref": "e40795a3-fa19-42d7-857f-c6ee31cd5395",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "d64f8937-3659-4ef0-b559-ccf794b53ef1"
        },
        "item": {
          "id": "c10c0ce7-27fd-459e-8218-4388a81b698c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "99b5bd02-2405-454e-bd91-ece8709de464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79259933-4f4a-42a1-9768-1d99af41cd25",
        "cursor": {
          "ref": "e5de2510-a9f5-4a71-8183-b362ddfebf2d",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "e61b1200-17e2-4aae-8819-6df70fe0ebf4"
        },
        "item": {
          "id": "79259933-4f4a-42a1-9768-1d99af41cd25",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c4e5e762-5f7a-4560-896f-d39dfcc2322a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e1aa531-2bbc-493b-9d02-394f90991164",
        "cursor": {
          "ref": "4c475c33-5ea7-44dc-9d3d-ecc72e2261fc",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "dde80a20-e746-4551-8179-55969bbdf185"
        },
        "item": {
          "id": "9e1aa531-2bbc-493b-9d02-394f90991164",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "73057d73-6a0e-4db4-a52e-adf7bf26b95d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94f97aec-f6fd-48c0-a376-63f9325827f0",
        "cursor": {
          "ref": "6a5428c9-483c-45f3-a38a-788a2c3ff38e",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "0f9a57fc-e1d8-4005-b236-fbd92e58186f"
        },
        "item": {
          "id": "94f97aec-f6fd-48c0-a376-63f9325827f0",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e7ac84cb-28ab-483c-88cc-45559f806e7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e35bf7d-1f43-4c91-9862-afe016ef2a53",
        "cursor": {
          "ref": "2eadd292-02dc-41da-804f-dfa3e368079c",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "798e0460-7aa3-43b9-8d7f-270f0271811a"
        },
        "item": {
          "id": "7e35bf7d-1f43-4c91-9862-afe016ef2a53",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "683f57da-0c13-4ffc-8c5c-80e6ddbef0bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae220d6-24a0-45f5-bf58-e1218e47e378",
        "cursor": {
          "ref": "43b7f3a6-5c65-49d6-8dd2-9b8d59479db5",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "11c32811-c7c3-4100-9b08-e33c5abc7ff8"
        },
        "item": {
          "id": "9ae220d6-24a0-45f5-bf58-e1218e47e378",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0618f7fa-4f7d-450c-805e-07c1f8b435ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4510be37-80ff-4349-b29c-f2851691efa9",
        "cursor": {
          "ref": "c32c377d-2b92-4138-b822-33395b9abcc0",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "2e38710b-709f-4bdf-9ba5-1227e7dcdab9"
        },
        "item": {
          "id": "4510be37-80ff-4349-b29c-f2851691efa9",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "49fa4e0e-a04f-47c3-af2f-e595df602eb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2cab5a0-23a3-40f4-911c-71a10c033130",
        "cursor": {
          "ref": "e3dfbad6-b980-48e1-8568-40e23fae1aed",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "4b7af6c4-a446-42f9-90f6-d4bc9f1ca2c2"
        },
        "item": {
          "id": "b2cab5a0-23a3-40f4-911c-71a10c033130",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "97830427-04b6-4475-bef3-4f8b08adec8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1125436a-0f78-47dd-86c9-1a3489c26f30",
        "cursor": {
          "ref": "2d8ad2f3-341c-4e47-9299-e458fd1224d1",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a54f8421-8196-49b6-89cb-c4123ec00539"
        },
        "item": {
          "id": "1125436a-0f78-47dd-86c9-1a3489c26f30",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "735d4429-fc05-4f8d-b20e-b51bbd12c108",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a5187ac-5f64-4f3d-bd68-7b6542f92e14",
        "cursor": {
          "ref": "ef794082-cbb8-41fd-a5c4-f2b1aa43c07b",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e906805e-3c49-46e6-9951-aa1b1914324d"
        },
        "item": {
          "id": "2a5187ac-5f64-4f3d-bd68-7b6542f92e14",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "398066f4-86db-40e9-82ca-f9fbc6e9816a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a1a756-5596-4eb1-9697-26f0a631ed4b",
        "cursor": {
          "ref": "581d1b9a-7d53-4817-8310-6de5a3aac6f8",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "db232e16-7156-4f16-b6e7-7c4ca121bcb0"
        },
        "item": {
          "id": "d2a1a756-5596-4eb1-9697-26f0a631ed4b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e54ad093-829f-4819-be21-facbaf85938d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "379378db-77a2-473b-97e8-631b60ab0e3e",
        "cursor": {
          "ref": "fa69c0b4-4f7c-41a3-a437-e57808a3eb55",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "cf62d754-63bc-44a7-b6a5-72599937f6ef"
        },
        "item": {
          "id": "379378db-77a2-473b-97e8-631b60ab0e3e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c90843e2-da67-4cf4-85a5-8394aaa679c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4dabfe6-49ad-4695-bc9b-0bdc4295a767",
        "cursor": {
          "ref": "5319d3ce-e5f9-4935-a1c9-3be0041d6c13",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "ce19fbfc-aba7-4edc-b1cf-03ad5c4a8c27"
        },
        "item": {
          "id": "a4dabfe6-49ad-4695-bc9b-0bdc4295a767",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a9463666-1d9e-4bbe-9373-09b6a24053f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58e5bb92-e87a-401a-9a79-b15e8f558563",
        "cursor": {
          "ref": "1c2c9970-a66c-455e-877f-73be73125c84",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "142d5665-7245-4494-a912-584696fdb5d4"
        },
        "item": {
          "id": "58e5bb92-e87a-401a-9a79-b15e8f558563",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f49656af-c9c7-4a31-818f-96809fceb0d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e01ba666-16c1-4e56-a8fc-3a247d5f837a",
        "cursor": {
          "ref": "5e2c99d8-7c8e-4e82-875d-9bac2bfa65f9",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "fd3ce93b-fbe5-42ac-a7f4-0137ddcad372"
        },
        "item": {
          "id": "e01ba666-16c1-4e56-a8fc-3a247d5f837a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "eb9f60ad-292a-4afa-9869-1386ddd9457f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ee9e76-3658-4e27-9e42-a0d6b0bb7aa8",
        "cursor": {
          "ref": "69e86aaa-8fa6-4e76-bf08-399e623eacba",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "62beeff1-9876-4247-ae6e-216b92a959b8"
        },
        "item": {
          "id": "c6ee9e76-3658-4e27-9e42-a0d6b0bb7aa8",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "c449ab72-f7b1-401a-8ff5-393c827523d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8107abd-23e7-4e45-acc9-d26a5277f3e2",
        "cursor": {
          "ref": "0703379a-1816-42b5-a4f9-5ee83e6abc28",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "09a98321-51be-4b38-8902-d7620c31c541"
        },
        "item": {
          "id": "b8107abd-23e7-4e45-acc9-d26a5277f3e2",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "54e662b7-eb51-4b3e-a452-e7384b2caa43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f6c51e-69c2-4392-b058-987053ea055b",
        "cursor": {
          "ref": "37b80aff-1dea-415a-b110-9e636317f513",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "c0d02718-7e56-44e2-be29-22c741079c2c"
        },
        "item": {
          "id": "36f6c51e-69c2-4392-b058-987053ea055b",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "36a80ee7-4b07-40f3-a2a4-256ce763f091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48103b6d-364c-4f74-84b8-494a8f00bbfa",
        "cursor": {
          "ref": "927c3153-83ae-45f1-b50c-9f123bc166da",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "89dc05a4-f857-4d88-94f1-77ae3fc703f2"
        },
        "item": {
          "id": "48103b6d-364c-4f74-84b8-494a8f00bbfa",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "9c774926-b315-4ad5-af7a-8f794c9220b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87e9af7e-cf29-4846-acdb-0962e94b10ce",
        "cursor": {
          "ref": "70b96bd2-eddb-4821-9cc0-8308d72a8b34",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "d26572e3-01e0-4801-bfd8-a8e8165640a7"
        },
        "item": {
          "id": "87e9af7e-cf29-4846-acdb-0962e94b10ce",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "3834f111-d2e5-4302-ab8d-b3d46ca50bab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9703ce0c-28ea-4520-a87a-951d7e955d7d",
        "cursor": {
          "ref": "1843e24f-12cc-47b5-b096-57723927f0b0",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "7585c67a-dcc0-4bc1-86e7-4f77e11b4736"
        },
        "item": {
          "id": "9703ce0c-28ea-4520-a87a-951d7e955d7d",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "935bd5be-b19d-418e-8e3a-0ea6d7c738ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0233c4cb-88c7-4b59-8716-a1fe0556ed4b",
        "cursor": {
          "ref": "49c1f2c9-bc24-4529-aefe-2995ec28c77e",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "53664f22-79c3-40e2-b92a-eb4975341798"
        },
        "item": {
          "id": "0233c4cb-88c7-4b59-8716-a1fe0556ed4b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "0b7e0517-078e-4b59-bc08-c74d2d21c4a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c42e1e23-c6fd-4568-b70f-0bb4788e4fae",
        "cursor": {
          "ref": "ffb25620-752f-4b69-9f56-4abc8cd70063",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f36fb6d7-dece-4ac0-80f9-5072dbe513ca"
        },
        "item": {
          "id": "c42e1e23-c6fd-4568-b70f-0bb4788e4fae",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "dabf9c0d-9441-4584-9907-bb1d647b1f7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2951f295-92e5-4a50-95f6-a560698bb02b",
        "cursor": {
          "ref": "47423f63-ac75-4470-b9c1-f6b59efc024c",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "69885429-f63c-46cc-ad3b-edf481459da4"
        },
        "item": {
          "id": "2951f295-92e5-4a50-95f6-a560698bb02b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "3983b33d-79c6-44b9-8f6e-bf34d2760027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d19560e-7cf0-4cea-9501-2cae4d228f06",
        "cursor": {
          "ref": "a1a38d6f-612a-4549-b272-96c6256098fd",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "0b8c5b26-6912-4669-818b-8606569c84f3"
        },
        "item": {
          "id": "6d19560e-7cf0-4cea-9501-2cae4d228f06",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "89356603-5e3a-494e-86cb-003f3fca5154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1544f28c-b200-4187-a3e7-b7ecc0e37fdc",
        "cursor": {
          "ref": "2a722e49-e56d-4f44-8b3a-09b2522f489a",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "f383b7aa-712f-41d9-bda0-82df04713429"
        },
        "item": {
          "id": "1544f28c-b200-4187-a3e7-b7ecc0e37fdc",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "f7f17d1a-3cca-4ddf-ad20-30f432930fc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80928db8-40f8-4220-8fbb-ab68325a1542",
        "cursor": {
          "ref": "76f0c776-e0be-4db8-8fe0-89007a114a74",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b09759a7-2af7-4055-97ea-5839e1b157d9"
        },
        "item": {
          "id": "80928db8-40f8-4220-8fbb-ab68325a1542",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b6fdcbdc-92f2-4b56-975f-386ea32f4703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "195ec04a-251b-4ff3-9a07-a1277156669d",
        "cursor": {
          "ref": "05a42fff-ef99-4c61-a48e-f9db06430842",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "1f4b11c3-6776-4809-9421-23c14f13c6ac"
        },
        "item": {
          "id": "195ec04a-251b-4ff3-9a07-a1277156669d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "228d3d0e-b80a-4415-88c9-a6e4a1f9de0b",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "2bfa8edc-0ffc-4796-8777-69b46b06b147",
        "cursor": {
          "ref": "1d42eb05-a10b-4d1d-8144-4e15b60765a5",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "4d09e5e0-8bfd-42de-b5ac-5d8401f1d592"
        },
        "item": {
          "id": "2bfa8edc-0ffc-4796-8777-69b46b06b147",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "bb501771-5119-4ccc-a360-25704a267748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3d5157f-2d96-4d58-83d2-8a1f2b44d6f8",
        "cursor": {
          "ref": "6d8a620e-feaf-4777-84c0-c71a08122d5c",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "bdcf1afc-e839-49e2-9347-f842f86518f6"
        },
        "item": {
          "id": "c3d5157f-2d96-4d58-83d2-8a1f2b44d6f8",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "3c056a2a-1777-464e-9ed2-4e819f30e3a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dbb1981-3569-4f70-bc36-52e806411eea",
        "cursor": {
          "ref": "d7a05504-5bf2-4253-a086-ef562172a08d",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "2af08941-e872-4e3a-9977-203172493a4c"
        },
        "item": {
          "id": "1dbb1981-3569-4f70-bc36-52e806411eea",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b299e584-1222-4e48-9af9-a15b534bd3ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5723573-49d7-4854-a1bd-49edad1c2b74",
        "cursor": {
          "ref": "2c1947f3-1ade-467d-9c12-f637af859cbb",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d0e723bf-14d1-4953-8352-81b58eb43cd1"
        },
        "item": {
          "id": "b5723573-49d7-4854-a1bd-49edad1c2b74",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0540b180-e753-40ba-993c-267193d6a8a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b222108e-4def-4a20-a0d7-917204c4dd9b",
        "cursor": {
          "ref": "a5f003ee-ba16-48b6-a9c5-b96bbd2c010f",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "283ce579-0ce7-4176-bede-1acb1d3f09f4"
        },
        "item": {
          "id": "b222108e-4def-4a20-a0d7-917204c4dd9b",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "cafc6114-4e58-45d9-b7a5-7ba9e0818cbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "598966c2-d0cb-40df-9450-73bc431f4814",
        "cursor": {
          "ref": "922dc7da-2705-4f6a-9c14-4846a8abf86c",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "253e3e7e-97e7-4862-b0ae-a967393fb975"
        },
        "item": {
          "id": "598966c2-d0cb-40df-9450-73bc431f4814",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "33fc75cd-0572-4542-b5b2-bd8c486e41a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e269c1c0-38c0-495a-8153-de311c5e3660",
        "cursor": {
          "ref": "b2c8c8a0-330e-490d-9c4d-e9161c24895b",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "79582274-5b2a-499c-9b6d-863e2e1b2335"
        },
        "item": {
          "id": "e269c1c0-38c0-495a-8153-de311c5e3660",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "861eab19-c66b-450e-b27e-f799920069ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86066043-e163-4302-bf36-0a8f94aee294",
        "cursor": {
          "ref": "b0d9029e-a3f7-4e38-bd98-b6659f5704a4",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "e1453546-3aad-484f-8d6f-72d46d028453"
        },
        "item": {
          "id": "86066043-e163-4302-bf36-0a8f94aee294",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f94a1d02-e461-4b84-8b34-b870df7b94e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a313db-4a38-4861-a095-cb29ee615adb",
        "cursor": {
          "ref": "5a5f853f-56ef-4456-a390-298cde3eb24e",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c27fcce7-107d-4d93-b7bd-6d69f43a711d"
        },
        "item": {
          "id": "f7a313db-4a38-4861-a095-cb29ee615adb",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "71f112d4-c09b-4d02-a1ad-943032746f52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "138fa457-a82d-4788-bb92-3a89b9d29e7b",
        "cursor": {
          "ref": "a0a96fe8-9ee7-4707-aade-5ad5fa985c89",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "9937c705-9d7a-4b2c-acfe-706723528ff9"
        },
        "item": {
          "id": "138fa457-a82d-4788-bb92-3a89b9d29e7b",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "b618ddc6-12ec-46c1-9887-392e9bdb01da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee44f4f5-5ba8-488a-8f22-26a9fffdab50",
        "cursor": {
          "ref": "d1374c54-d26f-4d20-b346-07692c1b268a",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "d2d555a8-3a0a-4f5a-a860-fe18297f019c"
        },
        "item": {
          "id": "ee44f4f5-5ba8-488a-8f22-26a9fffdab50",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "9b2634c7-838f-426b-9172-a5f14926c3c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4449d21-8c40-4d5e-bb06-2d8ebd144e20",
        "cursor": {
          "ref": "7f69e688-e922-4c15-aea2-50ad2c0660d1",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "182b8da4-78a8-422d-aef3-62447df92eb6"
        },
        "item": {
          "id": "f4449d21-8c40-4d5e-bb06-2d8ebd144e20",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "492076ca-05be-4798-9c96-e5ad422c0365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "541389e7-1ad0-4f3e-bcd8-c88115af4b3c",
        "cursor": {
          "ref": "a59a9ab6-b1ff-459d-970f-fb9afd9b0d3d",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "7dda92ae-8209-4be9-a7fb-1bd3db6641bc"
        },
        "item": {
          "id": "541389e7-1ad0-4f3e-bcd8-c88115af4b3c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "20881769-c171-47dc-9402-ee22e0aee84c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7077b68e-0999-4f1b-8157-23faa0f2e140",
        "cursor": {
          "ref": "d21ad4c5-f4fe-4887-b28f-f6f4c7ae6088",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "db016d62-5eed-4e5b-b62a-0c3cdd000858"
        },
        "item": {
          "id": "7077b68e-0999-4f1b-8157-23faa0f2e140",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "e37c9337-2ceb-426f-b147-eb211016faa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "644a99e9-86d1-4648-a636-07fbab510967",
        "cursor": {
          "ref": "86d5a57a-db35-4c23-9dd4-b8f29c1b93bc",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "437b804b-9e4a-4e15-af8a-b62de89139a5"
        },
        "item": {
          "id": "644a99e9-86d1-4648-a636-07fbab510967",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "3c09232c-37f3-4fd5-b78b-94a021f18beb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b1550e-3abd-4900-8092-6e7bcdc1f7c6",
        "cursor": {
          "ref": "e16990b4-7698-4f06-a329-a5276988df94",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "24d40ad1-a49b-4b8c-b913-b6c7ee7cdce9"
        },
        "item": {
          "id": "78b1550e-3abd-4900-8092-6e7bcdc1f7c6",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d1f65bde-a908-4549-a69b-fafae96db885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaf1dadb-a72a-4ddf-8a02-337dcfcaafa4",
        "cursor": {
          "ref": "e2ceada1-e6a9-4a68-ba8a-96c21582f94d",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "6025422e-370a-4766-995d-825733f14b9f"
        },
        "item": {
          "id": "eaf1dadb-a72a-4ddf-8a02-337dcfcaafa4",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "7f41cb96-aaf3-4e9a-8326-8705754246f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdee6e2c-8f17-4691-b5e9-cc8424632f06",
        "cursor": {
          "ref": "89ffb652-c906-456f-9eac-486df9774443",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "b6bc31c3-da26-4a68-9781-d87685bc00cd"
        },
        "item": {
          "id": "cdee6e2c-8f17-4691-b5e9-cc8424632f06",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "88a7fb18-f16f-4086-ad76-94739421497f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7c717ad-c29a-4ed1-87b9-e0cd6dd2d5e0",
        "cursor": {
          "ref": "cb7376a6-cfb2-4661-86ec-0575b510a143",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "0c2b1dbc-92ef-4b61-918d-71b9b40dc22b"
        },
        "item": {
          "id": "a7c717ad-c29a-4ed1-87b9-e0cd6dd2d5e0",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ff9642d8-1cc3-495f-988b-f10c40930ce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd9c1199-32d2-4733-9249-ca90fb213daa",
        "cursor": {
          "ref": "67365e95-c2d7-404a-9929-8ab0fc2cd198",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0247e2aa-77e2-433d-b7ad-3b46e332a8df"
        },
        "item": {
          "id": "fd9c1199-32d2-4733-9249-ca90fb213daa",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "1e00f757-41ed-4954-b5a4-1adfdf78a565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffe97eaa-a731-4acb-8ee3-ecd272a12a16",
        "cursor": {
          "ref": "a80b7a31-73e8-4df5-a5ed-90b5ea05c442",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "5aade2a7-6b4b-4808-adf0-b9c68b2157c3"
        },
        "item": {
          "id": "ffe97eaa-a731-4acb-8ee3-ecd272a12a16",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "880828d4-b2c2-418d-81fb-3cd2ba1bf8a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb6dcf3c-863f-4372-8c80-3fcfef34bf49",
        "cursor": {
          "ref": "2040ec9f-3e00-45d7-8616-dc7709a64009",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "f3ae7896-2671-43dc-ab5f-b28e5f776157"
        },
        "item": {
          "id": "eb6dcf3c-863f-4372-8c80-3fcfef34bf49",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f9256ca9-e033-4f92-a38a-7852ebc7ae3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "954b9de3-ca76-4f1a-8af6-1adeda53cf84",
        "cursor": {
          "ref": "2e2ce905-5b11-40a2-a277-ba5497ed0dd3",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "0c4336ca-9b38-4735-9ad2-2a1c00f27e13"
        },
        "item": {
          "id": "954b9de3-ca76-4f1a-8af6-1adeda53cf84",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "ea299cac-b800-45ce-9a85-a55fae6a5350",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe589dc6-0686-414a-b748-a3e0da42a2e2",
        "cursor": {
          "ref": "5fd85e18-59df-4ee6-929b-34a1a4d22b8c",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "91f27e22-d4c8-4f8b-94a9-0e73a89a1a03"
        },
        "item": {
          "id": "fe589dc6-0686-414a-b748-a3e0da42a2e2",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "3d0d6c26-b0d1-4fc0-895f-f65114f6c096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6886eea9-70a7-42ee-81b9-c3502c2d982d",
        "cursor": {
          "ref": "b6136325-0520-4cdd-9925-e7779e1f812b",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "878afac8-b42f-496d-9867-3fce92e1bb4f"
        },
        "item": {
          "id": "6886eea9-70a7-42ee-81b9-c3502c2d982d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "4ae366b0-70e3-499f-96dc-e9cb9bc6382a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1567b46d-db15-4378-a860-5a8a6af2316b",
        "cursor": {
          "ref": "e20f6568-a892-4588-a4a8-cddf29163bde",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "5c943109-0455-4b8d-896f-a5969460ff79"
        },
        "item": {
          "id": "1567b46d-db15-4378-a860-5a8a6af2316b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f75dafd4-0eb3-4c56-878b-2100166c5f57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eaec4e2-65f5-41ea-8195-bb06869611b7",
        "cursor": {
          "ref": "bb66a176-403e-4ba8-89c5-32d0648f771f",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ae7d9c3e-18b3-4fca-bcc7-023e5ff16f93"
        },
        "item": {
          "id": "8eaec4e2-65f5-41ea-8195-bb06869611b7",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e321eadf-abfc-4afc-b4f5-6b779d71b808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9519d696-24e9-4fa8-9170-376aa6d2376d",
        "cursor": {
          "ref": "b00dfa8d-76cd-4091-a52a-3b9b766cb4c9",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "6683421b-0eca-4a16-b4a5-05034e7f4cb6"
        },
        "item": {
          "id": "9519d696-24e9-4fa8-9170-376aa6d2376d",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "0476dd45-2281-456e-b08c-9ef752186da7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e76dd5-2de2-4b20-b98e-e92d31820d90",
        "cursor": {
          "ref": "6ff47e9c-5bca-4bde-8a21-5c74911c3f38",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "78cbe45c-c29d-4c74-8036-61b7ecdda379"
        },
        "item": {
          "id": "33e76dd5-2de2-4b20-b98e-e92d31820d90",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "2f0ef0bd-4359-483a-9a78-89423a97321b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "666fe75b-e9a7-4b1f-b784-2d0479f1dd57",
        "cursor": {
          "ref": "30eb7f72-3e33-41d7-8b99-f3d2a568db83",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "9b955232-7270-41f4-b69c-88b4767e40bf"
        },
        "item": {
          "id": "666fe75b-e9a7-4b1f-b784-2d0479f1dd57",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c2934138-311c-48b9-8b0e-26ed818ad1d0",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "b9172939-cb6b-4e81-9436-1bcf5b524008",
        "cursor": {
          "ref": "ffdcfa7b-33a8-4d9c-bbdd-025900a9c783",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "138becaa-3aac-41ae-a3ec-4b68331e4671"
        },
        "item": {
          "id": "b9172939-cb6b-4e81-9436-1bcf5b524008",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "68eeec99-4378-4148-b634-279277a2ac03",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "cb257d33-f674-4a56-b933-d1a1b349b81f",
        "cursor": {
          "ref": "0a446461-8aca-4206-9a52-b0d55777922c",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "4cc39175-48ab-42ee-adf3-bb4734d4ec6a"
        },
        "item": {
          "id": "cb257d33-f674-4a56-b933-d1a1b349b81f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "4243fafb-4842-48bb-9ee4-28a43d60203c",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "cf2484ca-951c-40a8-a09d-af2653616ea0",
        "cursor": {
          "ref": "f52c1e7a-66fe-403d-a994-f7182befc542",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "1bc48b75-a8dd-41db-9a69-fd6c776d196c"
        },
        "item": {
          "id": "cf2484ca-951c-40a8-a09d-af2653616ea0",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "9218b83a-9e8a-4d0c-89cc-059fbcc4547c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40c18d73-0c25-4f9a-9cc7-880c1dc07d0d",
        "cursor": {
          "ref": "1884e67c-64b0-4585-881c-df28770c52e4",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "73d4980f-f807-4bfb-89cb-0cbb02cd2edc"
        },
        "item": {
          "id": "40c18d73-0c25-4f9a-9cc7-880c1dc07d0d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "08c1f0fb-3b08-45bd-9637-4128ffb388fb",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "33838509-dc6e-4904-b4d8-9af04c4420f0",
        "cursor": {
          "ref": "2d58a122-88dc-4e43-810e-2ffee54a195c",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "67a7d8c9-212e-4d47-bf0d-5e68b8074edf"
        },
        "item": {
          "id": "33838509-dc6e-4904-b4d8-9af04c4420f0",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "9511495f-8a87-4ef6-8049-21bca316cc00",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "78c31fd6-964a-48be-a0e3-0496a4c10601",
        "cursor": {
          "ref": "2c4c2afe-9406-4dea-a6d1-7c8be1a87e62",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "71371dfd-cc3a-43e0-ad0b-256fb33b10d0"
        },
        "item": {
          "id": "78c31fd6-964a-48be-a0e3-0496a4c10601",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "476c6fca-e678-40fe-b95f-ab681b7b87aa",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "056d9e78-6e6a-4fca-b75e-f685d940068f",
        "cursor": {
          "ref": "90f4aa8e-5f2e-4d0e-9eae-1451657e7f38",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0330e293-c8d7-43b3-bef2-c5c487568170"
        },
        "item": {
          "id": "056d9e78-6e6a-4fca-b75e-f685d940068f",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b4771f70-9f50-4b49-9733-b72e1cf3dff1",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "ef3e6d12-e818-4783-90ae-27fed072218a",
        "cursor": {
          "ref": "fef3b694-2eca-4c39-b34f-ac61c57671a6",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "2912c4e6-4258-4f9c-ac1d-e2c5231b7f4b"
        },
        "item": {
          "id": "ef3e6d12-e818-4783-90ae-27fed072218a",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e94fb9a9-2161-44c9-8b20-25e3456b8712",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "1328ffaa-1186-4ead-bc88-42e959f6b920",
        "cursor": {
          "ref": "b504073a-9042-47fe-93be-36ffc0a04f3b",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "d377c41d-9e7c-43e5-b353-7b0315934e11"
        },
        "item": {
          "id": "1328ffaa-1186-4ead-bc88-42e959f6b920",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "39cbf87d-25f0-4f04-ad6c-f8248904045b",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "b0f6500c-e12e-4a2f-8f7d-6e19fe75269f",
        "cursor": {
          "ref": "748cba5b-3d8c-472b-a24e-9ff58e82c389",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e88406e4-1003-44ee-b7ee-8d7f7d98f1e9"
        },
        "item": {
          "id": "b0f6500c-e12e-4a2f-8f7d-6e19fe75269f",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "8720e71b-6d6c-4478-93d0-62e612b7fd8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "772215c1-83fb-468c-af96-1ecba0840f73",
        "cursor": {
          "ref": "08894a5f-7229-4af6-95db-2e829247e11c",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "e7e45525-f550-4f57-9985-5830de2cd5ef"
        },
        "item": {
          "id": "772215c1-83fb-468c-af96-1ecba0840f73",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "9def50e5-e2f7-41ad-9a2a-1cf299ec6a2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2d81de9-ee84-4cdd-b29d-938ba0b9763d",
        "cursor": {
          "ref": "b2376d05-ac2a-4587-9130-699c162ce1eb",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "ab91cec8-a5b8-4bab-a7a3-939a5b5f86a1"
        },
        "item": {
          "id": "c2d81de9-ee84-4cdd-b29d-938ba0b9763d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c0c4f95e-f59e-4882-92cf-49aa0f30f967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d648e1ab-3bc1-4766-a2cb-f7dc9e9944f0",
        "cursor": {
          "ref": "9a196827-d2c2-4f74-a428-58114aa2857b",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "bf793afd-6f2f-4329-a469-0307f1d9a2f3"
        },
        "item": {
          "id": "d648e1ab-3bc1-4766-a2cb-f7dc9e9944f0",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "572d5bd1-43ce-4621-a387-6da0d401f81b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d71d2f0-3d24-4150-b776-d398109072ed",
        "cursor": {
          "ref": "eb008f17-8c86-4b3d-8844-49e673435b5e",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "145181b3-884d-4bed-9bfc-e8bcabc02d9b"
        },
        "item": {
          "id": "8d71d2f0-3d24-4150-b776-d398109072ed",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "0217ec5c-4a3a-4451-a9b7-0120eab44762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17f4e58e-2e45-4955-ab43-bfaeb07ddc53",
        "cursor": {
          "ref": "14a8ad74-d142-4ade-8425-20fe50ce5f05",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "2c0025b6-ec58-42db-89af-272c92121909"
        },
        "item": {
          "id": "17f4e58e-2e45-4955-ab43-bfaeb07ddc53",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "1368ab22-fa70-40a1-92a0-22a7ff6909ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45c1ae1c-3253-487b-9701-065335c0cdbb",
        "cursor": {
          "ref": "c1e806ee-6479-43dc-a8bd-43e1276265c1",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "7df670cc-c41e-46aa-9bbf-1d0df6a7e06a"
        },
        "item": {
          "id": "45c1ae1c-3253-487b-9701-065335c0cdbb",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "928e7003-c1d4-43a6-92d4-5373f1ce70da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e140e17e-506e-492b-94b6-57650269ecb2",
        "cursor": {
          "ref": "c797ee6f-d540-4f7a-8338-ed77ec72f9af",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "326e096f-ff80-4a1d-b51e-7c428df0904b"
        },
        "item": {
          "id": "e140e17e-506e-492b-94b6-57650269ecb2",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a33e8e59-a3cf-47d6-8b8b-abef7e8c50fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac24c2b-3f79-47aa-805a-e960a11c81f6",
        "cursor": {
          "ref": "859d1e4c-2822-461b-8087-0cdbf12aab25",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d92d0736-f864-4b99-8fe7-5602ee3003bb"
        },
        "item": {
          "id": "8ac24c2b-3f79-47aa-805a-e960a11c81f6",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "46d2ad98-c741-443f-a9eb-7f6b431060c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa3c453a-1898-4f1d-981f-4b31503a76ab",
        "cursor": {
          "ref": "bdec6870-cfee-48df-a3a5-67ca461df202",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "b7b69844-0b5c-423c-b015-13af7e4ab34d"
        },
        "item": {
          "id": "aa3c453a-1898-4f1d-981f-4b31503a76ab",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7e4b3cf0-5b9f-48e9-9d7e-38f7b92bd1cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dae2e6b-6d5a-4c6e-bf1d-220854c7c007",
        "cursor": {
          "ref": "13e59ec0-b5b8-4d1a-a10a-531fe430a4ca",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6bafaa67-9ad6-4286-8db7-5a9992ec5af3"
        },
        "item": {
          "id": "7dae2e6b-6d5a-4c6e-bf1d-220854c7c007",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "29a46d6a-4345-4b31-acc8-1f63c37902e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b944293-7402-44d6-aa7e-e56862b3c8eb",
        "cursor": {
          "ref": "62bdf7c8-429a-40e3-8762-2e526f4d3d60",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "ff7015e8-a29d-4053-a418-35a722f807df"
        },
        "item": {
          "id": "9b944293-7402-44d6-aa7e-e56862b3c8eb",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "403513df-9beb-44f4-8182-b55bc76387cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5af6ab0f-8f09-4754-8815-d79909b93bc5",
        "cursor": {
          "ref": "c69f89c8-fa67-492e-929d-2702825c00e8",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "3a28f3a0-7b55-4be2-8461-d7724c538ba7"
        },
        "item": {
          "id": "5af6ab0f-8f09-4754-8815-d79909b93bc5",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "18b588a8-fb57-4f6a-a21b-efb07fd7969b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c71fb4a9-2879-4f26-876d-7a7fd00f9b7c",
        "cursor": {
          "ref": "dfc3849c-2df8-420d-a49d-7a34423cd1a5",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "8c5f20c1-f965-48f3-8338-6051a8599d44"
        },
        "item": {
          "id": "c71fb4a9-2879-4f26-876d-7a7fd00f9b7c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "de5aeaff-9ef3-4c1a-b99f-2d0f34b37452",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "ee84a706-0b16-49d2-b3df-e762ea934ac1",
        "cursor": {
          "ref": "365867b6-7724-4dbc-8bb3-4a1c1dfd835a",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "8b055f93-14e4-4180-a481-38022b348aa0"
        },
        "item": {
          "id": "ee84a706-0b16-49d2-b3df-e762ea934ac1",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "349b1d31-8f01-4981-b36f-c87590aff879",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "e29200b0-bfe7-496a-ade7-2feb136f2e21",
        "cursor": {
          "ref": "06dd3d3f-9ee2-4675-9a90-d01531eab02c",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "3533f0bc-1789-4eb8-aceb-17f6ded20f9f"
        },
        "item": {
          "id": "e29200b0-bfe7-496a-ade7-2feb136f2e21",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e7f92f6a-f9ac-4967-b554-443d4794ea4d",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "f0b1bb1c-54af-4c8b-a601-1dec9f2e1aac",
        "cursor": {
          "ref": "a5274e9e-4b60-4aff-b83e-54858a743e94",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "2b1ee7f0-9de6-4480-aa13-fe6d75e8baaa"
        },
        "item": {
          "id": "f0b1bb1c-54af-4c8b-a601-1dec9f2e1aac",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "32f48785-8054-42a1-982c-7019677cc971",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "f9873544-71c6-456e-88fa-21b9f137c15d",
        "cursor": {
          "ref": "0812a2b8-80fe-43e3-a4c8-be1148a8645d",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "7a82bbed-307a-40a7-9a09-6464a8eb7da6"
        },
        "item": {
          "id": "f9873544-71c6-456e-88fa-21b9f137c15d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f49bbf85-6a6f-4704-b04f-911c7f89ab9f",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "8879a893-8ffa-467c-9c4b-19a712746640",
        "cursor": {
          "ref": "61a0f568-87ec-4af8-a420-ede19c52bbe5",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "371f338d-10e0-4218-9fc0-cd8e4fbfa73e"
        },
        "item": {
          "id": "8879a893-8ffa-467c-9c4b-19a712746640",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "3fd3c74b-55a4-45a8-8b65-72e80371cb16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed3d3b51-3622-412a-86db-cb7840b5cc31",
        "cursor": {
          "ref": "d88ed014-2e4b-4d81-9cb5-cd69e5f8e086",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b4fba3f5-515f-45e0-b23e-0dfa865c3380"
        },
        "item": {
          "id": "ed3d3b51-3622-412a-86db-cb7840b5cc31",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "074d89e1-336b-45fc-83cc-e4941d8fee85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f11a1348-db4e-4ae1-9f21-8ef4741410ba",
        "cursor": {
          "ref": "b1d6371a-bead-4296-bb48-9a3448930da2",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "0bec07e6-3fd1-4105-a78f-4344dfebce9a"
        },
        "item": {
          "id": "f11a1348-db4e-4ae1-9f21-8ef4741410ba",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f8f17123-a3c8-47bb-a2b5-c415c09f02a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d6c27d7-cc9c-42fb-a1d8-a31b35910c4d",
        "cursor": {
          "ref": "65dccdc9-51ce-444f-af74-3a3ef3e19dfd",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "7876280c-6775-4692-a31a-e4efd979b41c"
        },
        "item": {
          "id": "1d6c27d7-cc9c-42fb-a1d8-a31b35910c4d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "c2e2ada4-8ac9-4b11-8552-7b9fda8e185b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "294ef5f0-e17a-4e44-a731-b03f955d25ff",
        "cursor": {
          "ref": "1119c9bd-afce-4bdb-b36d-9ff54c165a64",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "bac3f2c7-c46d-4af3-974f-e863f1b50321"
        },
        "item": {
          "id": "294ef5f0-e17a-4e44-a731-b03f955d25ff",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "8e09eacd-3ca4-4713-9f8f-f7249f08dda1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f98e1159-cc96-43bf-b953-c214b4df6787",
        "cursor": {
          "ref": "2b73d291-0405-442f-be3a-387103c2e798",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e8a2f443-9480-4e24-897f-2e5932ddd2d6"
        },
        "item": {
          "id": "f98e1159-cc96-43bf-b953-c214b4df6787",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "5e81a690-cc2b-4216-8f75-a5366216a6f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aba2d8f-9ae6-4877-85b2-4a814daf8506",
        "cursor": {
          "ref": "9d2cb077-3c77-465c-a1bf-fe41436f5985",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "08028e70-3f7d-4029-b9f7-c07623037daa"
        },
        "item": {
          "id": "9aba2d8f-9ae6-4877-85b2-4a814daf8506",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "63efe812-69b4-47ec-a0cc-87b34367cf42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "318e4eaf-db5e-4af4-a595-ac258ecfd1c9",
        "cursor": {
          "ref": "d2d4bb4c-8cbc-41c9-96d2-579d98903107",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "57036a17-8276-479d-a3a8-ee5d4cf6469c"
        },
        "item": {
          "id": "318e4eaf-db5e-4af4-a595-ac258ecfd1c9",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "2333005e-efe0-4e09-bda5-ee6b8b6846c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14700dc9-6d6e-45e9-9c55-6c48bd174473",
        "cursor": {
          "ref": "7d07fa50-971b-48fc-b371-eb064dd48e27",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f4c7b14c-2f53-4d2f-8629-4394e1786e5d"
        },
        "item": {
          "id": "14700dc9-6d6e-45e9-9c55-6c48bd174473",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a0314a1c-f6ed-4730-8777-0d3f6534050d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b4261ed-ac4e-4c3f-b249-b8fe73d760ed",
        "cursor": {
          "ref": "cd25e5d8-9cc9-4e06-8f7d-f3b275956828",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d18d2eb5-a277-43ce-8ac4-b1a0d25f53f8"
        },
        "item": {
          "id": "7b4261ed-ac4e-4c3f-b249-b8fe73d760ed",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "45c6bd5c-a30e-4049-8dea-10f2617024e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c592eee-1ce6-439c-abef-24fb694cd21f",
        "cursor": {
          "ref": "54613d03-e869-4cb7-b3c0-b54023411144",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "822d0cd9-7173-450c-811c-b97ea551f555"
        },
        "item": {
          "id": "7c592eee-1ce6-439c-abef-24fb694cd21f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "1acf1482-517a-415f-8592-24fd9f2818df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fe0a0c2-49d4-46a5-aabd-78ed1f40065b",
        "cursor": {
          "ref": "46f4de39-421d-41b9-bc0d-e4ee4abda10a",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "33d37d22-e1ac-46e4-b02c-3031ae1668e6"
        },
        "item": {
          "id": "7fe0a0c2-49d4-46a5-aabd-78ed1f40065b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "08acb5b3-f018-4f43-91d6-a50b2812683c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91ab2b81-0643-41a3-8004-eeed5b76176c",
        "cursor": {
          "ref": "c81254cf-d03b-448f-b5b9-4c1094fa3a43",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "9eaaa4ea-8aea-48d6-8df3-ad30f87831f6"
        },
        "item": {
          "id": "91ab2b81-0643-41a3-8004-eeed5b76176c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "6cec5447-211c-4cfb-8c20-af288c7026dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3072d5fe-3442-4632-bfb9-232a57a1b422",
        "cursor": {
          "ref": "0669c221-0546-4c9d-bcda-41ab40b7c7fa",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "79e58946-9e52-40fc-a411-83cfb079b6ab"
        },
        "item": {
          "id": "3072d5fe-3442-4632-bfb9-232a57a1b422",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "6977a112-600b-4a62-817a-0d01b62ba541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ba4d0ed-74c4-463f-835c-374cb9f8fb47",
        "cursor": {
          "ref": "1706a754-8461-40f2-aebc-7bd7a0650121",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b45cfc1d-b637-482c-b16d-6684f010e282"
        },
        "item": {
          "id": "7ba4d0ed-74c4-463f-835c-374cb9f8fb47",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f8b5a828-7c80-49f5-9d72-a20a9ecbd689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "970d0ec2-921e-41bf-a53f-fb58fc21335a",
        "cursor": {
          "ref": "7d68799c-1d37-42b6-a536-886326a6a336",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "87d6f147-d1cb-4ad4-b0e8-8cecc1f2001c"
        },
        "item": {
          "id": "970d0ec2-921e-41bf-a53f-fb58fc21335a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "8eb4f04c-8493-48d0-b61b-ef82f23ceff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9218234a-8af7-4ae8-b310-916bbfce718c",
        "cursor": {
          "ref": "c4940e2b-c5d0-43c3-8571-ea5a042f8563",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "3cf0beb6-0290-4242-89aa-728d8e052c93"
        },
        "item": {
          "id": "9218234a-8af7-4ae8-b310-916bbfce718c",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "4b8a6766-8353-4b6a-b41c-39867fbd1c9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81075178-acbf-4337-af92-f5d6a304a132",
        "cursor": {
          "ref": "c14f8de4-86ce-4173-859c-a5aa3e05a2ea",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c68c9855-54bf-4fc1-ae25-1c8557565258"
        },
        "item": {
          "id": "81075178-acbf-4337-af92-f5d6a304a132",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "41e16574-b2af-423a-b490-9f40baa5965e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "049551a2-cd6d-4e55-909f-4bdb8063df63",
        "cursor": {
          "ref": "f430cbe4-3435-4002-ade9-dab088d98bed",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "2d225d39-54db-42c9-b421-65e557e06fb0"
        },
        "item": {
          "id": "049551a2-cd6d-4e55-909f-4bdb8063df63",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ffeed76e-15f0-4f29-9550-e88d50ac0fa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8f44804-feb7-42c3-92ba-8c71c642172d",
        "cursor": {
          "ref": "7fbccc44-4079-445b-af79-c53c35378430",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f2cea1fd-ec31-49f4-ba3e-36eed8c24764"
        },
        "item": {
          "id": "a8f44804-feb7-42c3-92ba-8c71c642172d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "951a3b30-b367-4217-889b-a337243af799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebf66109-f994-4461-b33a-57dfe0b92585",
        "cursor": {
          "ref": "304b4eb1-5a50-4107-b627-7ae80893f7e7",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "2eb04226-2f82-44a9-9475-3b96baff0e9a"
        },
        "item": {
          "id": "ebf66109-f994-4461-b33a-57dfe0b92585",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f6a8653e-5079-4c4d-8705-f2c15f6d3db1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5326a47c-60bb-4cb5-a39f-396c18beb6de",
        "cursor": {
          "ref": "bdf21687-14c2-4dc3-9d95-ac7614d48425",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4da804f0-b6c5-42b7-b173-29b61ade47df"
        },
        "item": {
          "id": "5326a47c-60bb-4cb5-a39f-396c18beb6de",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "f28c68e6-0e49-4605-8ad5-a6adc4cc9995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c68b872-21a9-48ad-9d40-c54a999ab99f",
        "cursor": {
          "ref": "6f5f70eb-c5b0-41ec-aae5-c3372914fe15",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "0f79c4b7-fe86-4dd2-a5a4-f7ee18a9d549"
        },
        "item": {
          "id": "5c68b872-21a9-48ad-9d40-c54a999ab99f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "00ebd019-c3bf-46ef-951d-ac8d0c80aa62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6db3780f-e00e-477f-85b0-4d57a4cd7c56",
        "cursor": {
          "ref": "c2ac24b4-8021-43fd-8c9a-c8683a745d58",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "c4baace7-aa99-4b89-bb41-94ec870785d2"
        },
        "item": {
          "id": "6db3780f-e00e-477f-85b0-4d57a4cd7c56",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "50269230-2898-4064-bc2a-661a30abd235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "818b3a8a-dd2e-4969-9095-8f4e76a86fc3",
        "cursor": {
          "ref": "35a453e4-4b5a-4a8b-9a4e-7ea1ca8d4c0a",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "9105fd86-1688-4559-8cbf-ab1e2cca1f16"
        },
        "item": {
          "id": "818b3a8a-dd2e-4969-9095-8f4e76a86fc3",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "379b9cbb-5752-4933-9986-19a795b97567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "535d5c6d-eaf9-4579-a16b-b26ecae6cada",
        "cursor": {
          "ref": "9aec18b2-6d9d-4942-bb1a-525537a9474c",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "1510e3f1-3a18-4186-a2ac-b182452fee38"
        },
        "item": {
          "id": "535d5c6d-eaf9-4579-a16b-b26ecae6cada",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "4430533a-87e7-4c10-bd26-958fefd61d59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a88043-6893-47c4-a132-5dec62a8d87e",
        "cursor": {
          "ref": "2800c64c-4c30-4abd-9f8d-76c75ee470b4",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "72d60b67-5a50-48d7-97d0-30188345ac63"
        },
        "item": {
          "id": "c2a88043-6893-47c4-a132-5dec62a8d87e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f68e3fdd-0374-46ab-a535-dd0bb92bbc4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f7023ab-0707-4c77-a31b-30ce3a4a6316",
        "cursor": {
          "ref": "30c72174-55cd-4d91-af94-dae1d5bfb1a6",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "04e5d06b-2389-4efe-8eb8-65c0a91292a4"
        },
        "item": {
          "id": "7f7023ab-0707-4c77-a31b-30ce3a4a6316",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "41ade183-dcd2-4b29-b04a-c4a5ae7d7801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa0eda13-3785-43a8-b0a3-c4bfed4a3e3f",
        "cursor": {
          "ref": "f9ed9394-d1d0-47d5-85db-ac7835d66a0a",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "d794b4be-a0fe-4368-b975-0c3f87f5102f"
        },
        "item": {
          "id": "aa0eda13-3785-43a8-b0a3-c4bfed4a3e3f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "439d49fc-fd1b-49df-ab3c-f1a5bd6fd661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d679e32-8618-4d21-8268-88c3ec16160f",
        "cursor": {
          "ref": "150edc6a-0b25-478c-b7b2-7f7d06d00030",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "709ac38e-91a6-4c7f-8ca8-513f60426440"
        },
        "item": {
          "id": "9d679e32-8618-4d21-8268-88c3ec16160f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f1ae7896-0fd2-4379-8e6d-74ea5e7f8229",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "589f232f-8cb5-4dc0-8a28-3d0ac43a7d3f",
        "cursor": {
          "ref": "e5ef05b0-8e6b-4c04-a68c-bd96ecf892b9",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "c926b8aa-9aa8-44b3-b3a7-97af4b6f1faa"
        },
        "item": {
          "id": "589f232f-8cb5-4dc0-8a28-3d0ac43a7d3f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "84bf9cef-955a-4257-85d6-325290c59c10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e714b744-bc6f-4bc0-bb29-05b7627c9fc2",
        "cursor": {
          "ref": "ba0e5735-9de8-4871-adc2-30195218665b",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "8406c446-0ede-492a-b124-649a77794c6f"
        },
        "item": {
          "id": "e714b744-bc6f-4bc0-bb29-05b7627c9fc2",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "46d2d40c-d033-476b-aa48-b6cb0b25c986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6828647b-e463-451b-a791-5be074fd4b1b",
        "cursor": {
          "ref": "9685ce88-c130-4a6f-8375-f1ae90d43da9",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "3cc740c4-270f-4c3c-9277-bd9841e12829"
        },
        "item": {
          "id": "6828647b-e463-451b-a791-5be074fd4b1b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "8129f48d-c1f8-4898-8b49-7b38f47a5a92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "060ac80a-824a-4290-ae8c-94b3a7f9e3b8",
        "cursor": {
          "ref": "e864ef04-910b-4bcb-847b-80bea3d13b36",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "0d70ba3e-2481-4283-944e-502edf5f7f2e"
        },
        "item": {
          "id": "060ac80a-824a-4290-ae8c-94b3a7f9e3b8",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9960314c-0276-4203-927e-d16983c0fae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51618190-0d55-4c26-bc46-33cc3ae785f3",
        "cursor": {
          "ref": "ea58e2c4-12f3-4a7a-b1cb-7f3d9f4d1ff8",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "18f9da5d-6113-472c-8171-2846dfcdc04b"
        },
        "item": {
          "id": "51618190-0d55-4c26-bc46-33cc3ae785f3",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "83e5b8be-f1ea-40e6-baf1-08b4f32f0d37",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6019138f-a4d4-487d-88f6-40d9ee7f68ce",
        "cursor": {
          "ref": "d03b6a9d-d417-4aab-b51b-77e8065b9f33",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "3274ca08-18e3-4af5-8718-c71f46cb09d4"
        },
        "item": {
          "id": "6019138f-a4d4-487d-88f6-40d9ee7f68ce",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "12e20a26-a6be-4eb7-b9c9-3e86be0d98bd",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "bdf21c87-2c4f-45f0-95c4-e9e6d169802b",
        "cursor": {
          "ref": "0e199e3e-8ff2-4bb5-8ac4-a5a4c35e3a41",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "11be9ceb-5d08-4043-806b-359db94c0bea"
        },
        "item": {
          "id": "bdf21c87-2c4f-45f0-95c4-e9e6d169802b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "cd34c910-3e1a-4bd0-a4d6-2eaa8fc5e7b4",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecc66210-deb4-4e3c-abfd-1e3c68869caf",
        "cursor": {
          "ref": "8154474e-6b26-4b55-b9a9-b06271fdd3c3",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7ff32ef2-f990-4d85-9056-c4cc0ff88fe1"
        },
        "item": {
          "id": "ecc66210-deb4-4e3c-abfd-1e3c68869caf",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "aba5f59f-5374-42b6-95fc-92d5fe1952f0",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d44a5612-8ea6-46a4-93ee-49ccb66143d8",
        "cursor": {
          "ref": "156ac9ec-6d18-4af9-bd45-fe78292a5a59",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "dee599c7-df37-42ee-99d0-529100e3aefe"
        },
        "item": {
          "id": "d44a5612-8ea6-46a4-93ee-49ccb66143d8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "003baf2d-3451-4661-8724-d1008280ba60",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d44a5612-8ea6-46a4-93ee-49ccb66143d8",
        "cursor": {
          "ref": "156ac9ec-6d18-4af9-bd45-fe78292a5a59",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "dee599c7-df37-42ee-99d0-529100e3aefe"
        },
        "item": {
          "id": "d44a5612-8ea6-46a4-93ee-49ccb66143d8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "003baf2d-3451-4661-8724-d1008280ba60",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8209879-fedc-4dbd-a5f0-d089f7beadb8",
        "cursor": {
          "ref": "76265811-d371-4bb1-889a-a43c98e57189",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "2acf1325-c3da-447f-ae37-6bd2bc3be397"
        },
        "item": {
          "id": "c8209879-fedc-4dbd-a5f0-d089f7beadb8",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "15a4652e-70c2-4ec3-afc4-ee77100f5705",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acefb7e7-7fb4-4b52-9179-09d930f1c098",
        "cursor": {
          "ref": "d0a52d7f-b474-4ae1-9278-223d2482964e",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "954669aa-bdc5-4167-86e9-4027c2638e2f"
        },
        "item": {
          "id": "acefb7e7-7fb4-4b52-9179-09d930f1c098",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b9d10fa1-d267-4a59-a82a-847431f761af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}