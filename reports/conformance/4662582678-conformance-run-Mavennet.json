{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "1bfd34ce-40cd-4573-869b-c5bc5769afc5",
        "name": "Clear Cache",
        "item": [
          {
            "id": "04e0bce7-0327-49db-88ba-2b7f1b952446",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b9e05e86-c32f-4756-b741-c34fb4f912da",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "fe7a9929-2f3b-4d22-9b55-46c22b9cbdfa"
                }
              }
            ]
          },
          {
            "id": "728214a9-9aa7-4090-80fa-4db141c061e6",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0fa69896-c331-444c-888a-fb6c1620a8ec",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "cb627cab-296e-42fc-a57d-b54e9e6f9837"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8188de71-a29a-4d7e-aa5b-8d7418220881",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "0863e946-ad83-4572-a5f7-7109fce5849a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e793634d-3d16-40cf-995e-7f49e884de89",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac222bc6-0aa8-4bac-bb89-84648b20403d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d0446365-4d8d-40c4-9f3b-e6ab11ff848f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f577385e-d209-4b06-8c10-f25658ca521c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9f255516-ffa4-4961-90c6-342e337a08c4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9e584f3d-18ee-4ebd-82ff-ad5ab0f23420",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "30b37de8-c997-4377-b1f2-02c4efaa4cbf"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5a73a61e-6736-4f76-819b-c74a4eb4c909",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f608d956-19db-4e8f-a359-916772036f8c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1ed08fad-f58e-46c0-9252-3070e4ff08cf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "634be441-983b-4496-a123-0e3d308da159"
            }
          }
        ]
      },
      {
        "id": "0b81ce7e-7fe3-4efa-816e-69c2390c4320",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "bc898a59-bae2-4ae5-9c60-4a2158a2442e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "14eb9831-d9e2-4037-972b-dc2291f934d3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f69be55f-2864-4ec9-afac-c88a87cd4449",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b0137c9-4435-4b14-8190-65a6cef7d7b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "661cf2b5-49bc-48a6-8b82-e7f32184ffa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21cd2145-859c-4850-9f3d-48575b0dffe9",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53dc3f1b-fdb6-4e82-897a-ef95809cb137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e9dae784-58c0-4042-80e4-a9d2fa274120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5941d192-ceac-4d82-958a-00fc14a309f9",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d7bc23a-4644-4a15-9ee0-8a8ec2a4036d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "419c222f-ab2a-4a06-af85-81491d02d3a8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0158a756-ec35-40cc-b77d-5e07c20a58e1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c9a2e3aa-f300-4776-bf00-04567327e6e5",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "307cd9b0-d3a8-4f2c-977a-a32f86b57560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e1831db5-381f-4fe3-9684-b6121aa16a09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3491d05e-487e-4ce8-a5f2-32cef0cae850",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cf0ef90-37a0-4fed-9846-e63479461faf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9be72b5-8da1-4b7f-95aa-c6c51b7e3648",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eba2c33e-1603-4667-a805-b894e14234cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3d5c6d42-c792-43e9-9ccf-ab48e5967845"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab61ab1c-d51c-4a6e-97fb-d876826dbb64",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "9a833f03-12df-4042-a673-ed720d5fa3d1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b03d198f-b228-42c2-b6f0-91d1860a916f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4e501102-eea9-479e-8632-9554a89ac33c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4bbb41f6-635a-4b9a-b1cf-cb00a86e2c78",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "4ddda5bd-12ec-401d-a30e-b9b6f916d95b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4755bdf9-9d74-41b2-a0d7-5d93604aa64d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "0dd4b335-6586-4235-9dd4-1a520bcdb9bf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9bf847e1-c201-4747-af41-a365e6c33db4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e9e4d06e-01b4-4054-8473-36fad3bc9e7f"
            }
          }
        ]
      },
      {
        "id": "92bdfd91-fe1a-40ae-a62c-301eeea0c01f",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "b66e0ab6-5bc2-4c24-93b5-b1d3b9dc4f9e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a4543ee6-3f1f-475d-91c8-f7adf12bc6aa",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f7c273af-9487-4f4e-a092-a5b137420e04",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b6abe13-f8b4-4ce8-aa86-10a9e8e68d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1687b49e-6381-4eba-94c1-dbc9dd7e59aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb8a8189-af16-42fd-9a44-325dd28876ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1534530-8fa3-47a6-9d9c-db0e1422d52a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e49cac0-5971-4c57-8a20-63627da322d6",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b49db2-54a9-4287-a0d8-92e63b2bb8cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90dcda70-7a5f-4b7b-85e5-3c92fcd4f81d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b0f97a8-48fe-4bfc-a7c8-578e2a918ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "672ae1df-1d35-4cb3-af12-2155728689e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d035e42-cb01-418a-a930-7f583f506a64",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2616796-8cbb-4b0f-abbf-7808c2da72cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "664e15f4-1600-4545-ace0-5a4c6c5cde21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72445f9c-d9c5-42c8-a1fc-21ad8c2c214e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "121e98bd-1987-4490-b3fe-cc8439318ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ebc5293-39de-47af-b71f-d0853e28a581",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf2dccc-1a1c-43db-a627-e99b96ffef5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4067463d-e251-4663-ad05-214eeb940d33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa214033-9535-41fb-89d8-aab90a461f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "87d8ee11-f149-44ec-ac11-60f10da459e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3ec1bc1-6d4d-47a3-b060-3f2ad36f905d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b13cf77-d4b5-4b47-afea-7da681c6c48a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f457e80-60a1-4ae8-857f-6061edfa9657"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d078b3-a758-4aa5-b4c2-6a0536b372e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "158b87ff-596b-4c1d-81c8-00e0780f3110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab8e4f6a-1384-468c-9771-926046113a93",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b263db26-8abb-457d-a6f5-0c842af8aec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75a69e1a-815c-4aa3-9989-9488b71a6672"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "194b4c6a-a497-4bcb-9c2e-c78bd1c83fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc9b2fd6-1ba1-4337-a383-decfd870594a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8bfa9cb-8950-4eb7-ab49-941c721acf7b",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb0a17a-6238-43c3-8169-f1a7f73a3459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dda39b9d-d6ce-4252-83a5-a9af02ced4e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb07fc3-e9ff-47b1-a6ff-2b63506a75c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de57dbfc-0ae8-4c54-b452-f623f5eec146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3491cff5-d093-4a05-879a-9c9302bbaa6f",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d7b9c1f-ee6a-4b32-b8b7-5dbb89856e9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7170db69-5211-4fb7-98c2-d623e28addc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c84a453-0b78-40c4-8af1-efb40b449881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "79c3c154-a7c0-45c9-9e67-e3c46e77c651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9880742d-b265-4bff-9470-51231ee52478",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d81539ee-2187-4dde-aa95-8466c42b4afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0fb2c29-3cc0-4f03-b1e3-2471bb228147"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa5514d2-74db-4c3d-becd-994e04c37e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc2c4be9-d070-4ce0-83b3-e60d111aac43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f4d262b-20fc-4222-8c66-53bd1ecc9e64",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9e0e24a-412c-40c1-a0fe-d1eca6bd4826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4781efb5-cf4d-4792-a791-1de4c951cb3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95b2e7c2-6063-444b-9809-6eadafc36646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47181891-43d4-4855-abea-1bddd2b1e704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "343189df-7df4-4d2a-a0c6-473f3f992b82",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1914e36-ecda-4a46-8d7f-e17e3d38d5b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7b5b64d-28fd-4e87-9c4e-1dd96a509496"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28a4e2ca-3b44-477f-983e-f8dc7a417080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d53a816-5fe9-44a7-adfd-9088f261cdae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04d79441-8892-4a80-952f-376aae570aa4",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2887fc97-410b-4965-8960-3895786afec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb2339c2-58fc-47c0-88b2-5f7deb56d5ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c4dcedf-a949-404e-a68a-0c8368959f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "622774e2-eae6-48c7-8dee-16be60cabc3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e81c8f-5f0d-4b68-86cf-44e2e60e0700",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d16554ff-6d9e-4d1d-86c5-5c2e9afe1dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdc37f7c-1e2a-4cc2-bb92-5c05d493517a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed9231e0-86fa-4fe8-aea4-5e6211b27459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e10012b-bba0-487f-b1b2-7fec94105ce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62f32694-be9d-4571-9f6c-fa9447977d84",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d0bbb31-c47c-4794-95be-f2379c2b1413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2340cfc-a666-4f4f-9e51-e54f97bdd536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e67233-a33d-401c-8096-b7273164bef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a02211b1-b8a7-4674-9063-95295bf402d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46220b15-7f34-46d5-ba5f-dbebf813dac6",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32403b23-1f04-4d61-ba28-c4236bfbae4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4151f79-fb9a-40f0-b9fc-94e3ce224baf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "948d6ec6-7189-434f-bf98-85185758cdff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e9e88a3f-ce2e-4cb9-b946-0bb7444c9e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8f2e1ca-49b3-4a0c-ad1e-9af6f202403d",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60244e0e-8904-4074-921b-6f1cbeb24e41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7c946c6-d8ef-44b0-b33d-24e3759a00de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8aaade1-81a1-446f-a5e6-e95015cf5623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e29f591-8ae3-436e-a851-7f21642b6826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc5b8632-6617-4e1d-8ebd-7f12c71a62be",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d29036-c372-4e35-9229-21a404214c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f353d09c-859c-43af-960a-4e6ff560ecdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d58d020b-fb86-4514-a767-2496f807a3c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "760bae3d-8293-4b47-9c8f-affd5700b54e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a033dfa1-b479-4792-9deb-e9ab7210f414",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e251d34-8ce5-4251-bc60-683ea9068de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d3ab111-a8c5-4901-bd9f-adc6b4250666"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f467da5-eaf4-4bb4-8a1c-84323e2554c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "025e9877-6adc-4a27-ae26-39a684fd9a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07abcc7e-0160-4ce3-bbd3-e56979ffdb83",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45f540b2-5f6c-44d2-8a6b-0b160e036902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "926cbbfd-3c28-47f2-9c42-7bf69f18515d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73692ccf-9014-4893-a683-f78da0a1f6d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "09f5b863-ffa0-4284-9651-de3e653508f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab1179c5-0689-4b84-8f70-285afdcaf5bc",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace2a359-2182-4b60-9764-fdec702403a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4dffce1-4be6-46b1-b3ba-f4026e6ce019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50746158-4052-4316-8e8f-14462ebb09e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe77bf37-08af-404d-b013-14e2ffc94761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40e0bd5e-8f9e-45ab-b8f7-1b46273c8019",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "514a5a01-714a-4f08-b3d8-a38eb4073f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3b9225a-e468-4320-82d7-b035bb48b95e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "012d190f-2201-4b46-bd0d-e7e957842fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0579e5b4-ede4-4110-a884-1d9455d5b56c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb15f87d-60ed-4679-b765-8123535e7a2e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "528f9466-ef13-42aa-b119-d1cb73d83652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcfa1c52-bdf4-4eca-9918-3b19cc090361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79bd1919-ffde-416f-8afe-14203dd366ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5e1caca-679c-4412-ad2d-e37ea44400cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b46d86ea-9e76-416d-b44e-829ac768dc11",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0af4c62-bb4c-453a-954d-481d3dc66e4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dfba85e-074b-4429-a667-47139f6ec658"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8b3053c-97df-48b7-ad3a-4c849a6d38c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e9731a32-2280-4793-bc36-9ac36625fed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2fabd5e-77e0-4407-a63b-e0ef07780858",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a85717f6-4278-4466-948d-0f8bbd8128b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ab67faf-9923-402e-8660-cad45357eb1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4f0a8f9-5ba2-45af-8e9c-3a0c3f82eaf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "20000205-039d-43f5-b26b-63c320bd9b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c8b766-7f72-4b95-af46-1e9bacb840b3",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c32d2e5-67e8-4afa-974a-8db2b46da837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c590ef0-598c-413a-9baa-f988444c091d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c06015d1-cfa1-40a6-89fb-3f58558e2eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "92289d3f-1bdb-45cc-8cad-faefdfb4056b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5846c409-ac5d-446e-bd5b-318fa4675b9b",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9b5c7f-6fc0-4c82-a89c-5992ebb42c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c6907e9-affc-42da-b35d-f75015d9edf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c44d98a1-55dd-4164-8c44-38add44a5e9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee11dca5-7eac-47e9-bb4e-e31fb1a6f013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b787b22-0a63-49ec-b7fc-9e41ff6e559e",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8aae5a6-61c8-48e2-ad62-327a702e3aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "908fe52d-b547-49e5-a8f8-3d5e92d650e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446a98d6-6907-4991-bee5-93c51bd9cea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e2c34da-6b7b-4768-b66d-fb15ee52201e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a562e0f8-3946-4a26-aa6b-13dca661c631",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f080ce70-8e81-45ee-80cf-0a0b742c95aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eb54bec-a27f-49e0-bcfe-2abc27f3cb02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd3bb591-b4c6-4b8b-9ef0-8bfe7b50ba30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cfb4aa9-7566-4405-95ea-a09e6d85a546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd9bf19-e9f9-4cc3-8725-65848dee0e55",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c59c338-888b-4252-a581-3feeb65653bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31a7ce28-9ef8-4e10-99d7-17a663d0852b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "707931b8-4790-46b6-b210-2a71d636d316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4a3593a-c7ad-4914-9d2c-9a308625ab37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1546af19-c53a-4e41-9e17-d8876e4a8c8f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca9578c4-a596-41cd-9709-a6767f5a5383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdbcc017-bcd9-4167-b149-171fdba46eab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87fdb8d5-a68a-4bae-b315-f7add373df62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "76b1ea60-3f26-4ead-ae94-b3ac35488414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c82681c9-a493-4b4b-a179-37b2fa73d796",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdb5e650-63ad-4eac-87de-de411580ec44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82bc1d91-49c1-43f1-b95d-ff196cb4cc84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d5ab2d4-5e50-4080-93fd-6841528b793c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bc097d4-fb3a-46f0-8e1d-3ca578d10bca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dfca619-ee09-41b2-a37d-c41fb5a884bc",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dab7ca39-45c3-4107-8400-b75469bd3c71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe67f8b2-866c-44cb-a6a4-f2353ae13879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e47d8ce7-7528-4b52-a6f5-2410a6293901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "19139f5f-114e-42be-8773-5a2fc461f2b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c434a92-81ee-49ab-add4-ab577b2d97bf",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb79466-9fee-4289-8363-2c659d98ef61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d92e9d7d-a6af-432f-8888-22e2b6bd9408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8025693-f097-4ca0-a762-2b18027e00a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f395b21e-a01a-40a3-88ac-3b125ee947e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "885765b3-3984-49c2-b0db-5fd358b2bd0d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49046a48-f51a-4658-acef-cc56c1490fc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f6319c0-a4af-4bc5-ac42-a7fac7eb7ebf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2a2bbe2-be12-4335-8277-cc65e68cc4a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "80a30344-2173-4199-9386-f1d02be0e43c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a2e2d4c-caf2-4a5d-888e-558bebed7f5b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8bbb8f-629a-4269-9f05-fabc4170d943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aee0722-dbfc-49ed-8249-23ad5fcf2e7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa9639ad-c470-42ca-856b-a44e4b8a91ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a2ec4025-5d00-496a-980c-d0d16a75b70b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "382ddf9b-a1c3-4155-8a53-2f9510ceeba1",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2470c271-7bae-435c-bcc8-74327548c97f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "76dfdc58-8762-4d11-814e-9fc76a0d2dae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83e73b0d-6d76-489f-9609-7b1c3e59b90a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "38f0b8bb-78b5-4123-8ebb-7c62b42cf9e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e84c33be-a87e-4664-8454-bb08139e955d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccaeceeb-d4b4-4264-be2b-c348e45e6935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c84f7111-b9e6-4858-b33c-fd29e333a069"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "044c4293-7b5a-407f-89e7-2ce261a7c66f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "09b9c554-6950-4da1-8e53-6af871b22377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcb8d992-2f8c-4630-b961-1d396814058e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56827c78-e112-4fb1-becc-f651b10d6828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d48f4a8-5409-4580-883a-ae3e2a0a4075"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb08c062-feae-44a5-ae81-87ad3fcc47fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae781b10-4ea8-4f5f-8aa8-d2b25cc25905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d151ea-26ac-4d42-9d5d-124516ce31ac",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a27cb7-8533-4939-996c-8de32f019be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce114bd5-77be-4f71-b6f3-41b0ff995b38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f8bffd9-6452-46ca-808e-97180ce61002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b3a572ba-aa2b-45f6-9a3e-12386fa3f3d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5543ec89-75d4-46e8-9236-7f36c45f7baf",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e699f70e-5113-4b69-a822-af198f7fe344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eb3fba1-a22e-4e6c-a89a-57e7cd8549ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "599dd3ea-dd87-4d0b-a3f5-1a800db3a601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ace4161-17b8-433a-a644-658b929db6d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "309ed2f9-bea0-4df1-9f95-83fa1b8ec409",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ac803a7-907f-4b7d-9704-7df7792e1e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5ad34e6-2167-4b26-89fd-866f4c096ab8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c5efab5-dc80-4024-b9b9-0c25d5653ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb648af3-2555-48f5-a8d9-f3b702ee41f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ddd5916-a03e-46f9-98e1-ad028878cd6b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "765ca349-754e-4c51-b585-7e9eeb825192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c1afe14-21a8-41f4-a1a3-bf59f5667584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a09a238c-8dc6-4392-84d4-b6ce7097fd57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "7c6f15b7-9e8b-4aa4-a7d0-184f94d34877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b163ef9-29f4-4743-8fe9-185daedef118",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a95bc017-4ff2-4e54-bdb2-61af5e9a253c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c98a3ec4-b9fa-4def-b0b2-ed78f08b8814"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9037431-a6f1-43a5-a7e0-c24e1a19ceee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "faa368ba-bfef-45b9-95a4-278bb0de0bcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b4e0283-e2ac-4a91-9c04-1de80aab77ec",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d5fdb0-8013-4728-b23d-4dad8b753492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2e179bb-37e2-4bc0-91d8-4f01ff4cbdfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dd38b6b-a04c-4b64-9d62-850f70d245dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "13424fa1-53ed-4e05-a5d0-067c99439a11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba2996d0-fb42-45df-b87a-ea8344163168",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "339d1943-d259-4045-86e0-2e8c4c7e3022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71496101-69c8-4095-a97b-82a4761c5dd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60b19e1d-7192-46d0-a11a-e6d27a80c5d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a4077f0-7d80-4299-a5a5-e25d33ada31d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba2bb59-260a-41f1-ae93-f45b0bef0d68",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "226d973a-1397-45bc-af63-9921b085e484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7a9a355-02fa-4a1e-a6d7-50acbc4c7095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d47f2d-b4ee-4c98-9f47-9d98aa8f85ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "69032220-e4a3-49f3-b1f0-5c9ad90bde03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f16b578-4698-4039-aeca-74194da2fb81",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd1b67f4-27ac-48de-bb0f-a168f6f34571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07e2ac32-7979-4b54-a054-9266e748ed10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55be042b-3ad7-4d1e-bb51-d4115fef3383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "416edbb8-e6f3-407a-9c8b-6863208edf8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d0b09a5-fda0-4b9a-b7ca-3826138dbb53",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e550219-1e87-4351-b474-92c3d098da0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4ec1ab9-d864-43d2-a87f-84b8fc0e5e7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e232546e-cced-41ca-a620-ff650d622b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d359b3a-cf4f-4a1a-bf92-7b7f714cd862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9faaafa7-6666-4c31-a325-374b461cbe8b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ee38c9-1aa7-46a0-8b95-b46c404ecba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ffee7e7-1277-4e00-ad96-ffee51df5cb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3caaca9b-fbae-44e7-b765-cf9b6ab42717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4b82db2-f46a-43c4-b76b-00f48cf4be38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4d74951-5e97-45db-8f01-7d864ccd61c8",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78320d54-5b50-4af7-ba4e-3100ef0623a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5875908c-f174-46bd-a73d-840784d27d26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f47c4e4e-3cea-471a-82ca-a563d4e0c21c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3f299ba1-ecef-4840-b850-03ff965d7127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cd1e997-4b9f-436e-9671-040cf1825c1a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b16b6b0f-c823-433e-a41e-8059535d39ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f59b38e-ffa3-494f-acfd-714892e70b1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef31aa37-91d9-4d15-bac7-f133ccd54c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "1383ae1c-8962-49ae-bf1b-69a2e844c996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7509dfec-b108-46bb-b4b3-daa566ec101d",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d180624-6277-419a-83fe-61eec919aa5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a08ec1d-a4bc-4d24-af3f-51499ea6112d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b174c95-8ed3-46d6-9de4-967d3003d88c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "be12244f-7967-4433-9200-7123c7bc9016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4738826e-efb0-45c4-8681-01038665152d",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "388c2508-fe32-45f1-bf96-3d951635d096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "872b5e44-03cc-4f7d-a623-f266f94810e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a30fb3d-bd36-472e-b976-d56b3074c922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "93ca02c5-e400-4f8e-838d-b0ea3137b1d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c1eeec5-5e7b-40a6-98aa-b3a409e197c1",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5239c1a-797a-4318-b7b0-d8e72bca3693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18a2b290-bec9-4394-accf-45e17546d2ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c04b82-c21e-41d2-9e79-721e63ec77d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d5f882e-51c1-4392-abe8-ed2c61c9022d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b83b15cc-a64c-4b76-bdb6-8cd30e9977d3",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa0de2c6-ce08-4e2c-8895-20b0da11223b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93cbd5d6-ba6f-4f03-b500-bc2e0be46ad1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d0dec04-09ec-4b9a-8d01-1d3a129a800b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4b4b8cb-2952-4ce5-9e00-73bbab2985cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee12a2f-a500-469d-a701-c747d7387be0",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3290ed7-7f50-4610-8fb6-b7b30ee7c3b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6f1006f-cd0e-4f7f-9155-ad4d324894fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdcffd6e-5734-4392-b146-76f34fb44b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "20d07865-5b30-49a8-9826-a8110d6b47da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33600b66-1ab7-462c-959d-bd35212c10de",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c9c7be0-d00d-4b0e-bd62-ab0bde40beee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51d4830d-2c4a-41e5-8baf-69df5f063169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d54a59-ba6c-475c-9ec8-95a238bbc470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b44dcf0-3a4f-4abd-8d73-3eae34c3d95a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03fed2b2-a823-4b35-8ea5-c044b0b98889",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a19b23-308a-4303-8daa-8b8d56cdf379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "126422d9-9ab2-4fe2-88c8-bcb5bdef3eb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c81264c-17a8-4b37-a0ee-e0b5ad7512c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b3c48d2c-0d82-47f4-8238-e362a0228b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde364a6-8eda-4fa8-9ce4-7bfe20aaa49a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8744034e-9dc4-42f0-8bcf-7e7118435961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe63c64c-3ede-4515-8295-0f844c73df3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e387fc-62e7-48db-8f83-a508b0962115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "87f9f530-5bbf-442c-b76f-f4ca17785f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bbe0276-a6dd-41fc-b5a6-55c5e56ce5bf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "429881a1-01e7-40c7-ac89-caa7f18ef2c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f3d00c4-c2ee-4222-af41-e5cffa9e3e10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d8fe029-82bb-473d-9771-9ac993f7624a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "491a7deb-59c3-4db1-9fb6-ea6d0e122c5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7535d20-c5f2-4543-81df-9b7f0147446b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ae776a-78eb-4e2c-9645-42e1c83f1f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44add5f5-f55d-4f02-9f46-bbc21319f5cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11dd3178-e184-4d07-b2cf-333d74a2e729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e1147d4-4fd1-4172-bfab-959cc68ff1e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8effb822-ef5e-445a-8b22-16412e03814d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f2e916c-a154-49b5-84af-d76ec9c1da7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d29b15b0-62a2-4e26-b6d7-f4c5d507421e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad519cd-bb6f-4a1f-ae21-2d9edb7ad13f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "8637be8b-5674-46e1-ade1-7a4d20d12a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ffa38a-f700-4f5b-927c-6d643b550dff",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1665bf1d-ab15-45ca-a35f-de89a6244b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e85a5be9-e85e-4236-8b9d-b2e29026d253"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f636a1-49c4-4401-b598-bb5cd7377dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "97af4ffb-cd20-4d44-b12a-633e3dc3860a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e56f089b-7f34-41a6-8ebb-e72fdbde91dd",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eee34e8-96bc-4ba8-aa5e-9a306a919dfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa723b73-d83f-4401-b124-b32476792ef5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "930bd8be-6501-48aa-bdc4-ef18fe219351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "745cba94-2d45-4b99-8d9a-22718af81893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e91e13-e550-4c8a-88d0-1dfea3cb2ba0",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7df3ad3-1aae-437c-acc7-62ecd401c161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2a4c29b-f32a-42a3-acc5-10af1fb69a9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aad51c8-c1fe-48a1-ab03-96b40f1304d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "650af5b5-90cc-429e-8784-db67223438f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c21f8521-6f22-40b2-94fd-b566ec72c03d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b05ba258-401d-4d6c-8750-647264d0b83f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85e12ee7-d5c7-4ca7-ae60-2fc7b0ad6e12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc45c43d-852d-4621-84d2-924b80e64cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff4ebc89-eb14-4db2-aa2b-8b9ce840507c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "101de8e1-9b32-4bbd-ad94-9d9d99f9a9a7",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "161e9b96-0526-4c5c-a54a-40d5eb5b004a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "785fa529-ba34-4e30-b5c8-fe02890ea743"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3febe2f5-9d22-4faa-b611-d97f09577d70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ac5d173e-9c56-4d33-863e-12f4fcdc2ac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "880cf81d-ae57-42f0-be9c-f3357e6f6dba",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e959c4a3-fd0c-4c40-8368-4b865376d2be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1334755a-bbf6-4e37-beda-e509455d4be6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3958e63f-af32-4fb4-a9a9-bd92924e6ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffa0b8e5-8716-41f5-962c-a0f58aa80b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b0b9bde-32a7-4c29-9211-d18acf32e8a1",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cdd60bd-d78a-4edc-9142-298d1dd78e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50399043-a776-49c0-8ad5-cc36cf24c636"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d41709b7-645a-490a-abc9-89a01821f8d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b3506db-309e-4e11-a34a-407766cc17aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c869185f-a0e6-4720-adc8-bb83c029ce4a",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d316e122-bb9b-4501-85e2-f173511e05a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df684038-21a2-4eb5-964f-930763b1e009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f028c89e-0330-4e76-9e1a-8f367dd30ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8eb88cb-9365-4a43-a76d-f9d7f8044418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48c41780-069e-4b2d-b9a4-d399ca553c39",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7b9b68e-00a9-4092-8808-d9a84b450917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b101ab0a-68b6-470e-a7b4-37c08c8bc719"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60113c71-6ca8-42c1-9da0-89acc61b6a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c367308-2e08-4eb9-8135-4f8ab69db6cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17881ea5-d5ad-4b95-b786-c62228ebb280",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af308ada-f176-4c01-9cb0-3aa9b1c14d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccaa1ac3-a95e-4327-bd18-fd513f726627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64fd4ad2-011c-45d4-857e-b6ad46c30d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "98bd6b54-781a-4508-b2aa-4cfd6578e867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fdf315b-90d6-42f5-89ae-c89f977a6c43",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5efe7a60-8275-4752-a8a8-f058b0ab2eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a401ccd5-3d08-4ccd-9d9f-249e5c97fc54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edccbd8d-6cd1-471a-8363-bcde99aae472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "62eb6a58-0cf8-4bc6-916d-289dccd1d182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fedfcb5-0c1e-4148-9c3a-7fb26a219965",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a56536fe-ac0c-47d8-bbae-295699bc078a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51992e5c-8eb5-4c25-97f8-357196fd6fa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "054e8a0a-a98f-4e76-955e-e9622c8757bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ba190aef-dfda-47cb-8175-4faa35f84de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51afc004-d99c-418c-8036-290887682316",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "640d0ebb-21ba-4349-bfae-7f1738fc73f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94f91e38-5ab7-4180-b0aa-688619c3464e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "635e0db4-7db5-4b36-bb15-c2d731371ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5120a0e6-e762-41c8-9012-1a50c62072cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55133368-460f-42dd-b097-fc13acf737af",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c028153e-8cba-4209-b96d-d7d6c813b255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79512861-cff4-4e07-a4d2-a8cb841e356c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f9b9316-3ead-480e-89d2-ae4bd139e131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "796f38a2-599e-49e5-81f3-77918d66b6ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1f29985-8983-478c-abdc-bdb50bd922ad",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f7805dc-d26e-4cff-b985-ed3a627c0b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb353f0a-1eab-4084-b57e-e4fe2136d61e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fea169ba-4713-4601-87e9-5193598a51c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdcf4634-d530-4021-8b05-9c2dc4bd450b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b5aafdf-bb53-48f2-aeba-4fa5604b366e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "445b7f41-0443-4fa5-91d5-8c8e8382911e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fa974d3-88f2-4496-8869-cf08806bfd10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93536757-1d52-480b-8ec9-7afbe87aba22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d890bc28-1c96-44e8-9441-5a551894797a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf053f71-84a6-4399-ba2e-c0c540be8815",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff27d667-6ea3-48aa-9ac4-1a591604391a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e89f5572-ece9-470e-9c1b-6a80756df681"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed0721fc-00e2-4adb-a4ab-5716291951a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "29014687-606c-4822-9067-3edc287ec3d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22bc5271-d6b9-4c8d-8c34-404a0b34a5d8",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f276644-138d-4be7-8d2d-f1dcdbdf3687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5fa3ff5-8b2b-4292-b9b2-25ebc53b8b9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c363cdc9-95ab-499a-9dbf-23f524803861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c9c9b81b-bf76-4396-a091-948030f648c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5390838a-23f4-4e42-878b-f41d537c807a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c4a0cc-adf4-4efd-bb83-fa100cc879c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00e90066-f12e-473a-af90-c6e2ebecd2b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4619853-720f-44ec-b671-53427179f125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "34c2065a-ac42-452c-aff5-53810248ff0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac81b50-b064-4c8a-9ef6-edc1949d766b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c81956b-2011-432b-bf6a-331fdd4b841d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e193a61-765a-43d4-977e-0d1482aa6bd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de53518d-579c-47af-8539-a8648056dab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f37a01ab-5093-4707-bb9e-9c5c58d3f331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b693579-d2d1-4b45-a7e8-fa319298aaa9",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada266e3-dd22-4556-b36c-c0b184549cbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa88ec88-8e1f-45ec-a040-dcedd5fd2be4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7461d029-4d2f-454e-a7af-2ed8e9a16f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5331892c-61f4-4412-9ad8-5448ff67dc54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b35b7f0f-b04c-4819-b55d-99e19617a096",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9029579a-069f-4d47-abc6-e62070f73ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbaac88f-660c-4758-a6ff-21f6ce6bac37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4faab90-3928-45e0-8164-7281ab6a768d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ed7e62a-0acb-420b-8d14-e68fdf6f3cd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8cf6e6d-21f1-4c17-9255-0f12636d278a",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ad1f12c-c6a8-4ce8-ab92-c490c6dc660e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3b2cca0-81d1-412c-8823-2211ed733e94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "739afc1c-2f6a-4e93-9a98-2963a316f11e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4d423113-5e10-44a4-a31b-0376881f091b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3de36ec-6771-4c9a-81a0-4b473461a64d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f19b984e-cdf2-4668-a0ad-fdce8d942b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1678c980-ddcd-45ec-be23-56709120c2cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11320f78-255b-45e5-bf87-2883a1dfe004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1117024a-8ff9-462c-9c3f-32a224c71754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cbb0bf5-2fa7-4f51-bcb7-2b6ac4aad2f1",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a45e09f3-c59e-4ef9-b004-6dcac17bf609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7824ae2b-2910-410e-af08-7688c6fb074c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01b956a2-152d-48b2-b620-f6b5dbbe339f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "07588be4-1067-4d25-bfc7-effff20cfafe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4001e59c-65bc-443c-b131-2bb810a0f8e0",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e3319a-ce97-46e5-bf31-d829e4d0d41a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "179a0cc9-9c8f-48ba-953c-3fad71237f38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ba909ea-1926-48f4-a718-c2c45f77db7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "926c3d98-dab4-4cc9-a4a3-64c3ddf20337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bec3ccdb-8a8c-4cfb-ad91-30bbe600c1af",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bacbafa-8c2c-468a-a2a2-cd3afacebb2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17c14f24-e7c7-4e46-81c0-3b8e4af67895"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeed9dd8-6100-46b7-b8a4-58983f8b5cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9be812ff-6671-4a77-92f6-8d18e688eb53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f444d9a-9a81-4624-8cd9-f1c8495ae56b",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52371547-c494-490b-98e4-82ec32ad0de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6c33cbd-c58c-4e70-a045-a56a31c96390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a9faefd-9843-42ad-978a-1a91a5057b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d5d9119-b84d-42d0-b9d5-ef988abb41f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02944e09-938c-46f7-a4e1-9a7924a37d6c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f82f89-659a-41cc-b54e-df5ff8c7f287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4c51c97-a4af-4f41-b144-62e4e54d1451"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ba01ff-2232-41a7-ad9a-68f8f83ea146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f48f06af-8373-4c32-89a3-37a6032efb5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c5f1f77-e163-4b95-a083-f2e3d0ea3c3c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef901d6b-abfc-4178-94f0-c818eaddea4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e60e11cd-26dd-499b-b225-a9fbf7d0939e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a38126e-c320-4d7e-95e6-278ed74f821a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "762f6dcc-81e7-490d-8d2d-baf4be484273"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bfa0c6f1-5d9d-43b2-98f4-09ef160bdb68",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ad891bba-4eb2-40df-b931-636f73464fcb",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c145b4ff-0046-412a-9762-d96eeead5f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "79156078-5f27-4bcb-b2b4-45df1fb5bf2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29907e20-bfd8-4b77-b5d1-522b45f1e37b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72025bfd-6041-477f-8a55-8a0b48cb08d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e6bb92b-295f-4ae8-acdd-31483873bdf2",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e92a2492-97e8-4c83-9fa8-70d3a2caa68f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aa013852-25d0-40ca-95cb-9d2e3c55c532"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e446d5a-2ee1-4e10-a539-e68ede786665",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e36785b-0665-44bd-a20d-075bc4e02141"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b75f9e7-41fe-40fd-8c09-3d1c4600160f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5098c891-3e47-4493-9567-016798f98b17"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a8c9495-5e70-4e90-8314-030d60a87c14",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "09a27f20-8e71-4af4-b316-bd3ae319e0f6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eabedf70-2af2-4428-bca7-481f62a980e3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c982b739-2d8c-4a52-863a-23b20212f60d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "56d34fa1-0cec-45fe-8854-4f22e76f3d88",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c157c747-e577-4daa-96ec-cd03b4ec0225"
                }
              }
            ]
          },
          {
            "id": "a3ea7a6d-6dbf-4185-8e7c-4dbf9e4d44df",
            "name": "Positive Testing",
            "item": [
              {
                "id": "02ad25a1-d961-4374-b6c2-1e78226a1ddd",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b08fe04f-dda2-4f5c-aee0-c7069c6dbad4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f619dce6-f829-4640-aeae-c5161b697372"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "17f7ab5f-66ca-4cd6-a3e4-39348391be42",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9c4fe873-197f-4a7f-a036-2e3c7736cfcf"
                    }
                  }
                ]
              },
              {
                "id": "f7e3bcfc-5c1c-4c01-934d-b5ce288b7ee8",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7530d9d3-438e-4029-8e9e-b8caf8e86c6b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1aa4c8b3-d8bb-4978-9eff-b45d317f608a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d909d1b-af4d-4651-b685-27e98d5ba288",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e0a383dd-5ed1-4965-9630-c6ab87edcbc8"
                    }
                  }
                ]
              },
              {
                "id": "55d6e672-237a-47b2-ad55-2770471f473e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ec28ea0-b797-417e-b8d1-557bc839efe1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e454ccef-a6e4-4925-ae2e-6d2b357049e3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "437e4aa2-3cf8-4923-aa67-4005228c2578",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "293f01da-e91f-4055-93bb-d2efeaa96f08"
                    }
                  }
                ]
              },
              {
                "id": "c6aa0e24-5281-4ebf-9c17-abcb4c0e1df9",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d159e9d-9537-4ba2-a392-8c75031e3b27",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e1d95e9a-ff59-43bd-8d6d-f6d5e14f5bea"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9691dec2-710c-47bd-bf9a-0fbce2900712",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "556822bf-b8ef-42d5-9309-97266a2f788b"
                    }
                  }
                ]
              },
              {
                "id": "55c9c555-77ed-41e4-9f85-06f535d280bc",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6932a37f-3bb3-4ad3-aa72-546b3bc7662e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a33a3a34-9807-4246-a73e-65f3dc5f8022"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ba165cb-af91-40c0-bda6-3663cec81bee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "1fb1ee06-730f-4b45-9856-1d268a42eac2"
                    }
                  }
                ]
              },
              {
                "id": "8057b1b5-ea5b-48cf-897f-28b1d261c7b1",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "395f635d-e738-48ff-9a71-cab55b1c1a6e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "22c1c3ff-494a-4eb8-8715-07857e768167"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7783119f-3373-4f57-8e85-d1735b7b83f2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bcaf4c49-5fcf-49bc-aba3-cdea83d32033"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "79a9dd4b-4013-4bd6-a346-8d7822f574b4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "01cf3ef0-d834-49d5-8bc1-14162d1997e8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "78266e4a-a9df-456c-82a6-082abe647cbc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "302bd3f3-66bc-4cca-888b-9555e5349aa6"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a4f5143-3a10-4f7e-b014-a6ab7544d0ce",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "47e0945b-9016-4868-a88d-5c88cd470810"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3aca2a10-7aef-4d20-87d7-baf9f599691f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "18ada96b-a0c4-4b5c-abf7-188858baec48"
            }
          }
        ]
      },
      {
        "id": "375b6d19-f213-4d15-a8e4-952a23835b4a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "f1f34693-54db-47be-9f3e-8b4789adc38b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4bd8545c-24d2-422c-a781-7c34a0c41bfc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e28ba2c1-f8d9-466a-a715-5e0316988087",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b1423d0-7a08-4883-97e1-33cb6ed216e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e8bcc0f-0767-4c14-bebe-bc905102c9dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d95b679-7c69-43aa-b55e-241b8dfa72d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "758fd521-1332-45e4-8688-26162d26dbf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "842578fe-5596-4580-9339-e52e6d4dfb3d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5d4c6fe-d1a1-4b16-a27d-684d9de1d1d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "024336fc-5ce7-4e30-be11-9b8784bc0699"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d193663-c67b-4c2d-a929-b3179ff886cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "165fa7d8-0c91-4e92-a425-d3bca70938b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87d8b137-8a4e-459f-a0bf-a32972ba15a8",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "092a5a3a-a18a-4008-846d-33fc61ea2d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a127220-99c3-4c30-81e4-f6156c39e615"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c519c16-eb39-48c2-b884-547869411633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c327c0ef-60ee-4afd-b095-2a0c7f3c0cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffbe680d-61b2-4965-8a8a-01c5252dea08",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd3264f-8d7c-4355-9c21-2ff21725947e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ab00ed1-dbd5-4713-b276-4d77f2f894ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed10b9e-ab6e-41ac-8d40-12fc88bd2a0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4c1098d-72bb-41d1-8605-fbcf16d633de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96d755a6-2627-406a-b944-79f8cc0f19fe",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fd8f9ec-a1b2-4e90-be12-32ab9b83e60f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "665bd278-5011-4615-b4b0-293b688d23a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5211753-01b7-4835-9668-ce68c36f89ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ee51790-f03f-4508-b6a4-540f00eaa460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f09d1a-a31b-44aa-9ffd-6fe5d49ec913",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00365fe2-fb43-45fe-b0d5-b4cd028703b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdd95a60-91c5-402f-9d6d-bb06ab14e14d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c278e4b-88ea-4837-8988-e13ab724a5ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cad6a271-6992-4fb9-b1a6-6d5981843c71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6272b32a-87eb-4546-bbed-60b95ca5b3ff",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f051a6-424d-460c-8536-9a85584044be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddd2a69d-0eeb-48c1-acc9-eacc4720c36e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aed15d32-210f-475e-88d4-9aad7d03fd1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed02fc2b-eca2-4df0-9144-86614aaa0aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34be2d63-e9df-4b0c-beb8-1c75ae130680",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d76580-f00e-4507-8920-ecfdcf4a172f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "963f8c35-dff2-4545-adf9-e90a4dfbe9ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89c3373b-5470-4559-9450-0063cde31905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "64f3b79e-f19d-409c-8266-2cc5f7bd9c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ddf61f1-f074-4332-9874-35dbcddd168b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daab79c7-9358-4a88-bce1-d9e91fe86bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7bc1a50-2c38-4eae-8d08-d3148b0f178d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f18753c2-6371-494d-bd9d-47571ccb32c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab2f4af9-238d-464e-b53d-4ff6d96b5136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "398758d2-d91b-4993-9dc0-c60b00394a87",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc17760b-91b9-43fe-97a9-c25acefc07f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cfd041a-478a-4c79-9bc9-b237b031c186"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "867c0205-ea63-492a-bff7-a63c875d0d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0312f16-91ca-43f5-a05c-e0275081ef71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e7f1995-880c-4d94-a2ca-aba7e1c924d5",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c83512bc-95c0-41b5-9233-b02814fa261a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a51b862-ad88-438b-bc8f-8c96c2f91b8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6a2f7b1-e6a5-4dd7-822e-1df56ed97ce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "1a9b722c-89cf-455b-93da-6f411d55032f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19b6f8ac-5b1d-4ba8-9bea-879138c0a0d7",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db68a21d-06b5-4ff1-8237-ec2169dbf362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4a0de11-75df-4bbe-a923-04a8fb01da28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc85e92c-e640-4062-9cc1-29018d75d40e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ff56ab0f-83a4-46e4-baf0-db0e6c890085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce25f5d1-ece4-45fe-87ba-9859e765ac9b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ffbfec5-0310-4feb-acf2-cfdb525088d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45ab1be1-a06a-4491-ba8b-fbbecfe52d75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2599cb5c-2cd1-4aa5-a813-b5cf3dbe13ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "08a3f362-f966-4df3-8e0f-9ccbde48792d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f4d700c-3bc8-4f68-8d74-37cc029d4bc3",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d17931f-fbf3-466f-9cb9-ffc4604c1272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "872630e4-7dd0-44cf-8a0b-18d561c84932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf58c817-f314-49c6-b06e-c0a1640690c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd969e01-7082-4e62-811e-7a9bb701756e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c88f1591-d43a-41e6-b4cd-7054b7ea3289",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4bf807f-d453-4c61-9026-832de964655f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85a5e8e7-754f-463a-a88b-144d81906c1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62ea04a8-454d-4ee5-bbc6-7bcf204a7d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "7cb82877-1c24-464a-a3a2-0d85073c916e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f06e1971-4006-4f2a-9b3d-cb3c54d3ac6d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d15cb21d-66ba-41cf-83b2-f29553b802e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "443cd0b4-7d8f-4416-8202-b768ff6d1eae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01c79c72-f465-4ffe-92b7-70a3680378d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "bba3a85b-8bbf-4d15-9ade-b99fc92a741d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "883368fe-1dfa-42f3-b4e8-b5b94c20a0bf",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c96b89-058c-41da-a326-10b4fc40d004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6f1b849-c918-476e-adc5-7f2a7910a0d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "684b1ba1-3f5f-4e5a-bfa5-b0803c6cb4a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "73d548ab-5e09-4f32-9e58-06a77d04aaf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d58097-e709-4903-a2e2-98385359e815",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1661b030-efac-4c63-89d8-c38de539813c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dd02e35-5088-4ad9-855d-52cc605d300c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d76eea1-3e36-44ab-bbae-c99f1fec54ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd0fbc0f-e723-4d3b-b507-6c1b614563a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53f4239f-1c3c-4705-a398-bcbee155cebc",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd75c1b-08e9-47df-8503-05e00b1143c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ce2074d-c980-4969-8721-6543c74d3674"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9a49023-0be2-46c0-a464-47d73e75970a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2190e9c-e8e3-4442-9728-30f73c194f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4861cca-e6fc-49fc-92e5-dfa20b43d7b6",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a1b454-d59a-4968-8c8c-480596e1425f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0a0c142-2914-4d89-b9d9-41c056b2bf41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43194f5d-6527-4a87-8596-8430b063f77c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "267e042c-9fca-40b9-a082-c9c4aa2113eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "233aad39-e2da-43c3-b0a5-1af2dea578c9",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6320ee42-db97-44da-8bd9-7fd400d6ab96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d375f48f-d472-469d-a37a-312cb64c011e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db398c2a-74f2-4e39-9aad-8dfa5fd7ad99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad3d7a63-f3d0-4aaa-a6df-33ebfc0cd324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa7d640b-1b83-424e-886a-dbdc569a8a0f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "412e7187-4013-41c2-89d6-184b12623ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9121711-dc8e-4fa5-bcc7-9b1b554a655a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88388cb6-b253-4a27-b060-c6dd50997b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "745c775f-0804-4bd8-afa3-892710479c42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a2851c-31dd-4071-834e-cb80a0471014",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49f28527-2148-4ddc-8d18-e1f45cfc5f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72c8410f-9f37-465a-acf6-783ab65f55a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f1fc05-a427-4005-823d-f1898765b778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc07b852-18c9-4fdb-b8ff-b35244c8f2f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c71cdc90-8f59-4220-9fc2-acaa772673ad",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c14e709-caae-43aa-a766-389f4c21baaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d860dbde-5d87-427b-82e2-17d5d090cdc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "138f3402-b828-46e4-a9bb-f5b59c5f15a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fc0308d-6316-4d16-b7ab-639830a8e6e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b542b8d7-562e-4297-944c-6ad055626fcf",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5d626ef-2f08-4959-b2da-de6a37658484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfbf0200-98c5-458b-b5cc-41f2630a3771"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da69a7a-4f00-4ec4-9bec-c6fe34854f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "838516ee-9503-4487-8794-eeb76ed67a79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dacbe055-753e-425f-96ae-cb3dfa100c80",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a8ca31c-8608-4d00-a45f-6e897b9b8585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfdc1972-8f5e-4582-80f2-9a7e35989cc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65a18157-0267-4f69-803f-0fa7ca401ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45b092df-b431-469b-8bd0-5583dce75b4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b61bbe92-29eb-44dd-9373-dfc84d78796a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bcfed6b-139d-4c1e-99c5-cd61202d85cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a629d856-427d-4207-b4bb-5bfffcddfa2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b6b17e6-3d35-4320-a6b8-a20796808a07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34fb667d-af00-4d73-a65c-ec90e550d96a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "975dbf85-0f5e-4bc5-a6ca-865f30b0ad2b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3281c704-4aa8-4201-801e-8aa10083ecba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f1cee9d-e190-43fb-8b96-d41043f48d9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "574cb9b6-1e45-4327-89d0-6357e157b85e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e5dd308-16af-4116-8a55-80c0191fa866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81bb20da-0c77-44fb-836a-cf3bf1fa228d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a3ae86d-7df1-49f5-912f-76f448f6e962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe703998-85fe-4340-9e3a-b864ef26b363"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e5c558-7e72-4d82-ad70-315527a862ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd3b814a-093e-48b2-827e-399c1fbaab04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ea28a59-c151-43a0-9aa8-fa22cddf0e88",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f21002a4-0056-4a90-982c-3f331082eb9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cd73a03-972a-46ef-a791-5ca09caed729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "836dc055-6b46-46b1-bdd2-470ae0e7e185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08e0c4c7-53f8-4113-87a3-d382b65414c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed258ea5-9448-4e58-8cd4-bb1656da171b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b83475a0-90e4-4ee8-81a9-f866ff88a06b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e9a2d23-db35-4817-9520-e55ff5ec8dbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8b9f9f-b6af-45b2-a066-e25aba30be47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5493d1a-9537-4417-bf79-ced006416b10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f410a204-5a21-4397-ac32-e92a6c85fc8e",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a35693-238d-498d-b1bb-b8ac752bfcce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "187d8291-a038-4e24-b98a-b27e78ac7dc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a0a4c03-c85f-4d2e-abb1-9172ee3ebf74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "960df971-78c0-4f7e-8193-d6ff8be8bd6a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "41409df0-06f3-4b82-b80a-f9eb4bc413d5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2abada04-ec25-4ebc-af7b-7cf90ad70061",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c26c1334-c908-4022-8089-f369cdb6f1d4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "51ab505b-002e-4e57-b161-11812ef10ecb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3cf0826-5423-4978-932c-a0dfcf758601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4ac82c95-2d11-40b1-8f53-89278adaa7a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "374f37e3-0001-4f23-af11-8291ca98774a",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd99a299-4e39-4282-82d9-35acb292be80",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a00e68d8-e7fa-4058-8002-aae31526d708"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1b63b91-a5e3-42fb-a449-1e715247118f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d68c13ba-2761-43f8-83ad-b1ed6c506952"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c0d123e-5e81-41fb-b76c-81fc4fb0887f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aa526298-9668-4b8c-83b7-91c3cb121f4e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "96d67dc5-e673-4418-bbef-26684f41c272",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31b4f979-93a2-4ea2-a7ff-35855a634159"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "50f055fd-8f4d-4627-83fc-7dbf6ec2bf68",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "65a31416-5509-4ece-9e68-4dc38c6401c2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "869e68c8-2465-429c-80d0-a6b3ca73f9e3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "02160a14-f3d4-4591-93d2-db0557e8f808"
            }
          }
        ]
      },
      {
        "id": "db77609d-01c1-40e4-84a2-1960da0fa381",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "61d32b8b-3d5c-483f-8850-2795cf72a122",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b0caf017-8e67-4831-97cc-1071a4831a09",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ac98b327-1ba1-41c9-b266-7c3714ea2c34",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "182ca3cd-4733-41bd-b843-837588af10cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "099d3127-7cdb-486b-914d-9742c38c5e7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "521b8428-d5cd-4cd0-9f5e-fdb049a30c2e",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6a13c61-a71d-4de5-93a0-6075b1865d55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc6875df-2abc-493b-897c-34909784534a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc437df5-8628-45f7-a5f8-e5c307e00d6b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ca06418-a6d9-4fb4-8978-9d959d1cc5a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "844d5dd7-c78b-4104-94a4-51eb4b69e352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64b11dac-4f40-4891-ac5c-918d9c68d10e",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "408ebbca-5884-4a0c-8b28-22d33d5e6c4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "930447db-a11a-46d0-9808-fcaf35e73906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "912ccf08-0071-4a88-9a80-6e67e10c1832",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd401650-5d65-4047-8175-9fae5c11ca36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd5936eb-abcc-4857-aa1f-aa2c9cd0585a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02b48b01-6846-43d8-8fa6-edacbb7c973f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c7e664-60c2-47ad-b9cd-e738b464eb66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "688bfd9c-68c3-4ad5-9c23-0e2a961e4364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b0e0ca3-685f-4bb8-ba8c-1c843525f433",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f07dbe-719d-4be7-a15e-774b542ff38d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d03bd8ad-1198-48bc-9354-6284c39c7722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90c2954c-02ea-42fb-aeb0-4b44a9c662de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc50ddf8-9713-45e5-abc3-3bb81fe45497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2029d19c-d7f8-4b05-adb5-646674ab707e",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edb12b97-3765-4ada-a8ae-3358bb4449b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bcac577-a38c-4ee3-8bbd-ae407f58ad5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "215fd87c-296d-46de-a134-59dc61b58bb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "656f29a7-85b5-45f2-9f17-4ba7783e8090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "701c9b22-6074-486a-96b3-aca980561dae",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84bd9b90-2407-478e-9efe-0d43b0afd9eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1513a96-7a16-435d-a079-001ad4980886"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f2e3eb-3772-4fda-94f5-f438e7479558",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30952655-3572-4777-946a-c5db2d15964d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7c4c0d3-858c-4f50-ab44-168070d2ce40",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78dac6b7-c8b8-4eb8-aea1-40a6274a8fb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1261cc3-84c2-4798-ace7-9aac38da7a3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e81f3d-cb87-4d0f-85c0-2dc2828d108b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5618102-7175-4ce5-bf0d-aa762ff9d19b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef80a098-9805-4478-bfc6-56c17d1f5850",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a8dcff5-14ed-46f2-a5a0-f9f93ef60d3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ef30e09-d937-4d30-86fb-8ceddb611283"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec4ac9ae-2d28-4769-aa50-6d36a34a7d3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a18ac4eb-9149-43c7-9c0a-cdb37ed24fdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f627b80-8aee-464e-ac94-3babaf2013fe",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db5a4cd4-634d-4fe2-aeb2-a78025a85563",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7719512-92fb-4a42-9411-1f97f93d5d07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ccfaedc-f9a6-48ba-9865-4722c43a06c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9e369a5-7aae-4da7-9343-b350053ac785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8614fe30-0eb9-4e1d-896a-e48ed80ef3fa",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a14db085-2504-4fa7-ac05-faeab6ac5c6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e38c0c08-d914-481b-ab3c-20a27c47ba92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d9dc057-7c15-4d23-a117-7c1adae2c28a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56e6249a-5ce4-43dc-9f89-5371e1245121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "741dc4bc-c7e6-4f8f-87bb-f9a4f172f839",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03d4da28-91b6-4781-a8fa-e7a368467de6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b8e3233-8b73-47a7-b149-26479d11a3e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2188b972-d522-4d74-afc3-3e90f722dc0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c612beb-6f7f-480e-a83b-32a414625411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "861ac392-94b4-4d0f-83bc-66fdef85c576",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a816ecb6-a0b8-47cf-94cc-4c5e783e48b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01052478-5492-4fe0-8f89-5203d57acf4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "973469b5-1330-4f6a-8839-7ff80a64971c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0912407-b722-48fe-af1e-a8980e8da849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d74fe55f-58ae-465f-86de-3da211033286",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c775f0-feff-46cc-acfa-7fe9ae781117",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89fcc602-8fdb-4a93-b85b-854cded9aa61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d52ab9a3-c185-47ce-a407-14330e4549cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa4a4f78-f0f4-49ed-9b61-f48b680625fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5df8f928-9afb-429a-a544-a9e030e11522",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "639e29d5-df25-497e-a770-6307e9f843f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "137156ec-cc41-4959-a844-c2689566b267"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0caee105-14e3-4bbc-9c30-26b3790a042d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90fbc119-9724-497b-86d7-f47c54b47036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ccce24-6098-4c42-b1fc-172ed0d18e53",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a0a3d96-03e6-45a3-bbb4-8cbd1b99ebef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc56f950-4580-4c7c-8f89-45721b5a9de8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c6b6d83-6f01-4ac4-903b-1be919aee538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9785c97b-47f4-4a34-944c-c395bf910c80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08187969-2357-4650-b55d-a5e614646b23",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "387f5198-58bb-4efb-b680-2747adcac01a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d325fd9-2bb2-485e-a449-f7bc1b31fa34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "930f19fe-957f-4f72-ab87-59d8f3190755",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89dde8db-eb85-445a-adb7-b60ecd1dbf4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea43bbc-4581-4b56-9931-fbb1e3e75670",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "825a06a9-5a36-403c-a3f0-fc68bc0f3839",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb884aba-dcb9-4b32-b035-806b0e80bb61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a59b6c-f1e3-416c-bb20-f8343d722bbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42d28ba8-f36d-47bc-ae1d-708659ef0198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dff2980-aba6-43a6-a0a8-70bbb3649fa2",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23321782-6e70-49d1-bf82-b70a8f75710e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af04048f-74c4-4ea5-8c83-bdf87dfbf337"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8915ce83-fbd6-4ec6-a27f-f8f6dadceff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4e63393-f910-45d7-819e-9c22031335c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4bab764-091f-40cd-ba94-5bdaf74e2816",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72f52409-69cb-47ab-8482-06347eb520f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3dd51e9-e49a-4854-901d-980e06706259"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d043c26e-6f63-47bf-91b5-56a34a632219",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "929d8bd1-4663-44a0-a489-bc9a85de2b54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85734cfd-91fe-4974-947a-3582f4bc3dae",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adff5604-f9fa-4e19-9f10-5e5f7bc759f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdcf3a30-6b98-41b2-a1bf-db2727a788c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e565464b-b70e-40d8-8676-fd643e26c596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "231143cb-410f-416d-8b94-7478b7b50cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed419227-76a6-4d5c-9bfa-97a6fdfa674c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb94204b-570b-45cd-86a9-985fbae448d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7f6848a-6d45-442c-9d0c-bd9c9eb4c157"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8122155-ac87-4489-af1a-f33a1dc7bb47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40020981-8a56-4517-ad8e-d6b2732c5dac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2ab60fc-dcca-4c29-856c-58dacb13a7e0",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d16c465a-78c3-447a-b832-cbf493c4cf34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a99907a-dbe6-41f8-8823-45673e470948"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eda71feb-0029-4a20-a793-58938c1f611f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bb660e7-a3c9-4a2b-b76d-6bdf72435253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "259b09c1-b2a2-40f9-b101-1535573ec3e4",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47292490-bc6f-471d-8a74-d80db2fe85f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4ea11da-3825-4946-9e97-949fd432c213"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31331967-5804-461e-8a7f-88a56ee34206",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb8c4c2c-853f-4930-9267-e420a5122b31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14ff5db4-a879-400f-93d5-07d416804a85",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f31deeae-bd44-4d4b-a455-564cb7883196",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05666501-3d85-454a-9c13-de05f5238acf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "289a7367-244c-420f-9691-a9359d6755f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1311b28-954b-4b94-b471-e3aba86163d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ae5fd0e-c1af-402b-85ea-5b7eb0d34552",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e22949c-ea69-43f9-a571-29ecee68bdbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16781440-3d8c-48c9-bd4f-81b75188b0eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e6d69a7-c822-42b7-8d85-049e043ff021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9993cfa-93af-4188-9c79-9e3c9c7afea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5b3e564-dab9-4d07-b386-11a62ba7f44d",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb6cb50b-efed-468d-a042-a5af1203f1b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31d65002-b6cf-466e-a076-a4b7f73f6c87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57531738-f074-4984-b1f8-72579143e612",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97c2d42a-e9f5-4619-afaa-720d07522966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e080ddba-f21e-4b1a-92bf-f5171387a449",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e169bdea-381b-40c7-bd13-b54b4eef318b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7f9e71b-c067-4b55-a0a5-f7afc433d4c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b2f3dc-d19b-423e-bb46-03c3f4d8ad91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a0ec155-ae23-4985-810a-be4798823507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57781029-d2e6-4b73-8ee2-81dd6d78f7fb",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e36343e8-4428-463d-bc32-bfc2b560904b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06bbbdc8-d501-4329-b31c-18a146834cd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a113a314-d8cf-4e05-bbd8-77fbcaa77cd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc27ea2e-ef8b-48a1-ba92-d338f5eb275c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c13e9f0-7ba7-40d7-8875-c200e4c64da4",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "762c8bc4-866d-43bc-9861-f025aef2f67c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b300751e-b750-4268-bac1-a6cc304b884d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5db6da59-b690-4f1f-acbd-1745771f6dd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29ec4e44-87c5-4ab8-9398-0db13a7b8db6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd96f745-6c91-4126-ba28-32aa585a142a",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50147d1c-8c87-4d1f-8adb-43caf44f37dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6aa122d8-7540-403b-a58a-9b8dd235a1c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5df589-cbd7-4f96-bfc2-005f3e20843b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efbe3926-6e6f-4773-a647-d456b7863245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21c60c25-af34-4975-9ff0-9d1fdce57e8c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28fe5651-ce20-40cb-ac50-538862690f04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d42e873-113f-4cf5-adad-a5649bfe2125"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a8f72c-89ee-4e9b-979f-29f0f965db36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebb181cb-a933-4401-99ae-387d57c589e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b90a1ae6-1bd0-4e14-bb7c-d98ad8c2c266",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c17c1339-7486-4460-a96c-e0d1edabe2c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98f96bc7-6d70-4d64-b547-e5bf7c5a5afd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba8f988b-1df0-492c-b04d-e9fb5b495608",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44157036-31b0-4b80-89a7-253767a28064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfdc0b11-2990-4a90-84e8-ddb565fdd303",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a51df30a-dc25-4b15-80e1-1ed8d977d0fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "030fa4ba-e79e-42eb-8ede-101f2c4cf0c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f394004b-8156-484c-9c21-0b8367739dae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb246de5-060d-4477-873a-b700e79bb93c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8abd2d8-93ce-4da1-94e0-32dd912af749",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20f2e0ab-4583-43c5-a6b6-2f20856017c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4edeb961-7c0b-4f25-adcb-83cf63174ee9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba83983-4f34-48f9-aacc-ae86cda2434c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e9bc003-7cac-4172-85a9-b6c12eb984b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "210e524f-9083-4d48-8f94-7ea7536995d9",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d9266b-a8e4-4f6c-a4a2-f381f9e2531b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eb482b0-2d92-462f-bc74-450f2d9d4a69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c105e1-0e8e-4225-8148-63861807d527",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "794c9816-3c5b-45e3-8c19-8be3fde3caa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07d53cc3-4e82-4284-b36c-1a07e4a179a7",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4da6060e-598a-4be5-9ee4-10224933d66f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5557433-2feb-4e65-8311-c92ded4e3aea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f71a5e12-67f9-4e46-ac25-9a082b8a17f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7b6cc4b-8801-413b-9024-af3eafd8e234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da2c038d-b7a0-4e31-9d14-8e96be79a668",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "940eb178-deeb-4b1a-901e-3a811ba182d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fe629e1-494f-4bbd-898e-f3edc3041a18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc6b4fdf-f9be-4bc4-91aa-5bb187105737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9191a913-e2f6-4b9e-a1bc-578f78c0cb1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f890527e-ad81-4811-8020-1a6ae3c39ef9",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03834769-3a11-4537-b906-0f2de0973a76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "670cfe57-57aa-41b7-9720-ef9232194068"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbd2bcdb-3713-4145-b54d-ee35fb65ee86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65cc9396-08b0-4a11-b20c-a73a8832eeb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb82db4f-312a-4a36-962a-6d08c5fd0afe",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6b265df-8f82-4102-9959-2f7d9761f740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cd72fea-05ce-4f1b-933c-b78f328ffcc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa84fd6b-4d3f-4b77-8756-8f5bcbe9ff77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5099cce-0aa7-4601-86af-10ee2e386d11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76fbea4f-bcac-4928-99bc-36d798d7feb5",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "849b399e-08b7-4015-8a75-491f3a082a40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e54dba78-dbdc-45fe-b60f-9d5d0d03420b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfce08f0-ae08-4078-89fb-c9d54dadf1b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa834639-107b-4f3d-8bf0-3c040a3a2711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7ff0a27-b04f-47c0-8a48-ea812352130f",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d94bf2-b831-4585-82c3-b1f1834e8c45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a17330d-061e-48cf-95fd-ca34c472dc2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b353a7-74b7-4a62-a3db-46a215c4b8aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f01a74e8-fe86-4d08-b915-cb36d9607d49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a03cdda-1548-4318-ac0c-28873a7aa17e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee5bd972-3b6b-473b-9c30-cdb5d03a0ea1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30ab9ee0-86da-40d3-b516-fd874158e657"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d6237fc-d959-4da8-8675-a72fb79d8774",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8111d775-35a3-4b94-80c9-54719dec5d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f18266ce-9798-40e3-92c1-ab97c444c973",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1a68d11-1369-400d-9507-5e0a74463d0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06ef8d8a-81c8-49fe-8507-2912caf4fb0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cd2db9e-4355-4e90-aef2-0b7301110248",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b5bdb17-3cd5-4e63-b50b-b504e288e71f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11756b43-7f64-463c-b862-dcd6d0a88324",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffd5dff0-416b-4cc0-a6e8-acbcacca8a91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17d8eb93-3fe8-4c01-8118-4d7904a3067e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb77d2af-cad6-45f7-9160-5e65b3b77780",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "932af901-f592-49f8-a05f-361876ffdba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "460975b7-f64c-442d-92c2-5c651febb8bd",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "175e1443-fce8-4ed0-a796-ce576aad8270",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe89768a-5d41-48b8-8780-1856e3f1327e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e7154a-464c-4b34-a92e-ac5a68cddaef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69e47f9e-e569-40bc-a79f-05acedccf6fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "470a2a03-f999-4ad1-a202-860268648cdc",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7413f075-2ce7-4277-a07f-89565e701817",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d1db006-9485-4d73-bb2e-5ad7df8cd875"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f81d532d-2aef-4197-9d6a-7e64cda73681",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "490b26bf-9ab6-43c9-9fb0-393fc0b4cbc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fd7ea62-5d35-4b04-850c-9ae368dca764",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "378691d3-0e0c-4dbf-a143-625287af0f6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f7feff5-a252-4f1c-8c07-f0fdd68e5b75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eabc12a-484e-444d-bb10-e04e614aa962",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42776de6-1890-4403-833f-a3bf592e8896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28747bbd-d5c5-4744-b005-75565421e72b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c35b667-5d56-478b-9ac3-cdcae37ab599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68449e2f-040c-426a-9761-65b595a25fc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59be9703-0169-40d0-a450-f8e6b6317519",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f0841bc-8e99-4ef5-b0a3-f7470cd68fd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0423a722-fa8c-41d7-85be-bdccb15bfda9",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceb7fd59-022d-455c-9710-622999a7bd5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9fc1af2-88c4-4c1d-9d7b-0a32f71416b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "440da47a-1bff-4397-ad19-0a57713f8dcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "196a60e0-ee4d-46a7-927e-9759b9ddeafd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "218195fe-e3eb-4a6b-9e6a-12be0463d874",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66dcb90a-57de-4955-8314-ac9e529587ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4399bdd4-cadf-463e-bde4-07f1338df953"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e86b2ff-8a6a-4178-994c-dbbcb0640318",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7752ece-6bd0-40bc-9170-b0f48feb3fc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ec8fb4-0331-4b5c-87d9-d49fb7f336e5",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d537ab02-8784-44a7-b41e-7f8ed46b6199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33d7dffe-b075-497a-96bb-c972cb50806f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02a3738d-59b5-43b0-9bca-35782ae9b249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "479f5e7e-d655-4b8e-9c24-a447a0d876e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26583584-40d0-4859-9e8e-7da04e521a5a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8537d5c6-0c2a-442c-9479-868d0bff22fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ec24575-1087-4c54-a237-f9f6d10f130b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a779d78c-e679-44d3-af33-126ff1a310e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "703104ff-97f4-48a3-a502-2ee7161d3c21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c67bcc05-4801-429c-86f5-53eb1cb51789",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f09bb7d8-5bb4-456b-9d08-3238bd8d6d0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aea59388-fdf8-4218-a060-d3c8515aa56c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eada06d-1bbe-45ab-831a-854303e84c09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd285de4-5532-4a5a-a741-82dab3a9ce3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7599771-10cc-45a9-ae13-c8a0bb0fb98f",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d84f0e-3619-4a40-9d60-70b7f415f5e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7d975d9-0a51-4b2d-b3ca-33020b9e1169"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1995c55d-025f-492e-8d74-1cea549e83fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a8ba853-34f7-48a2-bcc0-a2011c047da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec2788d4-b1e0-47d1-8320-474163325f27",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "596ef7d5-7cfa-4c67-9b73-e027496f1abd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0be4f890-9c69-4c1a-a9c1-653eba9eb293"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a13dd8c-9ecd-47b6-9add-fea222c0cd07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ac5b728-e15c-4c97-84ee-8ee3c8b13db5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4af76205-9869-4627-b81c-ec6f255f3e31",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08168e41-317b-44b5-8330-0e893da9d1b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57429be2-fbc7-4086-8c77-da667e36d065"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18b6facf-a6b7-4268-a8b5-1c07b17290a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8caf058d-6ff9-4007-8579-45e0c4017cec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dc4707b-509b-44e8-a7be-e5c0c0f39287",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba0b3910-07de-46e1-b076-876c1f324861",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "170415f6-a68c-4983-b7f9-e9fbc21e7d53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb9c71f7-5f78-4240-99f0-3517682b3470",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c716b749-5a5d-4afd-9e89-dd05c4d12330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96552d55-8363-41ff-bda0-9dbe1904dfca",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09187256-f231-4b2e-9d7c-0e17aebb08f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97762692-473b-42d3-9f8b-205eb93fe19b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5092564-6c24-4a12-8ce9-65393b6c04be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70b3d550-b338-4dbc-9827-2712d3c1d565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9719872-e0cf-45a6-95a8-b94868ed6e9b",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "496fffc6-4c93-4886-afa1-a9d691ae8625",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a7e0475-96e6-47d6-9b5f-936268cc7c19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e932760f-9b36-4bc1-9c41-a786b22d4216",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cf6ee2e-8b4a-430e-8f81-50e76033af06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad34f13-12bf-4bcf-ad32-11b10e96b47b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "573b8e82-db37-4937-81b6-e285feb91889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97efeb74-2651-48dc-8986-381b3efa97b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dd38493-b5a0-4bf5-b672-6a03cfd1cb4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3c632ce-63a3-4bdf-8187-156d4f5d38af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c2e07d9-0fb9-4a53-9963-635aaf028322",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b680f54-69e0-4e8f-82e9-1764597a278f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "755b0dc4-1432-4994-9180-5e920d52384e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b8f89c4-9c8d-42cb-ae96-fed9d808e2cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "241b2ab6-cd22-41d2-9d69-e206c32a04ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fac4571-7900-4a1f-a075-21dd771a5776",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c8dbf6e-bd83-4075-b430-c63934cb96bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb035304-87ca-44e6-95a2-9a6707381a51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ca5157c-ca44-4e49-a3df-68fae06e6591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3757f09-9230-4e8f-95f6-e9c73f2a2563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c9ab9cb-8a8e-442d-a7ad-39508279140a",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5955c92d-a7dc-4762-8580-08eb84e9169d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77819754-a634-447f-9026-ab0b44b03f3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0e3803-b41b-453a-911b-ef5d4176e773",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed94241a-4179-4a11-8a92-9576fc3a48eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a693f4-8005-4d9f-b7c4-57f5e2911bb9",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "939072ff-e21a-4ccc-b05c-5a65dd4a965a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3860033a-4f80-439c-91e8-a3d9e96735da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a10cd3-767a-4816-9c66-d2d3663ea28c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18d5d0f0-6cf1-452b-be9b-13d792d5f228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f5dfb1c-8b34-487e-ac55-852c9eadf98b",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a174257-b7cc-4134-a247-fd5b992ca753",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "667bf0a4-45f4-4268-87db-61ad3e4a12c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aadcc5b-b98d-4637-81f7-085a30c1ae2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1b1c0fa-c484-429a-a75c-7dd871c26ef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f08b370-77fe-4cf9-873c-fa3999c8d405",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27976083-5084-48f4-ab33-e2eb02fa0388",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eaf9eccc-e297-469f-992a-57814def41e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e1fd1b6-d9a5-4170-a111-34452c856ba7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9cc67f2-d215-4892-a852-4a5993f3c00c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5ffa3f6-ccfc-459a-a677-1f4db83df443",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "122a03b9-aaae-4216-87c1-f9bc4d795fdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2428b35d-b74f-4c36-a437-d6db8c96669f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c32cf6d-a920-489d-9f6d-78f5c7295599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bc748e3-f683-426d-bd83-caa0c00aea7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b544762-1cb6-46bc-8381-916e9abb3f0d",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d23fdfa-084f-4f98-a6bc-552f3916453a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0dbe116-a16f-4635-8f9f-57a4ce190135"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a608f6-3026-419a-9535-ae6486f8fec0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd052145-0ef6-459c-9123-78b0f07914ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45f8777d-b00e-4ba2-8678-d193b64778b7",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1c13c13-471e-427c-8966-012e4eeeeae4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e973cae-c704-4c1c-b81f-4691973c9131"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbfc6105-f739-439c-8562-7a1fe780775b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "955e8b93-6dd8-4450-8b96-69cc8b43bbc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df2e4b60-c097-4f4a-9efb-252e315e113f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b0b807a-d255-4a70-88ef-9403de564506",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7317dcc8-e6a0-4bb9-b75c-9aa7b6a34b06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e12f6b-ddd6-47d8-936c-b6e18dbd0099",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ec4d6a1-2def-49e7-930b-cf37b25b00f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "070de9cf-fdf0-4ebb-becb-215a850893f2",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc28d4a9-424b-4b86-9bd2-c4afb1f16d68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28d9b5f1-1bed-4d08-a0d8-72eeecdf812d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd6a4e43-401a-4106-bc48-a213b5bc6772",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63e840ac-8589-4824-b1af-c31ff7a1fc47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc4e667-7e3e-4e93-b067-80491ef676d4",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d66539-c1a7-4144-a919-f4a2462ddde5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2efcfa35-9163-4af2-aad9-92da1829e8da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a9fea0d-5fa2-4be0-8dfe-c73ae9f0d146",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b895c548-e792-4a13-917e-7ff699cec6cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb0672b5-e5a4-4a2f-96b2-b59df1d2ba82",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f9441e4-2689-4dcb-9f30-26eb4acb8ced",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84afe0e1-1fd1-4c95-81be-597acd4caee7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23278d69-c1ac-483a-9993-ac74fc4dbdf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35b61a31-71a9-4d29-83f8-2a8fe27a8659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9303744-4a0d-4e28-94ae-2f346d8c6790",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5542f37e-161c-4bef-bd8b-bfa279703200",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d0972b7-191d-44fc-aff4-9c0131f05395"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad0ffba-706b-4c7a-bca4-f61c56bc4229",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ee1a058-f1ff-42a6-891d-b1a336b27c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de936da1-2d7f-43b9-b886-8a8a4973affb",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc1c896a-2b96-4f0b-bc2d-446671c28720",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b4a1965-fa52-44a1-89f9-0f5457514296"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e1cf15e-f412-4235-86d4-b7d6637056b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4de45021-5bd4-406b-aaea-b1fc1162dd96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c99fcf62-50a5-4913-afbe-8fe326e2d67a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48fc13e2-0895-4568-8e09-109bfeac7be5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56489eaa-b2a3-4be1-819f-0677439e71e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "937328e1-f4c0-4112-b4fe-fb352f81ef71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0069fc80-b1dc-4f0a-901c-82ae0075a60e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e491469-0de5-458c-9c0d-eb6ae47db4d9",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dbd1024-82e1-4609-843a-7bf9e412e0ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bc52403-1ab2-4ea7-8b61-95e9e8feb118"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f5d2f8a-7955-4ba9-8017-72ca09006b2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49b89314-7c53-4da4-9fa0-4fe5823ab566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d683fe-3f68-42ba-a9ac-000bf77301c7",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be33f797-4419-4008-978c-5aaaaee9e29a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1283e09e-e37f-44d6-900c-e345f81e9e03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "525c45da-6cb5-4c51-b0f4-3d1b4831a902",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b88b1c2-5884-4131-9321-bbbe42254430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8965e4e8-41cf-4575-bc92-4a52cab8589d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "492be663-fed4-4fa9-83a1-a24e3a836281",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e78999c6-580a-4840-b7ce-599b26fa42fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8f674ee-e737-4bce-a42a-6b7475f80f31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d19001e4-cc49-4584-baaf-b1d4bbe24dbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab8061a8-c66c-4865-a977-65ff8554b48a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba14c486-c5ff-47e6-9555-c3a604fe2850",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa9359dc-7fad-462e-b829-0ab9a55cc729"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ded0b62-a44d-40a4-8220-4bd1a51f5ed5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd6197ff-9bd5-4e3b-a31b-c4578ac6e768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a92fea00-2443-4130-a003-2d09bc190c65",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bc4c4dc-5e95-4d4c-9dc9-5951ae9859d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "decb09d7-0b1e-4723-a5c4-7f20c8b51c26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca72fa02-d8e6-41c5-8984-7c0e4ecbd622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58565a2d-f2ec-46e2-8f0c-4d3ae02af4b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "614f169d-400e-4e8c-98d9-e762090c7de5",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc9cb12e-5867-429a-a954-a71fb843d4ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de92a2d9-6aff-4e46-8441-8f4bb2335c88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9533673-2f13-4c65-b42d-4caa518ed3e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d0bc333-e9c0-4384-bd22-f7d878777e97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f27a4047-9f5b-4de2-b14f-578a87b1c10e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f318c64d-b794-41b2-af63-a52693820c6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2aa8705-b280-46a4-80d4-0e88d3a2f9f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c40b277-abcc-4c34-8b0f-65f72c103437",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebd275dd-7f68-43ec-a6f6-5432fae7382f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ff90c32-89d7-4916-8225-cdf10c4ff8de",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fc5b96b-e0e9-4c32-b1df-0174f8687fd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58c33d54-cd8f-40f5-b49e-0cc6326dae40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a12313fb-a89a-4330-b925-7d5abc8a61fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02ef4a3b-fb0f-4bbe-a4da-95f60241c94f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2428fcf-b78a-4afb-aab3-0ca8ed52020f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c328e118-1897-4774-a5e5-76caf8230ce9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a0ea21f-d02c-4f8c-a4f5-e563f9c6b833"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87763e08-7c35-4872-bfe5-27f7a7db9586",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9a2cc48-9778-4bbd-be65-ed604f4d3d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7ba4e31-6f6d-46b0-8c47-1aee57f8851f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "246faea2-01ec-4bf4-87d6-1db986b53381",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29eb58ef-b3f5-4a68-a10d-9ada90d90557"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de0cdd82-b7bb-42cb-8704-0f3b9f66ada9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eb83024-ebf4-40af-8ad5-76d77888301b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6497faf6-92f4-4026-8f20-1680f1b1497f",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "604fcac0-4700-4609-b4b8-17dbe7bf83ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7451d54-bf59-4cca-b886-1d31a21e72f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b66c0e23-8909-4b71-bca1-2caae52656bc",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "894ee1aa-9b32-4413-a252-8f2475709696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cf9fa8e-dee9-41e1-af5f-41e832952f46",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e26bf0d7-54c0-464b-846f-b947da3a9caa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d5c622a-5d97-4e17-a4e2-98465a5f7977"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70504ea2-697e-4ed5-87bd-83f0bcb352d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ad7c8f6-c30f-4484-9550-75ad8b8d85fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3952eb5-5617-40ca-b48a-351fa2b11a28",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0625d23a-5d2f-4a03-9315-762372e75cad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0599f32-a2ca-4b39-a46d-8d0dd9c95f7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f90c8a4b-5821-463f-96be-d8d1a0c0a368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90f1080a-80e4-4b29-a49f-13b6651c1b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eec304a-916e-4500-aca5-0fbd6095481b",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1e0123-1dbe-4cca-a5ea-9b24521c1d0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca1603e3-8085-4001-921a-b64c9fa0399e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69d90b0-5121-43e2-926e-2b9e7316fba1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78fe42fa-0c04-447b-95ed-7184d23dbe8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a7c1d9e-1b94-432b-9147-da56fda75f1a",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c2e709-03da-439a-8a38-795269efad0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1eaa08f0-a73b-4864-8967-730f5eb7c989"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f856159f-dbb1-47ee-bba4-2123990e89f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72431e55-3120-4642-9e96-eb5ff1556545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dcf510b-416f-41b0-bd6d-fd69c282f6c4",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b16cbcd2-6182-493d-976b-99878d80ec4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac128465-6a1e-4559-b36c-98021dda02dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e1f16b-ea66-45c1-96dd-4ed65d36f32c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef6eff79-f303-43fe-8445-e2d6360708d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "352c472e-cb5b-474d-9460-44ceb1dcf7cb",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f32b11ed-6f97-441e-8613-59446077aac0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0330134a-31a9-4535-8c2a-c2e2b458c436"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61336178-f58a-4a15-8ee1-1beda2509fa0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8986b0a0-a21d-43cf-9b7a-0721d7d6ee16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5c07684-145a-4b05-8920-eef08240c1b9",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12fa9da4-b612-4140-9da0-40c843bdaab4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5bf5349-a2d6-47cd-b094-c841544d2025"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a41b33d1-cb83-4f3e-942e-5831187496b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a770d02-d929-47f3-be4b-ec16b64459e6"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "561796a2-87ca-4b51-9658-9517868f86dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "675a26f4-8c11-4a4f-983a-1fdfa77cd7cf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "66dde1b0-0ea2-4fa7-89ac-e79b4f159a86",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "93deb5ec-6c9d-47d2-be33-def7c7e5a798"
                    }
                  }
                ]
              },
              {
                "id": "fc383684-c6bb-45c4-bbab-891da716dca8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "968755f6-41bb-43ca-a884-8d0412bbe1d3",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2010af2-4e3b-4048-8ccf-998020d2f3c1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "64c79589-1960-4e9c-bff9-37fa3f4c609a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f014d6-ec22-43dc-9963-be19f0d85308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a9f4306a-3325-4c49-9ece-954ca4c2deaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa9b634c-ac77-4037-9ebc-8267e5b01de8",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff52d67-fa24-4f08-91cf-9eaa7b771903",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "3e0c0c9a-84e9-4bf0-b269-64aa0f94cd85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f618541-9c6f-4bf1-9459-de3a945333ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f0ee080-75ff-49fe-8e21-96eab4c2d636"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b22cf954-8514-4f09-a583-cb4ce17ba786",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c304661d-a9a2-4f7e-b8d2-441263cad00b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "39139a47-d22f-4333-b895-265e0e6deb5c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e5e0eded-d54b-498c-83ff-dba005151a2e"
                    }
                  }
                ]
              },
              {
                "id": "434c8200-e375-4bc4-92b2-291a79238381",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "7ad2133b-f164-47ef-a809-58d03bc3de51",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d779a677-9190-413a-a074-0504fce3e595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "46308a77-9289-4737-9939-2eb7353a5604"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea754d9-f845-42ef-8307-93d4e3399d31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbf45c02-f351-4dd4-aaa4-c3935c9c8874"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "251022c7-b72b-449b-a2ce-4924ff623e54",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9cf635d9-d70d-4e80-9f21-3a1ff5000164",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b8fcc26-9cc2-4f15-9e6a-d30216ad83f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "49b1cff2-2def-488d-9932-9442d6c544c6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eefea5f3-045a-4646-b325-c480f9a98ac3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89afeb6d-9ca4-4edd-a194-a338448cd80d"
                    }
                  }
                ]
              },
              {
                "id": "bc90d89b-210e-4e33-b6b6-e6669e5cf4a9",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0947e23b-301e-4000-8501-12e0d97aa935",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4a33c46a-95ef-4cde-8c1d-d74b617870ca"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a54371a3-6b0e-46fb-b1fe-d0f334d3a8a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "40d24c9b-9e52-4a10-a372-3ec9b7764160"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2734f6b1-aa56-4a6e-bc44-b7b515a901a2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "63eaeefa-106a-4da8-9df8-0266cc846ba0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4e8b3fb6-003b-40f1-b3f0-25526414c201",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "79bf9d22-e275-422f-ad38-4709a0804b15"
            }
          }
        ]
      },
      {
        "id": "1e263f5d-c5d3-4519-8068-8d07255c5d91",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "30cf9535-43ba-48f1-b44d-182e45f65b5e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9ee273d6-f310-443d-a701-46d2c3e3f626",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9c429495-4056-48cf-a48d-370507b3074e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5c9b3f0-be94-4e7d-8640-67ef5aea7b85",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2d2c11d2-86e6-4f4b-a5ee-178df70d35b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cd683e8-9ae8-4775-808d-58c28ecdeb56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6bc20344-982d-4aa8-97e9-321ac851df6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf6c49fd-5500-4b25-b02b-4e29894e0b27",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e466b958-cb21-49dd-a366-4faf6103c557",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "242f7660-e47e-4d69-81fd-cb366fb1dfb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "759c15b3-06a9-414a-b475-972a798c56e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a6d028db-155b-416b-a1df-6d85b451a577"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "840b76ee-50ae-460e-a387-feeee2b725f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c9521070-62c6-4e10-9da1-1b5e473df2ce"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "277b4042-12cd-427d-9fab-c0bd70ff2b79",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a07206f6-e5c6-4e2c-b941-e6baadbd478a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0580bcec-d525-409c-bb78-aeefffed59d9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "54510945-16a4-4f83-9211-6ced8e2f110f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "13ff27ea-26df-4513-847d-4e667e2c11df",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a00fe85b-a1eb-46d1-8ed8-6f24cd48fe61"
            }
          }
        ]
      },
      {
        "id": "ecb787ba-ad04-4d24-9807-f7b02f7da3f6",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "8120f258-c0d2-4dec-99d0-7b168bb6ed01",
            "name": "Negative Testing",
            "item": [
              {
                "id": "355e1c7a-0bd0-4fa0-9b03-ae50cfe17b33",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "42f4a889-78a4-499f-855a-23a823b6151a",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1568a45c-7b82-47ac-b31d-7257f2ebb547",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d9c60e2-753f-452e-812d-3c99199e8fe1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a2c06ca-f17a-4e1e-afd6-e9b9f7a0ea3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c4097730-12bc-4803-b9cc-123ff3c5e995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9f5843-d37d-45a0-8269-012f78bb43b1",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a0a3a3d-b1c6-4437-8da7-041c0ab1efdc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ab27b220-a7f6-42d3-aa70-d224a75db46e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20266766-6049-4f00-9b0f-ca054e4c8a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "95c0cce7-de23-4663-b4b8-896d08a57195"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a784af5-789d-49d0-a4ab-7bdb74aeb8f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2954598f-741f-4d44-bcda-4a0825d11312"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e83c6ee0-d714-41c1-aef4-79f612c794bb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4136cc0d-7937-4204-9f30-289afd6d71d8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "571e64d6-763c-4cee-9fc3-3cd5e7d57ba0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0b750770-34bf-47ae-8ed9-431d0d55053d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bbc4ee26-9248-4984-aead-0cb03ebd447a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "720e8fb5-01a9-461a-aeac-5ec3d532ba33"
            }
          }
        ]
      },
      {
        "id": "a23d32ca-c1c2-4ec7-9346-0bc09d2c359f",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "f3f457a3-2d58-4715-8b62-776845f7be3c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c23ae7e3-eda7-4384-8bf2-eceb3c093b21",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "54c4c4fd-a560-4b1f-b7e5-732812542c13",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0622d59-e3e2-4368-b6ad-49f62e951d28",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "219878c4-bbcc-4578-8d30-a2c4b5b39a64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb9ddb2d-75fb-46c9-84ff-1c2ba3d8e168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "79c887a7-4de5-4d49-9220-6e1f669008b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dad94aa-dfd1-4257-980e-bc9d6082364e",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84eb099c-cd40-49b5-af83-0d3b8c5502af",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "95d96da1-c674-4542-a063-3a4ee6d58555"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33de52c0-f20d-40bf-9f4c-257f73d50cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02ff7945-7f2b-4d34-8ed8-0afc53bd8cbc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b9b607f-01c9-4b08-88d7-2fca2557fd84",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "72af6208-0423-4fff-a6f3-b11292c2a8a8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a94ac4cb-0a99-4036-a596-ef666c47609b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10997b65-0611-4e80-b944-32ffce6965a1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "62bd6176-cb3d-408c-9c36-b97f9165e7ba",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "169cc60a-39a3-4163-b983-75e95da9dee1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dbe23055-66e9-4233-9fa1-db0b9c94fe7e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "38e9f2c0-8790-41a4-b559-adac15db27e6"
            }
          }
        ]
      },
      {
        "id": "91d6f494-b528-450d-85eb-b5834bd15baa",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b4353b82-1b62-4f3b-a1c8-ba4c4ccb00ff",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "417bcbe1-3420-4e5f-be9e-96cf4482cb43",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c07fc1e7-06ef-42ae-9115-ba761cfbc5bd",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ad3e02b4-c273-4f03-9665-088fa78df9aa",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "725edee1-2107-4d5a-b0b0-2cf13ccad9f2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 283
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 278.2269230769232,
      "responseMin": 21,
      "responseMax": 5118,
      "responseSd": 778.744565634918,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1681173450484,
      "completed": 1681173533742
    },
    "executions": [
      {
        "id": "04e0bce7-0327-49db-88ba-2b7f1b952446",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7a95b330-2f45-4385-a3f3-191c4efc8409",
          "httpRequestId": "c01fa964-11f3-46e9-80a3-840f6fc96d40"
        },
        "item": {
          "id": "04e0bce7-0327-49db-88ba-2b7f1b952446",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "08ba7baa-3fbe-4d4c-ae8f-0d254c84acc2",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 0
        }
      },
      {
        "id": "728214a9-9aa7-4090-80fa-4db141c061e6",
        "cursor": {
          "ref": "8d6ed138-e332-4587-8ab6-58682d65b22b",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "16234189-fe63-46dc-b2a9-81f2895d7a4d"
        },
        "item": {
          "id": "728214a9-9aa7-4090-80fa-4db141c061e6",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "089b0884-a051-4d6d-ae29-213c589d725d",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "e793634d-3d16-40cf-995e-7f49e884de89",
        "cursor": {
          "ref": "065f0464-c936-4e56-b6c3-e2e67841fc9e",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "afbf0dfe-176f-4ffe-af74-869201473ead"
        },
        "item": {
          "id": "e793634d-3d16-40cf-995e-7f49e884de89",
          "name": "did_json"
        },
        "response": {
          "id": "1b72b240-580e-42b3-bb4a-c68ab8d4dd08",
          "status": "OK",
          "code": 200,
          "responseTime": 568,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f69be55f-2864-4ec9-afac-c88a87cd4449",
        "cursor": {
          "ref": "fcbacc16-26f1-465e-a157-508c7fb7bd1e",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2b8c768b-e178-4d01-bbb6-ce1226f1da00"
        },
        "item": {
          "id": "f69be55f-2864-4ec9-afac-c88a87cd4449",
          "name": "did:invalid"
        },
        "response": {
          "id": "185b99cb-7984-42dd-98ca-eb987cf0d160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f69be55f-2864-4ec9-afac-c88a87cd4449",
        "cursor": {
          "ref": "fcbacc16-26f1-465e-a157-508c7fb7bd1e",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2b8c768b-e178-4d01-bbb6-ce1226f1da00"
        },
        "item": {
          "id": "f69be55f-2864-4ec9-afac-c88a87cd4449",
          "name": "did:invalid"
        },
        "response": {
          "id": "185b99cb-7984-42dd-98ca-eb987cf0d160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21cd2145-859c-4850-9f3d-48575b0dffe9",
        "cursor": {
          "ref": "f3c15485-98aa-4749-922d-c2a3ac64111f",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "61097e4a-0d55-46ac-9e31-53414e8bbf9d"
        },
        "item": {
          "id": "21cd2145-859c-4850-9f3d-48575b0dffe9",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a26e57ea-208a-4402-9517-3237eda2bdd7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 136,
          "responseSize": 2
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "5941d192-ceac-4d82-958a-00fc14a309f9",
        "cursor": {
          "ref": "46f0096f-8f6b-4604-ad17-2f401f8c5272",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d1941358-b163-49a8-88a8-2ee1c8c1e2cc"
        },
        "item": {
          "id": "5941d192-ceac-4d82-958a-00fc14a309f9",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "63d61883-cff3-4762-a3e5-55509c4d18d4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 85,
          "responseSize": 2
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "c9a2e3aa-f300-4776-bf00-04567327e6e5",
        "cursor": {
          "ref": "a7b8046a-bf3d-49b1-9b86-8e1e6aa793b6",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d2370a69-8b6d-44da-a0e9-077daeb462a5"
        },
        "item": {
          "id": "c9a2e3aa-f300-4776-bf00-04567327e6e5",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "10ca9165-0c6a-4e23-94d5-7902efeeac1b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "d9be72b5-8da1-4b7f-95aa-c6c51b7e3648",
        "cursor": {
          "ref": "da246aac-fcc3-4308-91dc-ce61d6129c01",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "bb597826-b196-4d2a-bd3d-b990a71b0629"
        },
        "item": {
          "id": "d9be72b5-8da1-4b7f-95aa-c6c51b7e3648",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "0354587e-72ae-4619-adec-5f9ba2723f2f",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "d9be72b5-8da1-4b7f-95aa-c6c51b7e3648",
        "cursor": {
          "ref": "da246aac-fcc3-4308-91dc-ce61d6129c01",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "bb597826-b196-4d2a-bd3d-b990a71b0629"
        },
        "item": {
          "id": "d9be72b5-8da1-4b7f-95aa-c6c51b7e3648",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "0354587e-72ae-4619-adec-5f9ba2723f2f",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "4e501102-eea9-479e-8632-9554a89ac33c",
        "cursor": {
          "ref": "3759bad5-69d0-458c-a271-2cc6738e1614",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "91ead3a0-5e1c-4d8d-bac7-f4e391e23caa"
        },
        "item": {
          "id": "4e501102-eea9-479e-8632-9554a89ac33c",
          "name": "identifiers"
        },
        "response": {
          "id": "a6d14aaa-6984-4d39-8bb5-0fba190e04be",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "f7c273af-9487-4f4e-a092-a5b137420e04",
        "cursor": {
          "ref": "35d1d843-f82e-4fe1-9b5b-ba1e23ae6340",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "19105caf-97de-497c-a895-f0235c68393f"
        },
        "item": {
          "id": "f7c273af-9487-4f4e-a092-a5b137420e04",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9dc7c2d7-6f7f-40fe-bd6d-bbf1af642b2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "f7c273af-9487-4f4e-a092-a5b137420e04",
        "cursor": {
          "ref": "35d1d843-f82e-4fe1-9b5b-ba1e23ae6340",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "19105caf-97de-497c-a895-f0235c68393f"
        },
        "item": {
          "id": "f7c273af-9487-4f4e-a092-a5b137420e04",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9dc7c2d7-6f7f-40fe-bd6d-bbf1af642b2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "4e49cac0-5971-4c57-8a20-63627da322d6",
        "cursor": {
          "ref": "e2022ef7-2495-4110-8fb6-5ab1fe7bb435",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "f7a01abe-f363-4272-b751-51c559b5f5ac"
        },
        "item": {
          "id": "4e49cac0-5971-4c57-8a20-63627da322d6",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d21a0bd5-f9f3-4ac4-ac43-17ed5af4ce08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 274
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "0d035e42-cb01-418a-a930-7f583f506a64",
        "cursor": {
          "ref": "f7c43327-3c05-452e-b31a-68374007e1a6",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "bb7b463c-9e63-4b80-b7fa-34326ecfd66c"
        },
        "item": {
          "id": "0d035e42-cb01-418a-a930-7f583f506a64",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "8ffb839f-8d10-40c5-97a1-e45d67746ec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 274
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "8ebc5293-39de-47af-b71f-d0853e28a581",
        "cursor": {
          "ref": "09304093-ff75-4ce9-a644-1b8b20878fd9",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "403dcb47-1ca4-4eed-a457-9704755a8c6d"
        },
        "item": {
          "id": "8ebc5293-39de-47af-b71f-d0853e28a581",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "458526d6-9271-4464-80de-efe9b8fc77e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 274
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "b3ec1bc1-6d4d-47a3-b060-3f2ad36f905d",
        "cursor": {
          "ref": "b4a7c92a-9cd8-4c17-ab76-53708ce3bb99",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "faa865b2-3694-48f1-9f31-a931351f18dc"
        },
        "item": {
          "id": "b3ec1bc1-6d4d-47a3-b060-3f2ad36f905d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "5c2b5f3e-fd12-4795-a523-0987de5448cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 274
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "ab8e4f6a-1384-468c-9771-926046113a93",
        "cursor": {
          "ref": "9a2d65ec-4c87-4f1d-80a7-da3f89981c8e",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "91609eb9-8c7b-4d2e-969d-611c042d64c8"
        },
        "item": {
          "id": "ab8e4f6a-1384-468c-9771-926046113a93",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "e8ed1569-976b-49cb-a8e2-1896bbfdbd54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 274
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "c8bfa9cb-8950-4eb7-ab49-941c721acf7b",
        "cursor": {
          "ref": "972db345-f253-437f-aa2b-108ed85297cb",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c4f18856-b9c5-440c-8674-d1069b791120"
        },
        "item": {
          "id": "c8bfa9cb-8950-4eb7-ab49-941c721acf7b",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "adf74def-3a40-436e-9400-16e88e48d1b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 215
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "3491cff5-d093-4a05-879a-9c9302bbaa6f",
        "cursor": {
          "ref": "f3cf7e7d-2f46-4530-b009-ea63b68cc1dc",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0b888d6c-c21b-40e2-b321-b0980c969135"
        },
        "item": {
          "id": "3491cff5-d093-4a05-879a-9c9302bbaa6f",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "1f8c217a-2f4b-45ff-ad87-4b2c73425da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "9880742d-b265-4bff-9470-51231ee52478",
        "cursor": {
          "ref": "700e9cb0-f33f-47f0-8029-eb252a9715e8",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f93bb724-7b0d-49fe-af19-48bca3206bcd"
        },
        "item": {
          "id": "9880742d-b265-4bff-9470-51231ee52478",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e359432d-f25d-4028-8e71-9cd5ea0141f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "8f4d262b-20fc-4222-8c66-53bd1ecc9e64",
        "cursor": {
          "ref": "8a3e481c-7649-4fd4-9a68-0081e72feaa4",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "d09671af-47c9-4c26-aae7-7be73a46a922"
        },
        "item": {
          "id": "8f4d262b-20fc-4222-8c66-53bd1ecc9e64",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "9e9e1857-9d93-4014-8da5-50e9b0fd4901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "343189df-7df4-4d2a-a0c6-473f3f992b82",
        "cursor": {
          "ref": "75b079a4-637d-4928-845d-01d89a99ba22",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d4f779c7-e0bc-4fb5-89a3-5d58db640df2"
        },
        "item": {
          "id": "343189df-7df4-4d2a-a0c6-473f3f992b82",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "14276df2-e9f4-4810-8e8e-3077870541a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "04d79441-8892-4a80-952f-376aae570aa4",
        "cursor": {
          "ref": "12e65cc6-ade0-4f7b-a81f-852c6c57e092",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b74dc4f7-ecce-4c57-92ac-5939b7103ccf"
        },
        "item": {
          "id": "04d79441-8892-4a80-952f-376aae570aa4",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "234f4658-0499-4355-aa7b-3c36de69f4b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "72e81c8f-5f0d-4b68-86cf-44e2e60e0700",
        "cursor": {
          "ref": "f2010b22-2c3e-457c-9079-74789789ada0",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8cfbb6ec-cedf-4cbe-8247-8cbbb8855a95"
        },
        "item": {
          "id": "72e81c8f-5f0d-4b68-86cf-44e2e60e0700",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "33156443-32aa-4ade-910c-2817915d2e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "62f32694-be9d-4571-9f6c-fa9447977d84",
        "cursor": {
          "ref": "3a2838cb-88a2-4ac1-8fb4-fc1b14294b5d",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "74fa359e-4ba5-4b41-94d0-566977cd0c34"
        },
        "item": {
          "id": "62f32694-be9d-4571-9f6c-fa9447977d84",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0e19b7a6-fa22-423e-8445-98bb06e7c60a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "46220b15-7f34-46d5-ba5f-dbebf813dac6",
        "cursor": {
          "ref": "694a8d15-3b9c-4195-b404-59a70ccc953d",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a218bfa4-770d-470d-be53-7492e4a4515a"
        },
        "item": {
          "id": "46220b15-7f34-46d5-ba5f-dbebf813dac6",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "49fdcea2-76e7-4655-ac64-4f65511727c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "e8f2e1ca-49b3-4a0c-ad1e-9af6f202403d",
        "cursor": {
          "ref": "31881615-050b-4296-b1c8-f563b091d3d3",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "bfbda761-79b6-430a-a185-cc90f8101c98"
        },
        "item": {
          "id": "e8f2e1ca-49b3-4a0c-ad1e-9af6f202403d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ded6a5d2-1822-4f51-8c94-1bf27ff3026c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "bc5b8632-6617-4e1d-8ebd-7f12c71a62be",
        "cursor": {
          "ref": "91db7f02-1a18-44f0-8625-7f522e40ba91",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "5b358281-59b2-4741-a9b8-0dd07753b77e"
        },
        "item": {
          "id": "bc5b8632-6617-4e1d-8ebd-7f12c71a62be",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "9df572d5-5c37-478f-9fdf-e69ecc2c2565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "a033dfa1-b479-4792-9deb-e9ab7210f414",
        "cursor": {
          "ref": "864074c6-db77-4708-b9dd-05684632ab25",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "603de8d0-b4db-4fc0-a0e0-6381c8347fd8"
        },
        "item": {
          "id": "a033dfa1-b479-4792-9deb-e9ab7210f414",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "3466a659-8bc0-45a0-b5c3-ece2d8e2db0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "07abcc7e-0160-4ce3-bbd3-e56979ffdb83",
        "cursor": {
          "ref": "f5d7fc23-488a-4484-b8ae-d100abd9fc21",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "49b3d175-8e86-432a-9a11-7a58bb00f76f"
        },
        "item": {
          "id": "07abcc7e-0160-4ce3-bbd3-e56979ffdb83",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "f2509b54-6d1d-40b2-a078-d41318272c86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "ab1179c5-0689-4b84-8f70-285afdcaf5bc",
        "cursor": {
          "ref": "296e6390-5f71-4fde-bbd0-8ac6ead2f3c0",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "771dffb1-20a8-437e-b445-a244626e3424"
        },
        "item": {
          "id": "ab1179c5-0689-4b84-8f70-285afdcaf5bc",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "97c6f043-daf3-4e2f-98b5-8917d5f79e3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "40e0bd5e-8f9e-45ab-b8f7-1b46273c8019",
        "cursor": {
          "ref": "7acdf517-3b51-4a98-8ac8-a5ba4ba9c07b",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "98916d19-fb9d-45a0-94c9-ca720c4cc3a8"
        },
        "item": {
          "id": "40e0bd5e-8f9e-45ab-b8f7-1b46273c8019",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "b19196dc-43a9-4b1e-bd6b-2a21d09d873d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "cb15f87d-60ed-4679-b765-8123535e7a2e",
        "cursor": {
          "ref": "6648fcbe-0093-400b-9ed0-eeedc4b5328e",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ac26de47-855b-4236-a0ee-ec3899cb3ea8"
        },
        "item": {
          "id": "cb15f87d-60ed-4679-b765-8123535e7a2e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "4e63760e-7ce4-479b-b483-d0c5e87c5dff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "b46d86ea-9e76-416d-b44e-829ac768dc11",
        "cursor": {
          "ref": "470cdc0b-1487-4781-86e2-e3fcf5c06158",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b694e563-6489-45cf-bff9-82e3159882f2"
        },
        "item": {
          "id": "b46d86ea-9e76-416d-b44e-829ac768dc11",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f3e5a2dc-fed6-4252-a290-c9c0527cd003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "a2fabd5e-77e0-4407-a63b-e0ef07780858",
        "cursor": {
          "ref": "5943ff6b-0bb5-413c-b7b7-77949910718c",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6ae4ab7b-1f2d-4654-b080-e5eca9adb6e2"
        },
        "item": {
          "id": "a2fabd5e-77e0-4407-a63b-e0ef07780858",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "bec60454-4fd2-48d5-962c-4db553eec137",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "d5c8b766-7f72-4b95-af46-1e9bacb840b3",
        "cursor": {
          "ref": "0786c4dc-9c0f-433b-8065-0387722af36a",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "a4d49ed4-2c72-4485-9211-306e9e030057"
        },
        "item": {
          "id": "d5c8b766-7f72-4b95-af46-1e9bacb840b3",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "2564a806-261c-435b-9f32-77fe1429a17f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "5846c409-ac5d-446e-bd5b-318fa4675b9b",
        "cursor": {
          "ref": "10af3bb1-5218-48c6-b158-36f97ff93ab5",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "3c2bece4-4a53-45cc-9549-728b06c34624"
        },
        "item": {
          "id": "5846c409-ac5d-446e-bd5b-318fa4675b9b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "0dd18e6d-7ae8-44ed-8440-d796d8227130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "7b787b22-0a63-49ec-b7fc-9e41ff6e559e",
        "cursor": {
          "ref": "11e20eaf-f5f9-4622-8233-12d23ac97473",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "217aa136-26ba-47af-8437-9d474d8cb4f9"
        },
        "item": {
          "id": "7b787b22-0a63-49ec-b7fc-9e41ff6e559e",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "85e6287a-d093-4efc-9cfc-23565219f117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "a562e0f8-3946-4a26-aa6b-13dca661c631",
        "cursor": {
          "ref": "2a531305-aac0-40a1-b86d-321378f45abe",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "198f2ee4-c370-4865-8886-e8138d62a044"
        },
        "item": {
          "id": "a562e0f8-3946-4a26-aa6b-13dca661c631",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "4747268b-f33b-42ae-84a0-0b07659a85b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "6dd9bf19-e9f9-4cc3-8725-65848dee0e55",
        "cursor": {
          "ref": "1357cf1e-a54f-4e23-9d4f-25ef07be1bf8",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e232df96-9346-416f-a5c7-f598cfe21ec5"
        },
        "item": {
          "id": "6dd9bf19-e9f9-4cc3-8725-65848dee0e55",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "101d623c-e4ea-4576-a920-6caed3a5c86a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "1546af19-c53a-4e41-9e17-d8876e4a8c8f",
        "cursor": {
          "ref": "9d1ded84-b450-4309-b738-c630496d7a3b",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "4c609531-0092-4d4c-8ccd-8b46d034a1f0"
        },
        "item": {
          "id": "1546af19-c53a-4e41-9e17-d8876e4a8c8f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "11fa97f7-b5d5-483e-a47e-767656e73d94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "c82681c9-a493-4b4b-a179-37b2fa73d796",
        "cursor": {
          "ref": "df597d7a-05a2-43c6-b3c4-b3f87a5f9b27",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6b99d81a-1f7c-4345-86ab-38a4ef98500e"
        },
        "item": {
          "id": "c82681c9-a493-4b4b-a179-37b2fa73d796",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "164ebd19-a083-41cb-aaf6-3e96c5890663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "7dfca619-ee09-41b2-a37d-c41fb5a884bc",
        "cursor": {
          "ref": "d7fc70c3-3586-44f1-88d7-d4cbf5aa520b",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "9d1f6183-9b05-4f73-a0ad-7d3b137ce7f9"
        },
        "item": {
          "id": "7dfca619-ee09-41b2-a37d-c41fb5a884bc",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b448d191-7c02-455d-9ae0-b7332b1a0944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "9c434a92-81ee-49ab-add4-ab577b2d97bf",
        "cursor": {
          "ref": "f3998e1c-9da0-45bb-9c47-fea25126cace",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0de7b5c5-c231-4e35-8d7d-19fc790bc763"
        },
        "item": {
          "id": "9c434a92-81ee-49ab-add4-ab577b2d97bf",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "5f32b72f-1556-48f1-8635-d70024eb92da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "885765b3-3984-49c2-b0db-5fd358b2bd0d",
        "cursor": {
          "ref": "9b2fed7a-da1e-48ea-8b4b-54af2c526655",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c85a4086-afab-4da2-b974-4414c7926c01"
        },
        "item": {
          "id": "885765b3-3984-49c2-b0db-5fd358b2bd0d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "66419b3e-ecdd-4b82-8077-b399ec09b2c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "1a2e2d4c-caf2-4a5d-888e-558bebed7f5b",
        "cursor": {
          "ref": "7d82ce89-434f-47e1-b14b-e048df70ef3f",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ee59014b-43de-43d8-8c4d-2ce813a68a90"
        },
        "item": {
          "id": "1a2e2d4c-caf2-4a5d-888e-558bebed7f5b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "044f60c9-5934-48b6-acd3-5a7f1d87af2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "382ddf9b-a1c3-4155-8a53-2f9510ceeba1",
        "cursor": {
          "ref": "fcd9c0ca-238d-4be5-aa24-88ce32fad4ef",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "5ecd1471-b892-426c-bbd3-b8d47c84bef4"
        },
        "item": {
          "id": "382ddf9b-a1c3-4155-8a53-2f9510ceeba1",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "78579536-0ce7-445b-bd2e-3cc4381a0188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "e84c33be-a87e-4664-8454-bb08139e955d",
        "cursor": {
          "ref": "8310224c-2848-4cd9-b513-c907f7d57a16",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "ac05def9-b92b-4a27-b7f4-30379aab67d6"
        },
        "item": {
          "id": "e84c33be-a87e-4664-8454-bb08139e955d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "618e8c02-8838-4e5d-9169-d2241fdc4ec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "fcb8d992-2f8c-4630-b961-1d396814058e",
        "cursor": {
          "ref": "51431368-0465-4b20-b0f7-88ae49cec108",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ce5c72f1-e4e3-4f49-aa15-9d4cd2cddde1"
        },
        "item": {
          "id": "fcb8d992-2f8c-4630-b961-1d396814058e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "0b75ed03-f213-4e55-8422-3d3cfc3f96cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "63d151ea-26ac-4d42-9d5d-124516ce31ac",
        "cursor": {
          "ref": "deab6797-b2e8-4e93-b201-23c720116e00",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3fefabcc-5627-4ae0-901d-0d3c105557fc"
        },
        "item": {
          "id": "63d151ea-26ac-4d42-9d5d-124516ce31ac",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "ec98a99b-902c-4699-b924-e706168eeca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "5543ec89-75d4-46e8-9236-7f36c45f7baf",
        "cursor": {
          "ref": "e8decb8f-1cdf-4d5a-b14d-07c86c49ff9d",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "fb48cac4-5474-4fd4-80c6-d6844440b0cd"
        },
        "item": {
          "id": "5543ec89-75d4-46e8-9236-7f36c45f7baf",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "8e732499-bc2c-48e5-ab1d-ce3f28ca6b22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "309ed2f9-bea0-4df1-9f95-83fa1b8ec409",
        "cursor": {
          "ref": "b2ef245a-2cd7-451d-9389-ac2910ac6460",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "52661cee-09ad-4e45-9264-e73143554b0b"
        },
        "item": {
          "id": "309ed2f9-bea0-4df1-9f95-83fa1b8ec409",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e05e2334-d15d-473c-a906-2c4ee917feb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "8ddd5916-a03e-46f9-98e1-ad028878cd6b",
        "cursor": {
          "ref": "c90d3ec4-6aab-44d9-9a31-9c7b09efeb03",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "a5b00ac9-87d1-47d6-a89f-d8fab9608d1d"
        },
        "item": {
          "id": "8ddd5916-a03e-46f9-98e1-ad028878cd6b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "2f724734-4fd9-430f-ab9b-22dbd0ece5d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "0b163ef9-29f4-4743-8fe9-185daedef118",
        "cursor": {
          "ref": "2cac6687-77f1-41f0-887f-7e28f7635006",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a4f4d49f-d170-48b4-9079-448d867c288c"
        },
        "item": {
          "id": "0b163ef9-29f4-4743-8fe9-185daedef118",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "933ccb34-3364-42c4-878d-1f004266a155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "1b4e0283-e2ac-4a91-9c04-1de80aab77ec",
        "cursor": {
          "ref": "667d9ca6-a71d-4b5e-b93c-92cf006c9ddd",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2ab590d5-c7d1-4a62-9f9c-3f2a7f6d91f9"
        },
        "item": {
          "id": "1b4e0283-e2ac-4a91-9c04-1de80aab77ec",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6239de2a-c64f-4b7b-b0be-0f14c1f0cf95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "ba2996d0-fb42-45df-b87a-ea8344163168",
        "cursor": {
          "ref": "2e5f373d-64e2-42ea-9a5b-fef98c52d4b7",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "1b8321ac-4890-4d4c-9377-a9f3469c0e98"
        },
        "item": {
          "id": "ba2996d0-fb42-45df-b87a-ea8344163168",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "8f5ba8db-c55c-4196-a6f9-d5e403d1eccd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "4ba2bb59-260a-41f1-ae93-f45b0bef0d68",
        "cursor": {
          "ref": "8b64c836-d3e2-4221-b102-18b743bd20b8",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "eaedda0c-999a-4711-ade5-212e852a81e3"
        },
        "item": {
          "id": "4ba2bb59-260a-41f1-ae93-f45b0bef0d68",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a3763b4e-7e1d-4588-92ec-337a8e2f7d1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "7f16b578-4698-4039-aeca-74194da2fb81",
        "cursor": {
          "ref": "6c0faf0d-7b1d-4c82-870e-94fcb7cb7a9e",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d596637c-053a-4b28-abff-622739c4eb8b"
        },
        "item": {
          "id": "7f16b578-4698-4039-aeca-74194da2fb81",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "b66471b4-cc4f-40ed-bd71-787ea67978bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "4d0b09a5-fda0-4b9a-b7ca-3826138dbb53",
        "cursor": {
          "ref": "613fb192-d64b-4d42-8ae6-ca5e3dddc647",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1067e945-effd-422e-9cfb-8fac4baba282"
        },
        "item": {
          "id": "4d0b09a5-fda0-4b9a-b7ca-3826138dbb53",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "f7dd7d88-368c-472e-9216-93d89a649521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "9faaafa7-6666-4c31-a325-374b461cbe8b",
        "cursor": {
          "ref": "3becf206-785f-4a62-94be-6c9436db06f5",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "3e4708b8-f600-4aa5-80b8-6f8a9dca96c7"
        },
        "item": {
          "id": "9faaafa7-6666-4c31-a325-374b461cbe8b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "8a9295b3-5943-4064-aa1a-88aa8d903743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "f4d74951-5e97-45db-8f01-7d864ccd61c8",
        "cursor": {
          "ref": "c01cde7f-74a7-47ad-8dc8-ee241263b32d",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "5e10ad17-1838-4cc3-b930-375b3acc099a"
        },
        "item": {
          "id": "f4d74951-5e97-45db-8f01-7d864ccd61c8",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "398233a0-ff84-4ded-8f87-d3efa51fdef6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "8cd1e997-4b9f-436e-9671-040cf1825c1a",
        "cursor": {
          "ref": "fa1787a9-12a8-4370-8845-30b92f970e76",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d69bce25-060f-4219-8eb1-13d9c0edfc5a"
        },
        "item": {
          "id": "8cd1e997-4b9f-436e-9671-040cf1825c1a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "30657fd3-12a4-4ac7-8c86-149dd136dec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "7509dfec-b108-46bb-b4b3-daa566ec101d",
        "cursor": {
          "ref": "6e886c65-5625-4dfb-8ee1-85a4d6025d2a",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "c0830c22-e40b-4dbb-a4b4-7cef5ec0d377"
        },
        "item": {
          "id": "7509dfec-b108-46bb-b4b3-daa566ec101d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "24f74f40-c091-4f9f-9838-65d038a10ed9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "4738826e-efb0-45c4-8681-01038665152d",
        "cursor": {
          "ref": "a9d51ec8-6c42-469e-8d9c-82a5ec21d36f",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "9f753d55-0202-4ea2-af69-3b1c753f3a80"
        },
        "item": {
          "id": "4738826e-efb0-45c4-8681-01038665152d",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "82a2c163-fa77-4bbc-ae4e-6e961a09f15b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "1c1eeec5-5e7b-40a6-98aa-b3a409e197c1",
        "cursor": {
          "ref": "0021c105-b123-4e4e-9f99-d71f0887b6bc",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "5d9eba66-e68c-4956-aa2a-459c2d11cbe2"
        },
        "item": {
          "id": "1c1eeec5-5e7b-40a6-98aa-b3a409e197c1",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1441eb55-658c-4e16-b02a-d09491d1bf83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "b83b15cc-a64c-4b76-bdb6-8cd30e9977d3",
        "cursor": {
          "ref": "30966067-3ea5-4ecf-898b-1120bff7155a",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "53f35c22-276e-47e2-9dc0-433c5e50b609"
        },
        "item": {
          "id": "b83b15cc-a64c-4b76-bdb6-8cd30e9977d3",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "2b5ca195-3508-4861-9c2b-51544eaf78f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "dee12a2f-a500-469d-a701-c747d7387be0",
        "cursor": {
          "ref": "bac69b85-81f0-4176-88b3-bd1fac597c6e",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "56690d90-7948-47b5-a5ad-554fed431da6"
        },
        "item": {
          "id": "dee12a2f-a500-469d-a701-c747d7387be0",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "82f091ea-7de1-4f38-acbe-c02352548709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "33600b66-1ab7-462c-959d-bd35212c10de",
        "cursor": {
          "ref": "40f42084-5303-4d81-a9bc-ddde7c037f98",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "dc852110-8401-4c6b-bfe7-02f2a027c113"
        },
        "item": {
          "id": "33600b66-1ab7-462c-959d-bd35212c10de",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "ecbe66a0-d9f1-4964-b76d-01e1d6198167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "03fed2b2-a823-4b35-8ea5-c044b0b98889",
        "cursor": {
          "ref": "cf7a4edc-0af5-49e5-b8a6-9b1bfeb2d2c5",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "bfb31d4e-f428-43eb-9341-6bf9a07472a2"
        },
        "item": {
          "id": "03fed2b2-a823-4b35-8ea5-c044b0b98889",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "443e6b99-8826-4ca0-adb9-59a4a1ce91e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "cde364a6-8eda-4fa8-9ce4-7bfe20aaa49a",
        "cursor": {
          "ref": "6fc7a826-9c63-4660-b13c-8b97d427ced3",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5064ddc5-6826-4659-bf09-4828ad2304d0"
        },
        "item": {
          "id": "cde364a6-8eda-4fa8-9ce4-7bfe20aaa49a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a9c9434d-ed4a-4790-9dfc-06e446d99c01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "3bbe0276-a6dd-41fc-b5a6-55c5e56ce5bf",
        "cursor": {
          "ref": "199079be-56a4-4766-b6a0-8da68d0e249e",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "962ef695-a611-4cf4-b604-f46fbf58254b"
        },
        "item": {
          "id": "3bbe0276-a6dd-41fc-b5a6-55c5e56ce5bf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c1bbf440-f205-45a1-88d8-a29b3066ad2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "d7535d20-c5f2-4543-81df-9b7f0147446b",
        "cursor": {
          "ref": "81c2e46a-4522-4b7d-b3c2-93a41549b749",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "337524a2-8b32-4585-9dbc-d0005d4b8e56"
        },
        "item": {
          "id": "d7535d20-c5f2-4543-81df-9b7f0147446b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "fd887907-6f2d-4d8f-9742-501111d15ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "8effb822-ef5e-445a-8b22-16412e03814d",
        "cursor": {
          "ref": "34224f75-618d-4041-a110-50951ae8e181",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "828af62d-7bd3-4ee5-89cc-45b64b30ec9a"
        },
        "item": {
          "id": "8effb822-ef5e-445a-8b22-16412e03814d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "5d7a1a75-024a-44b4-b48f-e79be0c38935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "10ffa38a-f700-4f5b-927c-6d643b550dff",
        "cursor": {
          "ref": "1585d712-1fb0-410d-8196-8e1eecd94225",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e6bb5667-4fd3-4338-aa89-a9ff4f679f20"
        },
        "item": {
          "id": "10ffa38a-f700-4f5b-927c-6d643b550dff",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "2636afd5-6490-4fea-928b-e0f5e5094989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "e56f089b-7f34-41a6-8ebb-e72fdbde91dd",
        "cursor": {
          "ref": "cccc051a-55ff-478a-b266-6365340293d7",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "9abfb537-df02-4bf9-941c-43c9adf0ca42"
        },
        "item": {
          "id": "e56f089b-7f34-41a6-8ebb-e72fdbde91dd",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "4b4ec8f6-2dcd-48cd-ae6a-ed1322765420",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "c2e91e13-e550-4c8a-88d0-1dfea3cb2ba0",
        "cursor": {
          "ref": "6f39588c-f72b-47f8-a676-a9680efd9533",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "fa2c83b4-5d61-4655-909c-135eed85c501"
        },
        "item": {
          "id": "c2e91e13-e550-4c8a-88d0-1dfea3cb2ba0",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "547a92e4-9a0a-43f8-9097-eeb47d73b420",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "c21f8521-6f22-40b2-94fd-b566ec72c03d",
        "cursor": {
          "ref": "62d02caa-d6ca-4db7-b69f-829ab8b50952",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "8c0a3b5b-cb04-4b3e-a487-10435430d8ec"
        },
        "item": {
          "id": "c21f8521-6f22-40b2-94fd-b566ec72c03d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "de097a46-5306-443d-ada8-c670f4effe86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "101de8e1-9b32-4bbd-ad94-9d9d99f9a9a7",
        "cursor": {
          "ref": "efd8234e-1229-47db-ae27-194016bc777f",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "925c4437-e53f-4b90-9512-349effe33d41"
        },
        "item": {
          "id": "101de8e1-9b32-4bbd-ad94-9d9d99f9a9a7",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ba1ac18e-bd23-419d-87e6-d862665c4ab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "880cf81d-ae57-42f0-be9c-f3357e6f6dba",
        "cursor": {
          "ref": "043c91af-d8cd-41e7-8e13-8cf6790f15ef",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1e482d20-83cb-4319-becb-eb6949264ea3"
        },
        "item": {
          "id": "880cf81d-ae57-42f0-be9c-f3357e6f6dba",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "8aecfa30-a001-4401-990c-adafdf930e46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "8b0b9bde-32a7-4c29-9211-d18acf32e8a1",
        "cursor": {
          "ref": "5882d454-be68-487a-9142-efb78310237c",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "1f084361-3cb7-4cab-96bb-3f72cdc60661"
        },
        "item": {
          "id": "8b0b9bde-32a7-4c29-9211-d18acf32e8a1",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "0ea40ab1-d46d-4838-8a44-715475f6e907",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "c869185f-a0e6-4720-adc8-bb83c029ce4a",
        "cursor": {
          "ref": "01dc22d4-b4fa-484f-b208-312f3c6a5bbd",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "b6fe200d-cb3b-468e-81e3-59d8a2e750d0"
        },
        "item": {
          "id": "c869185f-a0e6-4720-adc8-bb83c029ce4a",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "9f35ac00-da72-40a8-9b27-7707c817b53b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "48c41780-069e-4b2d-b9a4-d399ca553c39",
        "cursor": {
          "ref": "f796bbb9-b327-476f-81d4-8370cd7ed577",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "1589b44b-6e48-4d14-99eb-fd3493248190"
        },
        "item": {
          "id": "48c41780-069e-4b2d-b9a4-d399ca553c39",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "10764130-0795-4c90-9ca4-978ccc866b34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "17881ea5-d5ad-4b95-b786-c62228ebb280",
        "cursor": {
          "ref": "908460a7-bb8e-40ba-94e6-20c71f755d00",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "13982b56-e003-42b2-94c1-c9be19d35d29"
        },
        "item": {
          "id": "17881ea5-d5ad-4b95-b786-c62228ebb280",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "2d712169-8b5b-4342-8264-680b7b5b8928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "0fdf315b-90d6-42f5-89ae-c89f977a6c43",
        "cursor": {
          "ref": "d3c78aa7-feb3-4650-9d3c-dffa04d16fb1",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "5d07b1c5-e90d-4558-8947-aa03d7e8d858"
        },
        "item": {
          "id": "0fdf315b-90d6-42f5-89ae-c89f977a6c43",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "855f875c-8d6a-4ff7-bcaf-feceb676d07e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "7fedfcb5-0c1e-4148-9c3a-7fb26a219965",
        "cursor": {
          "ref": "d8a8f626-ab2d-42e0-b4d2-fd4a15e6e762",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7a395020-ad28-4dec-a50f-d776bf8b44f6"
        },
        "item": {
          "id": "7fedfcb5-0c1e-4148-9c3a-7fb26a219965",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "5125388b-13d0-4a06-8197-b49414cb94aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "51afc004-d99c-418c-8036-290887682316",
        "cursor": {
          "ref": "4556a528-b82c-484e-a25b-1f32fa849a75",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "70246bad-470b-48c9-a863-e294b5360f80"
        },
        "item": {
          "id": "51afc004-d99c-418c-8036-290887682316",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "994ec9d9-06fb-4d80-b7f8-693b478bbdeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "55133368-460f-42dd-b097-fc13acf737af",
        "cursor": {
          "ref": "48652fc7-2291-44f1-ba4e-adbcc8302676",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "5a8ae491-3251-483a-923f-cc1eaafbd708"
        },
        "item": {
          "id": "55133368-460f-42dd-b097-fc13acf737af",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "f3fffeb2-d02d-4bbb-9324-8d5ba38dd099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "e1f29985-8983-478c-abdc-bdb50bd922ad",
        "cursor": {
          "ref": "2b5c1d4f-09d7-4b51-bff9-0eca97a285ba",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "594f861c-e3d6-4db6-87ad-7c989f614091"
        },
        "item": {
          "id": "e1f29985-8983-478c-abdc-bdb50bd922ad",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "34a803a4-e629-4655-b966-ebf71bf859b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "8b5aafdf-bb53-48f2-aeba-4fa5604b366e",
        "cursor": {
          "ref": "406d4acf-f8f2-4c4c-bd33-b7afe1dec75f",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a3f7df5f-8e6c-4d78-a918-37591e2959fd"
        },
        "item": {
          "id": "8b5aafdf-bb53-48f2-aeba-4fa5604b366e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "6d71508e-c710-4ba5-ad36-1082c300e1b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "bf053f71-84a6-4399-ba2e-c0c540be8815",
        "cursor": {
          "ref": "3f0705fa-a1a3-405c-bb96-92542365570a",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "16ad300f-551f-4cee-9df5-74b0d11a53fe"
        },
        "item": {
          "id": "bf053f71-84a6-4399-ba2e-c0c540be8815",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "19311fa8-6be9-4afe-b986-0559622e2d02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "22bc5271-d6b9-4c8d-8c34-404a0b34a5d8",
        "cursor": {
          "ref": "54ef2e2c-d77f-4fad-8a9e-4390897806a1",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a7dd762e-dd59-40c8-9b87-ed9f559d1950"
        },
        "item": {
          "id": "22bc5271-d6b9-4c8d-8c34-404a0b34a5d8",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "7d986e34-5756-4195-91aa-4d9621786793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "5390838a-23f4-4e42-878b-f41d537c807a",
        "cursor": {
          "ref": "b5e5cc0f-f213-4b00-873c-45c62edd57c4",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a986e250-00e7-41b8-8320-937a85e5d5d4"
        },
        "item": {
          "id": "5390838a-23f4-4e42-878b-f41d537c807a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "6fa4ddf1-bc27-4241-9b7f-7b0222986ed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 214
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "9ac81b50-b064-4c8a-9ef6-edc1949d766b",
        "cursor": {
          "ref": "61704788-8aa7-45d0-b60f-00b03b3b854a",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "cde33757-f3a5-4d04-8f17-f8eb7ca07e4e"
        },
        "item": {
          "id": "9ac81b50-b064-4c8a-9ef6-edc1949d766b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "35887a11-42dd-4561-b333-5867ddd6ebde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "8b693579-d2d1-4b45-a7e8-fa319298aaa9",
        "cursor": {
          "ref": "f4998b01-3da8-4400-b18e-1c8bb24f82a1",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "849faea0-fde4-42ae-b0ba-dc0fd6307ec4"
        },
        "item": {
          "id": "8b693579-d2d1-4b45-a7e8-fa319298aaa9",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6c7dff45-2c18-49f9-b2f8-77030301c2c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "b35b7f0f-b04c-4819-b55d-99e19617a096",
        "cursor": {
          "ref": "afb1e17f-f0ad-4e03-bc34-bd2b985c1506",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "878b6f62-16d8-4f6c-933b-541af3190500"
        },
        "item": {
          "id": "b35b7f0f-b04c-4819-b55d-99e19617a096",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "6ebb6616-da6c-4be5-8afa-f068e90f4710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "b8cf6e6d-21f1-4c17-9255-0f12636d278a",
        "cursor": {
          "ref": "d98461e0-7ac8-438d-a17e-50d7193fed31",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e29c9e31-fd26-4739-b698-8493f9b3d585"
        },
        "item": {
          "id": "b8cf6e6d-21f1-4c17-9255-0f12636d278a",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "4a562d01-56d4-446a-8aed-893f1f44d350",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "b3de36ec-6771-4c9a-81a0-4b473461a64d",
        "cursor": {
          "ref": "efddcea2-049d-44f1-9435-5e52ad803e72",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "9e273652-a269-4da6-87a3-8ee79b88dd2a"
        },
        "item": {
          "id": "b3de36ec-6771-4c9a-81a0-4b473461a64d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a0a500fe-3c3b-4dd4-841e-504820a9291e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "4cbb0bf5-2fa7-4f51-bcb7-2b6ac4aad2f1",
        "cursor": {
          "ref": "3735fa32-64ac-4518-964c-45110fbe94bf",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "8c7de006-4738-4d23-9d86-028ea2d4898a"
        },
        "item": {
          "id": "4cbb0bf5-2fa7-4f51-bcb7-2b6ac4aad2f1",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "afbc269d-361f-4ef6-97af-eec4f21c9635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "4001e59c-65bc-443c-b131-2bb810a0f8e0",
        "cursor": {
          "ref": "02283ee4-2754-4635-b20d-a21e8c335539",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "f76f25db-4a7a-4c70-8de1-6289a7dcbe0a"
        },
        "item": {
          "id": "4001e59c-65bc-443c-b131-2bb810a0f8e0",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "526ea42e-48c5-41ee-bad5-9ac65f098772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "bec3ccdb-8a8c-4cfb-ad91-30bbe600c1af",
        "cursor": {
          "ref": "f7023f44-5fac-4fc6-ab53-da5baf05fab6",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "b7d8ff8f-fa86-48ee-846d-18ae3ea6d864"
        },
        "item": {
          "id": "bec3ccdb-8a8c-4cfb-ad91-30bbe600c1af",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "7c5fb299-cb44-4861-be16-e0042effd735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "1f444d9a-9a81-4624-8cd9-f1c8495ae56b",
        "cursor": {
          "ref": "cad98d23-62e3-4680-bb5c-a1c2234785ef",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "af2fa9c3-46e0-487a-bb10-6093f2a05c03"
        },
        "item": {
          "id": "1f444d9a-9a81-4624-8cd9-f1c8495ae56b",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "55c22659-5ad9-46b2-b8b1-a52fc95643a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "02944e09-938c-46f7-a4e1-9a7924a37d6c",
        "cursor": {
          "ref": "eb60a88a-e810-467c-ba33-45214876a7f5",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d48f317f-9664-40da-ba2d-16a3afc34c6b"
        },
        "item": {
          "id": "02944e09-938c-46f7-a4e1-9a7924a37d6c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "39548ced-ef16-48da-b322-d8b9f5840255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "7c5f1f77-e163-4b95-a083-f2e3d0ea3c3c",
        "cursor": {
          "ref": "1541d0c3-77b6-464d-ac09-e43fe62720e9",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "c0f935af-ddf0-4272-ac14-0169b66320a2"
        },
        "item": {
          "id": "7c5f1f77-e163-4b95-a083-f2e3d0ea3c3c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "6b719517-2f80-424b-bd66-95f4272cdc1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "ad891bba-4eb2-40df-b931-636f73464fcb",
        "cursor": {
          "ref": "762d638b-37b8-44dc-b71f-6e4e2c006d4a",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "c5876de8-9d59-4a52-9742-6223edc470ff"
        },
        "item": {
          "id": "ad891bba-4eb2-40df-b931-636f73464fcb",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a18f31a9-969e-4ff1-b681-de46ebe9b5b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "2e6bb92b-295f-4ae8-acdd-31483873bdf2",
        "cursor": {
          "ref": "9360c8fd-5562-486d-a827-7066f0346c5d",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f67e3216-ac47-43e4-a470-5b4db4507f11"
        },
        "item": {
          "id": "2e6bb92b-295f-4ae8-acdd-31483873bdf2",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "77a5ca6c-2b98-4df7-852c-221c350eb8e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "02ad25a1-d961-4374-b6c2-1e78226a1ddd",
        "cursor": {
          "ref": "98ac27d3-0dbf-4d82-ae98-ef67a83c72ec",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "7be75e8f-a689-41ed-9fa2-cdd24b9733bc"
        },
        "item": {
          "id": "02ad25a1-d961-4374-b6c2-1e78226a1ddd",
          "name": "credentials_issue"
        },
        "response": {
          "id": "858ce7c5-c079-4369-9e32-5e7acbea0096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:104)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:104)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:104)"
            }
          }
        ]
      },
      {
        "id": "f7e3bcfc-5c1c-4c01-934d-b5ce288b7ee8",
        "cursor": {
          "ref": "d3d6a8ba-1217-456a-b476-c83f2c286052",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "6faba432-02d0-4b04-8d64-f00eedf1fe8a"
        },
        "item": {
          "id": "f7e3bcfc-5c1c-4c01-934d-b5ce288b7ee8",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "93e9404c-4ff7-4eda-987e-019fcbc5238f",
          "status": "Created",
          "code": 201,
          "responseTime": 5118,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "55d6e672-237a-47b2-ad55-2770471f473e",
        "cursor": {
          "ref": "49f93bca-e8c2-4f01-8778-9984a9c9b133",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "9f4c1b14-8fb2-4f39-b474-bf393045fba6"
        },
        "item": {
          "id": "55d6e672-237a-47b2-ad55-2770471f473e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c99b574a-79c7-4bdf-9d13-58c432a32fff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 552,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "c6aa0e24-5281-4ebf-9c17-abcb4c0e1df9",
        "cursor": {
          "ref": "9c54cefa-efbd-4e11-82eb-63e33637399c",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "2320e896-34e6-4b9f-a3de-9cd31d615c91"
        },
        "item": {
          "id": "c6aa0e24-5281-4ebf-9c17-abcb4c0e1df9",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e2a08c50-4789-4276-93ca-22e33caa3ac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "55c9c555-77ed-41e4-9f85-06f535d280bc",
        "cursor": {
          "ref": "81e64311-654a-43e9-92a0-2307eaaec09d",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "4779ab7c-f936-4890-b663-c68b320893ec"
        },
        "item": {
          "id": "55c9c555-77ed-41e4-9f85-06f535d280bc",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "4e54282a-44a7-44f5-987f-0bd2f1899068",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "8057b1b5-ea5b-48cf-897f-28b1d261c7b1",
        "cursor": {
          "ref": "1dc7d1c7-37d0-429f-a04b-ade3c6e1d72f",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e4f2ab39-29f3-433e-ab7b-d7706bc0ecee"
        },
        "item": {
          "id": "8057b1b5-ea5b-48cf-897f-28b1d261c7b1",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "196e818c-3d4c-41f0-b6a4-863028e87e4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "e28ba2c1-f8d9-466a-a715-5e0316988087",
        "cursor": {
          "ref": "673579a8-9105-4daf-9912-9839b74e2535",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "aa9667fb-9715-495e-a2bf-f830affe8901"
        },
        "item": {
          "id": "e28ba2c1-f8d9-466a-a715-5e0316988087",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1b9c6469-c909-402e-a51d-bccd27503b00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "e28ba2c1-f8d9-466a-a715-5e0316988087",
        "cursor": {
          "ref": "673579a8-9105-4daf-9912-9839b74e2535",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "aa9667fb-9715-495e-a2bf-f830affe8901"
        },
        "item": {
          "id": "e28ba2c1-f8d9-466a-a715-5e0316988087",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1b9c6469-c909-402e-a51d-bccd27503b00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "842578fe-5596-4580-9339-e52e6d4dfb3d",
        "cursor": {
          "ref": "26e0052b-fabf-48f0-8cf3-f2d4247f221a",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "36f11804-edf7-4f93-9c9a-dcbce430dfa2"
        },
        "item": {
          "id": "842578fe-5596-4580-9339-e52e6d4dfb3d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4d925817-eba2-4e01-a4a2-d5e77e876a83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "87d8b137-8a4e-459f-a0bf-a32972ba15a8",
        "cursor": {
          "ref": "89f655b3-13fb-47e4-a192-4b6385534595",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "34e61411-163a-4a67-b8a3-0071e298e542"
        },
        "item": {
          "id": "87d8b137-8a4e-459f-a0bf-a32972ba15a8",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d226261f-cfce-4ea3-afe6-cf405c4beec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "ffbe680d-61b2-4965-8a8a-01c5252dea08",
        "cursor": {
          "ref": "aad55764-229e-4c04-ae19-4eebd99bcd5b",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f6e5bf31-73aa-4870-8263-dafcb98a5fe1"
        },
        "item": {
          "id": "ffbe680d-61b2-4965-8a8a-01c5252dea08",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c239b14a-4760-4e0b-aa6c-aa6be859c24c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "96d755a6-2627-406a-b944-79f8cc0f19fe",
        "cursor": {
          "ref": "de1e4b98-36dd-44e1-90af-90f24574b9be",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "a5fdd067-b1a8-4c03-91b2-b82c00bc29e9"
        },
        "item": {
          "id": "96d755a6-2627-406a-b944-79f8cc0f19fe",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3d6908ea-0cae-43b7-8f91-e5e5407052bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "41f09d1a-a31b-44aa-9ffd-6fe5d49ec913",
        "cursor": {
          "ref": "3eeb8328-beb3-40ae-922e-f9585b75b4e2",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "1add65d2-44c8-4610-a705-ac7136a2da0a"
        },
        "item": {
          "id": "41f09d1a-a31b-44aa-9ffd-6fe5d49ec913",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ce3207dc-8306-4510-b49f-c18deed5d093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "6272b32a-87eb-4546-bbed-60b95ca5b3ff",
        "cursor": {
          "ref": "6dab648c-b871-4758-9a1a-5da99f4278b5",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "75cab82e-c1a4-4f22-846e-ae252afbf78b"
        },
        "item": {
          "id": "6272b32a-87eb-4546-bbed-60b95ca5b3ff",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "746b4cd9-7013-4b28-9916-f9f673f4bfbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "34be2d63-e9df-4b0c-beb8-1c75ae130680",
        "cursor": {
          "ref": "1d333980-a5fb-4efa-8b3b-b7478f7c05f4",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "6ff7d1ae-c46a-46d5-8934-153c5cc84a51"
        },
        "item": {
          "id": "34be2d63-e9df-4b0c-beb8-1c75ae130680",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2cd968ee-bd35-4180-be50-15fa7f538e06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "9ddf61f1-f074-4332-9874-35dbcddd168b",
        "cursor": {
          "ref": "96bd7ddb-6d87-4ca7-baed-f137f1c322ce",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1a4295b8-0fcd-4c74-91f4-5438b5565b80"
        },
        "item": {
          "id": "9ddf61f1-f074-4332-9874-35dbcddd168b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "7eb16a74-66e7-4bd3-92a8-24ba0e6b24f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "398758d2-d91b-4993-9dc0-c60b00394a87",
        "cursor": {
          "ref": "83f81834-1b28-452e-8111-2f2e523683ea",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "c1733836-e08a-4199-aae0-66644184ffcc"
        },
        "item": {
          "id": "398758d2-d91b-4993-9dc0-c60b00394a87",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "60defb23-971c-434a-9cd0-9d11536f21f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "4e7f1995-880c-4d94-a2ca-aba7e1c924d5",
        "cursor": {
          "ref": "cf29e9bb-ab22-4ef5-98f2-f6607e459eed",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "43986a56-2206-459a-9ea0-3cd354ece2d8"
        },
        "item": {
          "id": "4e7f1995-880c-4d94-a2ca-aba7e1c924d5",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "7a8dda40-6cef-412d-b30a-6776e7718499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "19b6f8ac-5b1d-4ba8-9bea-879138c0a0d7",
        "cursor": {
          "ref": "5f123952-7095-454c-acdd-b818ce3cb8fa",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "e681a41c-fdf8-45cd-8091-76f91e81b758"
        },
        "item": {
          "id": "19b6f8ac-5b1d-4ba8-9bea-879138c0a0d7",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d759e871-732a-45f6-8800-79fa59ec3e8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "ce25f5d1-ece4-45fe-87ba-9859e765ac9b",
        "cursor": {
          "ref": "7a086489-4da9-42e5-88ba-8b5f5e6bf7dc",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "9636190d-bd52-4251-a961-e20eac95e723"
        },
        "item": {
          "id": "ce25f5d1-ece4-45fe-87ba-9859e765ac9b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4de6b23c-bf35-4722-81d4-8f3c1e2a4d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "5f4d700c-3bc8-4f68-8d74-37cc029d4bc3",
        "cursor": {
          "ref": "60fc12e6-683a-4349-ab0e-5ad3c237ef3a",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "8ca2739e-3089-4852-b37f-295142015111"
        },
        "item": {
          "id": "5f4d700c-3bc8-4f68-8d74-37cc029d4bc3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "72c37af5-d3d5-44a4-979c-ecff4349bc05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "c88f1591-d43a-41e6-b4cd-7054b7ea3289",
        "cursor": {
          "ref": "8a07f7eb-782e-4022-b273-104d7f5ccde0",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "91e37c5c-4517-4809-9d97-d7948167c0fb"
        },
        "item": {
          "id": "c88f1591-d43a-41e6-b4cd-7054b7ea3289",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0888a20a-4786-4ae0-8b9e-be5594500d32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "f06e1971-4006-4f2a-9b3d-cb3c54d3ac6d",
        "cursor": {
          "ref": "dd374ea7-e812-401d-b0fc-122c255265d9",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "bc1e3bf0-f786-48c7-a5a9-41f64d0ad31e"
        },
        "item": {
          "id": "f06e1971-4006-4f2a-9b3d-cb3c54d3ac6d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d36a3a3f-1f2b-4a5f-a240-ee98b89d0d3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "883368fe-1dfa-42f3-b4e8-b5b94c20a0bf",
        "cursor": {
          "ref": "d0eadba4-1369-49d7-80ec-db57fe124741",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "245a9e91-a9aa-4f6f-b062-e82b93f8d084"
        },
        "item": {
          "id": "883368fe-1dfa-42f3-b4e8-b5b94c20a0bf",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f4c7199c-f4d2-4cac-b4e0-dbcd7cc2420e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "d8d58097-e709-4903-a2e2-98385359e815",
        "cursor": {
          "ref": "178686f4-c59b-4eb5-92ef-c766a61e8493",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "54813608-5fcb-4873-b093-f1cdce1efdb3"
        },
        "item": {
          "id": "d8d58097-e709-4903-a2e2-98385359e815",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "cd2084de-49a3-4bda-b704-32aae1c708f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "53f4239f-1c3c-4705-a398-bcbee155cebc",
        "cursor": {
          "ref": "56c29708-24fa-473d-b2a7-e31db7823ec0",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "744df224-f82f-4676-b33b-4808ed854b81"
        },
        "item": {
          "id": "53f4239f-1c3c-4705-a398-bcbee155cebc",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "5be10da0-b3ce-4933-8fe1-fdc4220ef8ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "d4861cca-e6fc-49fc-92e5-dfa20b43d7b6",
        "cursor": {
          "ref": "157ea603-23c9-4f19-9c45-105a5c4bc7c9",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "42d699b8-f354-4ab6-8e30-8021e1d976b0"
        },
        "item": {
          "id": "d4861cca-e6fc-49fc-92e5-dfa20b43d7b6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b2f688ec-f85c-4b7b-9f61-b479ec9129c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "233aad39-e2da-43c3-b0a5-1af2dea578c9",
        "cursor": {
          "ref": "1520a7ec-ad59-4cad-9aad-d6b8c05b2890",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "2dc29983-930b-497b-b83d-386de2d3d7d2"
        },
        "item": {
          "id": "233aad39-e2da-43c3-b0a5-1af2dea578c9",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6e0b874a-b605-4def-bcb6-c14a4c5475af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "fa7d640b-1b83-424e-886a-dbdc569a8a0f",
        "cursor": {
          "ref": "360390e0-1f23-4d67-8600-1764b663883f",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "ad8fba6a-3bc9-455c-a967-120d5d8022ed"
        },
        "item": {
          "id": "fa7d640b-1b83-424e-886a-dbdc569a8a0f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "472f54aa-41e8-40b4-be74-886cd9eabe75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "d9a2851c-31dd-4071-834e-cb80a0471014",
        "cursor": {
          "ref": "ca28df83-006f-45fd-95fb-fcd5f9de31bf",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "abecfa79-5cb4-4329-9941-ba3ff2af7a39"
        },
        "item": {
          "id": "d9a2851c-31dd-4071-834e-cb80a0471014",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "7d7ce1f5-0dd4-4eee-be57-017f545ee179",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "c71cdc90-8f59-4220-9fc2-acaa772673ad",
        "cursor": {
          "ref": "1d3d6a8b-4f5c-45da-bc4a-48116e3b64c5",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "ef6457db-3ff5-4b25-9e29-5b8a1437273b"
        },
        "item": {
          "id": "c71cdc90-8f59-4220-9fc2-acaa772673ad",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ff32fc3e-23d9-4b91-bc33-f3087eaa8a05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "b542b8d7-562e-4297-944c-6ad055626fcf",
        "cursor": {
          "ref": "f0d8b402-5d68-4634-aae7-fd7c2156a26e",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "cd911dc9-5abe-4ecf-86ac-569ae63cd894"
        },
        "item": {
          "id": "b542b8d7-562e-4297-944c-6ad055626fcf",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d66cd1a0-4e04-47a4-83a1-db8c8f8e1a37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "dacbe055-753e-425f-96ae-cb3dfa100c80",
        "cursor": {
          "ref": "001d4287-176b-4316-9fb6-3b6ab2c173a7",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "2ad66510-a59d-40a8-95a3-ee3f38e0d2e1"
        },
        "item": {
          "id": "dacbe055-753e-425f-96ae-cb3dfa100c80",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "36ea012f-a8e4-4882-9252-4e495e3b6183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "b61bbe92-29eb-44dd-9373-dfc84d78796a",
        "cursor": {
          "ref": "fe4ee4bb-4af9-4a6d-a4fc-2570aaf56618",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "fe16a0a1-509c-41a7-9f3f-72bb4ab5bd83"
        },
        "item": {
          "id": "b61bbe92-29eb-44dd-9373-dfc84d78796a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "34ac97a0-408e-4cb2-9ce1-afd5f8168bcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "975dbf85-0f5e-4bc5-a6ca-865f30b0ad2b",
        "cursor": {
          "ref": "a3535a10-6561-44f6-bebc-4e56d69249ab",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "09a2eb01-2dfc-43ab-a028-9a008497f324"
        },
        "item": {
          "id": "975dbf85-0f5e-4bc5-a6ca-865f30b0ad2b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "26a53496-b675-4888-be26-c2576eac4266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "81bb20da-0c77-44fb-836a-cf3bf1fa228d",
        "cursor": {
          "ref": "540f5553-6849-4a75-8b99-a914f97a829c",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "176a5e5c-799d-455e-8e5e-72af4c4a6e4f"
        },
        "item": {
          "id": "81bb20da-0c77-44fb-836a-cf3bf1fa228d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "5f247f57-a887-45ed-be43-f0875a3c0cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "7ea28a59-c151-43a0-9aa8-fa22cddf0e88",
        "cursor": {
          "ref": "7171a411-c82b-4b7c-a39f-226c41c01379",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "d4145fe1-c45b-4fb4-af56-682aa2609fbc"
        },
        "item": {
          "id": "7ea28a59-c151-43a0-9aa8-fa22cddf0e88",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3760b26a-cb2a-44da-ab7b-0bc70662cb64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "ed258ea5-9448-4e58-8cd4-bb1656da171b",
        "cursor": {
          "ref": "765c32c6-207b-4898-a6f8-b8cbc386a8fa",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f137ea43-37f0-4ee0-8235-45d285c3facd"
        },
        "item": {
          "id": "ed258ea5-9448-4e58-8cd4-bb1656da171b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0019ad2d-1e94-4895-99ee-ee7131e3a64c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "f410a204-5a21-4397-ac32-e92a6c85fc8e",
        "cursor": {
          "ref": "cd41b555-1235-4827-a34d-2ab433792446",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "4e3be9a8-16d7-421d-9b30-3de684786746"
        },
        "item": {
          "id": "f410a204-5a21-4397-ac32-e92a6c85fc8e",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "e8b7346d-edae-44c4-b21e-9df86ccc5dd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "2abada04-ec25-4ebc-af7b-7cf90ad70061",
        "cursor": {
          "ref": "101f358e-8a98-47b8-a6a5-dc4b95dfd8ce",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "2b096413-3963-4b54-ab39-a97b6e4941fb"
        },
        "item": {
          "id": "2abada04-ec25-4ebc-af7b-7cf90ad70061",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c1f5d17f-9668-46eb-b9b6-22feecc23f15",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "374f37e3-0001-4f23-af11-8291ca98774a",
        "cursor": {
          "ref": "3563ad0a-4291-4944-967a-70e48ef823ba",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e775c0b9-fe9f-4a0e-a1ac-073f2a5b3a93"
        },
        "item": {
          "id": "374f37e3-0001-4f23-af11-8291ca98774a",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "c1c33a18-6785-4f09-b4ac-7960f7c0477e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "ac98b327-1ba1-41c9-b266-7c3714ea2c34",
        "cursor": {
          "ref": "c799519b-f04f-4b8c-a2d7-5ab9782a38e8",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7827bf03-7311-4183-adde-f8187e7d694c"
        },
        "item": {
          "id": "ac98b327-1ba1-41c9-b266-7c3714ea2c34",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "770c3931-c39d-4b87-908c-4c53b49fedae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "ac98b327-1ba1-41c9-b266-7c3714ea2c34",
        "cursor": {
          "ref": "c799519b-f04f-4b8c-a2d7-5ab9782a38e8",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7827bf03-7311-4183-adde-f8187e7d694c"
        },
        "item": {
          "id": "ac98b327-1ba1-41c9-b266-7c3714ea2c34",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "770c3931-c39d-4b87-908c-4c53b49fedae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "521b8428-d5cd-4cd0-9f5e-fdb049a30c2e",
        "cursor": {
          "ref": "92a607a0-43a3-4421-ad11-9a73b801f8d9",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "8135f818-2445-42a9-a40a-0ffa71dc4aeb"
        },
        "item": {
          "id": "521b8428-d5cd-4cd0-9f5e-fdb049a30c2e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "13d4cb8d-ec1b-4cc7-8f17-d1ba3ef9b1b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "cc437df5-8628-45f7-a5f8-e5c307e00d6b",
        "cursor": {
          "ref": "5c470a90-cae7-4d95-b60f-0959e58203e3",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "852c102c-8986-4736-be72-08c2c8fdab63"
        },
        "item": {
          "id": "cc437df5-8628-45f7-a5f8-e5c307e00d6b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "992821db-1605-4da8-b055-5b4615ecfc7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "64b11dac-4f40-4891-ac5c-918d9c68d10e",
        "cursor": {
          "ref": "f55c0d01-f353-40ec-a842-e014547b10c3",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "1bd95f08-57f5-407d-9b6d-340d3ffdbbf4"
        },
        "item": {
          "id": "64b11dac-4f40-4891-ac5c-918d9c68d10e",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "66a32b49-e09a-4bee-96eb-04f186e80f44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "912ccf08-0071-4a88-9a80-6e67e10c1832",
        "cursor": {
          "ref": "d96671b7-27da-47ba-83ea-0f7312e5c327",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "8a97235b-664c-4f2e-9866-de2df750c9d5"
        },
        "item": {
          "id": "912ccf08-0071-4a88-9a80-6e67e10c1832",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "c0645dcd-5fec-41fd-8939-652ea53ee65c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "02b48b01-6846-43d8-8fa6-edacbb7c973f",
        "cursor": {
          "ref": "556a4655-19fc-47f7-998f-1c98fdc50cec",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "0d27dc71-4dad-4566-9f48-fdd0d108d2a6"
        },
        "item": {
          "id": "02b48b01-6846-43d8-8fa6-edacbb7c973f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "39975bc6-fe4f-4d48-bfea-2f74aab9a8ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 78,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "7b0e0ca3-685f-4bb8-ba8c-1c843525f433",
        "cursor": {
          "ref": "a028642f-e7d5-4528-a5f4-125c55e0300a",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "d3800ccc-4d23-440c-b928-0fad71ecad9e"
        },
        "item": {
          "id": "7b0e0ca3-685f-4bb8-ba8c-1c843525f433",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "68d73780-77be-488e-b575-5ca7a38b4456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "2029d19c-d7f8-4b05-adb5-646674ab707e",
        "cursor": {
          "ref": "b8daed3c-e61f-4135-9fd2-96526ae15da4",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f67052ad-b4de-48e1-8890-78ab1052c9cd"
        },
        "item": {
          "id": "2029d19c-d7f8-4b05-adb5-646674ab707e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f14c8582-2fe7-49b7-b80e-a38c1abecc10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "701c9b22-6074-486a-96b3-aca980561dae",
        "cursor": {
          "ref": "8d577f12-a524-464b-a203-1b6f0cd51d01",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a2df9e4a-44cf-4d9d-a7d5-b49067451869"
        },
        "item": {
          "id": "701c9b22-6074-486a-96b3-aca980561dae",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "e342d9d5-705a-4be6-b654-2681c7928f0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "e7c4c0d3-858c-4f50-ab44-168070d2ce40",
        "cursor": {
          "ref": "6a09d0f6-74e1-4613-9256-cdb984abb20c",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "e04bc4b5-1e52-49ec-a695-4bafd3a26757"
        },
        "item": {
          "id": "e7c4c0d3-858c-4f50-ab44-168070d2ce40",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e46d9d91-7d11-4797-9641-338c14ece22b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "ef80a098-9805-4478-bfc6-56c17d1f5850",
        "cursor": {
          "ref": "063eee87-876e-4d6c-afee-fb6685219da1",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "40991ae3-9a0b-4692-86c4-8ef3c668343d"
        },
        "item": {
          "id": "ef80a098-9805-4478-bfc6-56c17d1f5850",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "7c8cea9d-9314-4716-8d43-74a02380a470",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "0f627b80-8aee-464e-ac94-3babaf2013fe",
        "cursor": {
          "ref": "888b467e-b485-48f1-80b4-62f57b822199",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "098901c1-a4ad-4f3e-8855-a8f5f992d688"
        },
        "item": {
          "id": "0f627b80-8aee-464e-ac94-3babaf2013fe",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "7413fd1b-084c-40ac-927c-101c69cbb27c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "8614fe30-0eb9-4e1d-896a-e48ed80ef3fa",
        "cursor": {
          "ref": "5e248a1e-502c-46f9-82be-b4787952f2b5",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "fc11a68c-9c14-4a29-9935-aefede01fb3b"
        },
        "item": {
          "id": "8614fe30-0eb9-4e1d-896a-e48ed80ef3fa",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "7aede276-ccd4-467c-bfc1-604a936a2e37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "741dc4bc-c7e6-4f8f-87bb-f9a4f172f839",
        "cursor": {
          "ref": "b0b27227-18ef-4e48-a4f6-70c80aa8b023",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "7bea5ad2-7aeb-4f74-afbb-0cc4c2201186"
        },
        "item": {
          "id": "741dc4bc-c7e6-4f8f-87bb-f9a4f172f839",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b1c41d60-196f-451c-ba7b-791bb8c7aaed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "861ac392-94b4-4d0f-83bc-66fdef85c576",
        "cursor": {
          "ref": "b4c7be6b-25dc-4ddb-99d2-3998b37d4016",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "4abf9667-84ba-41c7-a74b-26e1cf9d30d6"
        },
        "item": {
          "id": "861ac392-94b4-4d0f-83bc-66fdef85c576",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "85da6296-4be5-4a89-8a92-232d7e14c7ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "d74fe55f-58ae-465f-86de-3da211033286",
        "cursor": {
          "ref": "102e6eca-90db-42db-9b9c-5eeaecc59424",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "f734b7ca-2cf6-49f0-839e-3893ce730cf9"
        },
        "item": {
          "id": "d74fe55f-58ae-465f-86de-3da211033286",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2e4de61e-55f0-4e49-98e0-f71d9fead73e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "5df8f928-9afb-429a-a544-a9e030e11522",
        "cursor": {
          "ref": "67baadac-3bca-4851-9f1e-7410c6b8640e",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "fec4db60-fa96-42d5-80b5-d81f447b3766"
        },
        "item": {
          "id": "5df8f928-9afb-429a-a544-a9e030e11522",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "818e5297-9452-4d06-81a8-f3989614933c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "97ccce24-6098-4c42-b1fc-172ed0d18e53",
        "cursor": {
          "ref": "f2940705-ce03-4233-b851-f63232c2d110",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "4ad983e7-0f5d-43cd-845d-ee4026bacbe3"
        },
        "item": {
          "id": "97ccce24-6098-4c42-b1fc-172ed0d18e53",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "1795188a-b876-4480-a9e2-eddaedc52063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4145,
          "responseSize": 1630
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "08187969-2357-4650-b55d-a5e614646b23",
        "cursor": {
          "ref": "4a3dc967-ba94-457e-a7dd-761e4840ac66",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c6e61a9d-ca65-4ab6-ba89-dff208e5e397"
        },
        "item": {
          "id": "08187969-2357-4650-b55d-a5e614646b23",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "5271d488-c710-4469-852a-c9d4fee92970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3257,
          "responseSize": 1586
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "6ea43bbc-4581-4b56-9931-fbb1e3e75670",
        "cursor": {
          "ref": "223a1770-12e9-4255-861e-0ef929166fef",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "0aead78b-334d-4c41-bae0-6a7efc9b862b"
        },
        "item": {
          "id": "6ea43bbc-4581-4b56-9931-fbb1e3e75670",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "1bbdcb03-4efb-4d8f-9e3f-06a82d224fed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4557,
          "responseSize": 1584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "5dff2980-aba6-43a6-a0a8-70bbb3649fa2",
        "cursor": {
          "ref": "45f00491-3036-49e5-bbe7-cfa97f77eecf",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "baacdf28-1f20-4f03-80c3-71661abb5933"
        },
        "item": {
          "id": "5dff2980-aba6-43a6-a0a8-70bbb3649fa2",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "bea57da6-1676-4c6c-96e7-6b07b8328c46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 265,
          "responseSize": 98
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "d4bab764-091f-40cd-ba94-5bdaf74e2816",
        "cursor": {
          "ref": "edea7f31-9892-4ef9-801d-aeb618fe27e6",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "858d0220-8022-41cb-8a71-8dd983c90c28"
        },
        "item": {
          "id": "d4bab764-091f-40cd-ba94-5bdaf74e2816",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "4563e46b-957e-4ed6-9662-6e4ba1065b86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2668,
          "responseSize": 1636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "85734cfd-91fe-4974-947a-3582f4bc3dae",
        "cursor": {
          "ref": "25150264-6f84-4b69-8231-3b36c6d0567a",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "da74d3bd-cf35-4b7e-ba9d-fcf69e093572"
        },
        "item": {
          "id": "85734cfd-91fe-4974-947a-3582f4bc3dae",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "38d155f6-0295-475c-a227-03fd738f8c97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 649,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "ed419227-76a6-4d5c-9bfa-97a6fdfa674c",
        "cursor": {
          "ref": "6a293949-7827-4106-97cf-3124dad2184f",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "67393048-dd84-4f6b-acb2-51b7c320ebc6"
        },
        "item": {
          "id": "ed419227-76a6-4d5c-9bfa-97a6fdfa674c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "618b852b-42f3-4b27-a1fe-6b35e4a4f363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 451,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "e2ab60fc-dcca-4c29-856c-58dacb13a7e0",
        "cursor": {
          "ref": "a830c2f1-ff81-486b-b341-5035ac82cf48",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "33161f93-68ef-489c-908c-4573bd884cb3"
        },
        "item": {
          "id": "e2ab60fc-dcca-4c29-856c-58dacb13a7e0",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "29b60156-0f86-463b-bc80-984b1b36f6ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 358,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "259b09c1-b2a2-40f9-b101-1535573ec3e4",
        "cursor": {
          "ref": "5610afe2-118e-4ec2-978f-989867227e6a",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "9f9a8936-dfd4-4f02-9f08-a11cf504e4b9"
        },
        "item": {
          "id": "259b09c1-b2a2-40f9-b101-1535573ec3e4",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "513ae966-2d43-43de-a6c3-372530f00536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "14ff5db4-a879-400f-93d5-07d416804a85",
        "cursor": {
          "ref": "04b2a3b7-4d1d-4041-80ed-d091d5d856b1",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "0b8b32e3-bf3e-43a2-a75b-574b56259ac5"
        },
        "item": {
          "id": "14ff5db4-a879-400f-93d5-07d416804a85",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "8a137695-c65f-434b-9256-a8dbac1984e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "0ae5fd0e-c1af-402b-85ea-5b7eb0d34552",
        "cursor": {
          "ref": "0520075c-bdb4-4ae0-a7a7-0f57e0829b55",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "474df28a-815d-47a8-8ac8-961a29d6ec8e"
        },
        "item": {
          "id": "0ae5fd0e-c1af-402b-85ea-5b7eb0d34552",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1d404b3f-81d2-445e-a58c-19428211a0d0",
          "status": "OK",
          "code": 200,
          "responseTime": 3219,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "b5b3e564-dab9-4d07-b386-11a62ba7f44d",
        "cursor": {
          "ref": "21d63104-f6d1-4481-8d26-e86724241d9b",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d85601a3-9a41-4bf9-93ad-0313e02a9c6f"
        },
        "item": {
          "id": "b5b3e564-dab9-4d07-b386-11a62ba7f44d",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "1b97b36a-457b-4303-a7e5-ae29074c95c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 461,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "e080ddba-f21e-4b1a-92bf-f5171387a449",
        "cursor": {
          "ref": "5a8386b2-f323-419c-8f6e-e2b7903001e8",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "cbe42b85-24b6-4d3e-9c2a-d99ac1ac9f43"
        },
        "item": {
          "id": "e080ddba-f21e-4b1a-92bf-f5171387a449",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "a44035b5-b930-4572-93b1-54d24b7dc3b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 348,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "57781029-d2e6-4b73-8ee2-81dd6d78f7fb",
        "cursor": {
          "ref": "9c4e2eda-7f97-4a73-aa44-a5bc4552f97d",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "5a0600ca-f252-4739-9b98-10cf478bf00f"
        },
        "item": {
          "id": "57781029-d2e6-4b73-8ee2-81dd6d78f7fb",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1a4ab358-88ac-493d-a85c-095827d5bbff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "0c13e9f0-7ba7-40d7-8875-c200e4c64da4",
        "cursor": {
          "ref": "779f72dd-3b81-4f3c-ab3d-f0b2d469cc5c",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e729be1b-5d9a-407e-9e96-76ee4a140f75"
        },
        "item": {
          "id": "0c13e9f0-7ba7-40d7-8875-c200e4c64da4",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c6561e8d-5515-4db0-92a1-9aecd0b2c941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "bd96f745-6c91-4126-ba28-32aa585a142a",
        "cursor": {
          "ref": "271cb113-d497-4058-a098-15eb5adf8d4e",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "ecd992fe-9a57-4c01-bb76-64ac1b834dbc"
        },
        "item": {
          "id": "bd96f745-6c91-4126-ba28-32aa585a142a",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "de1af9e2-b579-45eb-927c-6cf054bbf66f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "21c60c25-af34-4975-9ff0-9d1fdce57e8c",
        "cursor": {
          "ref": "2cfe90e3-94ef-4402-b280-32b12205f8ee",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c19e41de-e20f-4987-89a6-234196cdc4ba"
        },
        "item": {
          "id": "21c60c25-af34-4975-9ff0-9d1fdce57e8c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "0ff53145-2565-4e8e-b13a-eb6ebb2de427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "b90a1ae6-1bd0-4e14-bb7c-d98ad8c2c266",
        "cursor": {
          "ref": "08e644a7-1f67-4645-8057-7e2667174a01",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "90504dad-9006-4ea8-8c14-6a105dd71577"
        },
        "item": {
          "id": "b90a1ae6-1bd0-4e14-bb7c-d98ad8c2c266",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "890c1f46-2890-46b8-bf7b-25b7a4191341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "bfdc0b11-2990-4a90-84e8-ddb565fdd303",
        "cursor": {
          "ref": "adda8615-2680-43c2-94a4-a75e11635554",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ae9a640d-cde1-4fce-90ff-a12ac6c44b7c"
        },
        "item": {
          "id": "bfdc0b11-2990-4a90-84e8-ddb565fdd303",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ac02d1d5-8352-4495-acb4-13b3140bb6da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "f8abd2d8-93ce-4da1-94e0-32dd912af749",
        "cursor": {
          "ref": "861fb4e5-222d-45a7-a55d-7f070c6cb33d",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "76e81a96-cba3-49b2-ab7b-f85450623aba"
        },
        "item": {
          "id": "f8abd2d8-93ce-4da1-94e0-32dd912af749",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "c5142809-88b2-4f92-8495-4a60bd3cf8f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "210e524f-9083-4d48-8f94-7ea7536995d9",
        "cursor": {
          "ref": "49fc993a-21b2-4d5e-a414-802c45bc4e84",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "0579061c-4b74-4a80-8125-6af8382a7357"
        },
        "item": {
          "id": "210e524f-9083-4d48-8f94-7ea7536995d9",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0a6b844d-4f98-4b40-9eb4-8b94b5ad6c5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "07d53cc3-4e82-4284-b36c-1a07e4a179a7",
        "cursor": {
          "ref": "d01bdb6b-ad7d-4cda-89e3-43ba5204ad64",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3faaaf2f-f5ec-4f8a-bb28-b8a9be634a46"
        },
        "item": {
          "id": "07d53cc3-4e82-4284-b36c-1a07e4a179a7",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "0b6b6d13-cdf9-410b-baa2-2dd0948d7b06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "da2c038d-b7a0-4e31-9d14-8e96be79a668",
        "cursor": {
          "ref": "6f91796f-e060-4970-8407-bf9c0d9288e0",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "51b70e12-db45-4b0a-bd82-473808f8f61c"
        },
        "item": {
          "id": "da2c038d-b7a0-4e31-9d14-8e96be79a668",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "78b24c80-e1f7-439f-9ca6-c9d8a26ace14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "f890527e-ad81-4811-8020-1a6ae3c39ef9",
        "cursor": {
          "ref": "81ba12bf-5735-42c3-a5a3-3e2f8292749a",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "005d67ec-53a5-4a09-9bd1-0035d47dfc64"
        },
        "item": {
          "id": "f890527e-ad81-4811-8020-1a6ae3c39ef9",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "a5722ba8-ddc5-445e-a328-bfe3f5cc90d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "cb82db4f-312a-4a36-962a-6d08c5fd0afe",
        "cursor": {
          "ref": "c0123cb5-81de-4570-9851-25017aa4c74a",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ce46f141-e55a-4c9d-91a4-1515925a9e4a"
        },
        "item": {
          "id": "cb82db4f-312a-4a36-962a-6d08c5fd0afe",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b2eb4f70-77f3-46b8-a264-674253251bfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "76fbea4f-bcac-4928-99bc-36d798d7feb5",
        "cursor": {
          "ref": "796f9f18-bd6e-4c0e-a2ab-83a1d72c3b5e",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "68d3125a-6547-458b-926d-b165157fba8b"
        },
        "item": {
          "id": "76fbea4f-bcac-4928-99bc-36d798d7feb5",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "02aae8e0-ee80-495e-891a-b8da5a90faa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "d7ff0a27-b04f-47c0-8a48-ea812352130f",
        "cursor": {
          "ref": "5c9c01fd-470f-43a1-ab9d-81031a90ebbb",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "92be1b00-b562-4b70-9d64-40f8cc8d5723"
        },
        "item": {
          "id": "d7ff0a27-b04f-47c0-8a48-ea812352130f",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "8cdf5d60-8de9-4899-9b68-dcb23ce36271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "2a03cdda-1548-4318-ac0c-28873a7aa17e",
        "cursor": {
          "ref": "ab73d422-8ce8-42db-aefe-875deb8888a9",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "1cd35264-0220-4670-ac3d-31ec970f269d"
        },
        "item": {
          "id": "2a03cdda-1548-4318-ac0c-28873a7aa17e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "f6fd7772-3038-43b1-a0fb-5fbbb9c35238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "f18266ce-9798-40e3-92c1-ab97c444c973",
        "cursor": {
          "ref": "70da4913-a24c-4949-9b8e-00e426b6d97c",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "7b8bc00f-c1d3-46e5-a410-fd12a2d80e28"
        },
        "item": {
          "id": "f18266ce-9798-40e3-92c1-ab97c444c973",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "a0fce3d3-271e-4abc-a60b-fecef61a37a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 86,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "11756b43-7f64-463c-b862-dcd6d0a88324",
        "cursor": {
          "ref": "39a2c618-769a-4047-a7da-9a5ee8c52da8",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "f2979b5f-39a3-447d-a72e-9055ce721580"
        },
        "item": {
          "id": "11756b43-7f64-463c-b862-dcd6d0a88324",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b9bc65a6-e39f-4f85-bb47-8c25b08a5818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "460975b7-f64c-442d-92c2-5c651febb8bd",
        "cursor": {
          "ref": "7519bdb0-7756-4ed3-904f-697c39defb93",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a77d9ea2-5d59-422a-9683-1acf59baa6f5"
        },
        "item": {
          "id": "460975b7-f64c-442d-92c2-5c651febb8bd",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d15c583e-2499-4e43-86c0-f3e75c7e0438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "470a2a03-f999-4ad1-a202-860268648cdc",
        "cursor": {
          "ref": "84bb1a58-e3e2-4dbc-9ef6-0265e2b5d674",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "c12dad95-8f84-4376-a229-07be0f142a7a"
        },
        "item": {
          "id": "470a2a03-f999-4ad1-a202-860268648cdc",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "cc22c1b4-7a17-4a64-a23c-1a0a747b6d32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "4fd7ea62-5d35-4b04-850c-9ae368dca764",
        "cursor": {
          "ref": "7c0fd13e-9510-4cf7-88cf-f55f3dc9e0c2",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "2bc39cd3-d488-4931-8d21-aaae570f37d1"
        },
        "item": {
          "id": "4fd7ea62-5d35-4b04-850c-9ae368dca764",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "3b42f300-c151-4cf4-b2fa-8409f5422842",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "28747bbd-d5c5-4744-b005-75565421e72b",
        "cursor": {
          "ref": "8314971e-8ea2-4b5c-b9c4-aa778d9f8cd4",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "9582975b-1848-4387-be35-6cf4b76e68f5"
        },
        "item": {
          "id": "28747bbd-d5c5-4744-b005-75565421e72b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "fc934c99-c0de-4551-8194-1364f76426eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "0423a722-fa8c-41d7-85be-bdccb15bfda9",
        "cursor": {
          "ref": "796a4308-f1de-4112-a3c2-4faf2bffd914",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "d613b36a-0a4c-49cd-9993-aed473cdbec3"
        },
        "item": {
          "id": "0423a722-fa8c-41d7-85be-bdccb15bfda9",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "39ac2ff3-6af5-4822-ac4b-e3d86ce77e2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "218195fe-e3eb-4a6b-9e6a-12be0463d874",
        "cursor": {
          "ref": "203fb068-0802-4f20-8140-4511b00a5469",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "cc7873d7-f6c0-42d4-a069-b5476384dca7"
        },
        "item": {
          "id": "218195fe-e3eb-4a6b-9e6a-12be0463d874",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "eb039cf3-91c9-47f2-8222-62ff226ff0ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "73ec8fb4-0331-4b5c-87d9-d49fb7f336e5",
        "cursor": {
          "ref": "8f9e1f31-e55a-42b6-90d2-3557020573a0",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "58838b4c-4fd3-4e93-86f4-43b3dea1249c"
        },
        "item": {
          "id": "73ec8fb4-0331-4b5c-87d9-d49fb7f336e5",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "92ac2d39-3734-4abe-8790-46eab4bed932",
          "status": "OK",
          "code": 200,
          "responseTime": 2517,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "26583584-40d0-4859-9e8e-7da04e521a5a",
        "cursor": {
          "ref": "963e9e52-15a9-462a-88ba-8e5c325fae91",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "d5b62b90-ae94-4cfa-8815-7193ca9f6de8"
        },
        "item": {
          "id": "26583584-40d0-4859-9e8e-7da04e521a5a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "199cb18f-26ff-44bb-adeb-86ed0aa61704",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 454,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "c67bcc05-4801-429c-86f5-53eb1cb51789",
        "cursor": {
          "ref": "a2823314-e06c-4adf-b930-0b91c5907070",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "e9269df0-a311-4e01-bf38-a19f98908bbb"
        },
        "item": {
          "id": "c67bcc05-4801-429c-86f5-53eb1cb51789",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "0f06e886-fbfd-42c9-af9a-87fc643d916f",
          "status": "OK",
          "code": 200,
          "responseTime": 3667,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "a7599771-10cc-45a9-ae13-c8a0bb0fb98f",
        "cursor": {
          "ref": "3ccb9002-5362-4847-9f9f-47fbb00d4a46",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "490e55a3-8e23-491b-bb0a-cb5aa183a2ec"
        },
        "item": {
          "id": "a7599771-10cc-45a9-ae13-c8a0bb0fb98f",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "5534d2d8-0f65-4c67-bf0e-7a29bd6d6750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 455,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "ec2788d4-b1e0-47d1-8320-474163325f27",
        "cursor": {
          "ref": "601d63ed-b72a-4535-aa1c-a432c039484d",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "24ddebc8-871f-43a5-96e0-09e0e3e124f7"
        },
        "item": {
          "id": "ec2788d4-b1e0-47d1-8320-474163325f27",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "46a21d70-bc2f-482e-93cb-38117b1133a8",
          "status": "OK",
          "code": 200,
          "responseTime": 2858,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "4af76205-9869-4627-b81c-ec6f255f3e31",
        "cursor": {
          "ref": "5653f1cf-58e5-47f7-b028-22c6f5a99b3c",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9e2c0e0d-95c2-4160-ad12-1ba42b5982db"
        },
        "item": {
          "id": "4af76205-9869-4627-b81c-ec6f255f3e31",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "1432b9cc-433a-40bf-bd11-efa3ed3ab0e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4047,
          "responseSize": 1542
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "7dc4707b-509b-44e8-a7be-e5c0c0f39287",
        "cursor": {
          "ref": "ec124f62-a37a-487c-ba6f-e2e1f6ab4465",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "0a563469-2d26-44d0-b9f3-7acf34502545"
        },
        "item": {
          "id": "7dc4707b-509b-44e8-a7be-e5c0c0f39287",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "217d6c3b-4625-468c-88f6-f133217a9ff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3566,
          "responseSize": 1528
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "96552d55-8363-41ff-bda0-9dbe1904dfca",
        "cursor": {
          "ref": "e5459d65-d5b8-49c4-b5ed-e8b47fc9fd72",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "6989327e-48f4-4e44-8598-d94cf6c703f9"
        },
        "item": {
          "id": "96552d55-8363-41ff-bda0-9dbe1904dfca",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "fd5d24da-e9af-48e4-a80d-9d20feb9eade",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 88,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "a9719872-e0cf-45a6-95a8-b94868ed6e9b",
        "cursor": {
          "ref": "f424ce7b-4d83-4001-a640-ee20da4a2beb",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "070eb654-fd8b-4c58-b57a-46e07b64bfb6"
        },
        "item": {
          "id": "a9719872-e0cf-45a6-95a8-b94868ed6e9b",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d388d70d-e71d-4641-9024-df8dcba64c7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2534,
          "responseSize": 1527
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "7ad34f13-12bf-4bcf-ad32-11b10e96b47b",
        "cursor": {
          "ref": "ce17e3ed-34ed-4d78-af8e-890ea5b8f177",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7384d4ca-f644-45e3-b1fa-000db8cecc5b"
        },
        "item": {
          "id": "7ad34f13-12bf-4bcf-ad32-11b10e96b47b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "aa591c21-d624-42d5-9b2d-2688245a89bb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 142,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "7c2e07d9-0fb9-4a53-9963-635aaf028322",
        "cursor": {
          "ref": "27f83b22-ecb2-46f0-b36b-877b7ad3d2ec",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ee8ac463-687c-4491-bd39-21490576a419"
        },
        "item": {
          "id": "7c2e07d9-0fb9-4a53-9963-635aaf028322",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "1caa81ae-df9d-42e1-89a0-7393a28358e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "6fac4571-7900-4a1f-a075-21dd771a5776",
        "cursor": {
          "ref": "ce5a901b-74e0-4fa8-bed8-7e4bcdbb3e48",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "5fd512a0-47a9-41f9-9ac1-ece4874de0f5"
        },
        "item": {
          "id": "6fac4571-7900-4a1f-a075-21dd771a5776",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "93279d96-e209-4915-9a66-e8d48c17c258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 1049
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "9c9ab9cb-8a8e-442d-a7ad-39508279140a",
        "cursor": {
          "ref": "22b7b6ed-da9e-4070-87aa-a80240c4ec06",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "0f128b65-0283-456e-974b-6de628b19969"
        },
        "item": {
          "id": "9c9ab9cb-8a8e-442d-a7ad-39508279140a",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "05c2a2b0-10b5-429d-b2b5-6a404a964e06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 134
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "34a693f4-8005-4d9f-b7c4-57f5e2911bb9",
        "cursor": {
          "ref": "32270d91-88f3-44f3-8719-9f3ca450e6d2",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c7b91c21-26aa-4bb1-8067-878917ba99df"
        },
        "item": {
          "id": "34a693f4-8005-4d9f-b7c4-57f5e2911bb9",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "d5565498-6397-4121-bcb5-bcdf77925560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 134
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "6f5dfb1c-8b34-487e-ac55-852c9eadf98b",
        "cursor": {
          "ref": "72a4c3dd-b1a3-4456-a8d6-9931ab7ce166",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "2b7f0a53-e0c2-4964-816d-f7ee26ee14aa"
        },
        "item": {
          "id": "6f5dfb1c-8b34-487e-ac55-852c9eadf98b",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "6414e11b-762f-4738-b932-49927ea2412b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "8f08b370-77fe-4cf9-873c-fa3999c8d405",
        "cursor": {
          "ref": "ae1532e6-60bf-4e7a-9eaa-864729b5abef",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "6cbda5d2-17dd-407d-9103-7db6aa3d4349"
        },
        "item": {
          "id": "8f08b370-77fe-4cf9-873c-fa3999c8d405",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d5f2cbb5-fb19-4e97-b564-53fbfe5766be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 134
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "a5ffa3f6-ccfc-459a-a677-1f4db83df443",
        "cursor": {
          "ref": "464620a4-ed67-4c5d-9e4d-b536539e4c01",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f041a689-24c0-4b04-9941-e4cf770444e5"
        },
        "item": {
          "id": "a5ffa3f6-ccfc-459a-a677-1f4db83df443",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "7234633d-0b03-4ddc-925a-0fe9d35a9bc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "5b544762-1cb6-46bc-8381-916e9abb3f0d",
        "cursor": {
          "ref": "de7d50cb-044f-43a1-9ca5-a8debb1d6f98",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b347cf6a-efd4-48f3-a15f-04f03a3505d8"
        },
        "item": {
          "id": "5b544762-1cb6-46bc-8381-916e9abb3f0d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c69d0bd9-ecc0-419e-b3d0-8ab42de54517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "45f8777d-b00e-4ba2-8678-d193b64778b7",
        "cursor": {
          "ref": "f361e641-4d5c-468d-9986-4e6c812f1a5a",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "67c12d7a-5440-4209-b8ed-31d0fe35fb81"
        },
        "item": {
          "id": "45f8777d-b00e-4ba2-8678-d193b64778b7",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e2c70b78-d661-417d-91e2-671284ec9748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "df2e4b60-c097-4f4a-9efb-252e315e113f",
        "cursor": {
          "ref": "c0f76860-dcb9-4fa5-8059-eeed7a6625f5",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "05b25e74-c327-47eb-8f00-822ea4fb0df3"
        },
        "item": {
          "id": "df2e4b60-c097-4f4a-9efb-252e315e113f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "9c18b2df-7af4-4048-bbc0-65ef7a0f85dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "070de9cf-fdf0-4ebb-becb-215a850893f2",
        "cursor": {
          "ref": "88439abb-c3cf-4b9d-a435-cb5f1db6de91",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "046cbfed-c313-4e74-a7ff-c5f5b577bde6"
        },
        "item": {
          "id": "070de9cf-fdf0-4ebb-becb-215a850893f2",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "6ba0f448-5a5d-474a-bb62-4a15fec2693d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "4bc4e667-7e3e-4e93-b067-80491ef676d4",
        "cursor": {
          "ref": "85b3bb2e-c906-41cb-92df-eba5b8b469ed",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "221ddedc-3e58-4780-9393-1fb4693599e8"
        },
        "item": {
          "id": "4bc4e667-7e3e-4e93-b067-80491ef676d4",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "52434fc3-565b-4511-a8a6-4852a4221b20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "eb0672b5-e5a4-4a2f-96b2-b59df1d2ba82",
        "cursor": {
          "ref": "f85af078-2775-4a67-b346-a688606eaa59",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "709ec4aa-9a13-4b2c-86bc-1a6cf242ca24"
        },
        "item": {
          "id": "eb0672b5-e5a4-4a2f-96b2-b59df1d2ba82",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "207c5718-492c-4bf5-b219-9f4e02bb36a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "a9303744-4a0d-4e28-94ae-2f346d8c6790",
        "cursor": {
          "ref": "61389994-c63f-4188-922c-46334736dd7f",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "96232385-55a1-483c-96fa-51e83f2016e7"
        },
        "item": {
          "id": "a9303744-4a0d-4e28-94ae-2f346d8c6790",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "772b57cb-7eae-4aa2-98cf-b15b23c13e7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "de936da1-2d7f-43b9-b886-8a8a4973affb",
        "cursor": {
          "ref": "a5b6dc47-dc6c-42b4-83de-7f36f406de6c",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "8971f881-a5ef-453c-8943-eb92548d07a5"
        },
        "item": {
          "id": "de936da1-2d7f-43b9-b886-8a8a4973affb",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "837cc6fc-686e-4e3c-abce-826dfc83f007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "c99fcf62-50a5-4913-afbe-8fe326e2d67a",
        "cursor": {
          "ref": "2a37027d-f29d-4928-88d9-30b490ad5d81",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f4eafb29-ff16-4090-b964-fd81ae82f339"
        },
        "item": {
          "id": "c99fcf62-50a5-4913-afbe-8fe326e2d67a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "4fa8a41c-5fcb-4bb4-ad1e-6bd5b9f729f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "6e491469-0de5-458c-9c0d-eb6ae47db4d9",
        "cursor": {
          "ref": "03981169-ec80-4b8d-b3db-745b70781dd7",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "70fded2a-2aa5-4e9f-9806-29a855b22c2d"
        },
        "item": {
          "id": "6e491469-0de5-458c-9c0d-eb6ae47db4d9",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "379061a4-5b9a-431c-97bd-7af0eb76d935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "10d683fe-3f68-42ba-a9ac-000bf77301c7",
        "cursor": {
          "ref": "63700fbb-1b73-4a08-b6dc-61449ca10d6c",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "86a8b190-7164-42cd-ab3e-a77cd67b9975"
        },
        "item": {
          "id": "10d683fe-3f68-42ba-a9ac-000bf77301c7",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "ca047278-fafc-4596-a30b-63adc1a5a1bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "8965e4e8-41cf-4575-bc92-4a52cab8589d",
        "cursor": {
          "ref": "541c594e-492a-445e-8a0b-31485a0e33bc",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e441b4fb-d1bf-4c7c-8f6b-d8ff8436ba4d"
        },
        "item": {
          "id": "8965e4e8-41cf-4575-bc92-4a52cab8589d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a0364c85-f4cd-4df6-a4cb-aa74c2118015",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "ab8061a8-c66c-4865-a977-65ff8554b48a",
        "cursor": {
          "ref": "88b483ce-9836-4a88-b559-54f74e737ade",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e94ced63-f339-4d0b-a6f5-6ce4670d4e9e"
        },
        "item": {
          "id": "ab8061a8-c66c-4865-a977-65ff8554b48a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9010bd18-b50a-450b-b528-543fcb74c97e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "a92fea00-2443-4130-a003-2d09bc190c65",
        "cursor": {
          "ref": "c7106650-e425-46d6-a6eb-850113a0c33d",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c49ba1c3-e216-451b-9ab6-02d6dd13b0d9"
        },
        "item": {
          "id": "a92fea00-2443-4130-a003-2d09bc190c65",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "7ec67e9f-ffde-4dfd-b7f5-4089b0d7948a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "614f169d-400e-4e8c-98d9-e762090c7de5",
        "cursor": {
          "ref": "01297e4f-66ab-4f99-b44b-5c3429b84eef",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "c7c3e191-618d-4129-b61f-d29be059a8a4"
        },
        "item": {
          "id": "614f169d-400e-4e8c-98d9-e762090c7de5",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "94307f6a-4aad-492e-a100-0b7751b0de02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 1489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "f27a4047-9f5b-4de2-b14f-578a87b1c10e",
        "cursor": {
          "ref": "96d1c619-d48c-4af0-9129-c9cfc6b7f28c",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "8ff0a39d-17a5-4d26-9eff-ce9296e38424"
        },
        "item": {
          "id": "f27a4047-9f5b-4de2-b14f-578a87b1c10e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e23f5893-b123-4705-8117-4d1efd63f04a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "2ff90c32-89d7-4916-8225-cdf10c4ff8de",
        "cursor": {
          "ref": "c34cde74-0471-4c75-8451-c47c2af04d7b",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "63db95d6-a837-4d06-9932-12ac4aa3e298"
        },
        "item": {
          "id": "2ff90c32-89d7-4916-8225-cdf10c4ff8de",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "7958a22b-2747-4e7e-9b42-7e21d55d6b66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 1351
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "e2428fcf-b78a-4afb-aab3-0ca8ed52020f",
        "cursor": {
          "ref": "dd4886ad-235a-462e-9036-4e24333ac746",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "917c5216-90b9-47a1-bd66-fcd7a97ee903"
        },
        "item": {
          "id": "e2428fcf-b78a-4afb-aab3-0ca8ed52020f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "65868f1c-a3f6-4123-98aa-bd3845c6dae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 1351
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "a7ba4e31-6f6d-46b0-8c47-1aee57f8851f",
        "cursor": {
          "ref": "1eacdd34-a04d-4ecf-ba9a-4f5a36e3f6be",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a6ca4051-47ba-4028-b434-f0c6b666e3ad"
        },
        "item": {
          "id": "a7ba4e31-6f6d-46b0-8c47-1aee57f8851f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "0ea7d9c9-c3ad-4f72-9707-3a5ab7645002",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 1351
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "6497faf6-92f4-4026-8f20-1680f1b1497f",
        "cursor": {
          "ref": "812cfef0-ba2e-4419-8f5b-be51a4972271",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "77c34a78-106d-4164-a850-fa9b19ec6173"
        },
        "item": {
          "id": "6497faf6-92f4-4026-8f20-1680f1b1497f",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "05a2c76e-223c-4674-a190-55404d29fff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 1351
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "9cf9fa8e-dee9-41e1-af5f-41e832952f46",
        "cursor": {
          "ref": "a79c2fa0-7392-4c2d-b5ed-956a4c3c9adf",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f272bb7f-f298-4056-9bec-1623b0b1ab55"
        },
        "item": {
          "id": "9cf9fa8e-dee9-41e1-af5f-41e832952f46",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "dff34f96-de9c-41e6-91c8-e3b4516e0759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 1351
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "e3952eb5-5617-40ca-b48a-351fa2b11a28",
        "cursor": {
          "ref": "abe53ab5-5727-4781-adb8-0b2b93081546",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "60511dbf-8d18-4552-8c4f-fbf482aebbf2"
        },
        "item": {
          "id": "e3952eb5-5617-40ca-b48a-351fa2b11a28",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ebd175d8-8f32-4143-9fea-f02a4fccd867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "2eec304a-916e-4500-aca5-0fbd6095481b",
        "cursor": {
          "ref": "a0f27eb6-e833-43ad-95f5-72663392da9e",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "e60cd72e-d4ec-43ea-97e3-d4e17dbd4893"
        },
        "item": {
          "id": "2eec304a-916e-4500-aca5-0fbd6095481b",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "41aa6c97-2a63-4768-a5fd-20664034ef7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "6a7c1d9e-1b94-432b-9147-da56fda75f1a",
        "cursor": {
          "ref": "0cf9e059-64ab-4a5a-a1db-981da0f89efa",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "8ef25e98-d595-4bfc-bc4f-2a4ac4833fe9"
        },
        "item": {
          "id": "6a7c1d9e-1b94-432b-9147-da56fda75f1a",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "66c843cf-9030-42fa-b2ef-5584ca23153c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "6dcf510b-416f-41b0-bd6d-fd69c282f6c4",
        "cursor": {
          "ref": "d67a8919-ed29-4687-b5d6-aebeeeec4560",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e8828cbe-9b82-41cc-ad00-4418bfde4b97"
        },
        "item": {
          "id": "6dcf510b-416f-41b0-bd6d-fd69c282f6c4",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "878a25d7-643d-4e83-a034-2e4feeb605a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "352c472e-cb5b-474d-9460-44ceb1dcf7cb",
        "cursor": {
          "ref": "c77f9272-0804-4d5f-9f3c-2eaae02cbf6c",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "9959e791-08e6-42f3-a9f2-2752d0b61609"
        },
        "item": {
          "id": "352c472e-cb5b-474d-9460-44ceb1dcf7cb",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "38eb3578-6a8a-4554-a96f-5dc5957b6a79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "b5c07684-145a-4b05-8920-eef08240c1b9",
        "cursor": {
          "ref": "3411df07-a3ef-4efb-88ee-af96bb8aa123",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "991ae26a-7fdc-424d-b296-99844028c15f"
        },
        "item": {
          "id": "b5c07684-145a-4b05-8920-eef08240c1b9",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9ee57edc-9955-4813-895a-9438b6a740ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "968755f6-41bb-43ca-a884-8d0412bbe1d3",
        "cursor": {
          "ref": "4bab93e7-0e5a-4db2-ad63-456196253872",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "5f3e4e52-d826-4809-8fec-0ebfc85f39a3"
        },
        "item": {
          "id": "968755f6-41bb-43ca-a884-8d0412bbe1d3",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "771bb766-6d4d-4011-9f18-4a68bfa83c1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "fa9b634c-ac77-4037-9ebc-8267e5b01de8",
        "cursor": {
          "ref": "248f3ded-0a4e-43fb-aa4b-c56b102acb82",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "dd6fc54e-c019-4ef3-985e-bb159305c9df"
        },
        "item": {
          "id": "fa9b634c-ac77-4037-9ebc-8267e5b01de8",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "198d4502-6af8-4b22-af54-9dc03f8565e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 1129
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "7ad2133b-f164-47ef-a809-58d03bc3de51",
        "cursor": {
          "ref": "ac81a708-9db6-406a-9c3c-22f834770d70",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ace7290c-fe44-4bb5-8d49-1959d8338a34"
        },
        "item": {
          "id": "7ad2133b-f164-47ef-a809-58d03bc3de51",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "6b484015-0160-4714-8faf-4459529ec1fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 1129
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:243)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:243)"
            }
          }
        ]
      },
      {
        "id": "9cf635d9-d70d-4e80-9f21-3a1ff5000164",
        "cursor": {
          "ref": "7838e21f-8cd2-4bb9-95f3-a162309f31ac",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "7bfa8360-da52-4b38-8f34-352e163bcce0"
        },
        "item": {
          "id": "9cf635d9-d70d-4e80-9f21-3a1ff5000164",
          "name": "credentials_verify"
        },
        "response": {
          "id": "897d086e-1a71-4183-ba2f-4e3a3e0c7b9e",
          "status": "OK",
          "code": 200,
          "responseTime": 4092,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc90d89b-210e-4e33-b6b6-e6669e5cf4a9",
        "cursor": {
          "ref": "1482e659-986d-42b7-9b8e-f931320e8b72",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "ac7717e4-6e0f-49d0-8727-9c0605da4cff"
        },
        "item": {
          "id": "bc90d89b-210e-4e33-b6b6-e6669e5cf4a9",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "30416b45-c7aa-458b-9452-812bab475c2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 159,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "9c429495-4056-48cf-a48d-370507b3074e",
        "cursor": {
          "ref": "b000447b-6fab-4f6d-ba53-ae735e06163a",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "1e55df81-9414-4212-b8c4-cdd444347a64"
        },
        "item": {
          "id": "9c429495-4056-48cf-a48d-370507b3074e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "832ff6cd-c474-4d8f-b90d-e8ed5d3f148c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "9c429495-4056-48cf-a48d-370507b3074e",
        "cursor": {
          "ref": "b000447b-6fab-4f6d-ba53-ae735e06163a",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "1e55df81-9414-4212-b8c4-cdd444347a64"
        },
        "item": {
          "id": "9c429495-4056-48cf-a48d-370507b3074e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "832ff6cd-c474-4d8f-b90d-e8ed5d3f148c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "9c429495-4056-48cf-a48d-370507b3074e",
        "cursor": {
          "ref": "b000447b-6fab-4f6d-ba53-ae735e06163a",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "1e55df81-9414-4212-b8c4-cdd444347a64"
        },
        "item": {
          "id": "9c429495-4056-48cf-a48d-370507b3074e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "832ff6cd-c474-4d8f-b90d-e8ed5d3f148c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "cf6c49fd-5500-4b25-b02b-4e29894e0b27",
        "cursor": {
          "ref": "5674c2b6-3d8e-4416-9052-9916f707751b",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "91234a9a-01be-4bb1-bd16-1901a98e093e"
        },
        "item": {
          "id": "cf6c49fd-5500-4b25-b02b-4e29894e0b27",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "1817610c-fb39-47b9-8095-2a183b36d7b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 319
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "42f4a889-78a4-499f-855a-23a823b6151a",
        "cursor": {
          "ref": "1a5b65f7-eea4-49a0-b23c-88ee24654928",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0baa43e9-7926-4028-b3c1-2576ea843f0a"
        },
        "item": {
          "id": "42f4a889-78a4-499f-855a-23a823b6151a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a6110ac2-f898-4fcc-9b35-3fa666261468",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 1072,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "42f4a889-78a4-499f-855a-23a823b6151a",
        "cursor": {
          "ref": "1a5b65f7-eea4-49a0-b23c-88ee24654928",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0baa43e9-7926-4028-b3c1-2576ea843f0a"
        },
        "item": {
          "id": "42f4a889-78a4-499f-855a-23a823b6151a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a6110ac2-f898-4fcc-9b35-3fa666261468",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 1072,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "4f9f5843-d37d-45a0-8269-012f78bb43b1",
        "cursor": {
          "ref": "67430e04-20d7-4dea-bd94-33a426f40114",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b258e3e7-17ef-468b-ad76-393cf9b765f7"
        },
        "item": {
          "id": "4f9f5843-d37d-45a0-8269-012f78bb43b1",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "8d2ce348-079d-4f9c-b27b-8c4582b3a590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 87
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "54c4c4fd-a560-4b1f-b7e5-732812542c13",
        "cursor": {
          "ref": "a260c6fa-ade8-4c90-8198-a1429a527dfa",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5ed84a3a-64cf-4f00-9feb-64f4553c9c2d"
        },
        "item": {
          "id": "54c4c4fd-a560-4b1f-b7e5-732812542c13",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "06c5755a-be00-46ba-911f-a9248e07a140",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "54c4c4fd-a560-4b1f-b7e5-732812542c13",
        "cursor": {
          "ref": "a260c6fa-ade8-4c90-8198-a1429a527dfa",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5ed84a3a-64cf-4f00-9feb-64f4553c9c2d"
        },
        "item": {
          "id": "54c4c4fd-a560-4b1f-b7e5-732812542c13",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "06c5755a-be00-46ba-911f-a9248e07a140",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "2dad94aa-dfd1-4257-980e-bc9d6082364e",
        "cursor": {
          "ref": "bac99d74-62bf-4510-a810-52c454d7681d",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "4db6e1d9-a308-44f1-85f2-7660ba83fae0"
        },
        "item": {
          "id": "2dad94aa-dfd1-4257-980e-bc9d6082364e",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "03544588-71e1-4cbc-990b-e33e757b83ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 97
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}