{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "187c6f8a-1219-4793-a24c-d55f3112b460",
        "name": "Clear Cache",
        "item": [
          {
            "id": "bc9538b6-11a5-4728-b5e1-08c3389277a9",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5cfa6238-e82d-4ed4-bb7a-6d5ef285a79d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "886cb243-8183-4954-878d-5143fe4f64d1"
                }
              }
            ]
          },
          {
            "id": "d6f0d96a-f21d-43eb-8a80-2cb2f865aee7",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "01992816-3bad-4026-96f3-6b8f063cecb0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "79cc7e2f-cddf-4451-8402-0f518a64c848"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "298a7152-1594-4da0-8dc7-ccb5a3ccbb68",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "5e3dc717-6637-4101-8c91-17777e880f42",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9d62b49f-05ce-41f1-ad34-3ee08bbb508d",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b82b1247-854c-42ad-99df-04bbc3e53ea9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "58af1ec2-0cc9-445a-85ba-33e724fbf2f1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c3aafcae-6fcb-4060-9a53-c30e802302cf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ed0a6201-4b22-4a39-abcc-082dc5deb2ac"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "aa0839c1-82e4-47e6-83e8-35f2815b7131",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "24e9e9d9-eb7f-4be8-b8aa-849ab4c6cdfa"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3ef7ee8b-0e01-46bc-95fa-a79c6613120e",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "833f2c0a-c0e2-491e-ba2f-c75065fa67cd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a8eeebdf-8f4c-4e85-bc36-4b8655bca3fb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "945f16ce-6ead-4b5d-9701-a4ac5d6efbaf"
            }
          }
        ]
      },
      {
        "id": "85bf6508-3be7-4fbe-845d-19be291f9ba5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "dc1f7977-d667-463d-803b-cb296dc43edb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9416f631-0f40-4be8-b13e-a9d4ddaec14a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9692cdec-46f0-4ea2-bf20-d376f688f21c",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79792981-a583-44e7-a306-e19644e6fdde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0f886df-6ca5-4df2-8535-d0e01928b437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6bcdfc7-237d-4f7c-bfdc-870abe67cb40",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f46bff2-53e7-4645-85d5-145de6541260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "43fb4320-821c-4df3-a25c-a09d85ffb88a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b22873d-ed1b-4cb5-92e9-57794055353b",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfd38db0-b108-4793-b72a-d0a7fec8f1df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8730cbb5-c85f-4511-a3ad-d8439d59a1ba"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "311d9c22-f109-4aea-af50-5b8cc420fe91",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ba61d778-5ead-4c50-93f5-af406f900455",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b47f4636-609d-4224-8e47-92661a7e61b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a5b64a48-9a82-4a1a-b984-9ecc8daa3265"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df9a609a-327c-497c-b033-2f4c5af7b0c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a25630dd-59af-43d1-99b6-d5f705da375e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8ab80e3b-d17b-48ed-a33e-af125c7dcb7b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f31636cd-fb17-4f7c-b816-88b9d800441c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "10216dff-4b04-4ba7-b08a-d6383cff7588",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ec087442-ab41-407d-a8a9-c83d60950c86"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "205b2f50-28ac-447b-9e72-606d60c64108",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "47787cc4-66f2-433f-8acf-a1e0a2c7c118"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "65c8381a-5c8a-414b-b940-62a9b8a75364",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a4857f95-37b3-484c-a38f-9bc04f83d121"
            }
          }
        ]
      },
      {
        "id": "22a38d43-6ddd-453d-bbe4-3761f32bd15d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "1daa6877-2f2d-4e68-af97-3c9f66004f24",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0b97465f-f1b8-4aa7-8282-893c78b45e94",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "20f05467-78ad-46ce-820b-bf38662e54bf",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c5acc22-fb07-44dc-8780-2e386869cb43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "954691bd-d659-4f75-bce3-4ddb1fdc4376"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee71feb-a697-4809-bf12-e59954d86eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ffd1e9a8-dbe8-49a1-a9bf-78130c4398a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "817dd708-7085-4849-b8f5-556a1b8cac1c",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68cd6f2f-4f88-4281-9d29-c5b93805ca7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22ef16ce-92bf-4b14-ab7a-33ced222d216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ddc23d7-fd87-45d8-b3b7-06555fb70a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72782819-d10e-48de-8682-f85e71ed6f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d387bdb9-8f1f-4c61-b9b9-3a416e431a63",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29af84d4-9b7c-48d1-b460-c5329bd8ca4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48dab8c6-caa9-4249-883a-8fc84333d9e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "933be58d-c5ab-481b-8517-2ba7468bd103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c40197d2-34aa-4acc-9ec0-8fe2f2447d0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfb22af8-066a-42e1-ba29-2a3a5bc7b046",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "948a9b72-7172-41b5-9682-6629e9ba72ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a052c5ef-3daf-449a-b407-f1a8715c2781"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fe62978-eb32-4b17-a39d-f84ef9025999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c26c34d-c624-47c0-b6e0-13adf670be6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4597ac7-c1bb-437d-b566-a46490cd58f5",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "156c1ab6-d433-4622-99d8-34ebbc955e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43c6c773-035c-4192-ae8b-b92d19fe4a68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e9bbe2d-bc92-4625-a6a7-a085f90035d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4edd4fc-3475-44cf-bedb-d87e3426205a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dffd3b77-1c8f-402b-a065-78451d7b63fe",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b895d0-1ee9-4209-a32e-30e90f1bce69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79f3af49-3815-4af5-9eba-71925c856460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0f8020e-487e-47c3-8e26-9d72f66c3dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc97cb83-eb50-45e1-b1d4-e1c3de34fd0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b79a0769-613c-4c95-91a3-894465283163",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6a67344-a49b-4dad-8b78-461f705ba85c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b7ea162-74da-4442-a003-db1152183769"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7089cf46-c4d6-4e23-9bfd-8ef08da19577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a470a1f-1636-41b8-8a8c-467dc76f24e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22570f23-d104-489e-813e-b4e328cd436c",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "661fa795-c761-4ecd-a6c3-31718baf66fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab624569-5d94-4848-92d9-d91a84a003e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2416b27f-1476-46e9-a7cd-7bd1570c5799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7006022a-7526-4630-a3d9-2d412daa3479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adea796b-35ef-4ac2-9a64-50e62a2cb5e6",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1345803b-8982-440a-abcb-5636ada19c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34b50760-ce4b-4657-bc22-325784499532"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "301ea10c-5043-4e30-b5bb-234486be463d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c91f7ef-10d8-4eb7-b000-491216702069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec66cff-9649-4920-9079-a31e2bb4b4b2",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fd11f05-43de-4d0e-a08e-4a704d0c3c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55d4c26d-5ac9-4313-83f1-a477b8fe2efc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6e30e06-3569-464c-984b-d506a06db411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "176348fa-76fc-4314-8e11-c7176cc70413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d3c2e39-f53b-4d6a-ae32-544466bd08a0",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0662001c-f8fa-4ef1-b7d6-979a860bf1d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "262094a4-b882-4bbd-89e5-6ce92e1e473b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be6ac634-23fd-4ca8-b56f-198ba2e0f778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4d69b49-fe97-489e-ad8f-b07948d2a9cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e29a9d6-6768-44f4-ba4d-88b9ad371628",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "608f88bd-3150-4127-8698-7d5091331292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc84e487-5a9f-4501-aaec-66999ca84d97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b51bdcb9-9acc-418c-9d16-828c9d998d58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b1485b28-11b8-4576-a26d-dc1047b17a00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "983080fc-9f7c-48ce-9bd3-e67ee24fb3aa",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eae3ffc0-4068-4562-b544-eb86cb067cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e18c8166-25e8-4e6b-9e9a-ebcf3fe0a610"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39da495e-dc09-40c8-90ab-0863f1d43609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02bcab81-901e-454d-869e-5428cc2b75ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a15ce8e-d230-4685-bd99-a125b154534f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d05a7e9-de57-427b-a11a-2bab2cb67d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62be7b1e-961b-4e26-83eb-87ec4a1830b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71bc4c01-47fc-467c-aa30-6f3c21848080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2783a2ab-fc66-40ac-9efc-97bacf37fe3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a07684-c02c-46d1-99c4-eebed6c6807a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee542402-972f-4eac-8f62-1bdc0b8f345c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2cf2654-602f-42ea-9d31-155a2048ecad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e660aa0d-7d5b-44f3-9136-a1be691a565c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5ed83bb-ec28-41d1-958a-d5a4311aa561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fac5ef4b-b656-47b0-bac6-4626c89818c4",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a0caf7-c0cb-42cb-83aa-fd2011c1cd40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2981b626-54ee-4c10-bf12-6b24a22b7b74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eedc07b-97f5-429d-b436-c634d14f7c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "86c6976d-f2f8-46dc-8cd9-bf013cc06238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b0d83bf-bffb-48d9-a973-7d57f52d2953",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "379e1884-b0b2-4697-a479-06fbc6f52bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "771499b5-1669-46a5-ab85-70189a2a71e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b089556-2ad4-47f8-b887-244e86d3fa4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a960f561-eb5c-4c86-b9cc-1c84a631cb69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0170a9e5-60dc-4d2b-ad40-4c5820a3c1b7",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63dc389c-2332-41f5-ac72-d4e83d6b3343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dde550df-1534-41cd-a39b-865d107b6b32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d62fcd9-4c2e-4859-915c-7c0e72d50211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "eaf55a63-b7a0-4958-9561-d1dec164af40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb02a886-e9b9-45b5-b152-f545b5bcc2ed",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34cebba1-4c39-48cc-ab41-4f5ad418d035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee337e05-8bdf-4735-bf10-aa3cfb0fedf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f012f136-8940-49f6-b295-147369e4113b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "614457e8-e2e7-4974-a0ca-1b6fd3401efb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de2166b2-02fc-4e19-b3a6-33dc55f6edd4",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b1c5a1-b220-4db4-b653-eb8850e1f1a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8575d72a-4fc2-47cc-b9b8-7d661cc6542a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed3f9ec9-ce72-4f20-8ed9-48566d653c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "84ed86ec-e61f-4b0a-af96-f0d5c7a768e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d463682-665c-4e12-be25-dae8284d5916",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c102bfc-db04-45fd-80fd-ed901fc65762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13651495-915c-40ad-af2d-c1a036364810"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c0db55f-fa4e-4259-ad9f-bc70eadc489d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d0338e8-e011-4805-86ad-972e7db2c3c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f0f2085-70bb-4f79-8c98-de8919a151c4",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d08ce071-7f34-4413-af63-0104910980e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5218a779-7632-4334-b0c0-8b7036be377b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6fca752-bd80-4115-aa12-c896644fd590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "80fa6478-32b6-44d2-9ac4-1306ab2a6436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c7323f7-6be3-4094-9a8d-05b245aaff71",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b19ad1d8-c085-4114-a53f-f980dd4d7214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a04fa5c0-7a14-40c6-a824-1959c16d2e5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a635be-7622-469f-9792-11784b9951f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c06d72c4-2b53-4d52-aaf4-9d2ed30513ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e8a5723-a36b-4caa-8537-2013335ff701",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe55deee-b4da-4205-a200-ade278a29825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c24ba30c-e013-4d46-9686-9d5365cbfffd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e6f2564-d904-4898-a271-27d43d221778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d058e9e-e0d7-4e81-913b-78d5c0eca419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb8554f-03a2-4774-87fb-b0caf5271032",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db7c17a4-12a0-4375-a850-059397b43d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45e49e95-e962-422d-8610-d622f69a9202"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b88b15fd-18f3-47a7-9004-0093c6a639d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "77a9157a-4da2-4506-96bd-b5030965ff66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0837e0ef-8ef2-4ca3-8b18-a004f9544c7e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bd4da4c-b63a-469b-b8eb-dd01e9e61dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "444f9972-7595-44b8-bdc3-8c90d802380d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e95fe54-3a08-4398-ac22-5a2beb3c2895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a952fc08-cf00-4637-9c26-7daf621be8b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd7ceb8-530a-4999-90d9-e3d5cf861991",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a50729cb-1a2a-4929-b483-a98c0af6edf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a80e0af2-24a7-4256-8be7-373bee2c6091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea1be2f7-4d8d-4c14-aa6b-9b9a8c1ec854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "53446fee-d114-4896-a2ad-a01bef981b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89148102-956c-4b63-a037-11a3734b24e2",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "402b1765-35fe-4f5f-886a-28d52c399bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64382020-3922-40c5-bd39-7538624b4e2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63c06660-ba84-495b-a10c-58f57a5da1e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "46c35e6d-b92a-42fa-a7f4-bc9f0dbdc828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94cbc8f8-b2f9-4a70-81c3-320171981976",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d3cb4f5-febe-4336-ac74-0033df56f33a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83e55e86-6cce-445b-9f3a-fde02ee5b6c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5abef551-f333-4439-b472-5b1d025796ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aab57ece-e595-41eb-89ce-2eb2b2941eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c666adda-95c1-495a-8348-adaec0173a69",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb0c441a-c491-429e-a396-124849985a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "127deadb-198a-491d-b951-bb9a89011f39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b3b41fc-bbde-4651-914e-26b94c51fd7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "6efb0dda-e224-44b1-a709-64d3bba6f5cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7250d09a-aa87-44cb-9e90-5b0f995c03a0",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cba6a8a-5285-4657-b453-1b0010b53f92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7983503-2303-4448-84ee-3c9f990d59ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fffd5d4f-8b87-4d62-8783-b7c8e8d0c22f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0749358f-3e2c-492c-baed-5c59ed02d999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb65f90a-c318-4a01-9aa2-da0858f1eedf",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3185285f-a815-4122-9396-be9038418a0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "492392f4-62d5-4298-9a1a-dbe6b0dc8493"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "772712a4-86ee-4a0e-a7f5-880752774af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9282e885-f9ab-42f7-98fc-7eeac1693ff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dfe698e-cf86-4994-8847-c2a3efd3e78d",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3321958-cdf0-48a3-ae6a-86a80de55684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c38a1c2a-8521-4729-a82e-4ceb2eef9595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00a9c25f-b233-47bb-877d-cb652e457389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f19ec754-a919-4e2a-958e-861dddd698c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f216af7-e642-4e5b-81ee-e27d51554111",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44c9c4df-bacf-496c-a41c-ea59fb2ca3bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc94aa3d-b100-4f54-9ea7-5dcb9b2f0601"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0748fa04-e8b3-439a-83d1-845f94448a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef18944d-afc6-447b-98f9-65e692a0977e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5248a0a5-7417-41cc-b249-e5aa0b32a561",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b304ac3-8f5d-4bc7-a6c3-a2a92d502878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2a959e7-4676-4565-b9a8-8cb791bbe7ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f92865-9d86-4297-94e7-190180213ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "b365534b-f885-4465-8eea-5a2eb228f666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d06d2fa-0f82-4979-9fb3-660ea735076a",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60effc3a-7c04-4314-87d4-ad5ae0046219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "97d64a7e-b4ea-4d15-9ff1-98bf42fb1fcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fbce8d9-4b5e-4f02-820a-bb5803ffc12d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8927a7d8-9071-4f83-b40f-ee43ef674f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcce8aa6-bd55-452e-a2cf-c24734f32466",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cfc6038-0c8a-4e50-a811-97f4ca776902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adf22a33-27e6-483c-a95d-f0b6e8b560bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e864328-54c2-49a3-a597-5726ddce7565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "045dab2f-46d0-4665-b6ca-729fd918c44b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a98763e-f6a8-48ac-867c-52ffa4d0c5a5",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c9da57d-e70f-4553-9a4a-de0ded5de80b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37ea02e9-a73b-40b6-9cde-29d148b0abc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c15df690-b537-4043-93c6-54550021bfa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd95ec37-cf24-4f94-bf59-c9b6a06b401c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d079cde-60a1-47ca-9200-8874a26172f5",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "285b646b-711b-41a0-bf3e-2196da49bb25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36656ffd-059a-4fc1-8444-bf596a521a51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be630fde-b1b1-4597-8fdb-e9fcc679811e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d512e92f-12c4-4eec-b1d7-9d74abe3aab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f277a086-2a8f-49b5-9ea3-0db8ac06c602",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08843548-12f4-4a76-a94d-76c2c398783c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eecbe31-10fe-405a-84f0-34fd07de588c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "966be94c-eac4-498f-9f4c-3394481bf4c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c793ce09-05a3-4f94-bbda-3f7bd46fcd77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf07d91d-985a-4ae0-92bb-261055d13eb2",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82f600c9-0a47-418f-b599-1e8da6ccba29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00d41ac1-5b06-45d2-ac86-2023e8d5301c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "082a759c-c7d4-4ab9-b195-2e4cf1255180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f94b0f9-0c2a-426a-8cf4-f73761e0ca0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b776713-d2a9-43cf-b87c-68017bc44de4",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4264c885-00a0-4fc1-a6fb-1150f843c85f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5afa2bc1-81f2-45a9-9bf9-b8e181f2e0bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60f242d3-93a7-42af-ab8b-db773b435c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "ffd8c804-6908-4ca3-93e5-b862153ce83d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "814ede28-fd9d-4bc2-89ff-ee7d7961f65e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0fa32d2-152e-4061-88f2-cd921961ef10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea2bcc93-ffdf-4dea-a646-855b7639fb87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcb77136-eb58-4604-a5e8-afd489d65b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fec3a902-259a-4535-89ec-1e85e5588101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69ba5f95-9d8a-4513-aa69-545aa5694c17",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "386455f5-858d-4751-9209-552750baf379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b08a6188-c17d-46dd-aa64-03d19c727fc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f19f275b-5f51-4a3f-b640-39d6b4935a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ff6f5fe-a351-4a94-8058-5e4ecb45d407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6d35999-85be-48a2-865f-e71ed8d6f59c",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f90155e3-e7a2-47d6-b689-df8769316d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b285a1b-f725-40e4-ba4a-27b6790e62b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc50f53c-8234-4ba4-a4c2-05fa279f746a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "11dfadc9-d556-4494-96f9-0df79715b0aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "796d87c0-7055-424b-b319-13e8ce0e2ecd",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf7f94c-b381-47fb-8664-bdb46cd1579e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f870549-1146-4960-8495-9022ccfd0313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68378aea-b0cf-46b2-aaaf-f04523b8f95c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e23d2b9-d52e-4a47-bf3a-0c5c1ecb33f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "567790e4-dd68-4e69-bf42-3e492689fbc0",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94275d83-2d20-4b1f-870f-ea0920453f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "267d2c34-6d03-48a7-a854-490150d60fef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2b1ffd6-c3c3-44c6-9a12-247bd8ed887a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "85054674-0321-4ecb-b061-c517fdf95ef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0352086-96c3-426a-9bfc-088c1e11f39c",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d55b1561-a8a7-4808-af0a-fc3c5ec177c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b6efdaa-33dc-475b-9afa-c7101de4f1c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec6568e0-a93f-4bc8-b34a-c5689cdbc66c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac63e00c-b471-47d2-9d56-2d3484662f49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "430e364a-bc5d-4c58-afbf-667988908fc5",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa7a9b75-fc6b-4c59-8476-f20ceaa3ecbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "741131ee-b4ae-4c1a-b9e7-b0b535ae06cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d943756-c54e-4b33-889b-343c203f5602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e2877c1-39f4-4a5f-9dfb-26383ad46045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d29ea2cc-6d9a-4874-8abd-53b40375f761",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c151d88-aaca-405a-bcb3-5f3c3a30456b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca805311-b7b1-45c7-9f69-cc1e336b3f57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91abf961-f276-4d20-a8e6-93a28a78f29c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "18b55716-758b-4953-a112-f7cd071c7737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1b316bb-181d-499d-8fd2-98baa2e85293",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "018f58bb-7148-48fc-8c83-f27c4a4f38d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "559f728d-40de-4867-8583-6a5adec757c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d35b0ece-f1b9-487d-83f4-c838ef51db79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ced5334-3257-4d93-a19d-47d7975e1d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdb8f9cb-2393-4e3c-a088-c03d765684d7",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16c94fc4-e2fb-425f-b3d1-2b40e5412b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83115977-c40e-456a-9145-eb760b7cf33f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8694ef39-8e11-4dcf-a926-d6f532ebb748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9606d8e1-0b09-4cf2-b7b4-55d06e6368bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "723df785-82d0-4523-a51d-4b7c225a8ff8",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "211c8362-719d-4d1c-b80a-be99dce88ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fc702a6-cd6e-4a54-a03d-4d8746cadaf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "502d3fc0-db58-4265-bf28-cf6c18f1ab54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac5b6f84-a81f-4252-817b-f78b31f38530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd007a7-1610-4f9f-8cb2-9b1716342e2a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "972927ce-8da8-4fd6-88f7-58fa7d52db9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "084a766f-e73b-424d-aa18-3a27ea10ccdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a874fb95-e5eb-4bf5-96d7-b4a141279203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "53ae4da1-dd84-4a45-957e-f18e9411b106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b08981-57a2-41b9-89bd-958d25d1c7ed",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b0b251-f114-46ac-a19e-bb5a465f284d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14538e6c-7780-4535-ad93-20f6b412ec4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9b9c06f-60b9-446d-8058-18ebcdaf67be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b685fb71-7876-4413-8276-ee3c91c16f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f7e98f-493f-4f42-a4b1-1aa759af6f73",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2f2ae37-a8e5-480a-bbdf-0b4100cdcf3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc66bcd6-ae91-444b-a76f-b3016b5f6a1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a6e482e-8e9b-4d9a-8d38-bd4ac435dfa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "c5da3b98-5d29-4c98-a624-0f0444da806e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8796eff9-4f6b-44ce-81ea-ade7fc68afc0",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc44b47c-e384-48e2-8e8a-808086dbac3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7b60d9c-8891-4cbc-b3d6-a0528cf5cb0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d03335c-5e74-4898-b1ba-8a26d4112e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ee60d50-703b-4e02-8f3e-97dca117cbe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee6f2a0d-93ed-4945-b290-21895a453a03",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2076b3-17d8-4558-b95c-1397df7739f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8927b1f-8780-40dc-b767-c092e24a3037"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c68f912a-85b2-45e0-8d2a-c3b832896a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8213d996-2080-4534-8cf1-2da4abda3861"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf60ae1c-a53b-42ab-9ea9-17fc76dd5837",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a13b96-a4eb-412b-8db6-6bd9e7ac6bec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f030f4e9-1504-48d0-a0ac-599cc9508b8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "368e6ff8-3732-43bc-af8c-6c9c5a3bd594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f02743dd-2dd8-46a4-9f62-edc2b311ba02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25ec5a34-b075-491b-acc3-57fe2d0d6046",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c7bfa8-ac11-4d4f-8761-557d59446e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b90926f-3b21-4060-888f-d282477d87da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc1c6ee-16f9-4d12-860d-2f7f71f24e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b286a74-a835-4ef0-884d-45bc58a1f181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f388fcf-16a7-4f62-ac24-b15ab3730db1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43f94d0e-cd4c-4716-8320-71c582c5b2e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e744a8a-5a3b-468e-9857-9e6226d311ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b3ba3a9-922d-4641-a8fa-eb9873d84cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "abcff8ff-9a5f-4f9a-a80e-d3ca516c1ac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1d1d913-bd73-4706-a150-788ed7142c2e",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97544b6d-ba2d-4f59-ab8d-55599f5da5c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9e52699-e886-4554-8552-b563a6780f8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de5655dd-1948-484d-84f7-cd025463c4c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed721ce3-2308-42ed-937d-40f29f939908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd5c5f0-1b37-4d54-8636-4f8e0948033e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b50dd8c-f5ef-4d12-b88a-a99967b37fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3909f0db-2e90-429a-8570-f644ca6f04e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "679052a0-831a-4fd8-a891-eaba8c667cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "146c1ba2-ec34-407c-921b-54c4122dda5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dd3dfc1-6d75-41bb-814f-88d0009e80ea",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5af5df7-b76d-4c20-9b90-943ee345f68f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "314129ae-b05c-4248-8bbe-f9123605972a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "267c31fb-aa3b-430f-9b3b-2453e578fb79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "29a39999-4394-40af-b801-2c9f7c16a108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6699825d-c618-4a17-9c81-73a2e6ee3721",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16a564a7-b786-43fa-9eee-0de6c2b73897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "622a272a-884e-4425-861a-33230ac1eb8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb0482b9-5ba9-4dbd-ac33-6abdd8af26f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c3da004-5598-4705-aff0-a827b3385957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e75a5280-f8af-451f-acee-c92c279367a5",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edea5755-5b21-4947-93b1-cc31f0b5c4f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65eb7241-8e31-4b6d-a26e-59ce5a14497d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88015c43-6240-4870-94ae-6a0a93353bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5155c60-c745-4ce6-b189-d4f208a21211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b2b57f-6316-4fb1-923a-832fe08171ba",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "707ac2bf-4a86-45b5-8e36-400687736cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f00f520-1992-4241-8e89-cef9291280e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "544878d4-4ef3-4da9-b045-180dd05d6d40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "21670e5b-e4e6-4fc8-8de5-f47ab28c973a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55222218-913a-458d-8938-682db16748a4",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1edffcd-94e6-48ee-93c1-c034f37017a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "068d5c6c-df17-4e33-a38f-e532bf8a3cfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26839cc9-99ae-453c-94d1-a7aafcb44bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0715bb9a-8351-4ad5-ad79-20518adf883d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18bcde22-e86c-4691-a616-9253b788561b",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da077c6c-2b6b-4135-bfa0-ad3c04f27952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4046f98f-3d83-4be5-aa09-bd5aafc38c7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2089c878-9da5-4a34-8b1c-75333ad8ceb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd04dced-5a1e-4f10-8284-f5ca07929caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54481cd7-aaed-4558-8d52-faf2da1c09eb",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d570a384-ad80-4a00-bdd3-d49400860a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a3837de-99c0-450d-b3b2-0177cbea3400"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20628402-41ab-4104-b659-38b214baaaf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cddf8d08-30b2-4b72-96c4-b810861f8ee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66fa57c7-be62-48a9-98f5-a65c877d2184",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5cbf386-d79a-4971-8688-5a34da8d9b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "686b3a49-9469-4b9c-bf22-dbde70bc4411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dfd3727-bc60-4b23-bd5d-64f7553103b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c00c937f-4e17-40dd-9db0-51a34b7c7747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edf367d4-7f12-4207-95ca-14617971c7e0",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11cd921a-7572-44ab-9d14-29b6cd866456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed847c77-8bac-4d56-80d9-92fd9f33d27a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cf6c6d3-30bb-4b44-8796-5b3e145b5e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "50fd3b3b-3c99-4cb6-b231-2f4e37f80a90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d9bd46b-9ba7-4820-af0f-2a3ba5a2cb85",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e34fd687-4fd6-4cb7-adc3-8d8db1a81b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b05574f4-52ab-4e45-8b52-2bec175537a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dc5a12a-a0da-438c-82c5-271cfeb4346f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0c5a7a3-696b-473b-a900-072dd41044be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad9811f-5999-4bb6-b2c5-d1154c69cc86",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c52a23ff-8546-4b93-9725-ac4e48e36002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b9d5219-e042-4f73-9886-7f78378fef15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c09bae4-f82d-427f-978b-5e1c2cdaa4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "477b5439-5f48-49b0-bc8e-c2ddb9f15ec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d82a1f3d-71a5-4395-8d2a-bec1e9b3efe6",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aadb6ee7-cc12-4b11-83e4-cd2427d1e7f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cef2a9d-cdf5-479e-9b94-f7d045f1afb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f05afe2-8c96-49b2-a5e9-1326865a7eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "639cec9d-70aa-4f34-92d6-112a86fc3b6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cecb9e63-5030-4c66-8ce7-2017f2aacb58",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ed2fd6b-f3c5-4a92-a95d-c8d9f676ca8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e84dcd3d-1a9e-4ceb-9c19-aa3b82605d99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db7f2119-f293-427e-a2fc-445a47c0e921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8344d9dd-8f73-462e-9970-b1db895e0e9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4f8347-0767-4b79-94d1-c3b37fa91856",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2724ed10-7901-4779-b138-9f03c85d3a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fd35537-db5f-400a-b9e1-dcc0e953b966"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e949b1a0-aeb5-4877-895c-ebaaf4518e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f015957e-6c74-4efd-84f9-c444fe929009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a2ca586-0a7a-4cfd-a2f7-94e9cafa564c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3172e115-4023-413f-92a8-e0bc73c86419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7db6c576-89d6-4ad6-b688-85559c9059c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb13234-2fa2-48fd-9522-047b63327b55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3da96c56-6f8e-450f-adc6-ca843acfbd83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0bd8014-7912-4960-b876-0d6d4a704a0e",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0e559e4-1743-4cd4-ad70-b04a5504ed9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4957809c-f52e-4194-8010-bbcef8c94651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6baa7db2-4091-4b6c-8b92-1610be9b4cb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e570376-2030-4672-b56b-dbdaf6121f31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb94c47f-7df0-49a5-a0af-e8aeca0a2cf0",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82740392-ef83-4d03-a86f-53e15ee39cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "903f515e-7784-4654-b0b9-e1ee353d66a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2689a9cc-4564-469b-8f6c-b6f785a73df0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8854898a-da94-415a-b1a3-7b19a84a7831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "228576ac-dd1f-4120-8391-81f6100b9e32",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6202fa2d-4f8c-4e4e-bef4-02178ac83685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ddc4035-53c1-4a2a-9146-d3c520df2bdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be22abfe-3282-4953-ab8a-7df310687ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "07bd6710-1cc3-4064-99ec-2f716891109f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "756e0d1e-ffcf-44d3-81d6-7b403c6f833b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c49b88f5-f80c-4e54-93e7-f8dfd1960bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "584b6717-cc86-4e58-9fc9-6b7e9e9520c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b5439f3-9b4b-4264-8cca-1527eac8a930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1278a8a-92d0-426c-a181-9640b0ddd256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0a6544e-c379-44fa-898f-7fae78ed0a02",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "878892a1-df46-4474-9c23-fb3fcd1fd092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c5b534f-1c11-40ad-9949-494f10cc1b2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16fa5b62-918d-4164-9345-ac59ef1f57cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a65d28ec-6fe5-4e0b-bc0d-01902d2d49ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d93c7e5-f120-413f-ab22-038ed8dd8bb6",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea1080c-1735-484c-99c6-a4ca1554d299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f393b50-b87f-45ed-93f9-0abf78623fca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08699c9e-790b-4e65-aaca-6d505bc54346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "445d14c2-9626-4ab9-9c0d-128d6dfb3286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d523948-b364-4e10-9911-3d039ed87712",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28150be-2a66-41f5-aef7-d4cd747398a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "247cc2c1-aebd-4d3a-a21d-566cd30ecd2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c841ffb6-7293-486a-b7fa-213c3277f78c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "724094ce-c883-41c1-a6bf-7fc0fa949130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca63251b-fe0d-46a4-8bbf-aa720bacf56a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "466e74e1-987a-44f1-97be-467be3617f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69ba5ae1-058a-49a9-a135-2735a6489ca4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a56c481-9ef2-4a23-a4d1-96db2c8c7984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6fc1ed79-efdd-405d-920b-549f8c168485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4b7beea-0f68-426f-b906-e86c0973ccc3",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4233b1f1-b27e-491d-9ba0-76f5219a275c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82bd2547-7f2c-4f1e-b515-2790ffe7ed9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dedded1-c4ac-4602-acbe-79f30e1827db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b26b877-2345-4375-b54d-e3f1b567a6e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59a03c7a-8ef3-45a7-bbb1-f68c8296e2cd",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dbf9524-e016-46f4-a7c2-f8bc2192bb3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e9e0346-7d0c-474d-9fba-399fe35868f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e2cf297-1807-4538-8de9-1b3c5a406f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "283764c1-59a1-48cd-a2f0-94de4b647af3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8343c07b-00db-4b34-99fe-680a16e06e4d",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6da515cc-4b04-441f-a3ee-515c203bbe6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34cbc9aa-f6b4-4b55-b9f3-339266d2ab58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "987ab208-442f-4e4c-9879-bae2641247df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0494161d-9d81-45b1-8f5f-8af55bcf41db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a838a869-c645-48c7-a726-26f92b29b6ef",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59722f94-c50b-4072-aeb5-901baefe0c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "221acbe6-6f47-437e-8879-1648b0d1f898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25c105e9-1a3d-4d0b-9d01-1e47d033f6f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "06df09f7-d4e3-4f18-b3e5-6a44482f0612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "859d01b1-1b08-4057-aa1f-59fcf55492ed",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49adc406-7e3c-4cde-9610-cf397ff8abb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c51b5395-39bd-454c-b983-056aaf335d6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a19f427d-5e9f-40dc-81eb-e284d1ec6c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8577ff3f-f972-40d8-9e8b-f481bc03f5fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c00eb79b-815b-4783-9c24-440b2f65e463",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f804d7b-5915-407a-96c8-31cb3d79385c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "45e2afd0-e4a5-4bb7-b585-4fb5bcbb1eed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e151676-eee7-4339-bd33-ffb2bf4025c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c74d10d5-360c-4469-a5eb-852a3081e391"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f55e7bca-dcac-4eb1-a05b-51d660840d98",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "29e789b4-43a3-4236-a740-fbdcb2c34537",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec0eb25-ed3c-4653-9887-d7c0f39f6605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89638de0-0901-4dc1-a6c8-164a80e15f8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e11cc3e-37a1-48a7-b8e4-696051534c0c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2bd8eafb-d1f1-4582-bc7e-da4e231d66d7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "44e955ec-5309-4e54-b0da-e60c27a48af9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a0224ecf-413c-4f7d-a63c-7e6044f74b2f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bfe64b5b-f35a-4daa-aaee-3343d4a4bb12",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c0ee426f-9dd2-4f0b-975c-87c41bacd753"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a00f225e-4ec4-481c-834f-ff5f4885e1cf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7a44f91c-6b87-4fa7-b5ab-3917ca111751"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bcdf3f04-2d25-4f96-b4f4-de45bf35d276",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "84cb6e1a-3ca2-459f-b579-acf7492eda18"
                }
              }
            ]
          },
          {
            "id": "fc6d0ef0-f6eb-48a1-a44e-973a422833e7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4e4c5109-ddcd-499d-8a9d-ae2d1b379a30",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "cd4f104b-c3bf-4f0d-b6d6-87c06521cae2",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e363c7be-7c0f-4f03-bdf3-5f6f20af3541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6affb18b-d1a8-40de-990e-d1d51ee833c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b11fbf8-3492-4059-b1a0-c0009adb48e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba005fac-24ff-4aae-acfc-d5d14fb49c55"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9f719639-5f71-4d3b-b580-05fd513aaa0c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cdf0ae5b-749f-4cc0-87f4-b0be1396c1f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "37e3198e-abac-476d-864f-f0edb3f1cf5d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba22b151-ffc1-4151-a181-c251971775f9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f71dc025-cabe-44a3-802c-af9208a62268"
                    }
                  }
                ]
              },
              {
                "id": "f722cdc8-e1cc-44d9-a567-e7bdc63eff3a",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6552bb5a-0629-4241-aeee-11a9654a34b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dc12339f-f443-4986-95fc-0bb80ce2c451"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "47613244-6318-414d-8945-83bc62df0d8b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "dba1b926-820d-4f51-a628-c1e33b6ab93e"
                    }
                  }
                ]
              },
              {
                "id": "b988f4e4-fffa-4734-a06f-7fbdcf27ea82",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "94160f86-df21-492b-8a41-25495c1da1fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "84b678f5-d262-45c3-9645-7ccae7ffa90a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dcb76911-20a1-4f9b-87d6-f48f0169a1d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f22573ed-5c5b-4ea2-86b4-a4acc8305b9e"
                    }
                  }
                ]
              },
              {
                "id": "ee4c6faa-80aa-4abd-8350-d4ee2ecad82c",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "162590e5-6e51-46a4-9a54-49be5807d0a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c400c35a-18cc-49e3-b841-60cf1f419a2e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a35096e-e731-416b-af4e-bbbbcb7975c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "4e4c05b5-7176-4161-b365-ddbb13f97c70"
                    }
                  }
                ]
              },
              {
                "id": "ce835695-1d7e-4dcb-9c4e-7d60c2050d6a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5553be66-86c3-4a87-a1e8-953156a61e1b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f321eda9-371a-4544-b2db-f0c48eb20935"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2e334e23-3352-4b32-b2de-e873bf95bcfb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "0e4a1657-b076-4d7d-b7b8-659e623e91cc"
                    }
                  }
                ]
              },
              {
                "id": "9da1fc0c-9adf-4718-a9eb-1691b9681391",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee7e7062-f4cb-42c5-b00b-6946d3ad4fb5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f357cf24-dd21-4e82-99d1-59aaed8591c1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "173a81ba-362a-4aa4-a3b1-9217054a2fe1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "191cc680-d4b3-4bef-838b-28ae9d54de62"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "44a2bb52-24f7-425f-9004-a4fee59908ea",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0ff8c7f2-7018-4f2a-bbff-a566aec7eed3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "377baab0-793b-4d71-91cb-1efb36653d4c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "60335be0-fb05-4eac-a4ff-04db7af7c3c9"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "30fc8a12-254a-4f2b-8fc3-27546572462b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ab319cee-704d-4d92-abbb-95322962f5f7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1e56b62b-4d72-469d-8e53-0e5d37982e2c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6963ebf2-a98e-4483-af29-13b4fd862758"
            }
          }
        ]
      },
      {
        "id": "938e13bf-4643-4556-91d6-0135a0298f7b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "84e25425-bd27-4ff0-be9c-b638491e37e4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "45dc7873-3a9e-411c-b57b-7c2f331d2616",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ac88a35d-75da-4707-b913-2fda9c492f56",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "178c1baf-286b-48f5-854e-afded480d1f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c4b00f5-e5a3-4b64-abb0-21023a55f49a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6919bea7-b074-4a02-8553-e71ed35a4907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d118bb2-93b9-4236-b264-3fbc2ea40ca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e7987cd-e982-4982-aa6f-5d05af5de688",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0358819-456f-4abf-9d55-437eece5692c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43bef4c8-9b86-49dc-bb40-66a0e077c413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cfe3bf9-05d1-46ec-bf21-d6b5ccbb898a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "191ba6f3-1b17-431e-bb75-b2b748d959b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2410c69-b2a7-4b76-bc6a-5716ed786912",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb0dda1-718c-4898-a8f4-58958d46299b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "771dfa12-67cd-45fe-a3ca-b2ffd0b41504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32b06669-2fcd-4ea6-a5c1-44e629547cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fbc01b24-7c49-40e0-a62d-3a0442d03003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a647c66-2a96-4bad-aa30-103516ffebae",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "104946f7-a0ca-4068-856b-566e402c392b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e88b5ae-8b49-4322-b607-2a346ed0a911"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a972edd-e5a1-4769-ae1d-43c68ea61292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2bb1cdc-3fd9-4fc7-a536-249e3dd72f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee7f13b-5733-4ce0-9a1e-f08f6c063134",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58bbbe1e-4c26-4d4a-80fc-c17931d37a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22872c4b-56bc-4f55-8f6c-f6fd4f4a96f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aafc6f06-89d0-4a1e-b96e-fc14b7e1377c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "30e86ade-c87f-424d-9db0-54303da73105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b4be881-4d5e-4fc2-9611-da0ed538bb04",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76bd47fb-5413-4ff6-b200-5dd6e93d512c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d5a41e1-8cc8-4311-938a-81d00a69536c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eed3f87-3a1f-464d-a5f6-05d82a0a9d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "490a5892-de96-4e34-b2ba-cd74aa46267c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c852e09-77f5-4137-8bc8-ef666568d5c4",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a028e2d-640e-40bb-bd82-7fb2575bed03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca4d8143-8735-41c8-b4bc-d059ff7f075e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da82fb89-1ac3-4ba6-9bc1-09d9f6321fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "98268776-4608-40a3-bb9a-2f68acbff179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51d21726-1640-4e21-becd-23da304ebb52",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d8ae40-e655-4de1-971b-108c26d738b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60145d07-cf3e-47d1-a3b6-1b6e75ceb4fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8be51fa-51b7-4848-9f1a-1daa3f3add4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "262fd5a5-7556-452b-9863-8ab42b44cbb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80659c79-3178-4367-af32-2399407d6c74",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5900d01f-d0da-456f-a56c-c585efd385a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e634364f-548a-4295-8967-b6c7e2710420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d58f9cc-12c2-4634-9531-c23a05824d56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "72239fec-ca8b-4c66-bb70-e6a1d581db4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3179a3-922e-4b0b-b716-b1bf0b9966ac",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1bdfe64-84bd-47e2-ab57-021b95fe0e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de8e6d9d-78e4-4cfd-bfa0-a83dcc2ffd43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff902625-bbdf-44db-8e99-12b1600cf7c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc8aadc8-7682-4541-80ef-f3ad2603c6af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "067198cb-1ac7-414c-b178-480019725413",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97317a1b-1a75-43f8-a93e-73b6d62fd035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f55bc859-bf03-41e0-a5c6-d5dbd84072a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6a250d7-7467-4bbb-94dc-c1a06b88971d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ca173bd2-1d00-41a3-b385-b04779af2d64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f480f5-8ba1-4f37-a5a2-f5ab74115b34",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea21a117-8f77-4f1a-8969-c21f44ef1a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66adfd0b-eac3-4f35-9e13-af1f8437c4a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f325aa-ad72-4630-a9d1-dbd4e8c59a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "71fbf70c-2d3c-4e67-8567-302ae2c7a87e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c002cc89-e227-4b8e-84e1-36fa51ee2142",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3167fb4f-48dd-4fb1-9e8b-4bc4fc3d6b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9035128d-07a4-4193-a88c-5b98546abe3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa311ab5-aded-4cfe-93cd-60d9f59636b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "debb5598-7498-4a4f-845f-401dd4cf2f38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f023400c-74da-4eb2-8b32-2d1b503387a5",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ab65b14-7acb-4eb4-b16d-ecc690d2dcd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51418e78-5b1a-4b60-8a65-a91360b9541a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8500b3c3-9117-4593-b49e-35698457ce9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4dbed184-fb09-49d6-a484-1dc09a056e46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6642ddf1-3ae6-4f0b-8d0d-0d606ef575d7",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2164ae85-6427-41f8-b217-84123862ccef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4a6d858-dcb9-45a0-9948-c127e35427dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bef34d5-8f77-4076-9967-80b3399461bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7827e8a-8d2b-4ee6-a991-76f2e043e79c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da277b0b-c5f0-4fc9-ba89-4b382f3e9beb",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a011945e-caf2-4285-ba3e-0b070822fa96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6c5583c-2695-42db-a454-f92d8db2726d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48f945cc-024c-495d-9e49-045354b8001c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "1545a80a-ed08-4c0e-8086-41811fd2a0ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "273e8e6c-aaf6-4136-846e-66cda22797a9",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd5b66f-dee5-4d96-a2c5-2855339f5422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb51ad2c-beb8-4ed8-aa57-456f8a0fdf72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bda4ae4e-866c-4189-b105-bca19d175c9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b8057e6-7eed-47c8-a317-41aa4eb75d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d71180c2-c810-4efb-8233-ef35651df6c7",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9cec078-8436-4f43-ab59-294ccbc1bd44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b592900-8183-4475-9fe2-30ebe23e848a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fd95f03-143a-4943-a929-5490da7b3070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d2def0d-9437-400f-999e-15128bbf3789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ca5a4a1-ef41-4c2b-b039-556b3de12cdc",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d948d13-8bc1-459b-a2ea-994c2e712542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c15f62e-4175-450a-8c11-54c7230309c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "061fc9c7-d3a5-4fb6-b6a3-fc4a21a5cee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f9473e7-fc4e-4312-af07-056945ec8109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f549c1ad-e339-4c5a-9850-bb3d720b5347",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd5a5c23-de3e-4b9e-a854-5f759971a77d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89ef256f-f691-4ac0-be7a-52594dfac998"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d84c2f13-0039-409c-8dd5-3ce2e42df1c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5599302e-a388-42fc-bfee-b480b2166141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f93e4286-bc3f-43d4-85a8-aa45a75cc3c6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "913d75ca-5cf4-4a37-b3fa-e4eed9cecd09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6b2bf51-7d86-4782-b8e0-7c1ec2c4f705"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00a97bd1-5d15-47fe-a626-e99dcd61222e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "386af4f2-74cf-4e40-83b5-1c1fa459b20d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2221ccdc-919c-49c9-8e09-3295785bfc57",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd041dff-2609-4ce3-915c-d7f877d7d33c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23590edf-49f7-418d-89b8-2a4867dae86a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5cb3b54-3623-49be-a314-d28b45f6e5b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35ff2517-2e27-4594-889e-a34d50892c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd59814-831c-4060-8f0e-7f40f68c899e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "755e4069-aa79-4084-b710-95001a6b00a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a76fc9a5-f315-4697-b755-c901ac237056"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7f24bd0-9961-4f76-8c5d-f4f46348fa0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dacd5264-ec96-4fe3-ad79-3ebc56b18826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4e21cb8-56d1-4762-8a4e-c4001f6f3c49",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edbc11fd-a192-4b5c-9d85-7c40b6b1b607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4449690-efbb-43eb-ad6f-4efe75d609f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7892f527-628c-4b3f-8e46-8647b609cda6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "baf21a06-4962-4f81-a294-92b81e211f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5634ca5-71ab-403b-b728-b5499f6b857d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81008a26-0f53-4508-951d-9182a9222e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddec06d0-6367-4f85-b71c-bc0c13e5121e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5dd8239-bcd8-42e6-9bdd-b046452f0516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd4594fa-faa3-4103-b17b-c1c87d205db6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e436ba-53cc-45b4-bee1-421764c8da68",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da593163-d5bd-4176-9827-b12b719a07e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d25988d4-e2cc-4633-962b-c66855674316"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f9c20f-c833-446f-8910-903b7dadcfa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d128080e-3746-42af-8f6a-894cf885d185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7297e89d-73a6-48a0-a04e-7a4d19212614",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c2cc6fa-b080-4795-a72a-35e0c9f56fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a12400ab-3b1e-4cd2-b6de-31a7b34e1f46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "210cc9ef-3582-4e0f-94bc-a0b144bd2c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a78bee3a-5c5b-4239-ba77-694c2dbcf947"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44368201-c984-49ab-8986-996e0efe4847",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4466cea-aa22-480f-acc8-3ca11bea8e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "109bdadd-a4a3-41cd-88ef-c38c8f3f63c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "992220ad-b643-4017-9c26-29c8e287f2bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fad7f965-5d3f-4926-919b-b2969b410295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33c08fb9-bd68-41d6-a1a9-2c500e5bfaaf",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09171674-20d6-450f-9a42-43823ac76fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90e6662a-e96a-422e-98c5-8b9f05c97da4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c78da16e-0fcb-4aab-bf4d-094dc5547906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dff1c2f5-658e-46a1-9f97-66c4d5543f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78422001-56bb-4f13-9407-f08a170a5e11",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93af0a4b-5d32-41e6-a5cd-7862019fe996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40bf0958-bc6a-4c84-b73e-c511e63612af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42b8d145-d9af-4539-ad81-54f026e8b193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7885d8e6-e2c7-4b9b-874d-21704fe2cc72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d111b197-4c96-46a4-8c1e-31eeafe4531d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "713f5176-2df1-4ff3-8f55-20863361adcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e600ed6-cf60-4836-bab7-b31566dd1581"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe76d8fa-c7d7-4593-84aa-29c70d7bceca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "792d16a1-f055-44b6-afbb-2e9e5ba5bd07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "428247fd-086c-47c0-b282-02a9d59d27cc",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6877b90d-7064-41a6-94fa-e5aba6ab625f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41c78aa8-d3db-44be-b0ca-ac8c685cacf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2edde221-3d56-4034-8546-4f0e702730eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d818d9fd-e83e-48e5-98cb-e41d649e491e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "731ad2c1-707d-4a13-ab2f-36788b589d9f",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c68fd8-6f43-430d-9927-42df3db7306f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b32f3555-7fbe-4da4-abac-95959446c3bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9924c4d4-367a-44a2-a92d-0ff49bb58d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8025b770-dec0-4f95-9af6-b11f9cc59f01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ef2a55b-0d5a-4bb6-a92f-44815013fa8c",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "258df176-a164-40ed-afa9-d2f551dc2fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28ebef7c-c626-4079-8904-0baa4956b5c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8771aa3-473d-47f9-96ec-f89445d159dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c519916f-b9ea-4e67-a9f2-050b86ca9cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38f6e7e0-9ed0-4275-b18d-bbf62f9e8d28",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ee7aed8-779e-4ffa-8782-87838175fdb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b9e9d4a-8c14-4983-ae19-9472f92e47b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f5bdc6c-a102-4fa4-94ff-fbb1846fd68e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a1b4813-b3f7-4907-b960-83daef5fe1ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e67c03-5a67-4c2d-9bc9-2cfca080f060",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5194c916-b16d-420f-ab63-6dc897a548af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95efa83d-fde4-4a84-97a7-60ffbb47906a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ef1deba-ee47-43a3-9973-acdb0b637532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "235fad48-d73d-46e6-9940-e9799826dfea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0f6b07-9b44-4eb1-8dcc-d858c01ea867",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed91523b-a200-448e-aa26-a482775d2979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4e48bb5-7671-4638-8412-97c30acaa868"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8954e4f-295f-4177-b887-826ce96c1d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae5269aa-6920-406b-800f-a842eb47a412"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "46070eed-a06b-4019-8ad7-e3e031c4c093",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9b838521-8e37-454b-9e9a-031c1e6d8643",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d7a5b92-2c2c-49df-aad9-c6a06f8efb3e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "35d31332-3896-455a-9d95-8b013c5b38bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a09947a9-3edc-481c-b724-5a6db725762f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a4164435-9b63-4948-978a-bb34f67a5a35"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1772f65c-137a-4107-b8bc-a18a5bb7c85c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aab7d47a-7e1a-4072-ba83-d6b0fb9f4c52"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8031f35e-d985-4f7f-be6a-e5a176603a2b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2831674e-29dc-4cc9-966d-021f775436c0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7fc54a72-ce71-4725-af50-f7220f5ea7bb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a5037b48-4bfd-4b4e-a474-5bbe51861fbc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "187dcf83-2d09-4ed8-8a40-18738fe9862a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "94454e8d-e278-4d9d-8881-74c105944a67"
            }
          }
        ]
      },
      {
        "id": "9edf052a-f250-4289-8d55-9f9a5bde56aa",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "7d7500be-761e-4524-a997-9b193634c301",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f4b1d545-ee07-456b-8762-fad8826c62db",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ec7134b7-0c40-4f1b-ae02-8e51b89d58ba",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9788cd1f-66b2-454c-897f-11c70378758a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7137529d-1404-43f0-96ec-bb4c1d9cc4b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c9dbb03-f794-40a0-8de5-723746609ee7",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8847ecdd-964a-49be-a38a-6dea25f01869",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5340f3af-08f9-4e60-8a0a-3164e06f5cc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "414a4532-32b1-4707-95d9-921e428986c9",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f8bd46-495b-4c40-9094-49b562c6404d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8330b04-bf8e-4498-b0cf-70f53b6d37b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0a5495c-fa47-4d28-af8a-6a779fef1900",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3efe1e9-977a-4ae8-a1c0-4edd883a1e04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e13bfa9-344e-4c22-9e66-f57b536ccb53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e5439c-6c28-44dc-8a8c-c4b49f9e3e5f",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c592cfda-7fbb-44fa-8023-db687cd5ec36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee4cefdf-33a5-40b7-8947-ca02a8189aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8e51772-8626-4bb9-b79b-ce318a7607cc",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b757e325-cc47-4af1-bdeb-64ab4f921cb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f64ec400-4ecb-45ac-85ae-2d31d94bb5be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c07df2b-a439-46f2-bcf7-a4745f599b5b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f1fe979-622c-42c2-8591-deefc2f55e20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8db3d6f-fd22-4128-8b82-62fce5073567"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48c597f7-781b-4ac0-a63b-acd8e86bcdeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcd4f14e-b7ad-46b3-a676-a248b3894c3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ac3298-556a-4ef0-b63d-adf3813c41fa",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a651ee90-7244-4e81-9714-cb9a0aae0b58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b9ace28-f707-4f05-b897-d0f875f1da8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3543e34-d3ac-4963-8b7a-c6078c8a43cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02900282-c579-474d-b420-34653b75e33b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f73e4ce3-8e48-40dc-9d3e-1b2b33f2fcc9",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf230f9f-5184-4069-aaf4-7625f1785a6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e45067a2-7c65-4cd0-9501-fc172095ef13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1186f4ea-0939-4015-a857-8388dd291de9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fb7c029-3524-4643-a541-9744bb62c111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf7830f-f3d6-4524-8a12-1a94d0750ce4",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b2b079e-56ee-45bb-ba79-2d4abc596fde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d0f227d-dca8-4977-8d35-7e24025b36fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a019dd9b-acf5-497e-8f0e-afe2d14c19a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a3b8387-0e4c-4b3b-8ddb-7caf4ada1b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20095db4-7725-4dfd-9f7f-6d3f86f1b179",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9786253-c48c-4e86-930d-a05c2207cb41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61b31575-593a-4bd4-8e5c-251bfe089914"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b4b7381-7085-42e2-9518-6df18640c678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aec45a01-12c4-438d-9283-52308e0d82ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91f63b18-5d3d-4790-858e-0e0d9ede84bf",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd625a7-ed6f-460c-9523-72e6d559964c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7bf8289-709e-49d0-bd03-66f6cedf3f04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f75bd44a-7e40-4724-a6f9-9be5f4f8f1f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1450b5c5-834b-45da-9cf1-a04c727b9a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a46abcf1-3763-4297-8cd0-455f977cd3c9",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3674eb44-dbc3-46c4-96c6-c531d82fc592",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90c267b8-d714-46a3-aa74-2b165a30c136"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf700ef-c317-4a4e-9a95-36933b43f282",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa4167ec-681b-4185-acb2-62f29e7c4807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab233d84-07ad-4ae0-ac00-00f6628149a6",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2764b7f-fa4d-4601-9893-908c4a4767fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1141b93a-41aa-4811-8371-0269c9b581ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b361033d-c6b2-457b-a702-db2521fa5538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5452f74c-6105-4a7e-a41e-538aa3ead5fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a0fdc37-4f59-4037-94b9-4c208d5b28b4",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3efe2f42-78ee-4172-8f4f-865bd819161b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef4074d7-7a3c-481f-9521-c39a110a7a46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acf3a8d5-c94b-4555-888c-c0146681e383",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb32fbbc-c481-44d4-9946-8f4902133c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c35a22b0-fd73-43c6-b2d9-61fd45a3e5d7",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3189fc1e-7a57-4a80-a70b-c0332def5236",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af487a27-3b43-45af-b8ad-23a4e668e414"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5edd630f-81aa-4b0e-b9e7-b80d7dab4809",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "820de1aa-bac4-41bd-824b-b070fe12f992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbd9167e-d3e5-4675-8bcf-ccff76aafc88",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e714269-ea47-4333-a3d3-579d8f4c303a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e1643f9-08cd-4e65-8fa6-b32cb74c0b63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc6e967b-603c-4e5f-b4f4-5948fade80a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3973ace5-c107-4a84-bebf-7acaca178b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e2dcfcd-790d-4fe9-8fa1-bdcfb9423766",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8462aba6-c91e-4b4a-be00-8ff11892f310",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "998eaa19-d97a-4af0-b04b-f5b1ded0111d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c96e823f-35af-4262-9873-dc285d3f80d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1e18f40-d5a9-4d08-94a2-16dddb191728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e9e3870-8129-4cb8-a022-2120b8841508",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e259a5ac-b247-4caf-b31b-00471d651c66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4491fe9c-bcf9-4b86-8f18-84599fa0b64c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "248d5584-54bb-4734-8ee4-84af469129a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ebdcb12-cab3-4376-a215-1b7b78130dfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac4eec5d-aec1-4724-a2a8-7578df7e8e9c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "868e4882-0fbb-4fb6-8a29-7cba4bfe91e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f85d62b8-0905-4322-9974-676703b0891a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86a0bfc4-3656-4b03-a28a-c644b23160ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b568ae40-cae5-48e3-a0cf-e3f99a71eb59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "634fef7e-8706-477b-be2b-d9050e230ba7",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecd1f481-c4b5-4e11-9670-e0a9d2cce79a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eb2e808-d740-4f00-8f71-94ec64a1a67c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b83746a-88ff-495e-b3db-25e07003fa57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b05fb89d-eca1-4792-b08d-61ab1f929042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "648abfa6-e8a2-4ae4-a0f9-c69f1d192d36",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "631dcf04-873d-49c5-985a-75b952f5cc05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed9fe667-af53-46c3-a04a-c0e98487ba2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b93ea7dc-d7b3-402b-bb36-b9f4176fa7f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb20ca61-1fbd-42ba-8c0b-d8f2f144651d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0b7b938-cf7c-4bb3-ac2f-0dc1ff09c40a",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e9fcb0-0cde-4092-888f-a853328a5cec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "349453bb-895b-45c6-941a-ac4d2e6d9258"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ff2e28-fc84-4ca5-90d4-00bee6c686e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c71b9aca-9446-41aa-b8c6-40f023a02b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a41ab97-b28c-453f-ae22-492d53a1800e",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fa4193b-c6cf-439f-88cd-d86beca39ecb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0816aa4-7332-4700-9f65-cc2087a18b11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c37c088d-f866-4a7f-9c55-9742a933e85d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b5f60bb-7508-4035-b6a2-8792b49040f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42f7a8b0-b245-4b38-bd08-3c0e1aa60c03",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bf98560-68c3-451f-b3f0-7495e6c0a1b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98b5c735-dae6-4913-af5d-2aaadc2ab097"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03bc587a-9cd4-4b4f-8f69-db9f4bf66d45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cddb065f-abb6-4913-8705-f1c793e292b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ab9efcd-855b-4660-a198-21575205f474",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d26fc04f-5d56-44e7-8b59-93e818a366bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77db2077-91b1-4f27-8e07-9190b94e2950"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c663665-905f-447f-a835-0ab423ecad06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c8dbc6e-4799-456f-94a8-45d170458ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94c8ab57-c9a3-43f6-96a4-20d0c647762e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4abbff6c-7edc-49ce-94a8-01d9486546a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e91f6ea1-be31-4c6c-ac40-8172cf1f1ee3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fffc178c-7ca3-4a27-a581-7dc3c4860672",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ba85d38-ce22-4159-ba2e-9d5c21f9f570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c4ec88d-3712-4875-a361-fb352b2bd537",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e90752d0-71fa-4f63-bd51-02c55f067c35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27d37da9-9865-4e2a-880f-79752ea46b51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb4c4ea5-ab45-4eaf-97de-bf9cf326938b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b01dc7bc-4d08-4c5a-90f3-e48427df4395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3c040c9-62e6-443c-b210-944af4d83f3a",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b130065-e3e8-4c23-b6a7-30b705b90dd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85840bdf-7ad9-47d7-a6a7-c019222f5d0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c1c25b8-448d-4811-8f72-f4cdc04562ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa066154-5279-4f90-9b58-3fb92571e78d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b348e618-b956-4f48-b527-c067df3974fb",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "468e1938-655c-4d41-bd03-b7b1744678ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22a9b227-435d-456e-989c-805713e91713"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a511341d-d170-4ce3-8c6b-e75ed54aab89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53971ce3-9fa7-4ff1-9e51-1b1eb5ffce65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d20f15-76ac-466c-956f-5c87ea58b6c8",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a4c81e5-b213-47ed-836c-5b960e8b5ee9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2c1757c-fc88-4d02-995e-49acd48a49b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dd9bfb4-20bc-473c-a746-cbeacafcfdba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e54cb2df-01d8-4db7-ba6b-177425912eac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "569e2413-7e17-4b8b-9117-25c607284144",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e7f29d-f0d2-4151-8929-87ce7f7bbb93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69acba31-9f31-4c15-8a2f-8587a409149c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bbebc71-fc50-44a1-8ae3-50834b9a79af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4552587a-358e-4d31-ae7d-edf91fc219c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce28579e-6245-406f-ac41-6a2cc0b78db4",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d28f996-6873-40da-9951-9f2d1e6dfdd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "937a6b64-90ba-4b94-af67-e56668ee0335"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a94a61d9-8d24-468f-ad9d-ae22f81b2a14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f36a9507-4cf0-4147-8e67-a813fc951794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5be33216-b5ca-4356-99c4-99fa86a46f52",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94dc46d0-2eba-47ed-ab94-a82232e1c533",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e396cba6-e903-4d6e-96c7-0a206fad05e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47403b7a-a0d4-4692-9f75-298609a0ff5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1455046d-1bd4-42c8-a410-83780b150069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3df5b85-a512-4f64-bdd7-1583e0938a66",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67ffb246-d4e4-4aa2-b63e-f1995a9d2302",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39ad484b-80e9-4cc0-8dfd-1ab65d928147"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3daf942c-0630-4e80-be6a-cbaf837e6094",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f8cd886-27a9-4d92-9d7b-1940222f8672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c9c1da7-4fc0-41d1-90d1-166a1fa2a989",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e02b4a-e8fe-4ce1-812e-36d925356c4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d44c1fa6-7148-4388-a0f1-0c55f8be65cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83068dbd-64b3-4bc8-a3d5-13300846452a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2f03e9d-7209-4af0-88bd-fa1a08d7e80f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c876c42c-c2c0-4ab9-b6e4-ad4e2cd78c46",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f89a82-90ea-4548-8332-f5963f6ca75b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "314a43cd-b60d-4e9e-82c1-cea78287f6f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "607d0386-f54a-4250-a7cf-fdf2f8a42797",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c48a09af-3101-4403-be73-fd41fb09b315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc0c3844-8a6a-4110-a354-0951c1837cfa",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e274e3c-2ac0-4a9e-a34f-e9c4ded37166",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3664e83-57ac-4f24-a094-9b8e4e6ed06e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd57a5c6-7e31-4cab-b016-7f6ecc3629b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8198c83-fb36-4d32-ae93-20d7238d2d76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5373b04-490b-4a6b-a25d-87fde00d4334",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da72b7e-2934-41c4-b902-189ffaba4316",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ddc58b4-2697-4c9d-9acd-be657d9549dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a534fa-0971-4eea-8df7-4d0c2d248ed6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c52bccd-bc2c-4b75-b0be-5b09e2a4cf38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06c63190-02bb-4ec0-b59a-da42c7ece5fd",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40ee66e3-c961-44b5-9fe8-9b683b8c2f9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9dd205e-69f8-4652-8f4d-8d739aa5f4e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb022ac7-98df-447e-b76b-199cd3e6c940",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3755ba42-a7d7-4ce7-987a-5aa4ad4583e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15fb0c36-f2bc-4ad5-9157-8502c90ed187",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "144c8e7b-c209-4c05-9f26-3703fbf88c34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d844f8f-3204-49d3-b02e-61808eb3f2ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26131a4e-7130-4129-96a5-52a213d5f54f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81081233-5665-4247-910c-0b9791044134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c5bad56-5e88-4253-81b2-437e5fddda9b",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac6a7d5-665f-41bc-a7e4-5a796491d16d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98fe4277-ef7b-45cf-84ad-16e1311dcd89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e7cfbb-8732-4058-a321-8fff809ecce4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35355309-9bb4-4f81-8426-927b328c8175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef1023b1-1dfa-4641-8e00-73c462c54dcc",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc90e9f-7f1c-4faf-9769-624e92d106b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "016a9084-d396-4613-87d8-5599a27ac2b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e19bfe8-e0e0-4758-be1b-0855ffc7f58b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "508056ff-5ba1-49c7-bd75-6c34dd62a20f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66caadba-6bf0-4a41-90f0-e67f1cab3eb4",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f697b6c-fa08-4005-8539-16279082744b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29ab0552-2cc5-4385-a46e-cf3c478bf1f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f637d2c-7978-4230-8767-9ff9c503a8d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da04fa69-635e-4eb5-b8c2-646ee963e09e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db77311e-4416-4fbb-9585-7fa7b6c52cbd",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e242bf2-e184-4d3d-9977-9a4b30367ecc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bfec79a-617e-4bf5-8305-20101133803f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e19082-3e45-4e6a-84e8-b107b5399848",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6a4db12-eb9c-43b0-9650-f1362bd45f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa7df6c-dc76-4a61-912b-d2847c2836a0",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba372fd-05ee-4b1d-a63e-470de68fd577",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4809a4a5-c0b7-40ff-a39b-6bc9123f9b8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ac6d10e-a727-437d-9b63-de232962ed74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb90c82c-a21f-40ae-b4f6-b3925677e695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5df67b2-4e77-4644-8d84-0a9527991619",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbbcc23f-b6ae-4df4-86b1-5210fc44cbae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0db9e1e-38f3-4c30-9201-8470ac7bf951"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c90e1506-55d0-4fe1-8452-7e45c6b63b25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d03f3536-882d-410a-9a76-a381b26f80c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8b80d51-fcda-4cb3-8798-3812e81c3d8f",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3acb621-cd01-4199-be65-a4bac4965639",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eb40f7c-60f6-4188-953a-5f68d3d6878c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf5a7592-69f8-49da-b763-4be5f0c9fcc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a755e16f-62f6-4180-9315-ab8a1a5c6737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4617a31-aca9-4c9e-9645-b286bc80492f",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0080558-0cd2-4afc-aa92-8a6013a15e6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a0318b6-db46-4b7d-8136-a55323a6bd6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19878c93-4847-432c-93ca-e53463837b73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4920e319-7c2f-4c22-a905-a22086951334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2c7a5bc-dd8c-4728-9cb8-4d3e7519e7df",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54cd154d-d88a-404f-b56b-55213f52dacd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02f89fc0-1e9b-40e1-b260-ad07823d31f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca5c8086-b0c7-4924-b5b6-832c75e7529d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2920c95d-5d30-49da-8a5d-56dda92753df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2db4776e-f097-4d74-8cb8-958de99546b6",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b2b5b23-0254-4335-bba4-53464bde4023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3678d4c1-c26c-4a11-9173-1cf8e3b5e274"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da16fc50-9ff3-43b2-97e7-819307761998",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c346bd67-1631-48d9-807b-374277ba82ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ffb6eed-73c9-4e52-a367-43006a2e94a4",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27756aef-7388-4e14-b5ce-a86c3fa8460e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "773a406c-48ee-428c-89c6-2551d6c19798"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47604b9c-fc7c-4daa-9ee8-70886a46c251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c15e5bc2-6bdd-4718-b016-93f987a778bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4d931c4-8ba6-44fa-a9f6-6873480b578d",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a62bc5a9-8723-4153-8533-8673fb14478d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98305012-44fd-441b-8f70-244ea9b93cda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "900513f8-6e38-4cae-91d6-f3aaec292de6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "259ca7e0-1fdf-42d1-a6ca-e60038dcc4f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ccc12db-69a0-4bb4-a122-45837934df99",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7cc9fb2-6faf-43b0-b807-ead2a4c5d4c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cffa4e86-22f2-4e2b-a220-0a115da0b365"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c691788f-28d9-4f04-9cd6-ccfa05edd2ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d863a938-e8f4-4bcf-916e-271eb36b565b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1ae0cce-ef5d-4912-a7ed-37614220455a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22edf9b1-0f70-4090-9055-c04823c56d26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d9685ab-98cc-4bf7-a1e5-5f8c9404635d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2792b84d-8fd6-4ea3-9e48-72f001c9a40b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f263c319-c486-40bb-9d06-5975429ed273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdafd675-ab64-47d0-a06e-d4d24788b489",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25746b6d-558a-4ba8-8874-c25d0ec05d8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74b18244-d756-4be1-a169-c507ad642d3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60a479b-9ada-4063-b6d5-98893ebd3ab8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8015065-69a0-4b07-8716-8d550e705f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f3397e7-1eba-441a-b36e-ee3382df4ee1",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d5f7b0f-965b-4893-a764-642f870a47cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0ad1a39-7efc-4d11-8528-330d3db5e4b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9261968a-1250-4c8b-80fd-9bfd71a0a98e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a772b20-5cbf-4cf7-8c34-edba38ce3326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e0c0a9-e7b3-4ffc-8179-4c365049de58",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beb80bab-3c21-4e39-be74-ecc97bee44f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07942b8c-9531-4e14-846e-615a24689c4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63fb1248-7488-441f-b1a9-c05a05c282b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f48cda60-91a9-4e8e-919e-dc1ddb6f7617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f232095-abf1-45a0-ab6b-ef9c8a47f203",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd30771-eebb-4a09-af34-880c5f920e69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c277db97-74f1-42f3-b4e3-e3800f5727ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de72c82-e5ac-43cc-8152-212b2d2dbe8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bb8778f-31ff-498f-9cd9-9c89dbcf79b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d8d42e-596e-4b37-83d0-b544b27b9b50",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14871856-019a-44bb-8b07-5499e77b85ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e5e6d36-c8a5-4852-b13c-e5fb88ed92cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a17067-aef9-40e0-8020-ab1b95e5d95f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0f9d20b-239b-43d6-9ba7-af7b0d0cb6a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "167f7263-66e8-4dc6-9978-0769d4957430",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f9e9693-d8ab-418b-a451-19bbf8e50b28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c21f013-9082-4857-920b-2093e4826603"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddfb59b1-cf14-4d62-a990-79e753939c51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "624e4b41-1435-4d81-ab0f-e7a8591fc507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf1d06b0-39b2-4a18-910a-90a5b432604f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed1a3291-53bd-43ef-ad14-d18cbfe9b95a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd20654e-a355-43fc-a698-8f56ec57946d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a818c82a-7214-4d6c-b0b2-b4f76bae1ed2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "612075e5-f0a7-425f-b929-4e4620fc2234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd303b8f-0482-4c97-83be-c7d36b91248e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "467d5fb8-6889-4110-a68e-d42c24b739ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d3cf4ea-38b7-4639-9c7d-63e6e4eed1ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "929ddffd-82b0-45a6-a686-55e9ddc7935d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05a86f91-8600-494a-aef5-a71c066d5940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34dd9e20-6279-4a64-8d0f-e0342658b114",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e82c9cb-ea37-43b5-a8dd-27e93962c4c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eee40209-a3eb-4047-b5ec-8ab38ba97b19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07c4f81e-4de0-47ff-8002-8befd45ed3d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6cdc89c-882a-486b-802a-12a7c2f45c10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccd3d9fc-c6a1-4cc3-a73b-0523fdb1b7ed",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37193c18-7b72-4cc2-8262-b05fecfcbc9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "947abb32-992b-4c0c-8dd5-9a05d88c421d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee39bad-a533-461d-ab9f-d03795cffc11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6583913d-d9de-44b4-96d5-cc9ea6e4923f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8414e7a9-7eea-4ed4-9d54-348fe166fe70",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f0c790-135f-46f3-9f7a-5a1fb81b78cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99bda8df-9572-4fad-b95a-3415c9dcf0eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8582a45-c77a-4970-8d49-177e221def69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cddde648-68c4-4332-b00b-8626b7f970ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a23a18-b4a8-4f10-8b5e-ae0dc8e42bf8",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a39f480f-d8f6-4835-9f6c-03976052674d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c64a7e13-7e8f-45f9-ba5c-d0f84625bde3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4bd644a-7dec-4ab7-a574-db1cc2d11d8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3db57b10-475b-49a6-a8fe-72d6c25b5691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96c88445-e8ae-4ba5-aece-665769f081ae",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e42af14b-1c10-4d84-84f5-5f104dee5c5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cb343dd-317d-414e-9688-fab85ec51089"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc35641-f27d-452c-a38f-f28acfeba2d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33509286-ce44-41f4-8e17-a79719c5e7f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1906722d-f06f-4216-9f8d-e72776bfb5c7",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1654197-818d-4d97-8566-46c5ceb23d2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "825b35c5-345e-47e6-87db-abea12500575"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb5b0a5b-d665-46dc-9dd4-6a561870a3f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9fcf59a-6d47-4a27-9688-709faac98224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "467f4bc0-1d26-4300-b0ce-f1eab0b88aa4",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "136b04bb-7da3-4554-9ee2-bacbc4b612fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d249255-c7fd-40dc-9962-b935fc6841c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eabe637-845d-4342-885f-82d5d20454ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03432ecf-7743-4807-8429-2c1b6d9e00aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e156e8e3-f95e-4b04-b674-e74dc8a2c86e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5039afa3-8712-45e2-8253-55175ba398e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f254ae8c-9581-40bf-88eb-ec4dbfb5d6e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46536968-31e0-4eb7-8428-2696abd5eeaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0211924f-f9fc-4174-a5c0-48ca21f69214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1322940b-c5cc-427e-8811-2c8c08ceddcc",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67de7f6d-57bf-445b-9e1b-22e02e700be8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01958140-b28e-4cd2-bb8a-4fda689ccdea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d95ae7b7-8bfb-4a78-950d-816c8d91f5bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b96de777-1c07-4f9f-b7e3-c5ec329f7740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "817a0c13-e858-4686-be52-77e97cdcd9c1",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe13983b-3042-4035-83da-fe10aa16875e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "229bc0fb-d8b1-49a9-a982-8637fdc7ca08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "057857f1-5bb6-44e6-9e39-8d6c5d436a01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1fadc06-bca1-46f9-b206-f03319e7fa36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82bd1c2f-6f5c-4971-896f-0ac182a5b483",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12971304-7fde-4e59-8d36-da59b4268ae5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b5c4889-76e0-41f4-bbfe-b3abded0b424"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f5f9a0b-c55f-4e84-9762-69c6cd1bf059",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c1fd82b-a147-45a1-a8c7-672260d950e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58afac00-3013-400d-9c48-6478abe713ea",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9067ff65-86c4-4848-90a4-b49cd65e1155",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cea292d-65e7-40ec-858b-1e55adfe4bf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9561eea7-f41c-4ff0-bf2b-0ca10e84719e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8088343-6b0f-4148-8011-1cb8a8987df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73b127d-5dd8-4815-91b9-b2263b66b20c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc03d4f-5970-43cd-8a5e-673bb0ee43dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0953b39f-fa54-45aa-9fc8-126e52fa7ab5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "412d53b2-8d17-4892-b1ea-da47973a4618",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3f298b7-b471-495b-8ef4-2018b045f584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8313517e-0627-42d2-bfe6-68422d2ec2b7",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ba6bd79-25a3-4a52-afe2-3f068ff11c5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbbb365e-08e8-46f1-83b2-6445a9a3e8b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edc9b3ef-6061-41e9-8038-18df7cc25b67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ce6af6f-72d0-4fbe-9651-4f685e2c556c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d08c56-823a-47a7-948c-e60371d6fa6a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3099f58b-e75c-4ee4-b01a-afd911e9145f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d96b6d2e-cad6-4490-9da9-97c0aafe7a5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed443042-f575-40a3-8057-06b75f8584eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c3d6c52-bb94-4e22-af98-0bdbc65f6455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74ed9f53-1576-4913-8d5c-c99a24142616",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cecb0eb-feac-4981-a2ac-1e8e25e5bf12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3474d93-3b1f-4780-ac1f-592096342037"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd8d8263-6e0a-4ade-9a02-2b22a6d398e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf0696cf-7382-4665-95c8-bc109fcc3570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98a8cb19-7378-4751-a65d-1802b93c0446",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8681c26a-6c2b-4645-ba48-fe4317c90d5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1826b1df-719d-46cb-b6b8-9e985b61335f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4662a341-db64-444a-bad5-d57da5f2b889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d195e8e-71b3-4a40-bd94-97b3b31aa5b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a519e701-24ea-48a5-8c9f-56306487214e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba55ebda-a8a0-48ec-a2f1-52739f0321ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6719af16-4806-4a12-82d0-21b56117b0dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a55895d-fec3-465e-be85-0db11f31b435",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a78dbb6e-9285-467a-9fd3-9e5d77a3c0e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d375a741-5175-4e03-88a0-15c4750dd380",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c7d0036-7a60-48d0-a652-d567e7774700",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "271e7af1-cf31-43d3-9c13-404338d76c9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d72d4d30-1438-4abc-84a0-625b09254ff6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "791e78bd-546a-4c0e-a300-cd52cae04d5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e09d740-5067-46f6-9616-ab17a5ae10c3",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8aa985b-f50a-4e13-bd6e-31cbd6773a2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60fbd5e7-2e6d-4d90-8190-05d369bcb238"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03cae324-b10b-4234-9a88-4916d3d4c6f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23cff83b-f6f7-4098-bf25-9230c67e3075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53da2c19-f8f7-4ac4-b754-4ad0e0b3b829",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f6fa48a-611e-4d25-9ba6-2d0a0d1ae85e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08a2bd4e-6ceb-45fc-8710-412739930b63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b10b09e0-acc2-44ab-a445-e16335083dd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b928dabf-e8b1-4eaf-92cf-ab29d38f9b2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98edd577-08e3-4f42-9498-849ac06157ff",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df4a23a-828d-4eb9-81eb-5d1e50f74781",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44de4465-2e07-478b-bedf-96797354c5a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "582ac2e6-e206-4a62-af5c-461808d3d083",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30403d64-c583-4b8b-bd4b-8334391eb047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ce178c4-76fc-49d3-9397-d8c35531a64a",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c09864a0-f7f9-4ba1-9dcc-659448e726d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "955f6364-fb01-41db-bbb8-d215cbc073b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c7d2e0-5b59-40ab-8a97-35e4f2138253",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcc02ffe-a5b2-47b1-bc49-29b22d4e4f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6fb4120-c029-4259-8ccb-699b6c578fd2",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31051ec5-3bc6-4357-8a7d-c81d7dddb29b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "983def69-5248-486f-a648-20805adb6a75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad96b19-64f9-4a7c-88f9-2475188a9b77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46452a57-5769-4772-8088-40401a1f5388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d969c100-e24f-44a3-b863-2d7246a12e3f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b8ed91-ccc8-41f8-a0a0-f48987ac77fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "889b0e43-6a89-4e34-8df0-3d8cec52a9e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5eaa9ca-80e3-4fe3-b160-494249aab240",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29cd804f-796b-4e78-bc77-637832120b3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "170581d9-0f5b-4cf4-a140-f73608bcd483",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0786e432-da37-420a-954c-f6228465c22b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90936e9f-9790-4a7a-8312-79e46aa48344"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a3135f7-5271-433c-9ab0-b4e8428167d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2120175f-8438-41d5-8685-7e4c41c11ce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b98651db-e422-4346-8d8c-4b2e13fd90dc",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c49c785f-9da5-49f4-b307-9d0969cf5762",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "294d3810-c659-4150-bf7b-171b47c755bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52e69df0-e274-43e3-90b2-291232e1697d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a376c902-e737-433c-a0e8-ea75005cd1c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db87988a-1f4b-4e0d-a4a8-6c35952ce451",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3783140-aed8-421f-861d-9f0baf945e43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5c51d5a-0192-4a62-b6a1-ea46339a267b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d8882ff-3f59-4aeb-b37c-cec53ac46f7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65a0f299-5fe9-43bc-952a-e1a5592c6b4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f2a066-5313-4980-a14a-2a5da68342ad",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ee93be9-86b0-4a26-91ee-781e4daa0720",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1862855-0e58-4971-8236-4e36b90f3f5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da6d47b6-85c8-4f21-95c5-7a368b25fee9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ca0fb29-bd7b-4e7a-b369-9f42300ece32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87d9a487-ac88-4e8a-9e2b-a988a5130b8a",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03097eb7-adaf-4556-8f60-46a7c78e90a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad8eec73-c1ec-4e83-a79a-d632fc0acfab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "486ded2d-36cc-4512-ac00-fd2f1e9a20cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e57259a3-cd36-43da-ba52-afeeced76c74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22819495-2526-4c39-b62b-dd2c9f2a6f98",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91537dde-6f9a-4149-a9d0-516b73173d96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "996c8908-a510-4d24-ae86-db875535f2cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c7544c-f499-4094-97f1-69710fe6ba3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "676c61cc-baa7-4e0c-8dbf-f685e2029675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70b4c903-3fe8-4077-a75c-2f113aaf480e",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "964d0487-1c6e-44bb-86e2-e6ebb6867bd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4ae8547-555f-47b9-9cbb-20e7d9b04661"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d36f7671-f922-4108-971c-2f161c3518d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06036f92-4c46-47f1-83fb-fb21f72b0a83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2456f346-7309-44e7-9e28-3db7617420c7",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f272cb-90bf-4722-a819-a8d1713c3ba8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "867c3c1d-f3a6-4727-8a35-905507d8c059"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "239d3e3f-7f93-4b24-a749-1d7a507b20fc",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21872aad-16ad-4bf2-8c9c-f84fb06824e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbb03f95-925a-41d8-b1dc-872ebd7d8b23",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "637676b9-6af5-494d-99ba-ca5fc41f2817",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24a15858-78b9-4410-bd3c-6bb70405484e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e77a4356-bc22-4d1b-9ae0-c0b9b8827bc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81f56682-2885-4bd8-8aab-41c8ef03988e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf91b546-0021-4a9d-859c-5a0044647575",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c63ede83-8e1b-4f81-b19a-01e87b36b512"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "66292ffa-0d26-46f9-89b3-5326d900af51",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d73a3b42-d8bc-4f72-afbe-b32fda1de8ee"
                    }
                  }
                ]
              },
              {
                "id": "517644a4-9c88-4154-953e-3011f5f4a46c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a1d9409c-060b-472e-9fac-7c56afcdc7f0",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db1ded7c-8590-4fc5-8b37-247bf8cb52e2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "48c6ca29-894b-4694-bb80-d3d71c36a225"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b639d907-c802-42ff-af08-001e8108b3ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "59840e9c-4157-49ca-ba31-a78cb7a7b53f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b723b415-d00a-4c84-b70f-6d0113e87387",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c50835a2-008f-416e-8609-0ad405aca273"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ec32bfe-ad93-40fe-9c6b-6667288316a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9ffe899a-cd32-405e-9aa2-bda5ef3d4164"
                    }
                  }
                ]
              },
              {
                "id": "caa86dd1-ec04-4dbe-b4b0-7448e3a92143",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "93dc2d66-916e-4735-8bbb-10b00c866739",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98818207-3d59-489c-a291-21bd46f1099e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "9dd6a0f2-05a5-41a6-bf37-6c3eb0da8fd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "839df3ed-7b2d-4349-9346-698228a8ceef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc54bc84-b9c5-416f-9399-bdcc150a49ac"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ff9e26e7-9c3b-4383-bc6c-3eebfc90903a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "094254b4-74ae-4fe4-8175-084501e911fd",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aef3d11c-3c28-44c4-8ffc-0ea695899ac4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "bc40cbd0-6ff1-4cc5-ae98-2a223c93411a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e10a45d2-55bb-4be5-a07a-0bf11c2a977e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9190073-ce7a-44ac-b8e0-51c0784b0862"
                    }
                  }
                ]
              },
              {
                "id": "0e048e6a-8a71-41d4-9594-9c1be421bf13",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3dd70e56-1bfa-49bd-b6fc-4bab89d6cbc6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6d2590e6-8376-4594-b943-69860e20aa28"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ced67f3-b9cb-46f5-8b79-ee894fe5b1ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ee78ae5-d019-4af7-b012-7560e566f67b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b35ec302-eac3-4cf7-b18a-ddd8368d89d3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "ccdbd5fa-75bd-4d50-9d9e-b76fabf33db1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "974b5190-0818-4208-a81e-0ea5cbc5bd3f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "48889293-776d-4f04-90c5-6b4df46347a4"
            }
          }
        ]
      },
      {
        "id": "c1824bff-f1ba-4183-a4ad-2d0f5bedfb6b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "fef43aef-75a1-4e13-aff3-adde3d9a3c50",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bccfd9bb-ccb0-4d57-85f8-f2d039d2f028",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b168b969-387e-4502-9353-19873ebac86f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef9c80a3-453c-4b95-b3da-7d98a6bb05ba",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f952e157-6f1a-4210-96aa-a5329ac4cb4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0aa779-29ea-4599-97a8-da627a1ca27e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "490f1644-e0f0-477f-ab6a-38c4ca665e84"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4bce15a9-8f7f-4788-bb82-372d6d3e4b6a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "91dfdfb4-22a6-4e20-a145-4485e5d855fe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef8fdf5d-0c33-460d-8b5c-7e815e3dfd94",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3c30e1c8-d42b-4daf-923a-72a5af41bc5c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2d960aeb-b7fd-482c-8b16-8bd5e541d430",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "bd34d1e1-9548-4b70-b4e2-d1ab689cf577"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b0802f05-72db-4a7a-a170-92ec9cf6267a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "beefe464-eb3d-49d7-9c1a-a252f2c918fb"
            }
          }
        ]
      },
      {
        "id": "150ac1a4-0d01-4565-b1d6-8e9a0bbb094e",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "cb98f6d5-0140-4fee-9de9-672f598aaa85",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c295c630-a5b4-4231-8ca4-6920763f65f2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c3fc9018-fc6c-4a16-992d-862eb38f93da",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23d45f7b-f735-4c00-9747-ed3e4fae503c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "17e58e87-33ac-4a2b-a073-33b4bfd9faa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd8ec548-85d3-4127-b451-50d7f1642cd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "204848a6-29bb-4c3e-b4e5-a0608d12be07"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6063f392-de9d-4d73-8a81-f7ccc3a2d8ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "30b42c42-b560-4ce7-be0e-8abfcd745ae3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c32f6d29-b027-4871-86b1-e1bb88759153",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c20dca1-b3b8-4aa2-a1db-332900533efb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "20d03d6f-137b-4526-9930-b671677322d4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2601fdd1-0c4a-4142-94cf-a37a52766e47"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aeb0c5f9-97e9-45ba-b292-59e51b581647",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eaa34ff5-936e-4709-9c07-ec339165e791"
            }
          }
        ]
      },
      {
        "id": "6827f0c8-7bc1-4828-af7e-ae9eed9fcf86",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "c1ba8cca-af2b-419f-af98-8864f9a20bf1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6870a938-2b8c-4b75-ae8d-c5e30cad400b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "de1c237b-0517-4230-bf24-737fc4a06f21",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d37eb4-2df9-4181-b0d8-9c0b39bc392f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9445b6e-2a5f-4794-abb5-0c0eb065e83d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42576eb3-8b4d-4c42-bdea-d32c89c23bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "12547330-5352-4c22-a925-fa0e0f0b98a4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cd99eeac-d7a3-44a9-9417-30f21626f664",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "38dd5488-1e3f-4da1-8a82-ba9c28dd93ae"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "085a7c47-6865-46c2-ae96-87706fa48275",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0be121a4-c6fc-4a05-8c90-9d9c18f1762a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "171ff446-bdd4-45d0-a91c-dff7724cbf56",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "44dfaf8c-2ef6-4cc9-be4c-9c077ceb73b2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "397610b7-85e3-4591-8676-95172cdc79d5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1b0af310-6111-4fa6-b871-8747782f48f2"
            }
          }
        ]
      },
      {
        "id": "82bdb5d9-651e-4dce-90ce-d490f68223ee",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "88047e7a-1e06-44cd-aefb-e13957ac189b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c54fadc1-dc2e-45c4-89d8-0dd98ab2b000",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "406db22a-991e-4d0b-8051-ecec910e7a92",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "939c58d7-7831-40b2-8c75-49e6b87929a5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "58a6bda7-32e3-4d69-9aa7-8afe1783482c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 67.40079365079364,
      "responseMin": 8,
      "responseMax": 870,
      "responseSd": 87.9095521797802,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1718325472039,
      "completed": 1718325497624
    },
    "executions": [
      {
        "id": "bc9538b6-11a5-4728-b5e1-08c3389277a9",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "347473a4-167d-4299-afa8-47e2e6c3e21f",
          "httpRequestId": "bbc8d306-6544-40bc-b5d2-42262e7d606f"
        },
        "item": {
          "id": "bc9538b6-11a5-4728-b5e1-08c3389277a9",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "7cb82f54-3ca0-4160-8913-d1b0c63fbe8e",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 0
        }
      },
      {
        "id": "d6f0d96a-f21d-43eb-8a80-2cb2f865aee7",
        "cursor": {
          "ref": "3441a630-4663-4dfe-a65e-a2dd573c5d33",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f2cccc21-c45c-4a34-91f8-3a1060b5560f"
        },
        "item": {
          "id": "d6f0d96a-f21d-43eb-8a80-2cb2f865aee7",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "82576dc6-36cc-41e9-bcbe-35684b54a3e6",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "9d62b49f-05ce-41f1-ad34-3ee08bbb508d",
        "cursor": {
          "ref": "c23b0b96-f8cd-438d-8fac-b3bd2ae69792",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c78d27de-2469-43ec-aadd-3035c572c9bf"
        },
        "item": {
          "id": "9d62b49f-05ce-41f1-ad34-3ee08bbb508d",
          "name": "did_json"
        },
        "response": {
          "id": "b2203540-51ea-4ccc-9e8c-2a11d830996b",
          "status": "OK",
          "code": 200,
          "responseTime": 224,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9692cdec-46f0-4ea2-bf20-d376f688f21c",
        "cursor": {
          "ref": "e22fb3ae-375c-428e-8e3c-01ce9508bab9",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0f0c0332-2af6-4912-95d4-c4acd086d1ed"
        },
        "item": {
          "id": "9692cdec-46f0-4ea2-bf20-d376f688f21c",
          "name": "did:invalid"
        },
        "response": {
          "id": "32eaa587-e9ca-429d-a31d-ca995e4735ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 185,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9692cdec-46f0-4ea2-bf20-d376f688f21c",
        "cursor": {
          "ref": "e22fb3ae-375c-428e-8e3c-01ce9508bab9",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0f0c0332-2af6-4912-95d4-c4acd086d1ed"
        },
        "item": {
          "id": "9692cdec-46f0-4ea2-bf20-d376f688f21c",
          "name": "did:invalid"
        },
        "response": {
          "id": "32eaa587-e9ca-429d-a31d-ca995e4735ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 185,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6bcdfc7-237d-4f7c-bfdc-870abe67cb40",
        "cursor": {
          "ref": "9104aeba-bda8-4b8c-9fa6-ad6f48fff508",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "1c1590e4-97bf-47dc-ad89-3aa1aedad3e0"
        },
        "item": {
          "id": "a6bcdfc7-237d-4f7c-bfdc-870abe67cb40",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "83a1f836-1c87-418c-bfdf-b2759fe8c24c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 332,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b22873d-ed1b-4cb5-92e9-57794055353b",
        "cursor": {
          "ref": "c92d06e3-c7e8-4398-8475-813d071f7713",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "572d7b4c-fe71-43f6-8881-86345784fb6e"
        },
        "item": {
          "id": "2b22873d-ed1b-4cb5-92e9-57794055353b",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a1d25eda-4b6f-4713-ad97-2f99ef5e181a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba61d778-5ead-4c50-93f5-af406f900455",
        "cursor": {
          "ref": "b629920b-942f-4bf2-b643-9b48c3ef6334",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c1e6eea3-1157-4d8b-883d-97e095f9bc9c"
        },
        "item": {
          "id": "ba61d778-5ead-4c50-93f5-af406f900455",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "6cc35755-9359-4a33-8472-55151c92ab1e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f31636cd-fb17-4f7c-b816-88b9d800441c",
        "cursor": {
          "ref": "34d2a8b0-7a0b-4578-9d65-8ead5f8d4b29",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "847c8ae3-e90d-408e-a15e-85c795bbdfa6"
        },
        "item": {
          "id": "f31636cd-fb17-4f7c-b816-88b9d800441c",
          "name": "identifiers"
        },
        "response": {
          "id": "efb960de-aa3d-442e-9970-434a781f1bfd",
          "status": "OK",
          "code": 200,
          "responseTime": 201,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20f05467-78ad-46ce-820b-bf38662e54bf",
        "cursor": {
          "ref": "0390e59f-e302-41b9-8708-304cf61cda32",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6c62e59a-7562-44d8-8f27-a453b48c9767"
        },
        "item": {
          "id": "20f05467-78ad-46ce-820b-bf38662e54bf",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "901cdef4-1d38-4ed1-9814-b6338a1677d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "817dd708-7085-4849-b8f5-556a1b8cac1c",
        "cursor": {
          "ref": "c4f3be1d-85de-424c-a7b3-be4dcf8f81e0",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d4b42d90-a2f4-4d83-a64c-33e358f55700"
        },
        "item": {
          "id": "817dd708-7085-4849-b8f5-556a1b8cac1c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b6d6ef8d-ad45-4cd7-b184-c88a10d79ac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d387bdb9-8f1f-4c61-b9b9-3a416e431a63",
        "cursor": {
          "ref": "53c70a57-6b6a-4040-aa52-4a51c447f5a8",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "91777f1f-9a73-49f2-bddd-67f7b5d85082"
        },
        "item": {
          "id": "d387bdb9-8f1f-4c61-b9b9-3a416e431a63",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f6dfe466-e5d8-4c78-a544-e25a15b07e0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfb22af8-066a-42e1-ba29-2a3a5bc7b046",
        "cursor": {
          "ref": "4321ed31-bcf5-4836-9079-4a76e3f83bb5",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c8271cca-d6e0-47e7-a0ec-64baa4e1a32d"
        },
        "item": {
          "id": "bfb22af8-066a-42e1-ba29-2a3a5bc7b046",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "72e127d5-d4d0-4d35-8948-a609bd5a60e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4597ac7-c1bb-437d-b566-a46490cd58f5",
        "cursor": {
          "ref": "242ef133-8c43-4627-b6f3-3ac26a3d383c",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "bf7d6ebb-e8f8-4435-b23b-59b1de9a6a14"
        },
        "item": {
          "id": "c4597ac7-c1bb-437d-b566-a46490cd58f5",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "e91921b3-400e-40f9-8ffc-eb81da8044d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dffd3b77-1c8f-402b-a065-78451d7b63fe",
        "cursor": {
          "ref": "9e1ce54b-4abb-41cc-a0f5-412f379ec2aa",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2a52f215-771d-4385-90b3-6d625abac152"
        },
        "item": {
          "id": "dffd3b77-1c8f-402b-a065-78451d7b63fe",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "5ce82eb2-d289-4082-a937-9cb618a0058f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b79a0769-613c-4c95-91a3-894465283163",
        "cursor": {
          "ref": "dfdeef66-dd30-432a-8474-a332bb56cc1b",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3983b570-de02-4ae0-9824-4ad1bccbf868"
        },
        "item": {
          "id": "b79a0769-613c-4c95-91a3-894465283163",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "43df0ad5-dd2c-4b60-84ce-f97e8a787f7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22570f23-d104-489e-813e-b4e328cd436c",
        "cursor": {
          "ref": "4bc05431-b661-4ee0-9fd0-c0c28c360df9",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "a813b200-831b-48e2-9a81-97e8f3fb8862"
        },
        "item": {
          "id": "22570f23-d104-489e-813e-b4e328cd436c",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "c31045f9-2a6a-448c-a370-784e55dd4696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adea796b-35ef-4ac2-9a64-50e62a2cb5e6",
        "cursor": {
          "ref": "e2cfba14-a7d8-4da8-bee1-4d0a712d1aed",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "854eda55-b8ca-44d8-8cde-6d11d3fe1887"
        },
        "item": {
          "id": "adea796b-35ef-4ac2-9a64-50e62a2cb5e6",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "63c566e7-31cb-40ed-a109-9f4bf51df310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec66cff-9649-4920-9079-a31e2bb4b4b2",
        "cursor": {
          "ref": "101afe26-f850-4a62-ad0b-038c41b6e0d0",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fccf37a7-79c3-40ec-b5a4-2cb5bea0833f"
        },
        "item": {
          "id": "1ec66cff-9649-4920-9079-a31e2bb4b4b2",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "41a04ec5-afa4-460b-afda-9b233b0fbe70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d3c2e39-f53b-4d6a-ae32-544466bd08a0",
        "cursor": {
          "ref": "427311f8-907a-4a01-915d-a2572fe9dbc9",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9db172df-b8a2-4ff4-b050-774eee52d7cc"
        },
        "item": {
          "id": "3d3c2e39-f53b-4d6a-ae32-544466bd08a0",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "9cd8a53d-d2f6-4a00-baad-0477c7873042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e29a9d6-6768-44f4-ba4d-88b9ad371628",
        "cursor": {
          "ref": "31ff47a8-c91f-41da-a1f1-42735a08d10e",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7306488d-dc8b-46e2-8182-5399181157ef"
        },
        "item": {
          "id": "2e29a9d6-6768-44f4-ba4d-88b9ad371628",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "4695aefe-2665-4b5e-bab1-cd4998e5653d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "983080fc-9f7c-48ce-9bd3-e67ee24fb3aa",
        "cursor": {
          "ref": "91cc09e2-9fb8-4956-82a1-6222a1854020",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "44b7de98-7d60-48d7-a4cd-e1552aa12b64"
        },
        "item": {
          "id": "983080fc-9f7c-48ce-9bd3-e67ee24fb3aa",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "9cb9934d-c46d-47d1-8ce7-06b3fc49f862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a15ce8e-d230-4685-bd99-a125b154534f",
        "cursor": {
          "ref": "8dab6211-f9dc-4389-b771-84efbe6c4c6f",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "5f3fdf6b-67d8-4e71-8cd4-0d32f34dc9e6"
        },
        "item": {
          "id": "6a15ce8e-d230-4685-bd99-a125b154534f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "9c33402a-a07d-4950-9a5e-cbf25775171d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a07684-c02c-46d1-99c4-eebed6c6807a",
        "cursor": {
          "ref": "0680723f-9080-4344-8aaf-0b068faace23",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "92a7f3f0-e643-458d-92fd-f1bbd345ebed"
        },
        "item": {
          "id": "96a07684-c02c-46d1-99c4-eebed6c6807a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "611c922b-3ea6-4fcc-b878-6ee4b7b87d8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fac5ef4b-b656-47b0-bac6-4626c89818c4",
        "cursor": {
          "ref": "144c87d6-27c9-4837-b1d9-056b8acb944f",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "6a8742ac-1a3a-40e3-af4a-5a4c24f13fef"
        },
        "item": {
          "id": "fac5ef4b-b656-47b0-bac6-4626c89818c4",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ddb37402-8af9-4e1f-b5c7-8496e0c782a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b0d83bf-bffb-48d9-a973-7d57f52d2953",
        "cursor": {
          "ref": "0a649742-d90b-48d8-9cdf-f16533839d9c",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "16249d28-93b0-4ee8-b2df-a0407750e487"
        },
        "item": {
          "id": "9b0d83bf-bffb-48d9-a973-7d57f52d2953",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "00221712-8309-4035-8dd3-8e5bee3f9f82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0170a9e5-60dc-4d2b-ad40-4c5820a3c1b7",
        "cursor": {
          "ref": "7123b3b3-5852-4df6-ac5e-02459d21aa92",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c8460ccd-cf76-46d0-8364-7a3a541a2101"
        },
        "item": {
          "id": "0170a9e5-60dc-4d2b-ad40-4c5820a3c1b7",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "50bee80b-9bcc-408c-b2ba-02dc28f5ea0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb02a886-e9b9-45b5-b152-f545b5bcc2ed",
        "cursor": {
          "ref": "eac0e249-fc6b-43c5-a840-2d11bf68f4a1",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "250239da-3567-4998-9196-cc4c8764ac26"
        },
        "item": {
          "id": "fb02a886-e9b9-45b5-b152-f545b5bcc2ed",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "64a0573f-9d98-4536-83e7-508457cba9cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de2166b2-02fc-4e19-b3a6-33dc55f6edd4",
        "cursor": {
          "ref": "840fc46f-8dda-48e8-bdc4-2d8cde7b8efe",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b0b2bc19-69e5-4811-974a-e02261e75573"
        },
        "item": {
          "id": "de2166b2-02fc-4e19-b3a6-33dc55f6edd4",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "dde7c676-3b19-454e-90f5-c10dc5506afb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d463682-665c-4e12-be25-dae8284d5916",
        "cursor": {
          "ref": "e19f2ffa-ae6a-46b2-b1d4-a22cae845ecf",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "88d7d8b6-0c55-43d7-9179-4e1da2dd7f00"
        },
        "item": {
          "id": "7d463682-665c-4e12-be25-dae8284d5916",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "abb30bec-c388-4be4-a47a-387928c677db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f0f2085-70bb-4f79-8c98-de8919a151c4",
        "cursor": {
          "ref": "84dfcdd8-799b-4fcd-841a-23974bf03f23",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "40b55068-a10e-4523-a47b-c17ef1e8f7a2"
        },
        "item": {
          "id": "4f0f2085-70bb-4f79-8c98-de8919a151c4",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "4bd2c646-1d67-4ade-a99f-4d098efbc14f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c7323f7-6be3-4094-9a8d-05b245aaff71",
        "cursor": {
          "ref": "84606140-d004-45cb-89bc-a53be43f83c6",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "84070d9c-ac73-45cc-8179-fb1728e16749"
        },
        "item": {
          "id": "3c7323f7-6be3-4094-9a8d-05b245aaff71",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "65420866-d47c-4ed6-8172-ce4cdb9c78f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e8a5723-a36b-4caa-8537-2013335ff701",
        "cursor": {
          "ref": "4e72a415-c4f3-43c9-9bfc-7271238be60f",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "de33c6e8-85f2-434f-81c3-68897fb8645a"
        },
        "item": {
          "id": "5e8a5723-a36b-4caa-8537-2013335ff701",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "5c8d5dba-4a62-4d2e-9acf-c49d99fdfedf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cb8554f-03a2-4774-87fb-b0caf5271032",
        "cursor": {
          "ref": "70d08654-c610-4704-8e49-72ebe24acebb",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "b9d3010d-fdf0-4b1e-9fe2-9ce35665e1a7"
        },
        "item": {
          "id": "3cb8554f-03a2-4774-87fb-b0caf5271032",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "e08153ed-5742-4f89-8b87-dbc7c6d373e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0837e0ef-8ef2-4ca3-8b18-a004f9544c7e",
        "cursor": {
          "ref": "09f05eca-9f28-4d94-a433-e501b42ba545",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "953ee0d5-dce9-42f3-855c-de2a704462a1"
        },
        "item": {
          "id": "0837e0ef-8ef2-4ca3-8b18-a004f9544c7e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "7104c70f-e77a-4c51-87b3-06211cac468f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fd7ceb8-530a-4999-90d9-e3d5cf861991",
        "cursor": {
          "ref": "65472427-23fd-4326-be4a-765b94e99d7f",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1919dcfa-03c3-4e51-9df3-b7101738407d"
        },
        "item": {
          "id": "6fd7ceb8-530a-4999-90d9-e3d5cf861991",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "6bf305ea-0b9b-40bf-ad69-fd688b6bd3bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89148102-956c-4b63-a037-11a3734b24e2",
        "cursor": {
          "ref": "583d4881-a2f4-4a3a-93f6-606c1854facf",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "4e59cc68-42c6-4770-bcf0-25a5071401dd"
        },
        "item": {
          "id": "89148102-956c-4b63-a037-11a3734b24e2",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "c2e1cda5-c1ee-4110-bc21-1e978a9fbefd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94cbc8f8-b2f9-4a70-81c3-320171981976",
        "cursor": {
          "ref": "9fd870b3-c76a-4e75-b75c-a4fdfb0bc301",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "1028ce1b-e9d8-4c6b-b342-8db4fabed7db"
        },
        "item": {
          "id": "94cbc8f8-b2f9-4a70-81c3-320171981976",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f16edc11-6c4c-4718-b7dc-82bf6ecf9409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c666adda-95c1-495a-8348-adaec0173a69",
        "cursor": {
          "ref": "eb3a235c-16a8-4cd3-9cbd-487b86d2d88d",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a34e37c3-98c8-4c45-9b75-dfee8182c7fc"
        },
        "item": {
          "id": "c666adda-95c1-495a-8348-adaec0173a69",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "761d1263-8be4-4ee3-b563-b8301502a415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7250d09a-aa87-44cb-9e90-5b0f995c03a0",
        "cursor": {
          "ref": "06bd7720-3148-4e1a-be06-cf35ef2c0d42",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "cf4d5c56-0acd-4e94-ad67-dcd0bf48c7db"
        },
        "item": {
          "id": "7250d09a-aa87-44cb-9e90-5b0f995c03a0",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "fa403fdb-2dd0-44d3-9e54-3d0a5d55376c",
          "status": "Created",
          "code": 201,
          "responseTime": 870,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "fb65f90a-c318-4a01-9aa2-da0858f1eedf",
        "cursor": {
          "ref": "50c540a3-9c46-491c-9a86-eff8b0ab5dcc",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "adf98da8-9dd0-44c7-bc86-c4bcb427ee14"
        },
        "item": {
          "id": "fb65f90a-c318-4a01-9aa2-da0858f1eedf",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "8ea18b27-b051-42fa-9efa-27509e000f72",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "2dfe698e-cf86-4994-8847-c2a3efd3e78d",
        "cursor": {
          "ref": "5fc1f580-09ac-41d4-94da-1613ccc818ce",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2ccc2e10-f02f-434c-be5f-6d0db5fe7a22"
        },
        "item": {
          "id": "2dfe698e-cf86-4994-8847-c2a3efd3e78d",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "15f110c4-0e75-4ec5-aee4-9a51b640fbc2",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "3f216af7-e642-4e5b-81ee-e27d51554111",
        "cursor": {
          "ref": "18273052-d7f7-457b-975b-b269fdf493ae",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "cefe1c25-c27f-4bcf-ae0a-4e5e8257603c"
        },
        "item": {
          "id": "3f216af7-e642-4e5b-81ee-e27d51554111",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f3b73aa7-83bf-41d6-99c1-ff83537a46d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5248a0a5-7417-41cc-b249-e5aa0b32a561",
        "cursor": {
          "ref": "14029f47-a421-4b1d-b681-f56e3858414e",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "83aad0b4-b8fd-4675-a7f1-06eb7f57101c"
        },
        "item": {
          "id": "5248a0a5-7417-41cc-b249-e5aa0b32a561",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "893411d3-b337-4591-8ea9-9a60b3cf9f4e",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "6d06d2fa-0f82-4979-9fb3-660ea735076a",
        "cursor": {
          "ref": "ee84c303-e35e-43b3-ab1e-aaae84b6398d",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "88c5b67c-8783-4c5d-a40f-ecdbe27e883d"
        },
        "item": {
          "id": "6d06d2fa-0f82-4979-9fb3-660ea735076a",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "cbacda99-bcad-41d9-9902-6e58e5a841d4",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "fcce8aa6-bd55-452e-a2cf-c24734f32466",
        "cursor": {
          "ref": "da86e360-2198-4d07-b8e0-aba453155d6a",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e82143f3-b54c-4d1c-8319-4c99bfc10559"
        },
        "item": {
          "id": "fcce8aa6-bd55-452e-a2cf-c24734f32466",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "5ee4d261-4aa5-4586-8eba-49e4b0a4e38f",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "1a98763e-f6a8-48ac-867c-52ffa4d0c5a5",
        "cursor": {
          "ref": "200581bc-d651-49de-afbc-9cbe6913d99c",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "4ddd82d2-a5b1-42eb-ad62-d1ee75158e19"
        },
        "item": {
          "id": "1a98763e-f6a8-48ac-867c-52ffa4d0c5a5",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "6be5a1f8-c469-4fcb-9d34-96b7d7de843c",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "9d079cde-60a1-47ca-9200-8874a26172f5",
        "cursor": {
          "ref": "1e4b4393-eefb-48db-946a-4d1cc50f0dec",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "cd1fae78-9676-42b1-be2b-59c19e589281"
        },
        "item": {
          "id": "9d079cde-60a1-47ca-9200-8874a26172f5",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "767927d4-391a-4ba4-9b05-2ebc75a952af",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "f277a086-2a8f-49b5-9ea3-0db8ac06c602",
        "cursor": {
          "ref": "f1e0be5e-cbbe-4905-bbab-9b77b9a54df5",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "736bdbeb-251a-41b1-9c87-2f55ffceaef8"
        },
        "item": {
          "id": "f277a086-2a8f-49b5-9ea3-0db8ac06c602",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "f47f0587-e687-47b0-9bdc-e8d8b43162f9",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "bf07d91d-985a-4ae0-92bb-261055d13eb2",
        "cursor": {
          "ref": "234fded4-48d3-40bd-9f1a-ae3502e2cd63",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "df82d146-9e11-45b6-974e-20b43eb6718f"
        },
        "item": {
          "id": "bf07d91d-985a-4ae0-92bb-261055d13eb2",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "24287612-38b7-4f66-ba23-43a07c3e5f1d",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "0b776713-d2a9-43cf-b87c-68017bc44de4",
        "cursor": {
          "ref": "8f30ecbe-1e18-4575-9cc1-5b1a2079be1f",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9e7f130a-9091-4ef7-9543-9470d93e70b3"
        },
        "item": {
          "id": "0b776713-d2a9-43cf-b87c-68017bc44de4",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "c217f62b-7357-4b7a-8773-cd4556d2d8ec",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "814ede28-fd9d-4bc2-89ff-ee7d7961f65e",
        "cursor": {
          "ref": "8334d6c0-bc77-4028-b2fd-07b0e8e0acad",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d398a862-3a56-4f21-ad53-b37c5c5b2614"
        },
        "item": {
          "id": "814ede28-fd9d-4bc2-89ff-ee7d7961f65e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "56de5e5a-099c-4a15-9d1e-c759e3bedc96",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "69ba5f95-9d8a-4513-aa69-545aa5694c17",
        "cursor": {
          "ref": "5f7bdf69-6f76-493a-beeb-98ae4a8123fc",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "1f857dcd-7497-452c-a4fa-46694e173e72"
        },
        "item": {
          "id": "69ba5f95-9d8a-4513-aa69-545aa5694c17",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6bfbc394-93d2-464e-92d0-fbe6329fa960",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6d35999-85be-48a2-865f-e71ed8d6f59c",
        "cursor": {
          "ref": "23ec1f08-3c66-409b-894c-4c2b460bea15",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "aaa5a063-7293-4fa2-b568-4581a0fe6b21"
        },
        "item": {
          "id": "e6d35999-85be-48a2-865f-e71ed8d6f59c",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ab246812-9357-441f-b2e1-aabbe51d6888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "796d87c0-7055-424b-b319-13e8ce0e2ecd",
        "cursor": {
          "ref": "b0cdd3d9-88d4-404f-9e92-50f81c989c4f",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "7252782e-915f-47cf-9ac5-ada9df41e9ec"
        },
        "item": {
          "id": "796d87c0-7055-424b-b319-13e8ce0e2ecd",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "3a8b9604-2473-47d2-8509-b06c317f44f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "567790e4-dd68-4e69-bf42-3e492689fbc0",
        "cursor": {
          "ref": "14f783f8-6567-405b-82c6-1b5f6eb0e85f",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "dccdbce4-c9a0-400e-9d39-df6813ec9c38"
        },
        "item": {
          "id": "567790e4-dd68-4e69-bf42-3e492689fbc0",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "30ce063b-9993-4f4b-9eca-9a145c8ae1b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0352086-96c3-426a-9bfc-088c1e11f39c",
        "cursor": {
          "ref": "2863e166-fc27-4ba2-ad4a-7415928f1c93",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "ce8b3a4c-a31b-407c-9bd5-370822701b06"
        },
        "item": {
          "id": "a0352086-96c3-426a-9bfc-088c1e11f39c",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "40c36be3-4dca-4a79-a91c-fcbd74950b3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "430e364a-bc5d-4c58-afbf-667988908fc5",
        "cursor": {
          "ref": "9f6045f7-8bc4-4a33-ab12-8c45b8ad66d2",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "bf3b9677-343f-4d24-8770-079ce4e79a89"
        },
        "item": {
          "id": "430e364a-bc5d-4c58-afbf-667988908fc5",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "e645fbf9-abeb-41ad-ad26-9960c3cd3d7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d29ea2cc-6d9a-4874-8abd-53b40375f761",
        "cursor": {
          "ref": "9c702dc8-3626-489d-b9cd-47bbb170a76a",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "08af5f4d-589d-4ea9-9247-28e65000a03c"
        },
        "item": {
          "id": "d29ea2cc-6d9a-4874-8abd-53b40375f761",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "37500ed9-03be-4f46-9a88-fd5507f8d501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1b316bb-181d-499d-8fd2-98baa2e85293",
        "cursor": {
          "ref": "0abfdc24-4775-486e-8406-1f79997bcf14",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ca934552-91e5-4539-b78b-76453606351b"
        },
        "item": {
          "id": "e1b316bb-181d-499d-8fd2-98baa2e85293",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "098f2259-c4d9-4fb1-a88c-15b5cfe0d9cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdb8f9cb-2393-4e3c-a088-c03d765684d7",
        "cursor": {
          "ref": "954713e5-9226-438a-b8b4-3a1dbd2f4c42",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "05d216c9-5334-4484-90a9-eadae1306208"
        },
        "item": {
          "id": "cdb8f9cb-2393-4e3c-a088-c03d765684d7",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f1fb21d8-8ec1-4889-8e21-f8b623bbdc7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "723df785-82d0-4523-a51d-4b7c225a8ff8",
        "cursor": {
          "ref": "4099a492-8710-4a15-ab68-820e62eefe22",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "311a3fd1-36d4-4f93-9e21-7ac03f8c5e77"
        },
        "item": {
          "id": "723df785-82d0-4523-a51d-4b7c225a8ff8",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "26c2a790-d587-486c-a58f-76c562fe8e7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dd007a7-1610-4f9f-8cb2-9b1716342e2a",
        "cursor": {
          "ref": "8b7adea2-c35c-4765-84f5-463e1f279112",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "13d17958-485e-4b83-aa4a-335f450f2568"
        },
        "item": {
          "id": "3dd007a7-1610-4f9f-8cb2-9b1716342e2a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "6fab6110-0300-475d-86e8-1f94b5a6c5d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90b08981-57a2-41b9-89bd-958d25d1c7ed",
        "cursor": {
          "ref": "13226e34-e1b9-40fe-9b42-4e9b3630f75f",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "5fda0a50-4c17-4339-afa4-3f9849180943"
        },
        "item": {
          "id": "90b08981-57a2-41b9-89bd-958d25d1c7ed",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "1473fa3e-bdf8-4db5-9223-fbf379d92cb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f7e98f-493f-4f42-a4b1-1aa759af6f73",
        "cursor": {
          "ref": "0128d7be-14f1-4690-9107-3b64b6458edf",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b1874d9e-a3ba-4642-82c8-291cdf55fbed"
        },
        "item": {
          "id": "12f7e98f-493f-4f42-a4b1-1aa759af6f73",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "df49d8b9-9f1c-4089-8031-9bbcafaf8e38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8796eff9-4f6b-44ce-81ea-ade7fc68afc0",
        "cursor": {
          "ref": "e2705c2f-e500-4e44-bb3f-2b282228371d",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "457981d1-21a7-4a42-a5ee-aba5fc216f56"
        },
        "item": {
          "id": "8796eff9-4f6b-44ce-81ea-ade7fc68afc0",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f06b9a26-5431-4f76-b21c-2e39f82793d3",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "ee6f2a0d-93ed-4945-b290-21895a453a03",
        "cursor": {
          "ref": "c463e299-99fb-4715-b014-63d1184df137",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "72982412-fdf0-4047-b4cb-7ca2a4418ae8"
        },
        "item": {
          "id": "ee6f2a0d-93ed-4945-b290-21895a453a03",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "e96fb95b-8ebc-4150-9f8a-563ee4fb16ce",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "cf60ae1c-a53b-42ab-9ea9-17fc76dd5837",
        "cursor": {
          "ref": "7ff6fd24-96da-4cc8-9ddc-ed200301d31f",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "23b80428-1cac-426b-b6db-295cb5e37b89"
        },
        "item": {
          "id": "cf60ae1c-a53b-42ab-9ea9-17fc76dd5837",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "59032dfc-fabf-437e-8bca-88e6778dd7e9",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "25ec5a34-b075-491b-acc3-57fe2d0d6046",
        "cursor": {
          "ref": "452306e3-2c0f-40a4-af56-fa7f9e598e24",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "0678f15a-db76-44d6-b50b-ec52ad3c626c"
        },
        "item": {
          "id": "25ec5a34-b075-491b-acc3-57fe2d0d6046",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c2783850-1ee6-4975-b00e-8181f5311bf6",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "1f388fcf-16a7-4f62-ac24-b15ab3730db1",
        "cursor": {
          "ref": "128f92bd-fe5c-45e8-846f-ef548c1623fe",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d0b0d6b3-ac60-4e44-8207-9930b4db0107"
        },
        "item": {
          "id": "1f388fcf-16a7-4f62-ac24-b15ab3730db1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "8922ce8f-4f37-437d-a072-8513d4a91ad1",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "a1d1d913-bd73-4706-a150-788ed7142c2e",
        "cursor": {
          "ref": "0a0152f7-a542-426e-95fa-2ec0beefd574",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "361c1a18-c77e-496d-95f4-36a66e99292a"
        },
        "item": {
          "id": "a1d1d913-bd73-4706-a150-788ed7142c2e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1c1ab93c-f9c9-45ac-84bf-ef0bc09b0412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd5c5f0-1b37-4d54-8636-4f8e0948033e",
        "cursor": {
          "ref": "9725484f-e7d9-4a5d-8d23-7b55f7cbfa4b",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "68c3a96b-f44c-407c-813d-e3ad18c81ee4"
        },
        "item": {
          "id": "6dd5c5f0-1b37-4d54-8636-4f8e0948033e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "75b387a1-b967-4ba1-9511-2d44f0981f1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dd3dfc1-6d75-41bb-814f-88d0009e80ea",
        "cursor": {
          "ref": "9d54ecce-2979-4fc4-83c7-fd79b9db56fd",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e81a348d-efec-49c0-8f4c-a3b9ca243c7e"
        },
        "item": {
          "id": "8dd3dfc1-6d75-41bb-814f-88d0009e80ea",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8ebc7583-66bf-429d-9a34-67493ceabebb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6699825d-c618-4a17-9c81-73a2e6ee3721",
        "cursor": {
          "ref": "2cbf9c4e-a143-4f18-9a9a-7b969885f072",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "4443e897-e643-4344-8808-6b4b285fa6d9"
        },
        "item": {
          "id": "6699825d-c618-4a17-9c81-73a2e6ee3721",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "8fb85545-f744-4fd4-ac19-6d81d308ee9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e75a5280-f8af-451f-acee-c92c279367a5",
        "cursor": {
          "ref": "40b69c93-a9d6-4f06-a894-2bed261f4f76",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "abf9ccc1-2e82-485d-b195-f376353184cc"
        },
        "item": {
          "id": "e75a5280-f8af-451f-acee-c92c279367a5",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "a45edf6a-f52e-48da-8027-892de40abe32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07b2b57f-6316-4fb1-923a-832fe08171ba",
        "cursor": {
          "ref": "bafbb69f-1164-473c-b5c3-dca1ba28eb2a",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "0e47d873-cdb5-4b06-810e-92cffc51110c"
        },
        "item": {
          "id": "07b2b57f-6316-4fb1-923a-832fe08171ba",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "e6059251-c375-4b7e-8318-522e6a08bd9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55222218-913a-458d-8938-682db16748a4",
        "cursor": {
          "ref": "65361b69-c760-411b-b524-02a6c680e41b",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "dad02a96-cf28-4b35-8a12-b713044f2ef2"
        },
        "item": {
          "id": "55222218-913a-458d-8938-682db16748a4",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "7475000d-2f08-49f9-82c0-a51a644328fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18bcde22-e86c-4691-a616-9253b788561b",
        "cursor": {
          "ref": "242c5728-e1a3-4cc5-ab4e-eea5dab6a9af",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "cde56590-3b08-43a4-a367-e33276afcb25"
        },
        "item": {
          "id": "18bcde22-e86c-4691-a616-9253b788561b",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "fa55529c-3719-4f8c-8e60-cf5a058b6484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54481cd7-aaed-4558-8d52-faf2da1c09eb",
        "cursor": {
          "ref": "a3a526dc-e722-43a8-9be0-0b91a0c1b63a",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "555aa383-e4d4-4690-9fee-090198e3cd3a"
        },
        "item": {
          "id": "54481cd7-aaed-4558-8d52-faf2da1c09eb",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "7ea6fa36-44a2-4614-86bc-53c1d7db8354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66fa57c7-be62-48a9-98f5-a65c877d2184",
        "cursor": {
          "ref": "57fedce7-976b-4ee7-9c6b-db09fa5daf2b",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "2af1b17b-c006-45a6-9bcc-6670816d1619"
        },
        "item": {
          "id": "66fa57c7-be62-48a9-98f5-a65c877d2184",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f55d44be-0b43-4044-b0dd-2a2af40750e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edf367d4-7f12-4207-95ca-14617971c7e0",
        "cursor": {
          "ref": "48a37423-8ebb-41be-8e45-82bd577b8cda",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "1961a35a-fdc3-4228-be1e-bf54d3b1014e"
        },
        "item": {
          "id": "edf367d4-7f12-4207-95ca-14617971c7e0",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "a531cd89-1686-43d2-95c6-800d0d968bdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d9bd46b-9ba7-4820-af0f-2a3ba5a2cb85",
        "cursor": {
          "ref": "16a7a9b3-454e-4946-b639-cca37e7b5537",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "5b959f38-bdde-4891-b8d6-183b2fa72d70"
        },
        "item": {
          "id": "4d9bd46b-9ba7-4820-af0f-2a3ba5a2cb85",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "44a264ce-6d24-4b5e-acf9-0f81503cd8e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad9811f-5999-4bb6-b2c5-d1154c69cc86",
        "cursor": {
          "ref": "8df04679-3ffb-470b-bae6-29691630af67",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "055f6443-7a58-437b-bedf-b0914df4d7f1"
        },
        "item": {
          "id": "0ad9811f-5999-4bb6-b2c5-d1154c69cc86",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "550f792a-7f84-48c7-98d3-f7fda6d8381d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d82a1f3d-71a5-4395-8d2a-bec1e9b3efe6",
        "cursor": {
          "ref": "a90f87af-7f3a-4f03-a0f3-d9a0256c54ef",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "3f966cb7-703f-4472-b08f-3b8a2ab10b6f"
        },
        "item": {
          "id": "d82a1f3d-71a5-4395-8d2a-bec1e9b3efe6",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f67e232d-8f71-4b37-ab01-b14ce4c99a1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cecb9e63-5030-4c66-8ce7-2017f2aacb58",
        "cursor": {
          "ref": "3049a757-2003-412b-a3c5-e921d3645032",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ad70b414-37b8-4c81-942f-1cfdb2077ae7"
        },
        "item": {
          "id": "cecb9e63-5030-4c66-8ce7-2017f2aacb58",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "65f4a56c-c6b5-43b1-948f-10449af6cfdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4f8347-0767-4b79-94d1-c3b37fa91856",
        "cursor": {
          "ref": "0c94e605-a9b9-42e5-b5bd-c59126984be6",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "37962511-f63f-4825-a9fb-d2f7e6a5ddf1"
        },
        "item": {
          "id": "fb4f8347-0767-4b79-94d1-c3b37fa91856",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "4c5b6429-94dc-4812-a4ae-dc65a99d7208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a2ca586-0a7a-4cfd-a2f7-94e9cafa564c",
        "cursor": {
          "ref": "15ac052c-ed85-44d3-93a1-7d8d00fd3ccd",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5388a343-f1e1-4986-b06a-340f7e3f59cb"
        },
        "item": {
          "id": "6a2ca586-0a7a-4cfd-a2f7-94e9cafa564c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "e199bf80-f160-43ef-9c47-c6a66504bac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0bd8014-7912-4960-b876-0d6d4a704a0e",
        "cursor": {
          "ref": "5d248c15-0c3f-44e0-9820-90fc05930ac4",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "f3b1b158-f118-4c17-a131-b025e27cbf33"
        },
        "item": {
          "id": "b0bd8014-7912-4960-b876-0d6d4a704a0e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "25d66179-a9bd-421c-9e8d-47308c6a3d5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb94c47f-7df0-49a5-a0af-e8aeca0a2cf0",
        "cursor": {
          "ref": "73f2972a-ebec-4db7-b6be-9a577079f854",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9a28639b-b208-4ffb-8e4b-0b11f5a3a51a"
        },
        "item": {
          "id": "fb94c47f-7df0-49a5-a0af-e8aeca0a2cf0",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "25190149-8a04-4af1-9a16-d52cc9962aa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "228576ac-dd1f-4120-8391-81f6100b9e32",
        "cursor": {
          "ref": "73125464-5085-4088-96c0-1fb77bd4f8ff",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d781977b-ef34-491d-8643-cb94aad8eda9"
        },
        "item": {
          "id": "228576ac-dd1f-4120-8391-81f6100b9e32",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "bf95c980-3db7-4194-b679-778dd9605dec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "756e0d1e-ffcf-44d3-81d6-7b403c6f833b",
        "cursor": {
          "ref": "8933d075-a16c-4792-a9b5-0f236a0f4298",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "fcabe32b-7ee3-447e-aff7-c11cd4e75d66"
        },
        "item": {
          "id": "756e0d1e-ffcf-44d3-81d6-7b403c6f833b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "406cd367-eaa7-4351-b1dd-0d732c076cc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0a6544e-c379-44fa-898f-7fae78ed0a02",
        "cursor": {
          "ref": "115fb882-7e4c-4d75-ac2c-16f58eebb067",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "cf060d77-be9e-46ee-a9b6-ceba00c96539"
        },
        "item": {
          "id": "b0a6544e-c379-44fa-898f-7fae78ed0a02",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "a50496a2-094c-4a41-97bf-77383bc07d4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d93c7e5-f120-413f-ab22-038ed8dd8bb6",
        "cursor": {
          "ref": "9386a6eb-b9f3-4e12-9d87-6b47d0092e67",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "9f3c7573-4d8e-4ee0-9895-a8c9a299080d"
        },
        "item": {
          "id": "0d93c7e5-f120-413f-ab22-038ed8dd8bb6",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "ac853f53-ca01-47b9-bb27-caef8e163f05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d523948-b364-4e10-9911-3d039ed87712",
        "cursor": {
          "ref": "2db8c367-5c47-4ea2-ab5d-b3352d614083",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "20330252-9935-4cf6-9ccc-6646a3cda90a"
        },
        "item": {
          "id": "4d523948-b364-4e10-9911-3d039ed87712",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "666a85cc-b779-46b4-afd5-0829f737e833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca63251b-fe0d-46a4-8bbf-aa720bacf56a",
        "cursor": {
          "ref": "4b9c0e93-1427-4503-9da1-bbe183c65760",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "005dbd49-2b37-434b-b4cf-10702e98ea1a"
        },
        "item": {
          "id": "ca63251b-fe0d-46a4-8bbf-aa720bacf56a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ef133bfa-675d-4520-a4e0-f3cd65b13ad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4b7beea-0f68-426f-b906-e86c0973ccc3",
        "cursor": {
          "ref": "3f0d0675-9ffc-49b9-811d-46fba53ebe73",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "9a94b20f-2fff-4b07-a1f2-42a255b3041a"
        },
        "item": {
          "id": "c4b7beea-0f68-426f-b906-e86c0973ccc3",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "8eae6b04-b7ed-4880-b387-355877209884",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59a03c7a-8ef3-45a7-bbb1-f68c8296e2cd",
        "cursor": {
          "ref": "97a9b6c3-23b1-4bd2-affa-e4727f2a1d8b",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "fdd3e143-eebd-4047-8441-8d904e5b6d44"
        },
        "item": {
          "id": "59a03c7a-8ef3-45a7-bbb1-f68c8296e2cd",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ada90721-ef51-4080-a26e-5873219534e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8343c07b-00db-4b34-99fe-680a16e06e4d",
        "cursor": {
          "ref": "c832fc3e-5426-4dde-8bd0-c01b2334493a",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "88344795-2b77-4512-8db4-d55c6c48e38a"
        },
        "item": {
          "id": "8343c07b-00db-4b34-99fe-680a16e06e4d",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "188b93a3-d6b1-4318-8a5b-48df8deae0e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a838a869-c645-48c7-a726-26f92b29b6ef",
        "cursor": {
          "ref": "19b206be-2b73-46ff-818d-6c95d781f018",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d00a553f-6cdb-469d-b189-d26a449a78fa"
        },
        "item": {
          "id": "a838a869-c645-48c7-a726-26f92b29b6ef",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e8f5c7a6-8598-41fa-acf9-3bf3d71a941d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "859d01b1-1b08-4057-aa1f-59fcf55492ed",
        "cursor": {
          "ref": "e4b806fe-7672-4800-bdef-09f069ef7f55",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "3ef5a31f-1920-4005-8f30-1e05d6b1b7b0"
        },
        "item": {
          "id": "859d01b1-1b08-4057-aa1f-59fcf55492ed",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "af2681b8-e417-461b-80e1-62e303a3ada8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c00eb79b-815b-4783-9c24-440b2f65e463",
        "cursor": {
          "ref": "aa8a18a9-8117-4556-9a7a-e85615c95820",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e89349e0-fd77-494a-8de3-17d592dcad9a"
        },
        "item": {
          "id": "c00eb79b-815b-4783-9c24-440b2f65e463",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b3ac097a-a774-4b72-bdfb-e9727b4cfe57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29e789b4-43a3-4236-a740-fbdcb2c34537",
        "cursor": {
          "ref": "db589eef-803c-4894-9875-26e8a8347e80",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "19506b1e-992e-40b2-bab0-916dd35c07c3"
        },
        "item": {
          "id": "29e789b4-43a3-4236-a740-fbdcb2c34537",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d407f4ba-543b-40f4-880f-a1d83e0996f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd4f104b-c3bf-4f0d-b6d6-87c06521cae2",
        "cursor": {
          "ref": "efa4a1fb-d070-4002-9542-277bb3f91d3f",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "2f7f73c1-5b0a-46af-8169-bb86ecfe448c"
        },
        "item": {
          "id": "cd4f104b-c3bf-4f0d-b6d6-87c06521cae2",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "4deae1aa-fed3-4d9f-b3da-e8eeb1ccb40e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "9f719639-5f71-4d3b-b580-05fd513aaa0c",
        "cursor": {
          "ref": "5a1fc356-03f1-424b-8ef2-228d70d39a4c",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f28f278f-4c26-430a-b718-2f884de95b58"
        },
        "item": {
          "id": "9f719639-5f71-4d3b-b580-05fd513aaa0c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a75a80f2-7b53-4d92-af90-bfe551eb89b4",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f722cdc8-e1cc-44d9-a567-e7bdc63eff3a",
        "cursor": {
          "ref": "cb505722-2591-4712-93ef-646407eaf485",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c8feb98b-7f7c-4d3c-a2c3-70cbb408d130"
        },
        "item": {
          "id": "f722cdc8-e1cc-44d9-a567-e7bdc63eff3a",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "4c9371c0-eea2-4b4b-a264-481c1535fd5d",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b988f4e4-fffa-4734-a06f-7fbdcf27ea82",
        "cursor": {
          "ref": "702e3a38-e6e6-47a3-acef-6e116e1884bd",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ac73a3c1-0876-49b7-8fe3-0a02862b4f4b"
        },
        "item": {
          "id": "b988f4e4-fffa-4734-a06f-7fbdcf27ea82",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "3f9f1d22-beda-42d7-8584-b902cdc73f74",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee4c6faa-80aa-4abd-8350-d4ee2ecad82c",
        "cursor": {
          "ref": "edd4d638-ffcb-4846-98eb-c01977f08a8b",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "466686fe-b522-4f6f-83f5-927842e5d542"
        },
        "item": {
          "id": "ee4c6faa-80aa-4abd-8350-d4ee2ecad82c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "3f8d243d-bac0-4e09-9b60-34cd1b473c4a",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce835695-1d7e-4dcb-9c4e-7d60c2050d6a",
        "cursor": {
          "ref": "90da16e2-e929-4ce3-9ee5-32a3840935bc",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "284b9c4f-ca3c-4167-8dae-ea3a2e102aec"
        },
        "item": {
          "id": "ce835695-1d7e-4dcb-9c4e-7d60c2050d6a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "396f31c7-c41c-46f6-81c5-54d30c528486",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-06-14T00:38:06.565Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-06-14T00:38:06.565Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "9da1fc0c-9adf-4718-a9eb-1691b9681391",
        "cursor": {
          "ref": "4e47d233-b24f-48d5-a591-50088947c710",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "315f52a7-e810-4817-a78a-49f1c2766bfa"
        },
        "item": {
          "id": "9da1fc0c-9adf-4718-a9eb-1691b9681391",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "8c8a4272-1695-4b0b-9168-397efafbd159",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac88a35d-75da-4707-b913-2fda9c492f56",
        "cursor": {
          "ref": "63f8b36d-7951-4023-8b74-3a8a279884e4",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "cedcbe1b-406b-46ac-b9e8-587f9a7d8943"
        },
        "item": {
          "id": "ac88a35d-75da-4707-b913-2fda9c492f56",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2946f701-d2b5-4d22-b94d-41cbf3568710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e7987cd-e982-4982-aa6f-5d05af5de688",
        "cursor": {
          "ref": "4e7e1bd0-89f4-446c-b097-2426e5705b12",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "95d44f86-a592-4746-93fe-86fe8da4285d"
        },
        "item": {
          "id": "3e7987cd-e982-4982-aa6f-5d05af5de688",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c0d30580-7656-4675-878e-0af0e9e7d075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2410c69-b2a7-4b76-bc6a-5716ed786912",
        "cursor": {
          "ref": "df5e322a-d8a0-4f73-882c-d7f3b18b33d6",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "518498bc-badb-4720-b5cf-bf4dab4ec2f5"
        },
        "item": {
          "id": "c2410c69-b2a7-4b76-bc6a-5716ed786912",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "33b30e33-e2e2-4914-9cfc-7138c2b22598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a647c66-2a96-4bad-aa30-103516ffebae",
        "cursor": {
          "ref": "cc3ebbdb-71d1-4c6a-912d-246a99d19e8b",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d7399596-70bc-481c-b4ce-b7159934993a"
        },
        "item": {
          "id": "6a647c66-2a96-4bad-aa30-103516ffebae",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a2840623-1cc5-410e-a690-3a3a9fd9bebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee7f13b-5733-4ce0-9a1e-f08f6c063134",
        "cursor": {
          "ref": "4cb32d9e-f2e3-4f69-acde-db6909e9794d",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2486a1e5-bfc1-47ff-b0df-ad925ee29e27"
        },
        "item": {
          "id": "3ee7f13b-5733-4ce0-9a1e-f08f6c063134",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3abde32b-eada-47b3-aa47-fa7385f7ca98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b4be881-4d5e-4fc2-9611-da0ed538bb04",
        "cursor": {
          "ref": "8125b2d7-f4fa-4f2c-bf77-f7e3a5d756df",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "4bf037e5-e096-42eb-912a-81439dd18b34"
        },
        "item": {
          "id": "8b4be881-4d5e-4fc2-9611-da0ed538bb04",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f5f4f5bd-51ee-453f-b7cb-d141dd168414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c852e09-77f5-4137-8bc8-ef666568d5c4",
        "cursor": {
          "ref": "0a827cd9-b06f-4253-aedd-2255a1d92cf3",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "2ae99491-db3e-4b03-a2b2-a2aa8559721b"
        },
        "item": {
          "id": "8c852e09-77f5-4137-8bc8-ef666568d5c4",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "975f4559-8a70-4f8a-adc4-c5c707307dc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51d21726-1640-4e21-becd-23da304ebb52",
        "cursor": {
          "ref": "ec8dfa5b-b695-475d-8888-82a1b1883ef1",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "e5d96fc7-247a-4ae8-b43b-81520db2ca27"
        },
        "item": {
          "id": "51d21726-1640-4e21-becd-23da304ebb52",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f41e8f8a-1dfb-4438-9890-5b0798feb5ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80659c79-3178-4367-af32-2399407d6c74",
        "cursor": {
          "ref": "a34a18f0-d81b-48af-90a9-88e8a650cbdf",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "0f19b1b1-f30c-4466-a46c-bcb426e29f0a"
        },
        "item": {
          "id": "80659c79-3178-4367-af32-2399407d6c74",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d52c8983-75dc-441a-83a0-d9f5e6029620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed3179a3-922e-4b0b-b716-b1bf0b9966ac",
        "cursor": {
          "ref": "904881ae-7fd5-4348-8412-0e47c4794c26",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "adb1df4d-7813-45c6-b962-4aab4dbf37bf"
        },
        "item": {
          "id": "ed3179a3-922e-4b0b-b716-b1bf0b9966ac",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ca89ba40-c5cf-4ea3-979c-a0d54cea00b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "067198cb-1ac7-414c-b178-480019725413",
        "cursor": {
          "ref": "581675e2-5ee6-4382-8bf6-d92f35bf4df9",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "2f7bf533-a83e-4091-80d1-a47904a44e17"
        },
        "item": {
          "id": "067198cb-1ac7-414c-b178-480019725413",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "99380a54-ed44-41c9-bc51-e98644b38fcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8f480f5-8ba1-4f37-a5a2-f5ab74115b34",
        "cursor": {
          "ref": "06e7eb2c-ff6d-44f6-b6b9-e11486cf1aaa",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c0f682b1-147a-4386-882d-71801d0a2ab9"
        },
        "item": {
          "id": "f8f480f5-8ba1-4f37-a5a2-f5ab74115b34",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "41f9e272-68cb-470b-a3be-9a8828619d5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c002cc89-e227-4b8e-84e1-36fa51ee2142",
        "cursor": {
          "ref": "3c2b1082-ec2c-4aa2-ad12-31470f224812",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a2bea8a4-b4fa-47f9-840f-5ea2361cd3be"
        },
        "item": {
          "id": "c002cc89-e227-4b8e-84e1-36fa51ee2142",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0f7edcec-3c88-46d8-b770-13e4629d6ef6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f023400c-74da-4eb2-8b32-2d1b503387a5",
        "cursor": {
          "ref": "8c380c71-dba1-4d0d-805f-148ff3dd4d7b",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "615ade94-e67d-465e-a9be-642aa9b0b303"
        },
        "item": {
          "id": "f023400c-74da-4eb2-8b32-2d1b503387a5",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8312fa91-f75b-44af-bc60-088c54e44a68",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "6642ddf1-3ae6-4f0b-8d0d-0d606ef575d7",
        "cursor": {
          "ref": "a60b47fe-40cd-4e4c-86f1-e5536a93401d",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "342a5cf2-71a6-4242-8259-cf6dd1bcb3f0"
        },
        "item": {
          "id": "6642ddf1-3ae6-4f0b-8d0d-0d606ef575d7",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2f2e0188-2a54-4513-b8f6-f76b0a537cbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da277b0b-c5f0-4fc9-ba89-4b382f3e9beb",
        "cursor": {
          "ref": "86ea5a64-9f7c-4bfa-946e-429574a82b8b",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "57bff5ab-70e0-4c32-9047-b8922a1c3413"
        },
        "item": {
          "id": "da277b0b-c5f0-4fc9-ba89-4b382f3e9beb",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "96fa6301-5509-4334-8f0a-1ed088f60f87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "273e8e6c-aaf6-4136-846e-66cda22797a9",
        "cursor": {
          "ref": "1cb2c687-750c-4e99-a39f-1ca41ebea309",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "dd559612-9a49-4970-9a29-0b161fa1fcce"
        },
        "item": {
          "id": "273e8e6c-aaf6-4136-846e-66cda22797a9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8a18d536-2522-4486-8847-28d36abf0fb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d71180c2-c810-4efb-8233-ef35651df6c7",
        "cursor": {
          "ref": "a9c2084f-3f2f-4b8e-9f5b-8b3390e2cc89",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "7c3993f0-9893-455f-b665-7ad4f62a781f"
        },
        "item": {
          "id": "d71180c2-c810-4efb-8233-ef35651df6c7",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "29a29f1c-d12a-4c69-878e-4a0fe3e9d162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ca5a4a1-ef41-4c2b-b039-556b3de12cdc",
        "cursor": {
          "ref": "61c9abe2-d5a3-4cfb-b394-f1457c8d288c",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "91136d04-6dfc-40d9-be43-874220868000"
        },
        "item": {
          "id": "4ca5a4a1-ef41-4c2b-b039-556b3de12cdc",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "bce00259-5113-4e6e-a5ac-4f9de61ec793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f549c1ad-e339-4c5a-9850-bb3d720b5347",
        "cursor": {
          "ref": "77a75c80-d013-4472-8557-808fb46ecbbb",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ea575b6e-719a-4d2d-82fb-d950bb0bd7ec"
        },
        "item": {
          "id": "f549c1ad-e339-4c5a-9850-bb3d720b5347",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e224d0c8-639c-4112-a6d0-2741fa8de086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f93e4286-bc3f-43d4-85a8-aa45a75cc3c6",
        "cursor": {
          "ref": "b33d5bef-e8e9-4330-88e1-ecd885dedf11",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "0e6daff5-0648-4624-a335-34c5545632e0"
        },
        "item": {
          "id": "f93e4286-bc3f-43d4-85a8-aa45a75cc3c6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c86f9c80-20c0-42eb-99f4-6b515a66eb50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2221ccdc-919c-49c9-8e09-3295785bfc57",
        "cursor": {
          "ref": "52955c28-5e6f-45b7-a7c0-cb6064489020",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "86edafc7-a67a-443b-b976-2730075084c9"
        },
        "item": {
          "id": "2221ccdc-919c-49c9-8e09-3295785bfc57",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ed3e62d7-170b-428a-b7cd-598dae70965d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cd59814-831c-4060-8f0e-7f40f68c899e",
        "cursor": {
          "ref": "aeb66c45-6e86-4259-b778-91a8b0c7aef2",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "51df81b9-850c-4199-b672-84cf3364330a"
        },
        "item": {
          "id": "2cd59814-831c-4060-8f0e-7f40f68c899e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "afd3608e-33cc-4c46-9927-a624b50029c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4e21cb8-56d1-4762-8a4e-c4001f6f3c49",
        "cursor": {
          "ref": "184ebfa8-490b-4910-9434-a62acdf660ec",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ccb74bbb-990b-4950-9b3c-d47b693a780a"
        },
        "item": {
          "id": "d4e21cb8-56d1-4762-8a4e-c4001f6f3c49",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "98f3319a-adea-42ba-a55b-8db0191cf848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5634ca5-71ab-403b-b728-b5499f6b857d",
        "cursor": {
          "ref": "dd80d6ad-f117-45d4-bb87-fa6f719e9587",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "3ecac3a8-21d4-4cd1-af5d-e56311341cbd"
        },
        "item": {
          "id": "a5634ca5-71ab-403b-b728-b5499f6b857d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b88cb57e-8c1a-4fd5-bde5-291a5f426ba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e436ba-53cc-45b4-bee1-421764c8da68",
        "cursor": {
          "ref": "dcbea361-f966-4227-ab3b-aa9074a543bc",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "381eaea7-75f2-4373-a043-4b99ff26f8c7"
        },
        "item": {
          "id": "17e436ba-53cc-45b4-bee1-421764c8da68",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e4d561ef-2032-4b8f-bd85-07882884a370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7297e89d-73a6-48a0-a04e-7a4d19212614",
        "cursor": {
          "ref": "8bc3a59d-135f-486c-a282-8dcebdfec0d3",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "214060c4-611e-4150-bfdb-40a53b8c2b8e"
        },
        "item": {
          "id": "7297e89d-73a6-48a0-a04e-7a4d19212614",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7b4a4f5d-791e-497a-b560-9dbdca4f1afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44368201-c984-49ab-8986-996e0efe4847",
        "cursor": {
          "ref": "7f7cf15a-1b2a-473d-8185-f4aec5e1568e",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e2905265-a328-4783-a0b1-3b47e9aedf86"
        },
        "item": {
          "id": "44368201-c984-49ab-8986-996e0efe4847",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "9454e7a1-7b5e-4e68-af13-439d1b179129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33c08fb9-bd68-41d6-a1a9-2c500e5bfaaf",
        "cursor": {
          "ref": "6494c2da-a6c7-4fdb-8dd4-27579e490ae2",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "6986a285-ec9f-4871-bdea-d03a70735ab0"
        },
        "item": {
          "id": "33c08fb9-bd68-41d6-a1a9-2c500e5bfaaf",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "5ba6b3b7-ba2a-4988-83f0-dbe39db49a43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78422001-56bb-4f13-9407-f08a170a5e11",
        "cursor": {
          "ref": "cd90b1c5-1687-4630-add4-a40a9a83a27d",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "bd86b3a4-dd21-4d0c-ab80-237025df9028"
        },
        "item": {
          "id": "78422001-56bb-4f13-9407-f08a170a5e11",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "243209f4-4d45-41dd-a6c4-270352e48e05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d111b197-4c96-46a4-8c1e-31eeafe4531d",
        "cursor": {
          "ref": "d44dc9a2-c680-4fe0-b73d-89c41ad48007",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "1358b656-1fa1-48ff-835c-7b938e043be2"
        },
        "item": {
          "id": "d111b197-4c96-46a4-8c1e-31eeafe4531d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b43639b2-9a29-4fc9-b80e-8c3d33d3ea19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "428247fd-086c-47c0-b282-02a9d59d27cc",
        "cursor": {
          "ref": "fa5b2732-30b7-4042-abbb-a3ef0e6da722",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "6a8b0c16-08eb-4b78-b6ac-98231c76b241"
        },
        "item": {
          "id": "428247fd-086c-47c0-b282-02a9d59d27cc",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "7a66531e-eb79-4714-a66a-aa3cb9c351ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "731ad2c1-707d-4a13-ab2f-36788b589d9f",
        "cursor": {
          "ref": "39c86c9f-75ac-469e-8fa7-fd8db7d53990",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "7f921895-d1a3-4ee1-999e-2bc8a55b156c"
        },
        "item": {
          "id": "731ad2c1-707d-4a13-ab2f-36788b589d9f",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "42e9b482-dd03-41a3-a0d0-9470e3e8f957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ef2a55b-0d5a-4bb6-a92f-44815013fa8c",
        "cursor": {
          "ref": "04ff3f52-4c76-4164-8258-a586c8fd20c5",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "309da203-ea53-4486-a7c7-acf436ad15c9"
        },
        "item": {
          "id": "2ef2a55b-0d5a-4bb6-a92f-44815013fa8c",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "f67d5c9a-7978-4c86-911b-5675129cf2e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38f6e7e0-9ed0-4275-b18d-bbf62f9e8d28",
        "cursor": {
          "ref": "d3582ea7-fa1c-4385-9719-6a9ea4ad62ba",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "5416ad58-17b9-42df-bde6-b07b99f9218e"
        },
        "item": {
          "id": "38f6e7e0-9ed0-4275-b18d-bbf62f9e8d28",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "2a57026e-43ec-44dd-8cbb-54fe841ac9f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e67c03-5a67-4c2d-9bc9-2cfca080f060",
        "cursor": {
          "ref": "0ed07e17-537e-45f7-9038-dc92649ae721",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7c0dae69-1b9b-48af-a81c-94496369a33e"
        },
        "item": {
          "id": "17e67c03-5a67-4c2d-9bc9-2cfca080f060",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "d95dd4ff-28fa-4daf-acc2-44e739e08ab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d0f6b07-9b44-4eb1-8dcc-d858c01ea867",
        "cursor": {
          "ref": "f65908c8-bc3a-488d-ba75-a69c262e3a6f",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "5ef13062-cd4c-40f0-b7e0-a1c447396daa"
        },
        "item": {
          "id": "7d0f6b07-9b44-4eb1-8dcc-d858c01ea867",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "c89ce688-4dec-44de-8d26-5bb214b32323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b838521-8e37-454b-9e9a-031c1e6d8643",
        "cursor": {
          "ref": "1a52a212-44e9-4220-aaf0-21277dd83087",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "6ee54e1b-4071-4456-bedc-a98b223bbf3a"
        },
        "item": {
          "id": "9b838521-8e37-454b-9e9a-031c1e6d8643",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3f878c4b-b5d5-45ea-af26-024607b43002",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec7134b7-0c40-4f1b-ae02-8e51b89d58ba",
        "cursor": {
          "ref": "10d7aefe-4c92-4c55-a4d7-bf9f4a2d9888",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "58861619-2737-4507-9bc3-555ce5031611"
        },
        "item": {
          "id": "ec7134b7-0c40-4f1b-ae02-8e51b89d58ba",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d5ad4927-4b72-413d-9f42-0225dddec76a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c9dbb03-f794-40a0-8de5-723746609ee7",
        "cursor": {
          "ref": "a12435cc-5fa0-406e-9c4f-e19ee80d914e",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "58e01b93-4c9a-47b8-8473-295dc5e660ae"
        },
        "item": {
          "id": "1c9dbb03-f794-40a0-8de5-723746609ee7",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "11111afe-488d-46a7-95c0-a09d2ded7707",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "414a4532-32b1-4707-95d9-921e428986c9",
        "cursor": {
          "ref": "57012634-21a8-4937-b1dc-4ea6dd4ffe39",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c6905f4e-d77d-4017-8d57-8ce51d0a84be"
        },
        "item": {
          "id": "414a4532-32b1-4707-95d9-921e428986c9",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "057e1696-e047-46d6-8dd2-77a9f2c18ac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0a5495c-fa47-4d28-af8a-6a779fef1900",
        "cursor": {
          "ref": "d2344d8d-5237-46af-b43b-d0e23e1de301",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "45536fdd-c888-4c84-a5b1-64a3388cc2cf"
        },
        "item": {
          "id": "c0a5495c-fa47-4d28-af8a-6a779fef1900",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ed88ecb1-2f74-4896-9f3d-75dbc3cfc593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e5439c-6c28-44dc-8a8c-c4b49f9e3e5f",
        "cursor": {
          "ref": "819bbd8a-5013-44bf-9fc2-ec995215144c",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "fd4da964-719b-463c-8f21-5784e511b0f1"
        },
        "item": {
          "id": "23e5439c-6c28-44dc-8a8c-c4b49f9e3e5f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "8f27fa74-8e36-4d4f-a7b7-a6b9781e0d3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8e51772-8626-4bb9-b79b-ce318a7607cc",
        "cursor": {
          "ref": "c7191a47-a821-4586-920f-fa8aa9963aee",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "6d7cbb4d-644d-4150-8347-7931fa136d77"
        },
        "item": {
          "id": "b8e51772-8626-4bb9-b79b-ce318a7607cc",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "b750e2b7-8f0b-47a1-bba2-74fe69659382",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "3c07df2b-a439-46f2-bcf7-a4745f599b5b",
        "cursor": {
          "ref": "62648e42-7508-4847-a104-8259aba057ac",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ef62b911-0481-4e16-8cf1-4f526c61050b"
        },
        "item": {
          "id": "3c07df2b-a439-46f2-bcf7-a4745f599b5b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b9ab54ad-0b01-4371-a701-721960570e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ac3298-556a-4ef0-b63d-adf3813c41fa",
        "cursor": {
          "ref": "d000074e-88cd-4672-8ef3-3d214093cb07",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f8a24a10-e40d-4ddd-abbe-1e3123fd00b8"
        },
        "item": {
          "id": "41ac3298-556a-4ef0-b63d-adf3813c41fa",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "a4e36b49-6f93-4a4d-9175-21910248499b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f73e4ce3-8e48-40dc-9d3e-1b2b33f2fcc9",
        "cursor": {
          "ref": "9aa9362b-b3dd-4b33-94a8-0df57fe538d2",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "320414df-4614-478a-a16c-82192cd1f538"
        },
        "item": {
          "id": "f73e4ce3-8e48-40dc-9d3e-1b2b33f2fcc9",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b8837493-b14e-40bc-9850-05f5daf1f661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf7830f-f3d6-4524-8a12-1a94d0750ce4",
        "cursor": {
          "ref": "b8886010-c7b3-4a39-bfc5-c9f28708adee",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c18fecae-1d61-4e71-90a9-aedc2de082f7"
        },
        "item": {
          "id": "abf7830f-f3d6-4524-8a12-1a94d0750ce4",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "7b3cb429-e09c-4099-a96a-4fb9f7143fa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20095db4-7725-4dfd-9f7f-6d3f86f1b179",
        "cursor": {
          "ref": "277f802d-a9aa-4fd3-b59e-f02c401b0f29",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "77df80f9-8717-437a-8539-ea714eeb895a"
        },
        "item": {
          "id": "20095db4-7725-4dfd-9f7f-6d3f86f1b179",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "161184bf-7d28-4caa-84b3-90d76353e475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91f63b18-5d3d-4790-858e-0e0d9ede84bf",
        "cursor": {
          "ref": "18f23847-0653-4c82-bcf5-4b1cafdfef24",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "1cd254d5-0f81-49d2-8b79-f6c8f4698713"
        },
        "item": {
          "id": "91f63b18-5d3d-4790-858e-0e0d9ede84bf",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "b9772af3-cd67-4d69-802b-bee2e66c7558",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a46abcf1-3763-4297-8cd0-455f977cd3c9",
        "cursor": {
          "ref": "b81eb0c0-7018-4461-b4b8-ea49c515b6b3",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "5ac00b24-d8aa-4066-8b74-7f536305a856"
        },
        "item": {
          "id": "a46abcf1-3763-4297-8cd0-455f977cd3c9",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "13401e52-f1c9-464c-b408-4004f5c70624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab233d84-07ad-4ae0-ac00-00f6628149a6",
        "cursor": {
          "ref": "5c2e0393-6967-4a9f-8836-2554b563e66c",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "9319c49c-01d4-4d6f-8752-b35c6d88a3a7"
        },
        "item": {
          "id": "ab233d84-07ad-4ae0-ac00-00f6628149a6",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "14cce21e-a989-4295-9642-24c19ed411d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a0fdc37-4f59-4037-94b9-4c208d5b28b4",
        "cursor": {
          "ref": "99e77b67-a4a5-40b8-8c24-9c608d4c06f9",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "29734bb5-8465-4aa9-bfab-be3ada4a27f6"
        },
        "item": {
          "id": "3a0fdc37-4f59-4037-94b9-4c208d5b28b4",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "f822fed7-22e2-444d-b91e-5765bc4bdc9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c35a22b0-fd73-43c6-b2d9-61fd45a3e5d7",
        "cursor": {
          "ref": "10913517-e1ed-4c67-b392-180dcfb517b3",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "1c147aba-a9cd-4694-9107-636155d91288"
        },
        "item": {
          "id": "c35a22b0-fd73-43c6-b2d9-61fd45a3e5d7",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "3ae36eca-9666-4c52-91cf-214f41f0f91e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbd9167e-d3e5-4675-8bcf-ccff76aafc88",
        "cursor": {
          "ref": "df46cc01-0e85-4ba2-bb16-c3c6e772adb4",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f404bda9-f223-441f-b599-9af53508b581"
        },
        "item": {
          "id": "fbd9167e-d3e5-4675-8bcf-ccff76aafc88",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e2aa9b36-45f9-48da-8434-332e7429941b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e2dcfcd-790d-4fe9-8fa1-bdcfb9423766",
        "cursor": {
          "ref": "4a849331-1fbe-47f0-aa32-db4dcbff0183",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "cdadd819-a84d-4cda-9d0d-3f571f044416"
        },
        "item": {
          "id": "2e2dcfcd-790d-4fe9-8fa1-bdcfb9423766",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "377d13f4-febf-4976-a0fe-abad8477dd76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e9e3870-8129-4cb8-a022-2120b8841508",
        "cursor": {
          "ref": "08c69a95-5a6d-4ba0-8246-be14ed43cdba",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "caa3559e-d34a-446e-86d1-ca095211e0a0"
        },
        "item": {
          "id": "6e9e3870-8129-4cb8-a022-2120b8841508",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c9b05ebe-d86e-4c8a-9814-b6dfc6e8722d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac4eec5d-aec1-4724-a2a8-7578df7e8e9c",
        "cursor": {
          "ref": "875d91af-5760-4ab1-aefa-b983fc33089f",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "2303ab62-a417-4369-86a2-177d0ac7a740"
        },
        "item": {
          "id": "ac4eec5d-aec1-4724-a2a8-7578df7e8e9c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "445f1e56-8170-4fc9-8d0c-b2f5a89b6035",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "634fef7e-8706-477b-be2b-d9050e230ba7",
        "cursor": {
          "ref": "f05ded88-d5f3-4aca-a717-f04955d5548e",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ff4543e9-e9bf-4c67-8bab-2a354701fd5e"
        },
        "item": {
          "id": "634fef7e-8706-477b-be2b-d9050e230ba7",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "42e82ed6-07ce-42ab-adc4-f84eee4995e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "648abfa6-e8a2-4ae4-a0f9-c69f1d192d36",
        "cursor": {
          "ref": "8ab0057a-f64a-4a04-999d-0dc3dff4c082",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "95a2149a-0bea-4479-a862-c97b48677386"
        },
        "item": {
          "id": "648abfa6-e8a2-4ae4-a0f9-c69f1d192d36",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "83a07442-3dcb-4477-bbc1-e721892d5ec0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0b7b938-cf7c-4bb3-ac2f-0dc1ff09c40a",
        "cursor": {
          "ref": "681056f8-327e-434f-9282-b766bef74c0d",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "12860296-d104-478a-9626-1dcca8bf3205"
        },
        "item": {
          "id": "d0b7b938-cf7c-4bb3-ac2f-0dc1ff09c40a",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "9d3be6ce-901c-4165-980c-ac706e1de418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a41ab97-b28c-453f-ae22-492d53a1800e",
        "cursor": {
          "ref": "2f1914cc-4ab9-4018-94fd-cebd5eb85877",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ad3f826f-6c02-4f50-8aed-5e3235db031e"
        },
        "item": {
          "id": "2a41ab97-b28c-453f-ae22-492d53a1800e",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d7b5c5cc-4ec8-4b1c-b124-3243565ed056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42f7a8b0-b245-4b38-bd08-3c0e1aa60c03",
        "cursor": {
          "ref": "0f39b657-a9ff-43ae-b455-37c1fd3996b7",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9ec694e1-5c07-42ff-bae6-6a89990436a0"
        },
        "item": {
          "id": "42f7a8b0-b245-4b38-bd08-3c0e1aa60c03",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ff818bc0-e375-4942-bb4b-aa41c70fa5dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ab9efcd-855b-4660-a198-21575205f474",
        "cursor": {
          "ref": "546a58f8-6aed-4966-8a80-ae273bf04ec0",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "edeb0011-de55-43f0-abf7-298a15726619"
        },
        "item": {
          "id": "1ab9efcd-855b-4660-a198-21575205f474",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "de42ee72-6e2b-44a3-83b0-6681d5a059a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94c8ab57-c9a3-43f6-96a4-20d0c647762e",
        "cursor": {
          "ref": "09e263ed-76fe-43f7-a1d4-3adfcc0d978f",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "edc187d0-e9e4-4b31-aa3c-dee613bac77c"
        },
        "item": {
          "id": "94c8ab57-c9a3-43f6-96a4-20d0c647762e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "2d3465c2-cea9-44c4-acfd-541bd5b0067f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c4ec88d-3712-4875-a361-fb352b2bd537",
        "cursor": {
          "ref": "8add77aa-d38b-481f-95e3-1f265192db0f",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3a75bef9-3e37-4431-b77d-7c292e322ac4"
        },
        "item": {
          "id": "1c4ec88d-3712-4875-a361-fb352b2bd537",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "4af4ace6-8a80-4954-8cee-d3c5efaba1ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3c040c9-62e6-443c-b210-944af4d83f3a",
        "cursor": {
          "ref": "ea2e34c3-3a90-4c71-b912-4ab9bf6475a1",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "49e85284-bfcd-480a-af64-6e116cbe7597"
        },
        "item": {
          "id": "e3c040c9-62e6-443c-b210-944af4d83f3a",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "87fd25aa-7a4d-4166-945f-f2e2e0dff235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b348e618-b956-4f48-b527-c067df3974fb",
        "cursor": {
          "ref": "5f6ede2f-1b9c-4b30-92d5-a57bd2ddb93a",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4713b930-66d0-424b-97cd-2dd592141ab5"
        },
        "item": {
          "id": "b348e618-b956-4f48-b527-c067df3974fb",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ef986bb9-f7f8-44f3-b912-1a6104fbd9e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33d20f15-76ac-466c-956f-5c87ea58b6c8",
        "cursor": {
          "ref": "201874ba-3d82-4187-aba5-91d11a76b3aa",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "9de172b3-e6a0-4ffd-84a5-ead2e4ea5354"
        },
        "item": {
          "id": "33d20f15-76ac-466c-956f-5c87ea58b6c8",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "afdc4016-7443-4ddb-8288-2aa214f849b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "569e2413-7e17-4b8b-9117-25c607284144",
        "cursor": {
          "ref": "413cdb22-3ebe-42f9-b1e1-b8fab1176927",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "fef98317-ba0a-49ab-9578-f6ca3014e9f0"
        },
        "item": {
          "id": "569e2413-7e17-4b8b-9117-25c607284144",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "0d8f0e87-5780-42c0-8184-9c42cd4caf15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce28579e-6245-406f-ac41-6a2cc0b78db4",
        "cursor": {
          "ref": "d16ac35c-0eed-4f46-9a95-05bda1883bbb",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "8e51f106-c847-466f-abd2-5d2d14fd5c8b"
        },
        "item": {
          "id": "ce28579e-6245-406f-ac41-6a2cc0b78db4",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "5c57364a-220a-4a26-946c-5f6c7d07a974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5be33216-b5ca-4356-99c4-99fa86a46f52",
        "cursor": {
          "ref": "4864d848-8911-402d-95f7-cb6441b2c4a9",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "235deb55-a66a-4078-a116-b24ce18d97da"
        },
        "item": {
          "id": "5be33216-b5ca-4356-99c4-99fa86a46f52",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5fb83925-6a00-40bd-b0a4-18928e1940d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3df5b85-a512-4f64-bdd7-1583e0938a66",
        "cursor": {
          "ref": "9417f25d-3842-46e2-b466-839f1419c67c",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "65e3e014-60f5-401c-99be-3d21c0a715f0"
        },
        "item": {
          "id": "e3df5b85-a512-4f64-bdd7-1583e0938a66",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "43e77b7d-6f74-41e7-aa20-8b74787782cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c9c1da7-4fc0-41d1-90d1-166a1fa2a989",
        "cursor": {
          "ref": "ee1b8380-6576-4499-9489-5dc6e3107657",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "f54dbb4b-95ad-4bdf-8006-e4e28b39e5f4"
        },
        "item": {
          "id": "9c9c1da7-4fc0-41d1-90d1-166a1fa2a989",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "110a4b09-9b72-46b2-b9c4-df29230707fa",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "c876c42c-c2c0-4ab9-b6e4-ad4e2cd78c46",
        "cursor": {
          "ref": "ab57eaac-d5b5-491d-8586-55ea21a0ad33",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b77cd854-e509-4e57-8232-fe50026e376b"
        },
        "item": {
          "id": "c876c42c-c2c0-4ab9-b6e4-ad4e2cd78c46",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "cf65e418-44ac-4a6c-91c5-1ec682f45499",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "bc0c3844-8a6a-4110-a354-0951c1837cfa",
        "cursor": {
          "ref": "40de3526-d191-4cd2-bbe1-a55b7b9d938d",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b4733d59-6b42-443c-9d03-4de5ab08d3b1"
        },
        "item": {
          "id": "bc0c3844-8a6a-4110-a354-0951c1837cfa",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "c72e0212-31b6-4bae-a3cd-46e8db3476d2",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "b5373b04-490b-4a6b-a25d-87fde00d4334",
        "cursor": {
          "ref": "d9479eb1-ecd1-4ef5-8140-a68e05d50bb0",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "cd4cd408-be2c-4977-b279-a8e15261a486"
        },
        "item": {
          "id": "b5373b04-490b-4a6b-a25d-87fde00d4334",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "635a1920-c4c6-4b44-ab71-c25787791d53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06c63190-02bb-4ec0-b59a-da42c7ece5fd",
        "cursor": {
          "ref": "ab927972-f57e-4b59-87ec-2b5c2f0f2ce0",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "cd181b22-fba0-4e00-81df-4a8b4aa1c073"
        },
        "item": {
          "id": "06c63190-02bb-4ec0-b59a-da42c7ece5fd",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f6ecaac8-8caa-48f5-b3d2-b47744e821b6",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "15fb0c36-f2bc-4ad5-9157-8502c90ed187",
        "cursor": {
          "ref": "3e41e404-402e-47bd-955c-22554bda954b",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "2332582a-ff03-407e-ac2f-2bb5ead30a14"
        },
        "item": {
          "id": "15fb0c36-f2bc-4ad5-9157-8502c90ed187",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "106304b6-ecdd-4ff9-b581-3b83aa32c3d0",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "6c5bad56-5e88-4253-81b2-437e5fddda9b",
        "cursor": {
          "ref": "2b016dd1-7e0b-4b9a-8c6b-38afd6549019",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "4ad81799-231a-4133-b8ef-02698e3c7848"
        },
        "item": {
          "id": "6c5bad56-5e88-4253-81b2-437e5fddda9b",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "56420553-ffc8-4da7-acac-08b27697e5a7",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "ef1023b1-1dfa-4641-8e00-73c462c54dcc",
        "cursor": {
          "ref": "78594f66-7166-41bb-89c1-ed79907a077b",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "7a1b400a-ab88-43ad-b332-f0447486c5a8"
        },
        "item": {
          "id": "ef1023b1-1dfa-4641-8e00-73c462c54dcc",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "6eb08329-7b88-4757-8b14-4b42cc592c58",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "66caadba-6bf0-4a41-90f0-e67f1cab3eb4",
        "cursor": {
          "ref": "707fdc75-18fb-4e22-ad11-c957319597fe",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "55f31faf-ee9c-4e3f-b2ed-012eba3cbb15"
        },
        "item": {
          "id": "66caadba-6bf0-4a41-90f0-e67f1cab3eb4",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a5b42286-f83f-47e5-94f1-08b8b77284e5",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "db77311e-4416-4fbb-9585-7fa7b6c52cbd",
        "cursor": {
          "ref": "a39e95ef-f5b7-4055-8aae-912e3e82a770",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "fd5c4503-8fe8-42bc-9ab3-e0893102eb15"
        },
        "item": {
          "id": "db77311e-4416-4fbb-9585-7fa7b6c52cbd",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "264b4f62-01b4-4bc1-9188-0f7d0e0e0d2c",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "baa7df6c-dc76-4a61-912b-d2847c2836a0",
        "cursor": {
          "ref": "99c94330-61f5-43fc-a660-076027cabc4d",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "60349bee-0beb-4294-aa88-e2580138a3f6"
        },
        "item": {
          "id": "baa7df6c-dc76-4a61-912b-d2847c2836a0",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "37e87408-c45b-4b1d-bb9b-953e84ca08fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5df67b2-4e77-4644-8d84-0a9527991619",
        "cursor": {
          "ref": "4b80e73c-79d1-47a9-9ccc-5531f84d3766",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "0f917f4c-c4ff-4b5d-a948-735d4f073b09"
        },
        "item": {
          "id": "c5df67b2-4e77-4644-8d84-0a9527991619",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "7109f440-4b67-4b58-965a-6259cf937d14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8b80d51-fcda-4cb3-8798-3812e81c3d8f",
        "cursor": {
          "ref": "3258d956-ea42-46ad-8369-7970b7a65185",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5c865df1-225d-4a56-9903-62be86221b0b"
        },
        "item": {
          "id": "d8b80d51-fcda-4cb3-8798-3812e81c3d8f",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "32fbed4e-d762-493a-8eb0-fb269930e28d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4617a31-aca9-4c9e-9645-b286bc80492f",
        "cursor": {
          "ref": "02646a39-dcc4-4fcd-bf26-0634e83b28ce",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "9760b114-c86b-41cf-bbfe-69440826395a"
        },
        "item": {
          "id": "d4617a31-aca9-4c9e-9645-b286bc80492f",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "79c1dac5-08d3-4743-82a8-5780713defa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2c7a5bc-dd8c-4728-9cb8-4d3e7519e7df",
        "cursor": {
          "ref": "eb13f3e0-a3ae-4ed1-a506-6deecc41852f",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "4aa01d7f-84dc-4251-909f-315fc93ac8d8"
        },
        "item": {
          "id": "a2c7a5bc-dd8c-4728-9cb8-4d3e7519e7df",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "05a3cb98-2c1f-4834-8343-9062bc4a0024",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2db4776e-f097-4d74-8cb8-958de99546b6",
        "cursor": {
          "ref": "1373109a-b603-4028-b390-a6aebe3f3444",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "805e8e06-ae74-4b6f-8faa-6a30120b2680"
        },
        "item": {
          "id": "2db4776e-f097-4d74-8cb8-958de99546b6",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "5a9e3d57-cfac-4297-b7b5-0ee9f3802516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ffb6eed-73c9-4e52-a367-43006a2e94a4",
        "cursor": {
          "ref": "7fc7d611-5f07-4b78-848e-e87537aecac2",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "8af1096d-4052-42c0-a42d-646b3960e05c"
        },
        "item": {
          "id": "1ffb6eed-73c9-4e52-a367-43006a2e94a4",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "460494e8-09d0-4a78-b379-12ce39cfda76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4d931c4-8ba6-44fa-a9f6-6873480b578d",
        "cursor": {
          "ref": "b2b9b137-6511-45ad-ba83-15d9edfc29f1",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5d12d2df-e3f9-4032-97a1-d488c3e786f8"
        },
        "item": {
          "id": "b4d931c4-8ba6-44fa-a9f6-6873480b578d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "08988dbe-a77a-431a-b6b3-10962b7a4a7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ccc12db-69a0-4bb4-a122-45837934df99",
        "cursor": {
          "ref": "c5954903-8920-48b9-91ac-beb508979040",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b66df833-77d6-4b36-9c3d-9187d0a15431"
        },
        "item": {
          "id": "6ccc12db-69a0-4bb4-a122-45837934df99",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "8bdfbeb0-3130-4ff2-b37e-92f5629b5a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1ae0cce-ef5d-4912-a7ed-37614220455a",
        "cursor": {
          "ref": "89897d5c-b5fc-4cdc-b1f3-bc097ff5e1d8",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d36315d5-fb49-4e38-addd-217ce9cc8755"
        },
        "item": {
          "id": "c1ae0cce-ef5d-4912-a7ed-37614220455a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "36853738-b59e-43bc-8762-3298f87ac95f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdafd675-ab64-47d0-a06e-d4d24788b489",
        "cursor": {
          "ref": "15671621-0eb5-480d-a0d4-e4f086cef65b",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "46feb204-5c04-4931-94c0-4e28c37ad997"
        },
        "item": {
          "id": "cdafd675-ab64-47d0-a06e-d4d24788b489",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "8ef88b65-efda-49e7-8288-993088c45eb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f3397e7-1eba-441a-b36e-ee3382df4ee1",
        "cursor": {
          "ref": "a4836d93-acb7-4a1a-9936-371dca23e59b",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "a804ee87-95af-40c2-bd54-044cdceee56e"
        },
        "item": {
          "id": "0f3397e7-1eba-441a-b36e-ee3382df4ee1",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2c880751-9df9-4d34-af53-ff1b319f9b78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e0c0a9-e7b3-4ffc-8179-4c365049de58",
        "cursor": {
          "ref": "a49d7937-90ee-46af-b9f4-207e3c64b9b8",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c3dd4bc6-e3f5-4ed1-97cd-d0ba5f9fa112"
        },
        "item": {
          "id": "16e0c0a9-e7b3-4ffc-8179-4c365049de58",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b3d80992-71d3-4f48-8c89-8df7919ee91d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f232095-abf1-45a0-ab6b-ef9c8a47f203",
        "cursor": {
          "ref": "b1931405-bc3c-4e91-9fde-6d3a36c18e59",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "e8654635-66fa-4f08-b2e9-09ec9d4f5ce9"
        },
        "item": {
          "id": "6f232095-abf1-45a0-ab6b-ef9c8a47f203",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "3675232c-e2a2-4bc4-a0ac-6e8c2afb4a25",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "33d8d42e-596e-4b37-83d0-b544b27b9b50",
        "cursor": {
          "ref": "2634bb83-209e-410d-a8c5-a3f465e35b0d",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "45898bc6-cfd8-4728-9a77-8649269f2f6a"
        },
        "item": {
          "id": "33d8d42e-596e-4b37-83d0-b544b27b9b50",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e164530e-f35d-49bd-b2d1-a85e7ba70670",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "167f7263-66e8-4dc6-9978-0769d4957430",
        "cursor": {
          "ref": "d4be4cd6-20a8-4f8e-b161-e44881667b99",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "c581f7bb-cf20-4cee-a6d7-bc04fc620035"
        },
        "item": {
          "id": "167f7263-66e8-4dc6-9978-0769d4957430",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "28c5e8a2-4ef1-4607-aa98-204bfac50f5d",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "cf1d06b0-39b2-4a18-910a-90a5b432604f",
        "cursor": {
          "ref": "f0ed168b-bd78-4cbf-a0c1-0c858cdab351",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c846c634-ebcd-424e-9374-645cbaf863d7"
        },
        "item": {
          "id": "cf1d06b0-39b2-4a18-910a-90a5b432604f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "f0c6b2fe-deb7-4ea0-8598-b81e0fd55aaf",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "fd303b8f-0482-4c97-83be-c7d36b91248e",
        "cursor": {
          "ref": "59f318a3-125e-4d7d-b182-f617b5d7520a",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "6fc6c057-3c6d-4c74-a058-ee44b699057f"
        },
        "item": {
          "id": "fd303b8f-0482-4c97-83be-c7d36b91248e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "33581488-fcaf-4db6-83bc-4f7586f8c19a",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "34dd9e20-6279-4a64-8d0f-e0342658b114",
        "cursor": {
          "ref": "e01c925d-8c23-4c99-9926-eb1e85b74edc",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c99d89ce-8e3c-448f-aaf7-8be156089d30"
        },
        "item": {
          "id": "34dd9e20-6279-4a64-8d0f-e0342658b114",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7596ac2b-d6e6-4295-90f8-7af4423a5203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccd3d9fc-c6a1-4cc3-a73b-0523fdb1b7ed",
        "cursor": {
          "ref": "cc743216-c67a-46ff-950c-7037a7c75961",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "cdcb1c81-95e3-4795-9395-9eab066a95f3"
        },
        "item": {
          "id": "ccd3d9fc-c6a1-4cc3-a73b-0523fdb1b7ed",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "75347a26-2418-4cf6-ba71-460f02d28d4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8414e7a9-7eea-4ed4-9d54-348fe166fe70",
        "cursor": {
          "ref": "a8af844d-55a8-439f-a22c-e67a39084690",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "1176f336-6d7d-464c-a399-6258019bbd25"
        },
        "item": {
          "id": "8414e7a9-7eea-4ed4-9d54-348fe166fe70",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "fed17c1e-1889-4796-9839-cbbabb1cdb7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a23a18-b4a8-4f10-8b5e-ae0dc8e42bf8",
        "cursor": {
          "ref": "69f538b2-3183-4d11-a922-b38e768425ab",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "050e9735-e5f8-4e72-8483-1b068c07f5ef"
        },
        "item": {
          "id": "d1a23a18-b4a8-4f10-8b5e-ae0dc8e42bf8",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "33ef2d0d-3eb2-407c-a274-9fbba152801d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96c88445-e8ae-4ba5-aece-665769f081ae",
        "cursor": {
          "ref": "c13e946d-45f0-464f-b0d4-50333cdf5ad7",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e7f245bc-84b4-418e-9b5d-588eec0ea19a"
        },
        "item": {
          "id": "96c88445-e8ae-4ba5-aece-665769f081ae",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "9720ec87-92d6-460f-b22c-1d1ee76a403b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1906722d-f06f-4216-9f8d-e72776bfb5c7",
        "cursor": {
          "ref": "5c1f5bf8-a754-4c31-8996-a808017dedd7",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "1e5c16fc-7a47-4a61-a7cd-4bcacf9ddd20"
        },
        "item": {
          "id": "1906722d-f06f-4216-9f8d-e72776bfb5c7",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "8972dbe3-7ac8-4a65-ab2f-481ed2f9d7b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "467f4bc0-1d26-4300-b0ce-f1eab0b88aa4",
        "cursor": {
          "ref": "5b47d583-1c9a-41ee-955b-4cd7b8e19980",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a8bf892d-dd18-485d-a74b-0b8c681883fb"
        },
        "item": {
          "id": "467f4bc0-1d26-4300-b0ce-f1eab0b88aa4",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "df04857b-54da-412e-ba88-1745c03551a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e156e8e3-f95e-4b04-b674-e74dc8a2c86e",
        "cursor": {
          "ref": "799f4f63-f95c-4562-9999-a83fc62c0afc",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "bcfe7b75-e846-4fae-83ca-7b11692d7f1b"
        },
        "item": {
          "id": "e156e8e3-f95e-4b04-b674-e74dc8a2c86e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "f95f8404-1328-4e8a-8579-6d3a6ef920f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1322940b-c5cc-427e-8811-2c8c08ceddcc",
        "cursor": {
          "ref": "cb9b79ae-05e1-415a-9a32-0f2695c1c47e",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "5fdccd6a-54dd-4670-9822-8561b6d29a85"
        },
        "item": {
          "id": "1322940b-c5cc-427e-8811-2c8c08ceddcc",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "adfc1fec-eec7-4654-a96d-2e6511aeeeea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "817a0c13-e858-4686-be52-77e97cdcd9c1",
        "cursor": {
          "ref": "48c80262-6ddb-43b5-b008-a20ad2fddd52",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "42e3b0c1-f189-48b9-85d4-edd7475473a1"
        },
        "item": {
          "id": "817a0c13-e858-4686-be52-77e97cdcd9c1",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "aea0d6b4-9992-4d17-b943-2c7a04e8d236",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82bd1c2f-6f5c-4971-896f-0ac182a5b483",
        "cursor": {
          "ref": "932b76bc-5c8d-447e-abfe-e0d01fab49c1",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "4bc006a7-d983-42ba-9358-b3ebffd08a20"
        },
        "item": {
          "id": "82bd1c2f-6f5c-4971-896f-0ac182a5b483",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3c745b62-ac31-416e-8bd1-baad0c14f500",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58afac00-3013-400d-9c48-6478abe713ea",
        "cursor": {
          "ref": "f0dc0148-c2cf-442a-8e8a-3f6713084981",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "b6a9c218-ec4d-4a1e-829c-d3271f5c5d8a"
        },
        "item": {
          "id": "58afac00-3013-400d-9c48-6478abe713ea",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f9a80a51-502c-456e-b091-66f33a88eaa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73b127d-5dd8-4815-91b9-b2263b66b20c",
        "cursor": {
          "ref": "5463d8dc-e084-4a07-8c9b-426468a7cf59",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "391c9e09-242b-42c4-8f9f-3f066b49803f"
        },
        "item": {
          "id": "a73b127d-5dd8-4815-91b9-b2263b66b20c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "5fa05ae1-70fa-400e-8e77-2753936a6696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8313517e-0627-42d2-bfe6-68422d2ec2b7",
        "cursor": {
          "ref": "00fce5be-8e37-47bf-bded-c8f46be2ab61",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "002ca0d0-23be-46a8-a3b3-f82086344d24"
        },
        "item": {
          "id": "8313517e-0627-42d2-bfe6-68422d2ec2b7",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "b882c858-3bed-40dc-81bd-5b686ee6d50b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d08c56-823a-47a7-948c-e60371d6fa6a",
        "cursor": {
          "ref": "6c9bc5db-4d8f-4a01-acc1-da1369da5d4e",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "60f5298b-4649-4d84-a5f6-e562fb75289a"
        },
        "item": {
          "id": "97d08c56-823a-47a7-948c-e60371d6fa6a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b329d0e6-ea38-4ca2-abb0-51c9d9fee559",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74ed9f53-1576-4913-8d5c-c99a24142616",
        "cursor": {
          "ref": "c0477c3d-7faa-486a-adc6-4f4826308018",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "c7898246-8f85-4f01-a5cb-d253a611bc63"
        },
        "item": {
          "id": "74ed9f53-1576-4913-8d5c-c99a24142616",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "bfd347dd-a42e-409c-893f-f60eacd46d97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98a8cb19-7378-4751-a65d-1802b93c0446",
        "cursor": {
          "ref": "961907ad-068b-49cd-ba41-1892007d444e",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "07005974-e929-4413-b942-0dc2966c5a9e"
        },
        "item": {
          "id": "98a8cb19-7378-4751-a65d-1802b93c0446",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "820d8c55-6575-4a4d-9c4f-d958752c8ae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a519e701-24ea-48a5-8c9f-56306487214e",
        "cursor": {
          "ref": "bf062231-e7fb-4312-933e-a69fd6cea433",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e0a29bdc-3573-4b26-8778-6f466c853b86"
        },
        "item": {
          "id": "a519e701-24ea-48a5-8c9f-56306487214e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "cf539dee-c802-4404-aab1-835d95748469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d375a741-5175-4e03-88a0-15c4750dd380",
        "cursor": {
          "ref": "555460cd-525b-4d99-b838-6888bcd11371",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "55f99c00-597b-4a44-a372-5d27e2c1a323"
        },
        "item": {
          "id": "d375a741-5175-4e03-88a0-15c4750dd380",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "45871b4f-f6bc-4de2-a766-bd96eba2374f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e09d740-5067-46f6-9616-ab17a5ae10c3",
        "cursor": {
          "ref": "a6ab203c-2ee4-4b51-aff4-0f0663b442be",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "bd853949-eb80-453d-8f48-34c49bd1d159"
        },
        "item": {
          "id": "8e09d740-5067-46f6-9616-ab17a5ae10c3",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "587b6d1c-2fa4-4816-bc28-f9c149bc654b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53da2c19-f8f7-4ac4-b754-4ad0e0b3b829",
        "cursor": {
          "ref": "63843265-d5dd-47a4-acf3-e57a3eea1b95",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "38d7112d-74b9-49e5-9c5d-50b31d9c8fc8"
        },
        "item": {
          "id": "53da2c19-f8f7-4ac4-b754-4ad0e0b3b829",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "9fdc3e22-9e07-4bfd-865f-617975f3b084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98edd577-08e3-4f42-9498-849ac06157ff",
        "cursor": {
          "ref": "e405bac3-e60b-4127-aca5-05210962c4f6",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "757810ac-bb80-4d2c-b048-00097b42282a"
        },
        "item": {
          "id": "98edd577-08e3-4f42-9498-849ac06157ff",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "dc50e1c8-9b85-4961-9543-d3df7b636923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ce178c4-76fc-49d3-9397-d8c35531a64a",
        "cursor": {
          "ref": "7f0f40b2-ec29-4d18-a583-f960d7eebe76",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "07c28d58-8cf8-4f3f-9ae4-6a0ec5204a3e"
        },
        "item": {
          "id": "9ce178c4-76fc-49d3-9397-d8c35531a64a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "c766d57e-0f69-44af-9a05-66f80c3b889a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6fb4120-c029-4259-8ccb-699b6c578fd2",
        "cursor": {
          "ref": "19daa4fb-1637-41f7-88b2-43e78d690315",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "fa946918-a5b7-4010-9065-c72d62b7a788"
        },
        "item": {
          "id": "e6fb4120-c029-4259-8ccb-699b6c578fd2",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "2d948e16-fb1d-4579-abf7-9dbb37d30ef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d969c100-e24f-44a3-b863-2d7246a12e3f",
        "cursor": {
          "ref": "f96af37d-1743-441c-830a-48da5d63a368",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "83f583c3-6153-443f-bd4e-148a44c61f9a"
        },
        "item": {
          "id": "d969c100-e24f-44a3-b863-2d7246a12e3f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "5fefb477-3842-4ce8-a8f0-766e7794b523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "170581d9-0f5b-4cf4-a140-f73608bcd483",
        "cursor": {
          "ref": "7f27e703-6085-4ed1-aa62-19aee430a8c7",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "1a7e9bcb-e2d1-4d6c-a18e-f36aefa7a462"
        },
        "item": {
          "id": "170581d9-0f5b-4cf4-a140-f73608bcd483",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d94dffe9-248f-4595-bca6-baa242662b67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b98651db-e422-4346-8d8c-4b2e13fd90dc",
        "cursor": {
          "ref": "722c4a0f-268d-4eb9-b2a5-661d981b1777",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "78cc550a-155c-4205-89e9-b61e55a53d52"
        },
        "item": {
          "id": "b98651db-e422-4346-8d8c-4b2e13fd90dc",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "974e805f-bbae-47cb-ad15-e71d4c0c6e99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db87988a-1f4b-4e0d-a4a8-6c35952ce451",
        "cursor": {
          "ref": "1583bef8-dc0b-4006-880c-0d65ce42038b",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "68b32480-31cb-4647-8f68-d53b5f01985e"
        },
        "item": {
          "id": "db87988a-1f4b-4e0d-a4a8-6c35952ce451",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "95875a43-fee9-4721-ab2e-a2ca7461c1bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4f2a066-5313-4980-a14a-2a5da68342ad",
        "cursor": {
          "ref": "e0115fd1-41cc-46c2-a7a3-40564fa9d215",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "9e249630-b498-4248-a929-1aec34ff9824"
        },
        "item": {
          "id": "a4f2a066-5313-4980-a14a-2a5da68342ad",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "df09e43c-e30e-443e-a824-8f4c42bfafb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87d9a487-ac88-4e8a-9e2b-a988a5130b8a",
        "cursor": {
          "ref": "2ded873b-d6ca-4ae1-9575-8fc78f55da19",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "8d2bf15b-8cd7-4eb8-af32-1716ccc3610a"
        },
        "item": {
          "id": "87d9a487-ac88-4e8a-9e2b-a988a5130b8a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "266ce10d-008e-4b5c-a29d-e08fb4c3df6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22819495-2526-4c39-b62b-dd2c9f2a6f98",
        "cursor": {
          "ref": "49ef7f8d-d448-4d5f-aa8e-eb325a2cbede",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "8b642a7b-e988-45da-88ee-c9801b3c3b8c"
        },
        "item": {
          "id": "22819495-2526-4c39-b62b-dd2c9f2a6f98",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "0c912098-4d8d-4a6d-8c1d-9b39bcbedd86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70b4c903-3fe8-4077-a75c-2f113aaf480e",
        "cursor": {
          "ref": "44bda8a0-8e5f-47bc-b2f5-77f23e61a8e0",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "05724481-d8c1-4ef2-b09e-e05c33ce69f0"
        },
        "item": {
          "id": "70b4c903-3fe8-4077-a75c-2f113aaf480e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "867d1dec-5f79-44b9-914c-e0c94e7473c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2456f346-7309-44e7-9e28-3db7617420c7",
        "cursor": {
          "ref": "a6e63a53-ae7c-4c25-8586-8eb05ffc1bfe",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "b9430877-d014-4718-8c60-a404bfaaeaee"
        },
        "item": {
          "id": "2456f346-7309-44e7-9e28-3db7617420c7",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "69745978-4070-44c3-b4df-68d3cab2d9ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbb03f95-925a-41d8-b1dc-872ebd7d8b23",
        "cursor": {
          "ref": "4f243a92-d1e1-4a44-b808-c8f0921ce262",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "826f5c7a-43b8-4988-b6c3-9e8e1e8c0587"
        },
        "item": {
          "id": "cbb03f95-925a-41d8-b1dc-872ebd7d8b23",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d85991b1-6579-4653-8d81-26c1488b60b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1d9409c-060b-472e-9fac-7c56afcdc7f0",
        "cursor": {
          "ref": "2220c034-431c-4cb0-a077-cfcc1fee8a2e",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "78896416-1d01-4df3-8cbd-0d3687a340fe"
        },
        "item": {
          "id": "a1d9409c-060b-472e-9fac-7c56afcdc7f0",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "9436a41a-acdb-4f49-8299-895d2996b64f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93dc2d66-916e-4735-8bbb-10b00c866739",
        "cursor": {
          "ref": "527cbe83-9bef-4573-bb8e-b31d3fcb5f27",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "032d5e57-af75-4bf1-9521-9e28468146c7"
        },
        "item": {
          "id": "93dc2d66-916e-4735-8bbb-10b00c866739",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "cb362c85-046c-4138-a20f-0a4dfb6e24c3",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "094254b4-74ae-4fe4-8175-084501e911fd",
        "cursor": {
          "ref": "d2b172ea-45f1-4f69-979e-a697e9293949",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "2997d398-8805-4259-92f7-8c7d23ec89af"
        },
        "item": {
          "id": "094254b4-74ae-4fe4-8175-084501e911fd",
          "name": "credentials_verify"
        },
        "response": {
          "id": "be9245af-3b9d-4162-8e00-350656dc441b",
          "status": "OK",
          "code": 200,
          "responseTime": 105,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e048e6a-8a71-41d4-9594-9c1be421bf13",
        "cursor": {
          "ref": "f251f629-f33b-426a-b1d8-92e959a4333d",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "fdf51ee1-e8ec-4949-8700-cbf038ca3d2f"
        },
        "item": {
          "id": "0e048e6a-8a71-41d4-9594-9c1be421bf13",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "51a1d448-2f1d-4989-8f1e-4116d160fbc6",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b168b969-387e-4502-9353-19873ebac86f",
        "cursor": {
          "ref": "8346c6db-229d-455f-95d4-6eefcdd8f4bd",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9ab6f097-2f97-4c44-9621-a279fcfdd20c"
        },
        "item": {
          "id": "b168b969-387e-4502-9353-19873ebac86f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "45c4d1e7-a74d-4629-b28d-b28c97b3811c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b168b969-387e-4502-9353-19873ebac86f",
        "cursor": {
          "ref": "8346c6db-229d-455f-95d4-6eefcdd8f4bd",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9ab6f097-2f97-4c44-9621-a279fcfdd20c"
        },
        "item": {
          "id": "b168b969-387e-4502-9353-19873ebac86f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "45c4d1e7-a74d-4629-b28d-b28c97b3811c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3fc9018-fc6c-4a16-992d-862eb38f93da",
        "cursor": {
          "ref": "fb561b22-90e3-4060-851b-a3e2edbd3f16",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "250f6965-aff8-46d3-9eb2-fc5259c4fa6e"
        },
        "item": {
          "id": "c3fc9018-fc6c-4a16-992d-862eb38f93da",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "153777a0-26d4-41d1-9a69-3346da8de2a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de1c237b-0517-4230-bf24-737fc4a06f21",
        "cursor": {
          "ref": "e885317d-c052-47a9-b602-92decc63de4a",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "88b0625b-e3ab-4061-a11b-2c91a48f87dd"
        },
        "item": {
          "id": "de1c237b-0517-4230-bf24-737fc4a06f21",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "2b026aa0-ab1f-4c97-869d-cfb0eb918380",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}