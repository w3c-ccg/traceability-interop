{
  "collection": {
    "info": {
      "_postman_id": "e9c7f21a-ef69-4217-8f40-0424834c0fdc",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "73cfbde9-a07f-48a6-9b80-87f6a2770738",
        "name": "Clear Cache",
        "item": [
          {
            "id": "747cac7a-f51c-45c8-8026-67af099d5d10",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9ff1f260-8e43-4c13-a1c0-c4a119901629",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "aa62b0ba-6801-4ad3-afa5-6b3485bf875d"
                }
              }
            ]
          },
          {
            "id": "d4f59f1d-b57a-4ca2-97f1-2a4514bc7b89",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "97d23ba5-775c-401f-9d3d-63504bfe308d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "69f263b2-d982-40bf-8422-0c9438a7cdac"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e41d4a2c-43fc-4f15-b8ef-53f84ffcb33f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "42e94598-e736-4d0f-a5fc-c3d904ce6e12",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f933e980-0826-484e-bbaf-8bdcbcf4407a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "83b460d5-8bed-443b-a853-23d8ca6e365e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1f21e3a3-aeb4-4004-8af1-d47f1eec1973"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8fefea0a-c417-4ba7-a0ab-30de10da0bfe",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "019aee7c-e8bc-4685-bb6c-2e6f2737681b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "83e96e5f-2659-49e5-a756-6762fc3933c0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2e656d73-4f7a-430a-8b0b-264fbbcb406f"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "70f92b09-8d77-4afb-a21c-74fbcad0535a",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0b94f9bf-0677-42f8-abc9-07849ec987c8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ab8be7af-30b9-44f3-ac82-fc960db3d450",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3a9d4a45-29d9-45ea-be6d-1a792d556baa"
            }
          }
        ]
      },
      {
        "id": "a0564581-01e9-4ec2-a82b-c3452132461e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8e431b49-08c9-4b96-92dc-a601aedabde7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d49ded17-f927-4b27-9376-76f4e5a66cbf",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "96af8042-db53-4a73-916f-9c99e551e858",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e594878-345f-4db2-a88e-4ec77f123b79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "52e5cbd8-c285-49de-8939-e9d925f6f95a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52bd7efa-1151-4e96-b768-67c8c859208d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b3dc83d-bcd9-40a5-bd65-d15fa11d9d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a86a7597-5ec0-4bb5-8db0-70366a27ada4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc4808af-0796-43a5-808f-479fb326e493",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46ad2e40-085b-4c9d-8a16-d99ececc8e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "036c8468-3a12-40fb-a9d4-342b1e564db0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6b6fc86b-c6f6-4406-8ace-f48c22c74609",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c5990945-edb2-492a-8256-dfd7a266ac7b",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd892075-1303-4e40-9c0a-28c18c62f30c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d12df3ec-11e4-447a-8f69-8b187af53849"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f486605c-4322-4d58-ac8a-2df204229cf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "def96466-21d5-41da-a722-a952af730472"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d70598c7-bea1-472e-b7c8-b979732aa999",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cb64a909-816c-47b5-a128-483961d28c32",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7639d71f-63e2-40ee-8e8e-bae42d2bb9b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "d34a08a8-c23d-43cb-b834-fb44a8dcd27a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "36f57626-6fb6-4efd-be76-483d42d5561f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "03734791-d1db-4434-a2ef-7ca75eabeb4e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ab1981c3-a422-4c00-b6eb-477b3152e457",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1997809f-5e37-4512-9686-3aa658b64f4f"
            }
          }
        ]
      },
      {
        "id": "a1ca8ef3-5b66-4311-b08c-dbda61454992",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a769fa08-42b0-41dc-9a7a-de5cd8e4d95e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f17a778b-5d2d-43ed-abf7-9ba4d2dec7b2",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "0b2931f0-83b9-4ca6-a6fc-9fa2e639d86e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb08674c-48a5-410b-940a-911cc7d9b2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b012a29b-f2c5-4e65-aa7d-d55d1b71f6a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99a64e71-ee5a-4721-89d8-97fdb30ae36c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7483e741-e138-4e5a-9e76-e268ca4eaba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c6346ff-192c-44b7-bfd6-43fc6be2000b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76ddd70c-2efe-4aac-b4a3-a738f97e97e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3e17358-a063-49b9-b029-d737ce880b56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18339c81-7dc4-45d1-9c43-1806f108a081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cdd98e1d-1b1f-4143-8612-eed8b1b5d9ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac473338-fdca-4658-ab9a-a3f1f9d47d63",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "184d7199-6b6c-424a-9eb9-bd63b414e8dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93616818-c7b8-4231-aa5a-40c5900299fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c1361cd-6a81-4264-a213-51ec70ee119b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9640f0ea-1602-4650-b48a-c01b3ac18e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b88c1b14-0063-47bd-a899-91e4f4580bb7",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f6101d9-8204-4bf0-ba1a-fda249624b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7f88497-3c9a-4f60-a37f-008371935296"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a5cf68-acaf-4ef0-a0ae-03afaee64267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5320819b-b13d-4b1b-a690-bf50f40ea0ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ea105f-9a59-4c67-ad9d-06583dbb44fd",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36356ecf-7b04-47b0-a3ce-231f0f57b8d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "380e0da1-0b09-4b85-b0a1-bbaa00714cb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dcecdf9-713d-4ae0-9fba-f03c9a0633df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e1d2f985-cb21-4732-be08-52fdaacdd035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea789e66-b862-4745-a1a1-fcae0db9a739",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8818e8bc-c945-46be-8c2b-1b9b4338c83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfd5cc1f-583f-490b-ae31-62bfd35ebf7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e659a8e8-fff4-4322-8319-f65c6ac618ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b127ebe9-0ed0-4402-97f2-1f0c64247e92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c565c4-6267-41cc-834c-6b818bf3016b",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f746ce1-a0f7-4788-bd98-978f19e2ea9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9e578cc-5363-4d6e-80d3-9fb2b7036ef8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78388cd6-d024-4f54-ad5d-b588eaf2b8c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "08fda4ce-44e0-4466-976c-e3d5423182fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d631d197-3005-4067-8237-f52782bde804",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9653b85e-8826-4cf0-a5c5-8195f5dbb28f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e48eae6-bd73-44d5-9812-9bdd546f79c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "317a2e9b-f27d-4054-84de-0f02d2eef9bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49719b56-40fe-4aa2-bf24-54c14ff7cceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21a67281-6c90-481c-86bb-59f699692322",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80629021-fe09-4a61-9ac5-c4c5d6dfd43b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cff8483d-72f1-46e4-b621-86f76bc93a34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33ab863d-6b5a-4427-b4b3-58e1fee7b31b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1163c7d7-4371-40f1-a5db-220e03f871b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f394248-e47c-4351-bb36-c7a21d8c06dd",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb58d65-1809-4bb8-96de-674c38cf3466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d1536fc-8b8f-423d-ba24-bf94889645fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec4338c-a7d9-42db-85d9-cc1fa9216472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90b7e3b7-5ac9-428a-b362-78ddd43f0338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf08ad4-895e-4f2d-a2d2-bf7ebec1a025",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c0e0cb-9feb-4015-8377-d7b0580983c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67c1b634-a3de-4397-94d9-6bc05ff2b125"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aef1c4ec-140e-43bd-8f01-8a9d66037d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16bad7e9-0bf2-40c5-a179-bbd546e0fdbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57aead41-6856-421b-b99d-4592780c0094",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82274510-e55a-42ba-ab59-4f87509faaf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5485bb8f-d54b-4fd5-8d6a-b9308481b90c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "567137b7-8376-483a-8970-ce750115dabe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3db8656-3238-496d-a43c-884b5b312551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5115d3a5-8740-4077-ad99-a07705b8d996",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "619c1320-23b0-43ff-9f51-3681bc24b5ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98fb5820-a14e-4d8a-be69-83e1e3f3fa5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "895fee11-b2c1-484f-a4a8-cd1d708c6218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "61a523dc-c040-4959-88ba-bd0c51642805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6622e349-b259-40dd-9bbf-b8998cffc2ed",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e7a4bbb-8c23-452e-ba0c-50c9e64f6c67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5baabe40-6c50-409e-8ce6-8358e91665fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80b9bd48-ca6d-436c-9845-c6f71b35a68d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e9a04849-ec8f-428b-84c6-d4c80204e5f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "216ec516-4ec9-4009-9a6e-a72abafd8c0b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e04f2c3e-8551-4a1a-acbe-f68d34322064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99022e89-d7af-4e13-b073-f45295f95e8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0818fad3-a570-4e3c-91a6-fd5769623638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "57d47550-5c87-4ef2-b1bd-c2ac7cbcd2e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f593f2b0-4993-426e-9e52-a545b5a08fe7",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da19cf2e-b228-4efa-b293-cbb5b6362c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1d11e0e-665d-439c-9957-0310b4da3f3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0aba0b9-dc70-4a26-ac29-bacf43480f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47fa82cd-0fd5-4de8-8ecd-3257af505cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82cd0038-ad5c-44f0-aa81-59a636057ff9",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f62852-90ce-4a68-a796-4d5ab7de6500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69ad6645-0278-470f-9158-bf6490bcfc33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74c304f3-cd35-471b-8151-62091b39bc67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eb1ef595-4f31-40fa-928f-22982b453643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae287e36-71ab-4cf3-a79e-6995cdbbeefb",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bd32cc5-f6c7-4ce7-bfee-1ce5a52156a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "217b6ffe-ade7-42eb-b896-c2a51ba8363a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bff83cd2-e97f-4a87-a440-7091a47e7fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d50b7d6e-1bba-49b6-afca-d906460190bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32f99c5f-be8f-445f-81d4-8fefee404e25",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c9a9d5d-3429-4571-8e4f-81efe8538124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dfed307-e2be-439a-8517-4f9ad979e32f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "213b4ce1-9dbf-4c09-be54-83ab15145774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a99bfc64-0ea4-44aa-81c2-21070b135a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b303cb-d4d5-4656-b9b5-5872308ec068",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c16e0b4-c6b3-4d6e-b636-ce1345b32a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "998ee1f6-9924-4daa-8ed9-52d3b14fd55a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ba2067a-bc86-4d9b-b994-741bd74ec56f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ed9dd32-c60b-4ea9-af77-ca930bc343a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1131deb-1d7a-45fa-a463-0bc1ca128386",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a6e2ae1-483d-4300-b399-df6f8cbc933e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad3ba536-ebbd-417c-ac9c-d51080948937"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a99189-5847-4dd0-8068-66f687750389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "852d2423-6429-45cc-af8e-6366b86b79d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc7391e-fb5a-4b91-8d9a-6e99ba7676fa",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eca10b12-4a32-444a-8c99-ddd82731cef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6dde85c-ccaf-488a-a1c0-d8d324657cc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "349b8297-dfe4-4267-9cad-1bf6de78ca0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed23bcfe-fb08-40a3-b0fd-52318264ccd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec64316b-95d6-4ae7-b20d-731558310b26",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b66dc2c-c8a9-4d07-914f-c842c57d1097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f6c024a-7675-468d-a6f1-790e696ae0fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e0c60e2-c8e5-4ded-bffc-718ea1e564c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0035d2a2-a1c2-4297-8315-4550ad6d02df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32b92faf-1e9e-495a-9b8c-2ba6df37e9aa",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "440517ea-de2a-436e-a234-ec1495021690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14eaa75e-0442-428d-94b0-304d4b1f4711"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a49c8afd-314a-4d80-8b60-73abc1a81236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf8fcabe-4432-47a3-9a71-57025aba248d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34b821f1-6eea-48c3-8a0a-60cc25a5e56f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1632fda-4f25-4e52-8bfa-0bd24e87aa07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25659901-6a03-4b9c-b22a-a0b00281c906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed1092d1-43d9-4eb5-8c56-99d26eb70a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "619769d1-ca24-4cb4-86fe-c72f5a4bd9a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd4e5b78-30ad-421e-a9d1-2401f87da805",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed0051d4-578c-4430-9073-c69a1d392b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ee04b02-1ec4-4f0e-8557-8117e4e49aab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7723f559-64f4-426e-9d77-b5383507e819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f6c11a2-1014-4a04-a707-e5ef85133112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9496b571-e104-4ca6-b3b0-e141952c7aa7",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec70093a-c7a5-407f-9981-c7daa656512b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "091ae75b-eb39-4186-967b-023299edb992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e81fd00-e9a2-4fb8-ac57-163529188a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1c4a3f1-8364-4674-9252-cb1fbb5007c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13efa4af-108f-44c3-8406-da3019147452",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "818fa1e7-9204-4aef-9176-d6dbaa49cc9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "706abc2d-8cf2-45cd-a0f1-ea05b4471e05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "882b1dce-a5a4-4df9-9c3a-c54ab608d2c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4d86030-885b-4c2e-971d-1f62cf4e9765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e126e828-371a-44e7-b112-7700152cdf7c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c217bc4d-7fe0-4e68-9e90-4518bcff4012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc6941e1-0422-4551-b5fe-31bef8e87cd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e91cd2-bcf4-4d68-85d3-6a88e934b438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6067a71c-f6de-4979-81af-76c2293488b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4669188-bb7d-49e7-843f-e58b2091ca9c",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f56e675-aaf3-435e-8d8b-141b6c5fcfbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d0df978-361a-417f-b9da-487afc12b3fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e14616e9-5ad7-4fb5-85f3-27b007e90d75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fd2f228-2260-4948-954e-809e78b28061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc677c7c-da85-457c-bad9-a1afdffbe213",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f5478f3-24b5-4c46-81aa-357c193210f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67c23099-aa0b-4b9f-9e1f-0c35a5baad02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4895765-0e94-4ef2-a89c-d66a8f33b6c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b8a5846-d2dc-4d52-a11c-5bcc3fd0e8e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d360cb1e-7c88-4b19-97bf-353283607768",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f7e34ff-8b7c-488a-ad92-57a691956f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d2e6eed-2659-442e-ba23-0c2ffddeab8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a6c7804-38fa-4628-8972-628a3acbdf5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6590947-9a61-49e3-85b9-93ab691c6078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edf13591-21c6-499b-8f9f-7ee9cab731d8",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f7e711b-4d7a-42f3-bb49-edd2066b5cdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "385056ce-a797-4aaf-ba37-7be877b1aa99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4e62ff7-fee0-4d1b-bfcb-724aad8470c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4d64003-b4de-4272-b64f-48598b1df20c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "718b278d-9a18-4774-b550-6fa77d826191",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b5cc13b-8284-4d79-8aea-721115cd532d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2fbddd3-612f-451d-b8f9-cee92d436281"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f78dd32-6a35-401f-84d9-d619ef6d5712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d62cc34-3de1-4278-b288-b14f800e41b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95a10a92-bd09-49ab-b0c4-71e32f62c4cc",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac074fb9-8cd1-4924-8d99-3b8c674baac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbcd3205-ab3c-43b9-9e3d-91ab1f2555dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a15d0ef8-7ac8-49f9-86e2-5f769229f660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "be037fef-cc63-4c5c-85cb-323efa79859a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44df5349-635a-4f61-b5f1-267889029d4b",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93caed4a-2390-4e16-9170-c88a471b70ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5362c33a-efde-40b2-8a50-07030c431f26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6621c9af-9710-4ad5-b1c1-5833b969d18d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9afd4e5d-0eea-46a1-bb1c-b88885ee599b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea8aa005-8b82-4807-a611-6af54b3de24a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67f6dfae-13db-4447-ab26-f8ef40a6b0e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac745bd2-0d0e-4ba5-b4a8-cc70c63b71ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "788f9d53-b7ae-4c7e-8ace-4c2050e76789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a96c72e-d56a-461f-8811-c06c9dfe2e05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ed86145-497f-434a-8988-d8f4f57f32fb",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "041ff383-c20c-4857-874d-78abfef2c322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78e3edb3-50c8-4732-bf2f-6fd0ba6166aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92f7d898-c06d-4711-95ba-b5145427465e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "34bbf34d-cb20-4ced-8174-670703cb7681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45926089-6d1b-448f-ad90-15ce74a32fe5",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "220e3a1c-2804-4b26-b049-d682b3cab1ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bac65f61-48e2-44fe-8fdf-c0590ca5f609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "314b7024-87aa-4a07-b2d6-fc8fb7ea8de6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f165164-408f-42f1-bb17-bfcc7631dbcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621bff24-526d-47da-a4bf-2630dad91a5c",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd88d913-9686-4806-babe-ca2c249067b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e1a879d-10fa-4ea8-a18e-4a7e10b7300b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a65d3c-6cdc-42e3-a673-0ec4c1b40714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4d318c2-76e8-4843-b198-2ab4cc595bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f473d7a-4358-4e9f-a6e5-b31f83634582",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e5a857-8886-4b37-866e-2c8320bd051e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "237425f6-65dd-4511-8a6d-a21d9002bc58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95b5db02-ee70-4dcd-ad36-754e13827bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d6e6959-f382-4fa8-9076-f108e8ad9597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f1a875e-5177-4310-a624-8a7f9143bb52",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebfadddf-d8c6-49e6-9d83-1dcf80c8006a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56fbf0d8-2156-4e25-9659-6bf08a96bdd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18b88c17-27dd-4566-a2a2-7a5ada2a1636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c4532527-5c83-4e18-a199-80516e01d1df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "562a1200-ac5e-4893-a6f8-ff7d2c7c5fdb",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "143d9bb2-79e0-4fc9-9d68-8dd862cfdce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55fca47c-cb95-4836-922e-7522b63ca1f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be763bb-b3f2-40a9-8493-8ebdc4473d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "129e5b70-96ef-4459-ba0a-38977c8af212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9db1f15-9fbe-4149-b130-cda77c26c310",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b0063f6-1a8e-406a-807e-c5f61d7fab88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c291712-f15b-4e7e-bee8-3a4b29e7f2c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4282587-e2f5-4738-8c1f-baeb7861a964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cc0bc76-655c-4922-9063-d9204e134ca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dfeb94d-26df-437d-b94b-88e72ea26cdc",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb072ec8-b1e4-482a-bac1-f9fa9ef28a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ee76b20-980e-4f56-9384-666489016e81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f914a57-9095-46e7-9da9-e3a4123efb14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6ad6c15-82f8-451d-bdb9-5f5b9d133444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "725d9a16-897b-49d3-866c-51bd358107e4",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "126597f3-726b-43c0-9d3a-4bceb63bfea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd8c69b4-bc50-4b4b-90c3-e5e6919b72a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd311fe1-4d93-410e-90b9-ec261fc643e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "06130a62-5280-4f9b-a941-19be776cab09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c955395e-e8e7-4119-b8ae-330625e35623",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3563fac-eeee-4ed1-9b6f-7f7f041b80a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9c5a2e1-f647-494c-bf00-a72277bac09b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f6b85b2-4fe1-46a8-9b4f-2944f6764adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "16daceff-fc0f-4c01-9f50-8ece3f0df6b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2c95049-bfbc-466c-a6e3-718785095a8d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5aeaf86-21a1-45e6-98fb-3efb124c4bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5eb7c63-4858-4466-8f6e-4e2a5ddb6716"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa08abdf-ea68-41a8-a674-adf342d56633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d74e831e-0013-44e0-9b2c-04b9404f747a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46da915b-1fcd-4651-982c-943f12fb377c",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f6909b-0254-450d-899c-cc9ec14e599b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a588264c-60c1-4fd3-80cd-c32b78f8bb35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a35b488-0365-4388-968f-01f7ff496795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c2bb4d2-18f3-41d1-9f3e-5feac606ec83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c59c71d2-2115-4d9e-8edd-d1f04876c7aa",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d933a894-2d1e-41d9-8ec6-2a3b6502fd5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c6b4207-61a7-4899-a311-3d77b77f6b9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8af0704-95bb-42c1-9604-c492a93eb928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2fed7b44-7c45-4b0f-ac2c-e80c73280265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdd76998-2b19-4a63-9eb0-d8f2ec12772c",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0559225-2ae5-4738-86f4-04fd2e137af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5f40929-424d-4757-8f04-4a8a6079f29c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad4ff951-4281-499b-98e4-de3be51422e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b0044ff-61bb-448e-b8fe-ed034ed352ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c95c1513-53b9-4385-ac45-838b8f59a051",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eeb515d-8848-4b2f-bf62-8e30573d7e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd1cd2fb-71ce-4cce-b1d3-3db90631afbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ac5fce2-93cc-443c-9dda-ecc069ac0eb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "93040cae-82c8-459c-80b4-fe8273d88306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b09de78-a1eb-4830-a74d-aa06517a7b6a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d3033b5-9bd0-4cad-8178-aa77787e92cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0e2d010-bd74-4266-917b-9fac7ae32ec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1801acd-e108-47ff-819e-df7426daa07a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "85da3048-3da8-4efd-a9a4-c3e642886984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fadc067-3f95-4c5d-ac34-22d5e61e97a9",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da5e4ee-7b01-49f0-b70e-56a3b7b97bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73e0dc62-5d50-44db-af8b-549a4982af46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "433ce9fe-371a-4c34-8335-0b1de4d72dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8003065-1e7b-4461-b73e-3c0f889e05df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34ad2392-6e68-40ad-8c7d-2be9e5c50db3",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad77d19-bf73-4c18-a683-b9ef1696a423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb79a45c-2627-4d65-8e69-7b9a6b77547e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a0b630-27a7-4bd9-acba-a14578c406e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9ff3ae0-1ac7-4208-907b-60baff3a0ed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cfa073a-e87d-4ff5-81c1-4dce471f4523",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e4419a5-5572-4cc2-bfb2-ef936843cf95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf485490-f869-43a6-b7c1-a76b5393d115"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8821b9c-ec18-43d1-a451-19848a40ae8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "24c0f64e-ac61-4597-bbd6-95be586a124f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "469d7e2b-92d2-46fb-9404-3312c7afd1f8",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cb8371f-a22f-4bbe-974c-e7ffd1d0d4f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f93ada10-d901-4ae8-8bda-0ec78f7cfc4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ca3c20e-663e-4227-933e-d915675afd28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a09cf1b-17de-42c8-b337-03fc41f18112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f7527f1-cf87-4530-8289-bf0c5e1bdd23",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc9989d-0720-4ce2-a36d-29ba5bf93573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9982da0e-43e3-4446-98ca-fa5c7ec45104"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714471ad-2ec0-4f0d-afac-d3e747456950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e2dbf141-920d-4dbd-848c-dcc578b0bd3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e31698a-862e-43aa-8334-68fe11a93a4a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d1c4f94-49e6-4982-977d-284ea020df89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00a269e5-4af3-43c0-8b5a-8c97e63151da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6845715-3777-4dae-99d3-3f2eaeac7488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f91fc590-5ee6-4a7e-b7e5-002a715b7d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9036f9c5-5c82-4f45-95ee-6f0ca001a046",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db64b3e1-21f3-4b7e-9d5b-f19aa3bc7f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08364464-64c0-4532-990b-1706f2148b96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c151ecee-5e34-4454-b1fa-8bb00d05e001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "34c01795-1dd8-4992-8645-d34ad90bc364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00a54399-b3c0-4401-9d3e-c14614aa4421",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7e6007a-e5b0-41e2-bf66-9828a3ebb222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9760b9b-ca4b-4d12-bb0b-3edfd049b374"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92280691-79c7-483a-8413-7f2088f8547f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "53168eb1-8177-4e78-bfe7-3005e3229c64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf38dab2-79da-42c7-8fef-f1dbc3c92eb6",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c99037a9-488b-4aa7-98ea-f20a53f194fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af6ebc3d-a848-42c4-878d-1a1e8fe122a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1992959c-1b84-497f-a880-8c1f50e46886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec1352c2-bd25-4313-bf1a-5c235356c66f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4f731bb-b6b4-4603-ba1d-f9b9f3ecbc93",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe40c3ca-b88b-45ca-b4bf-a3bae4fd1db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3e8be7c-f6fe-43f0-a101-4bfe784fcd7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc25f934-b2d3-4c0a-9ad4-c3e23e9ae9b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "29b4962e-176e-4de9-b0a4-fb309671307e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7729cbf4-4e95-4894-8a48-cf6655868a14",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f2e5f09-3cc0-4da6-82b3-f042838cbfe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bec54c4a-4e1a-41e2-a010-58bd5ef6697e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6997df28-1f37-4bc0-a74d-581aa69cd79f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a290017e-9b91-4f5f-929f-02d4390926e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84325ea1-7101-4187-841b-3281b41314a3",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2cab283-f6cb-475f-8579-64328fc9f14b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdf97aca-693f-40c7-a902-357207a167a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "501181a0-36b6-498d-af31-a918dbd746a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d99366a-9016-43f4-bfd5-8005c8dbbbd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7afb8482-ea89-4d37-8b0f-10fde85041a0",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebaff98a-f0e7-4b68-b1a0-756bf8b4738d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e7745d7-0745-44fc-bd95-444159264f6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4034b449-220e-4824-98bf-34dcec1c1d3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3b8d8c8-c384-431f-90ec-cb30721fb10b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58da89e6-fd93-4cc8-8837-1016ecf4e2b9",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "289b2ccd-1993-4f3c-991a-7b69d4e10203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "798e5c48-58be-4ae1-bf88-adc9bd484d7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c34a10ad-a4a8-4ea4-8d13-b767020d0dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "54461a74-4cf4-4cd5-a08f-6395832348a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d276296-bdee-46cc-9d57-d02f387a387f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e5dab16-4a0e-4788-914f-beef0c1c9a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b120853-f286-46a2-bb07-1743f2364c50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "326bf87c-04fb-4ddd-8fb4-eebc2de41142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "17430b94-7e53-45cb-b4af-a385fb39b714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f626d32e-1120-4d8c-a247-00c01a52537a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb5cb6a-5ce9-4cdc-8a8f-bc0ad8ba2282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cc7cef1-f76d-459e-a166-c4913e47866d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "733f3f5d-9732-4e72-b054-8d85baf525d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc8b0d64-e56b-486d-a743-40ece82c22b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ff336e-a375-476a-9b7a-ab3a3464cdd0",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f16b0303-93df-4858-bde6-904223713a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f4fd243-b06f-4d1a-beb9-b77ab916a80b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92f1aee3-3171-41ce-a955-a6d8372f6d67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "10034a68-708c-43bc-aa76-e5bebb6d3291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70591358-f0b9-458d-9328-0b3a885e4272",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8241557-a1db-4fee-a7bd-1ece0b6cf163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddd16790-3bb0-48da-b4db-6058fb24ee29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "290ae7ee-4301-4b81-a212-b2b114d425cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "41d52601-f89c-4dd0-88c1-b4feecbdad79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6954d660-8b67-4a03-831c-348a7a88fbda",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64af5b81-db55-41d6-91b2-7cf203837283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4addf8b3-6ae1-4165-aeee-b98abed5a23a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6907d50-e20d-4360-8b4b-e947d01837ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c5e62cf-f12d-49e3-9708-be84364736df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9062b985-4601-43f7-9511-0eb61ea8331f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c9b722-e3c4-4b5e-a7fe-93fee661a134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a62191a1-a89b-4b00-b8ac-e588ae88ba7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7cf7d2-e8c1-45c4-bf58-8242888ad1d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e975515-29d0-45ec-bbb8-7a7b49265309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48ecfbbd-ef2b-4b64-be46-f55751d152a7",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5827b88a-72d6-41e4-8e91-5ddaad968062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d9fa7dc-13bf-4650-88f5-3512e42b59a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd0c6339-736d-442e-a076-3a3f49920f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "82dc9196-8a03-4259-9be6-081149b67004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b065d51-43cc-4b2a-afeb-1658fc030ac7",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a7bc9a5-10e3-4884-a478-ac6005ed684f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "546b477d-7494-4bae-bae2-2794bd4c6cd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d55ea12-90d6-4a90-bf2a-424aeb79fef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "34a68316-4df9-4b26-a456-d023cbdb72af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "484db1ef-996f-4b83-b840-2374b57ef436",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9bad037-0380-49a8-adc5-efff56286977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dd7e8e5-5ef2-48d0-8b65-76b362c1ca07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95a70716-18d4-479b-9fb3-d9e14d5d4798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c16877c-431d-49b8-880a-bb5741c6e875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "605099ff-2de0-4cee-9287-2dbcd28cf095",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7085fe6d-12fd-41c6-825e-f429c481deb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f549361-925f-4731-9e4e-bc9a1dced97b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c66ff60-5b5d-4009-b737-2751ae089a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "84830278-2a65-44f7-a3e7-51ada2554ac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2cf061c-d8a1-4c0a-b9d4-c526f07bbe4c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b4445d-12f3-4ce8-959d-ea88cc559034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf543378-6dc0-424f-82df-088145971356"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b0772b-7dc9-40e5-b59d-2299365816c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc94df97-d790-4b52-bf59-9c6cfafe686c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93e9f42f-ad63-4f25-92a3-de536dbf9075",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c23a1c86-34a8-4c29-9fad-0585de631516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ed0fd38-a305-44a1-9f75-cd01e5d1669b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b9f8ccc-9e01-4597-9e4f-70a7f0fb352d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e51777c2-def2-4c47-9f74-3186d4517541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b22f24d-48f8-4c23-9149-a18573fb7b40",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97084fbd-f5b3-4e2a-a7ae-84e6533f3d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e400aa8d-6719-4447-ba7c-864ea077baac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2c2d89e-75b7-4912-8aaa-4bf92fc34af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "eb2c602f-dadf-4b50-a0c4-753795816165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1288dc38-9116-48d2-9bac-c4d7462e210e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf642f8d-69bf-4327-8a47-090ef85e17b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "446f1607-06de-4aac-9c7a-be16f32e1455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbe3a30d-98ce-41a0-9945-5a0655b1144b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0046364-bacf-496a-822e-3d91ab8a190d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35693825-12b9-486a-92b3-d257a66b2eb3",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a6fb72-fd21-4808-9a01-19ffa22a6d12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d58da0f3-40a3-4fcd-a77b-bad1c15004d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c20fef4-a8c1-4683-945e-a863013be094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9f2daab-917d-47b0-81c7-63c67815fb47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17da8614-17e2-4290-aa17-c8a324a89aac",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d89f299c-a9b8-412e-8fdb-e2c754e374dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "498f2620-9d48-495a-9c8f-ce7b16886d0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66a1a486-294b-4f4a-bc3a-f356da66c609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ec88f5e-36a0-48f4-a637-6c4d5db63004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52b1d931-7929-485e-a19d-3df4b600eeba",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d619401-e1b4-4f99-b7b2-41b264437c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ad8f740-f834-4947-8132-bb0a2a814db4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "218761e1-8d37-43d3-ae0b-5b46bc25c35d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1145765e-20dd-47c0-9bb0-bcb076399041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cbea96f-ddfe-4aba-be1b-812cbd48ba8e",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dac9656e-528b-42e3-817a-8d18bd08cf47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4f276b4-aa9b-41d4-a4db-afa284abfc5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c08ea91b-3e16-4379-9c59-8b324ac99039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "888c9bc5-9752-4bea-a366-c0307e92508c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa6bd8a2-9721-4c1f-9395-c49c6361eb67",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd1c3482-a93c-49ca-bead-f1db147a6c8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04677e1f-4083-480f-90f8-bfedc38e6801"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4152420-a0e6-41cc-970d-fff04f398aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0d0aee9-7a89-4874-ba88-4460c99290b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c7ffc39-a760-47f1-8765-e04cba4252e7",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10ab1aca-1b73-413c-9d40-83652542d993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f466a748-442c-4c1f-a343-a563887765de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c8bf5a8-1fdd-4c7f-9938-b9ee50fd7e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee38361e-f203-4b0c-a3f3-c7ab4069a89b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "173d8892-bc42-4584-9784-6e2264fbc098",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f238593-5b31-484e-a950-a78ab8511853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23afb71f-595f-4363-b31f-4db0c8d3b784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f958900a-fb1c-4d55-8163-9f24e1990d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b33a7ee0-bd26-4de0-a138-04271f93f38a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "379ecd60-e813-4563-83b8-a166fec61de8",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c89dd148-42af-40e0-8107-818e651f0d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7ad9f0d-7eff-4fa5-acac-9d3fd2a658d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c4b664e-302a-4fa4-b9c4-62ced0fdf49b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "63e8e55b-c273-4f30-bbe6-24ea034da45a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7243230d-c375-4e89-8dc1-9252bcb2681a",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1119ef4-a7a4-46a3-8464-9b279ce1443c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff2a253e-4ff9-4b2f-88f2-f6c20945e7c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75660269-8258-4a50-b769-a682d630b26a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "47995963-e195-45f9-9e09-d136d629207f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2259025a-1fe8-45d9-9203-e738d3c1423c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e59bc3a-9430-4429-aebf-e757bf2688bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12d50d54-3271-4773-bd6c-ed17d2996d23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94d7d560-7fe6-47d9-93c3-62dd6583cdba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "28538ae4-d03f-4982-ae9f-d2df978882ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "006662a3-fd2e-4012-9cd9-13502180282e",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2484dbd-c88f-435f-89ef-1750b6fc0d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "38f08abc-93d2-43b7-8875-f4583570d167"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "222e908a-8c01-4c9b-b46d-022fd545435b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "be2fa414-c229-478c-b87a-d38fe615d697"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4ae7b943-9a83-46f3-82a5-7f3e1602c662",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ee8c38ee-6916-459b-bf1c-d1221031ac98",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5339c9fb-eab3-427f-955f-aecdcacdb1ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "675d8209-e507-41e2-a25c-7444126c8ca4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bf06c8b-cb90-47f7-9dc8-89a61655f977",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e679b629-b9b1-43f7-bb6d-1c492fc03c74"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "beb52932-d0aa-47c4-80ab-a95e8ec5f46d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0aeb1b57-0cde-44fc-96ea-7c2aec61e322"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8942c6c6-d8ee-49bf-890d-2f7e078e5fa8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2553f9cb-4a02-4c9d-a50c-b4c1568ea55e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4e60945d-e6a8-4c78-b875-cafdfc0e8eab",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a534bdce-2506-44e0-aaf2-975ef889e4d0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7ec4a4b3-8b39-4c9d-82f2-e76bc59a5f1a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "beec203f-31ea-41ce-92cb-6623e96de8c7"
                }
              }
            ]
          },
          {
            "id": "0a4a66cf-a159-4e2f-aaae-c896b5dacd73",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0d495a15-0972-41eb-82d7-f11e04e776ed",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a34a1b2d-6cb4-46b4-b779-b06867ffd635",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d98a455e-578f-487b-92b4-79805a36ece6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "68885358-ed17-4b52-960a-1455be037ddd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "eebea889-3bbd-4a97-9aa5-db7ce63ce5b2"
                    }
                  }
                ]
              },
              {
                "id": "f9a668ca-1f08-4646-b5d4-f4e06a29793d",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "05ac4685-7ff3-451e-ac15-0e1f768123dc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "12eeca8b-e0cb-4ad1-b506-8ce7650d8726"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8f67dc2-6ff5-4025-afe5-7a3ca168bb9c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0b46a4e0-3170-49b0-b52d-36c43c821a60"
                    }
                  }
                ]
              },
              {
                "id": "bc7bae61-0471-4416-87cc-a53306c2703c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d5c44ca-a89b-4ef6-b6b4-3ed7a0a65575",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fa60f82b-12d4-455e-918c-02536760f9cd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "88d57153-fad4-4852-86a5-e3b8a81c647d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ec19704e-bac4-46b8-85d7-3b5a3d0b3c78"
                    }
                  }
                ]
              },
              {
                "id": "bf4d3cb5-2067-49c3-b28b-c6dbbf8ae7d3",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a08ab89d-1f49-4d82-bd0a-8ec2acc08df1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c0349938-0105-4e43-98ff-3446e9240134"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9d2cb9b-b32f-4a01-bcc2-0993fe0f7113",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "1c5ee17a-8044-4186-814e-83a42bfff369"
                    }
                  }
                ]
              },
              {
                "id": "252385e2-bbbc-4d8c-ae7a-f19dfcb76f59",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b0ac290e-7f63-40b5-ab2a-18f035abe88a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2f7ee8c9-ccab-4097-b66e-40866552eb42"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cd156dd2-773b-4e66-9eb2-47e9a096a8f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "f9976be9-87a2-4ec4-8ade-657884a269e8"
                    }
                  }
                ]
              },
              {
                "id": "a55b2540-10dd-4ab9-ac01-838d78e1ad36",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3f57b71-76ed-413c-b622-d68e6b62786e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3edfee49-361c-4021-a2a1-17d95a73a19f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac46a77c-1300-4607-831f-a7519d63726b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "19e8d30b-6cf2-4f1b-a99b-27f4a8f80204"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9ee0553d-8590-43a0-bb37-f2336543a087",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "815a53c2-0e60-4bee-a8e7-28106b621ac3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9a5baa23-6729-4ecb-8833-73e42b41dc5f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "878b0f2d-134c-41bb-8846-defae7914461"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6f44d1a5-5bd7-4056-a6e5-818b62266508",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "9b95d730-63bc-43af-8c93-6bfd1fc07982"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6f35ecab-bf05-4770-afde-620f8eb09945",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3a50dbb5-2470-4f5c-b832-4d818d4da1e4"
            }
          }
        ]
      },
      {
        "id": "5c28daa1-080e-477a-b48b-244d9563c51c",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "37714ec1-ebb0-440b-8720-2698f6192668",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6ae48213-48b7-4707-8b31-e547e24cba8f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c65eb4f3-87cf-4ae0-bddd-cad86b8b4479",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90787d42-9772-48ad-89e8-95bbad7f6e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb0bcc1d-7e8c-43c5-8895-550dc1fe3d81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02cf5f95-9e12-4b47-8723-121b260e9579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "2cb251fe-653d-46ee-961b-9c8c374167ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3ce4d50-42d9-4b72-8d95-f99d42966b7f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e4cd36-d784-4268-95f2-05219e537c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0ce6a38-a935-41b9-aed4-e95ff8333f3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4257d86c-aec6-4b9e-a52b-25dd0910c160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f30092d9-6d8e-4d75-9ce0-1bad3d4c53b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec2d4de-1c1f-4516-8b84-661b4bae58cf",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8953627-d1cf-4765-8f3a-ae11709836f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9065b38d-a9e1-4cd4-a2af-9d989d073d01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "499cfe48-9003-4850-83ba-a95f743af675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "febcae82-587d-4b81-bec0-ff19c572c08c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9af2f83e-256e-41b0-8777-3c925fd0fe1a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f88aab91-43cd-40c5-97ea-698e6176d7f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb28e89b-d3fb-42d1-bd30-a170de86f998"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "608900c4-d8a3-4160-bddc-25e86aa4d7dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "60c54ec2-afd1-4a95-8bf6-cb77dcb67803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "620a07c8-c2d8-4d7b-acad-83328af95e8d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "786b5642-af0e-4597-b063-323fba245bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fa8dc67-cde8-4b07-a57c-c977c4f090d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de2249bc-5028-43bc-9391-4f1c7ddd1ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb5ea688-2e58-4bf0-be3d-238fa8a8c9fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bebb91e0-dd98-43b0-ba5f-77f27c5e33ee",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c26b0844-303b-4d7d-b385-c61d226e857d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d72cc3ac-46fb-4dbb-ae8d-d54bcc699c78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34a05806-ac8d-4472-905c-45133049da03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c4dac72-8005-47cb-b51e-e0e7ac6aecc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec789463-2347-4c2f-8914-07a80a07e915",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d7b476-d258-4185-9946-d761cea67523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e310f9e-ec78-4462-904c-662212d8d594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b7d26b-aad3-4ad4-b84d-ce0c632c9c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7685dcb9-2543-4344-b1aa-0480d959176e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4789363-5237-442d-bb22-82931dcf2e1e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d64301b-f302-4269-abf1-6f9785b9e701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5458c724-4fe4-4aed-b7ac-07265fd8a235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "990d1393-b861-4eac-8ec8-8cdfe7e9e816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed1483c2-f4b8-4e25-bc36-06e6950ced3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db767e9c-5c16-4478-b7b5-661da9e3d663",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74a19fb-254f-459a-870d-bc5a1cd463f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb904ba4-fd7a-4ad2-a700-4b2bc1c1dcca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b9c9f05-dbf7-4ef7-a5ed-456a12de7853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b175d075-523a-42b4-ad1e-bb927794cb3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "576be94e-db0e-4c3c-90fe-79bc28568e8a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a34f858-38a7-4bf4-8030-364ffdb614b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40a70a54-99e9-43ab-8633-0e31a65a5c13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f39e0679-0852-4cbc-be2d-2b2676dbd1ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4421937d-b60c-4f90-b249-9f15d67522fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2dc0249-93d2-471b-a5c3-94693ff19c9e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7d254c5-9274-4b08-b677-f8c6cfa9a76d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e0ef7af-ce6b-49f6-8179-04d2bdcaf808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faacd1f4-7488-49a9-9633-1daede9de11b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "437d454f-4524-475b-ab30-7f1c8b8ca57c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e70e9eff-9c98-46dd-88ee-866c38505ff7",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c762847-eb3c-433c-a8f5-c18dc6eb6122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "222f1305-11eb-4bf9-8a4f-d765db28be8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53ac0f82-daa4-4a96-8cb9-b53c08915866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "18bde326-4302-4133-a5b5-0eedaf2952bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe02ea5c-7888-462c-990b-0b8ea2b143c5",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecb01448-198c-41f9-bd55-0fec71c121aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78e614a1-cbab-4464-9e6d-0b1cb1ffb602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e851c4-a686-448e-bdca-d2a2bb263635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "166f3c33-5640-4402-a667-7d34bd09f89d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60277bac-3f29-440e-aa76-1297ac090e3a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d093c543-f47a-430b-b192-8283a9c78c1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d9c9c6d-8bd1-417a-b613-26380fe832c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cc23430-02e4-4dcd-b164-3dbe11bdab03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "98d8572a-8f4d-4088-9462-46394325d933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea1859f9-b319-4298-8ad4-068a2a76939b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5fe8936-59d9-413a-8f3b-24cd4fe542d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45e4bcf9-794e-401a-b937-56a03b57f8b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24917f81-1e17-4769-bb31-a7f1f999a5f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7e8b9fc-d7de-4824-aa96-05ad7c025d13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8673011-7adc-449c-9000-5bfeadf00557",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6afe719-99c1-4e6c-bcfa-2c67229fb2ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23f5ccfd-7221-4508-a008-b558508e4934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa6e63bf-64cb-4452-8daf-4ed96ca61299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fef23e6-b421-40d2-82dd-ab469e9205cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecca69bc-7759-464d-b7f5-41fd366cc21b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10ebe6ec-a3b6-4e30-a025-11a8efb2759f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b14a7cc-15c3-45ca-8db4-837e1245e2c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4382f0a-621f-477c-98c1-cfbf4e928616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "93454ee9-e42b-40e0-ba36-356162c8a60f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50e8afb5-19f7-42f1-8ff7-35a3a216d44e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4413f16f-8110-4b24-888b-96c4480e4536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77e069a9-f81d-404f-b22b-e61940b10006"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffecc929-91ac-47ca-957b-e0ac9fde3711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b51214a8-6604-4d8f-b39d-65bb4696ce01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ff2e64-0696-4ce0-87d7-f847672b3fea",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5957c07-4912-4ad8-bd7a-93d42cb12ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bbaad16-46fc-4483-adba-1b04dca23c37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43894786-2a9d-42fd-9619-32c04da86e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6649ee27-4000-4a87-9268-3c15eb9497b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23a4080d-b86a-490a-8203-6ef1cff8b042",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d8a9bbd-b48a-40b3-b464-56117d216571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0b070d3-eef7-4d6d-8e69-cbc645bc8beb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff61a80c-dec9-45c0-9460-00f711f5c44e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "933ee870-9061-43f8-ab17-8e9b1a5d091f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b256207-4ce5-43eb-b317-b1577c65f992",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bc871ae-6522-4cf8-88cd-cb5993e3c3cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bebce151-cb16-40f7-b9ff-664740378c19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c4bafda-5ac0-4530-88cd-fc5995d29ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f44cb417-b094-4210-9995-2d83a1c853ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63a04ffd-d999-4354-983d-c9f06a856df9",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55f51654-4857-4caf-a169-a986af54be91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8379d687-6ba0-49b4-9e54-9bbd39102edf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "730223ad-f5c3-432e-86d7-4a11c28ea5a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c06af7f-3f37-489c-aa35-6247abc3d636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a6ad79-7971-410a-ae32-5eccf56ce0c8",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3955c9fa-0c64-432f-b845-0db35cc685c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08b9846e-160b-4d56-b3df-9e7575ca8c6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e79ef4e-0edf-4f36-85c8-4a228b5c9e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff716dcf-0dbc-41bd-8c39-5f74d5bf520c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4b4782d-4e98-4611-8565-1866eb3a3055",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e16424f-e037-4e31-b614-ca0f2a7e5116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5a7372a-ba40-46fb-897b-3adda4a5bfc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebf87430-3334-4b55-a20d-9bbbcd76beb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e05b9ac1-65cc-41e9-9656-072366e9e9e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14579085-0ce6-4985-9619-c7a3de0b09cd",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb4c6427-9aa2-4618-8b54-f087fb5fa384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eae321a-000e-463e-975f-fb560508b866"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcd0800f-4769-4459-836f-69545a94e02c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24eb2e4d-bb02-428d-8fc5-593bcfbe01f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dc24348-a043-48f3-9563-d71e22ac146c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b27bd3-1ad6-490c-a546-b9f1713f80bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92e19e6f-c273-4837-a320-c9de72406ec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36fe00c0-0880-4ea3-b7dc-503e6f27f529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ae5d259-b190-47c3-a350-3b057120c9a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a582d2f5-e915-4ab0-9754-1f5240aced64",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9280d98-750f-4c63-b12a-cda8cd054608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c74a2627-0cbe-4e73-b73e-5ccf7c606865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca3757ea-0534-4109-b92f-8f5a3f92ad91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a494b9ab-940d-499a-8e2d-66b0cad05c70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f531c3b-003e-4ba9-8a09-07391dfc7420",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7a98608-423e-48a3-bf78-b61cb2bba64e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf27e7c9-b52a-4680-91bd-8ecf9e38c136"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6ffa80-0703-454e-9997-2bea57b09525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d66346d-0b29-4bc5-908f-97af5db46c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c512fb06-5264-42a3-8a7f-dc1e67be17cf",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d06cad1e-9bce-4ad6-97b2-864c151ed093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bfa405a-0886-4656-ab90-9c1950685bcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb1db5dc-7a24-416a-a05c-96a1f6422540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c28d7a5-cea5-43bd-84f9-53b9e5e280c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "138ae7c2-8870-459d-8bbd-440f81f27d88",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad07fcef-196a-4f94-8861-9a7ae968ebd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c4f9ed8-470b-420d-875c-0ac1c5dc1535"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d564b9a-6055-4b6f-91f7-bc9dded42603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f601af4-b7df-44cf-bd77-774804941aef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98a15529-99e1-4b66-98f3-c523b5d238fe",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6097043-55e0-4d56-a26c-b92e848135d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca97e5bd-bea3-434c-af14-376a8edc36bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9449c991-bf77-44fb-897f-87e5e5b0d03f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "539a8543-f81c-4802-8011-ca4d0117904d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065a6d05-6c60-4c9b-8175-df9e264ce47a",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae8b4428-40fe-4f56-afdd-6afd9a6b418e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f60312cb-761f-4e6b-9b3c-701bb7fc186b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a59e75bd-565d-4ff1-8451-92672319073c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "901b0b1e-e923-4969-9d31-09faab67d79b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9168de0c-6cea-422f-a965-5058a6e1ab00",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dda96a1c-dfac-4a51-8809-7e8b572efa0b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d6508a2-e85a-482a-b80d-aa4f253dea6b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ed96f87a-32c7-4456-add0-5b74959ed289"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa40b2d1-1d43-43ae-b176-360d6d089cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "19c8e58d-c876-497b-8714-9494f24461b9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b03fd8f1-596b-4484-b298-92f950af6dd0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b8c3435f-c539-4789-b962-b731faa0fe87"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d230ffe1-6e1e-4393-a91f-1f427ecaf1c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ddeb6ed5-426b-4213-b029-f1dbcf927cbc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "19cc0579-a2d6-41c4-8556-dd7d38ea0757",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "484b7efc-af24-4068-9a36-16a8d66a007d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cc4b1f37-50e6-4cab-b9de-60e896d5c7f6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "18e45885-a2ec-4f17-a4f0-18581611c88d"
            }
          }
        ]
      },
      {
        "id": "67e1221e-c4a3-446e-880f-fe6f4ed86827",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "43369eef-0935-40ac-b4e1-95a478ac7a2c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "307e044b-77bd-451d-bf4c-bac52a103305",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "22d38b05-76d3-41f3-97c0-6efce4b57fe6",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a39f7720-fc22-4a5f-9b2a-e2fed41ce8a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03f6423b-74e6-444f-a3ef-d093f5bc3bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af93726-1825-4b87-a63e-67ebd0c9c578",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aa0110f-f919-4504-9704-c4cfa8205c19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9df4a94-2637-432a-89c1-bd6f3db6408b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e440f39-19d2-45d7-8fe6-488b34569993",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14eac01c-bed9-45f2-b7fa-a51573991860",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f04e4fd-663a-41a1-a7ed-39330af038a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87ce2d3d-7db6-4404-808c-e5d68cfba4d6",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e004e314-bac4-465e-b536-982c028442fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bab45262-f96c-4725-b9a5-734703aadc67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea43c66-014f-4790-9a4d-28af95feb9e9",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12535561-d93e-4343-a6b0-8c9ca7722a0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9fd7037-c80a-45e7-9151-4812f8a32a70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "252c3937-1cba-4712-b03a-aa53761b199f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "952b9cef-b1eb-4b65-b8c5-069551d9bc64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "554967d7-e443-47b6-ad7e-b61293b68785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e52a2d8-44c5-4847-856f-411ee596d436",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfe48dcf-9236-450c-b7b5-f64f6e395046",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b4204c9-1e11-4366-9def-d37e9e980617"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "547a0778-bf66-4f42-b742-788eff59ba98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8322647e-5875-45bb-b025-daef70fe3d99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b13c224-f83b-49d0-b679-65c785d47944",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a7813cf-bcd6-4f21-8fec-c507be2122e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c17402b3-0298-4de3-be18-980051d568fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ebe738-ab3f-42a2-9de9-4dfd7ce5e9ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "274c2624-8621-46c5-b873-27c81e219c62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5cfe487-1e68-44c5-b915-ad8a94e21987",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83dab338-07b5-4cff-828e-2f5a9c8bb12c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "640314fb-1c73-4917-9e1f-3d3484c771d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef9f04c4-0344-4cd2-9cd9-6de1f6194e08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca858be7-c1fa-4607-9dfa-a0cef9317245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afc4a5e9-8991-4b22-ac12-afcfa92a4c09",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7072ae2-a048-4825-8e30-e93ab886b61a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfa452fd-6c89-476a-ac8c-d68a4ea161bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e91dad-132f-4073-95b8-0c48cbc092f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d897243-9116-48aa-87f6-3e84a44cceb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fafa6b8d-fdb8-4fcd-a88d-59935237bba9",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a135653-0536-4179-b9db-f6302255ce79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d179e54c-63c9-4e50-bd1a-e707f48a1d97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "998de40b-f978-495f-ab13-783ce9f9333d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c03cbd3a-ecd3-4f6c-8431-1d658ab22519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e7ec7f-b475-42ac-927d-52abee242116",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c1ff51-1ba7-495e-ade1-db4e0c6b0eec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7f99891-1d14-415f-8806-b0953a7d7b83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e472d62-03ff-405b-bc64-9d86e2ac6d76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "784eefa7-eb72-4a68-af34-06529c39983f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d5d033-ae5b-42e8-8ada-4b38e8074ad1",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a5e6be-3464-4321-b2e8-9cdb39a417fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8419bf7d-9a49-4921-8532-9cc429643364"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b35ee5-4849-4d32-a39b-2c8671cd64ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "234f5d2e-0055-4c92-b9ed-f38dd52ec902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08152ff8-f1bb-437d-ba4d-2ba6d429a6a7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b5ea3d9-38c1-472e-9605-8ac0b009c049",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "525a6a12-2e0b-4ce2-a03f-02ec1c200adc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f49c5dd-01b3-48ac-83cc-11eb486d386f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24f690e2-1a57-42cf-bad5-de2e099fe652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec78682-c520-4fb7-9a4b-5f03b7a828be",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4c5fc04-cd1e-415d-bf9d-276e631dfae7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4545cb71-0051-4c4c-a5c2-d481ea4edbb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e412c25b-c2e2-43b0-a546-70e6becec91b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c30627da-199a-42b4-8b42-898cf8b2bdb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e20aa68-1e18-4c5c-a5ac-4a85b566f6cd",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a674ecd1-4bf0-4985-93ad-16a0be53c0c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eaef01ac-339c-48cd-9c5e-b92a4ab19dfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ae0244-7134-437d-aa0b-570e85573826",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a45230b-1879-4ec6-b415-31984aa1b809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "932d4dc7-a24d-420d-96d0-751799ef48ca",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84efeaf0-322f-47fd-9c3d-6ec61197b59d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9a57127-1bf8-43dc-9a9b-7ccb518ecb74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3662dd5f-cb6e-436c-afce-3aec47f78744",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d43cf48-b6d5-46a8-a7d6-ac28a61e12d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e2884eb-0ae7-4450-8167-267b488b9ca8",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91c0de29-cd96-4608-bdcb-e86538acc52e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eb82f99-d545-40a5-ba67-13d776aade60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd13f89-ba0b-4457-a259-8b71e142f831",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4b36c5e-c5d7-46c1-a71d-0a317241d3e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e0e611-0578-46f6-befc-3c81615780f1",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66208ce1-b3e0-42f9-8c3d-4c77aadd42c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f132a55f-a1e7-45fb-a328-17c610a22f0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fabf7fb1-19a1-4e9a-8d18-573176ad7913",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d787bec-a79a-4b95-9699-a2768092cf30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcbc18a5-75a9-4620-ad5e-58ebab680c53",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35483653-3e94-45d6-95fb-1069b7531121",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dde08ab1-2ac2-4b16-8eeb-aef40f4eea66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "186fa5f8-59ee-4de1-9cdb-04ee0a1ef78f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1de40b97-e0d7-472b-ae5b-30c63cc2880b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9175ec68-4ca3-4699-907b-caed104cd322",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad745f4-b0f1-43ee-8fdd-d5ad77f2cf79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6cea52d-a122-438a-b94b-f3eb6e527541"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa2cc43b-0624-46f8-8e97-b147d3fec90c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3de3a08f-1f4e-404f-bb9a-fabf1acab563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d70a061e-07a6-417f-aa44-c11ba5f85904",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45703582-54fb-4f8f-94e3-8d08e828cdd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8344f6b-eac3-42cc-b85c-11afab7efb6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77763e13-7feb-44b0-a18d-496b7c5aa095",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3b9ca6d-0edc-4b57-aae5-676bce1ab8cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f75f73c7-f5ac-4a7c-adb1-9a8c854dd8a9",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d187b1c8-245e-4e88-a936-1e27a9a1034e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ca1752d-40ed-4f93-a240-1e6c6d5c9bc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61928972-bc19-499e-a197-7bb522eff4d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2492630-184f-47d3-9135-06697f46504a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9634c9e7-8ccf-414a-bbb0-c11bc2705e4a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3789f95b-4553-4d6d-bd2b-e00eb1bb486e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b31dc4c-6a1b-4285-9097-d37459a13d08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5aef44c-f7b3-4cd7-8704-160055ca3b92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e60c448-8fab-468c-be09-32bc4d65a8cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b809c96f-4ed7-4847-a7f0-ac8afafafc9b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa605b5e-e6e0-4cd9-9ed0-27db8779cceb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c5f7263-bca3-4405-aa73-38da5098d24e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d240a640-6340-453d-acbc-550d8c6df8d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b48dfc37-7eef-4e29-851f-787af83b55c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "427ffcd6-f7ce-4f48-9812-f87d2e8d81d5",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52c852aa-9872-4617-bcfd-35205870f114",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b05082f0-35ac-4672-8193-7805bc297155"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a91ab16f-978c-4fe5-8a3d-e598c994eecd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9568ecb-a41e-4c31-bc38-1b38c9e95c62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0417751-e478-4257-ae04-0a6db50f1048",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d69dc1f-8058-4b51-9d3d-ee2d1a2ba7ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "396121c7-73bb-4d13-a032-1ce2ab465846"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a34a5a2-5679-499e-84a6-91a8b054e0a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e741e16-dac0-42da-a893-8575ab32cdea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b102ed6-e068-41d3-8599-d4cc464a4325",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af3aba1e-8b34-428a-ab64-9769e44c8fc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc37f91e-0ec0-41fa-b90a-ae385dadf56a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8688bc19-e9dc-4a2d-a14e-8df4b4dbb042",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e956350-5d22-4efc-8201-98ffdd484d23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bef73cb2-96e6-4c2c-8516-54cb1e0b0803",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "556b7eef-8d4f-44ee-8a79-48278b44ec1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b0c80d4-326f-41f6-92c3-c558dac47420"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8202fe75-5b65-4bee-9666-251bb713fc2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21a081c3-5eb2-4f97-b2ee-30c2adcb00bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc4e290d-a7dc-4b43-9d6d-8bec6b34113f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f45532-8944-48cf-bccd-44f0eab903c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d42efdc-7fa4-4972-8820-198f6bb14ff9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec88d1a-112c-4c08-886e-807b6fc4717f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b326281-7590-4732-a75d-e7ef322b65b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08439587-fa9c-4659-ae6f-bc58404b8683",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f5b519e-647d-4896-b8e2-df8eefb934df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d935356-609d-4384-a6bc-4ca98b352bb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f553be8-ccd6-40eb-9602-20cf376297d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b02a19a-8d88-44e3-b663-fe9245340f28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe23a629-ad46-42d3-9473-15105871941c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c59fd18d-4476-466b-9761-af92762c1f8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfb1ba9c-2de6-4182-b12d-b3ab6ec7dd77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be7f01a2-dbed-4207-83e1-07fa26d22d43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d9d6f5e-6507-496e-9c9e-b6833b18c031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a1dead7-70e6-46ab-add8-329d08a19a58",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e72c7293-31f2-43d3-aff8-1312b28661f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9f93074-c29a-4ec8-9a13-21389cca458f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6229f4f-65be-44ce-afa4-4a157fbce483",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df988d57-aa09-432c-8177-861e3aae1b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c1d872-c0db-4755-99c4-6499df58089b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e49a7ab-834e-4b20-8a6e-e08f40eaa959",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b7ad7bd-1794-4fd3-bd74-41f9c81fe6ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1485274-f248-4988-a445-f25747b8eff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f7f76eb-459e-4bc4-a669-57062f0fd87d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d161176-9b63-4847-91b6-3cb55f6d4e9d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7108739-0b27-4505-b219-52d1df11446e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91b00fd1-ad27-4b24-93d1-094bd823ffd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f2a002-73c2-481d-a14d-414dc69f85e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a62d867e-a259-4cac-8261-977a38e0bf9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "916647a1-ae52-4c7f-8bef-5b39809eb618",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a201e150-8510-467a-aceb-b82f95059527",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bdb35dc-3995-4dac-af62-8d7e8ffb2eeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e52926ff-8b75-44b2-a1b9-80e23008e278",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a49d6e0-75bb-4b08-9d94-2854777db237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a315e9a6-5234-4bf1-ad7d-896d3d0812bc",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79247f06-6041-456e-b8fc-d0a30e37be61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12d761ba-f9e6-4b16-a7c8-75812c799fb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c15fb6-3c81-4d57-a343-e8ea5b5e97a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "410f42fe-a86c-4f23-8c7f-b52fc8fab48f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f3353d-c4ee-4359-b338-9c6fcea94a0a",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97eb5e3c-468f-45d5-a485-648313507b35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99479800-4640-4ded-afec-f71ce37feed6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f72211b-e2d3-439b-a124-e5e3933055d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ef3b1ae-0803-412f-a554-98d609e0b36f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f158be-e67f-4aca-80b3-3c0d5323f467",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add83da2-642e-4f8a-86cb-4b6bf3aabca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc23c8a1-4212-4324-822a-d93ee7c8b876"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30fcbc94-5015-4e4f-8588-2a776457e530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71695be4-d243-4e6b-86b9-f0a989f822cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b5498a9-2100-407d-9b0e-fd87fd72f8db",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49673ac9-1679-459d-ba6d-a32b032bdee1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4565e1b9-3299-4a54-baaa-e735bd3a11c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c6e0e2-ad0a-49a3-a7a1-cbaac984cbbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43316fb5-e04e-4dbd-86a9-b8a0faec7faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94c9dbef-5bc2-48e2-92ed-50b9c0a49eaa",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfdae724-7716-49b7-abff-fc1df1834ebf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cb1312d-02dc-42ee-9497-0c15ed53e29b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bfbaeef-52b7-4b5c-821d-005d86a48c55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9313d3d-ca1d-4836-ac0c-fe5bde72cd06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a4b619-01b0-4227-881f-7e0ea78b9034",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c2614ad-7341-49cf-bb1a-09a3d3b08ad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79c31010-0150-46de-a0e2-f7afa39f9521"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b2bf649-4129-477e-8366-77a065820791",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4445146a-9b00-4e3a-b657-53034e19cc03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2303773f-7b71-488f-bc47-a8227b51dbf0",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c37dc9c4-e31f-46de-a655-757d041dfdc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4589ea98-3564-48e9-9fa9-4883e48dcde3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bda7202-5a88-447c-88ee-5d9af603f67e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b76945e-7acb-4354-b0d9-7a154287235b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c32577e-e430-4ab1-8506-ead4fca681ca",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc125614-6c03-46de-b3d2-78645588ae34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "777ce7e8-90d9-4339-aef8-eda7da90329a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c1affe7-f67b-48f3-8997-c7abdf674769",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e4c952b-6ec7-4ab2-8049-4a0215a7a085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bae375d1-6582-4740-9cf4-f06507fd6445",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0702fd9-0041-4e1f-ac2a-cb3882420a87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b571264b-2802-455e-985e-37ea69fa4a27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6acc1ad0-3762-42b7-9947-02630ef29748",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d03cee5-32e1-4004-8184-d14283686e14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b18265f6-6c56-49bc-b568-143f500a56db",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5091e692-dc47-4118-85c1-a4247abe84e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64fa10b9-3d05-4dec-8703-4bb43a919186"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1764ce2d-7b4d-4ea3-9f35-4dbd0ce67577",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc770000-0e10-4262-af97-2556f1e41f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e376ae3a-196f-4fdd-9756-7977efe33780",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a2c73de-2f5f-46a8-a430-033160c5ab41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b932320-fa94-4071-ba07-c4bd76679f4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c31aab6e-a389-4c1a-a732-63937efc86fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeff9c5b-fd01-4993-a102-fc3a63e89df0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f4e1b5-cf09-4ef2-bc71-0227da5a211a",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "376c6558-9a5d-40c2-8f55-c4957a76939c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abcee1d9-7933-40d8-bbc4-1666b3abcb2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa8ebcd0-6ccf-470e-a3d4-0699ad44f03f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6bd55d5-2039-48ad-b4b1-0b7377e0e0c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03703920-d5dc-47a7-9f95-58ebdb23520b",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a672699c-80e7-4af9-bbe3-4682aeab8937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a489c17e-637a-4d4f-99d0-dd1ce62e925e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f270b62-ae17-4edd-8c04-99a73fd075c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e5b2d2b-c56c-465c-8c7b-d9a7a8924a3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc24f9a-adc4-4307-823d-e8a918667dc1",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4414f0a8-ec39-4678-a624-b2ab4a0f4b4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0f96c2a-5f40-4be5-85ed-a70ff44f7647"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c9e2c6-2176-4cd1-82ce-5a82f6998740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3662d961-8f07-4576-94cf-ba23254fc959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e9dca1-dcb1-4ad9-b5b4-de46c347a840",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "112d78ac-7c56-41b8-8a09-59a09a5cd4e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b859d2c-1796-4ca4-806b-6ecfb53517b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1cbac13-c29d-4e5d-8cfd-9fb4be8668ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7f28efc-ab0e-4098-8467-e9089b6e7461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1997e677-4a79-4247-b82b-874a54eda840",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e278d800-a1a8-43b9-b06c-432c4aa17f07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "649c15f7-086c-4a1f-b73e-745c0f295690"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "478b9deb-6190-44ae-add7-20578bb87db9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7d91715-7c95-420e-9bfd-e42125e08a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37b258a0-9d07-4e18-b1a4-a20b3251f501",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c108cf-9bc5-4e42-85df-22f6b90e4e73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d8e4c1f-904a-43af-97cb-2b3edd548efa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "294673bb-1517-4fc0-95ec-11001bd0a022",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b98bad78-565e-496f-9a82-006759c5edfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f92d7873-25ff-49f5-a150-435076b423db",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a89a0965-36df-457f-8908-b351837d05a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa7f478e-03b5-4158-b520-e3a20b9ce718"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ea6ce7-9f8b-4280-b6b0-3d0fdd256dc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2e30478-a229-404c-b46b-447e837bdb8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc6a02c1-c699-4193-93df-4049d42cf39e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f241aabd-049a-4005-84a5-8f7ca046be7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40780fe7-d047-4edc-9c5b-aadede35e041"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eebd341-1d2a-4263-9e07-98504b614e28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b119bb2-d42e-4d35-b309-8a6b421b3b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91aa63a9-552a-40fc-98f8-114842cf2c45",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74b21e80-7f74-476f-9dac-7b4c0a7fa6a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8241ef91-034e-4065-8a28-a713475bdbba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0eee55c-adf5-4b21-8e28-e07cb5ca5b20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49173ba8-ee41-4bcc-9e4c-fe97af73cde4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1f09e34-aa75-4a49-ae84-7822b6e573ae",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e4eded-e083-4506-9507-02a5c5a8716b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e3baf24-3ec0-4e36-97a3-1f575d137150"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d68b6c-d211-4558-88dc-3dba60ae1b93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bd38a03-ffff-4c00-87a8-b61fa3787990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6da13b1-e165-402f-9e8e-b10340e76a9e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae42db36-c89d-4645-8bb6-9780fe4ab24e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d34c1945-bf08-4c10-9bbc-81feb19f0eea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96de71c3-be7b-42cd-bc56-11a469936c63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10f54dca-a479-495a-b332-2063f6744b0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f53459-f820-49b8-addb-b8f02f7807fe",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef424e7-c4ef-4c4a-a1a7-c5ba336274b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "807b28ec-72a7-4daa-b22b-42ad40eae0d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2efd9844-4a2f-4c70-8565-817592776548",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a91975fb-7723-4bf0-98bf-d4f3b5f4c337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7f7732e-e244-490e-9b2c-3a202c5e698f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c45e1bc-4f27-4816-8424-e853aec9a7cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "273a50bc-267c-4369-9833-f312741135f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80e03880-d96e-48bb-9ca7-13a63edc9473",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fff9f25c-4cd1-4287-ae95-631de9769a96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36fe1ee9-f78c-4d3e-a840-9b3c4a43cc69",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e87524-a845-477c-9384-9f7284f5e210",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d7b9e49-e24e-40cd-af96-4a1359091e98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80217b3b-ca5d-4aec-a79c-5662bbe12971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dd0d8f7-bc29-45de-890c-0fd1ce0faad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1563c6d-6e7c-446f-bdc9-a1b61c9de042",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb60dbb-3412-4590-a224-6c3d96515b72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb956186-5475-4f2a-b8ad-b0622d40336a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf915c3-c61f-4685-be17-f7bc9d3bd3e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b54dfd7f-0584-415f-ab9d-b83fcfadc3dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa35e32-65dc-400f-8859-697236795a9d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d66a703-1ba2-431d-a249-8b382c50f08a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d602cc3-6c99-4515-97e1-a846f681f3ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9828da4-d049-454a-81d7-5bdd8943dfda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83cf5045-4633-46cf-8a54-69e3924b78a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb20b5a-0b36-4527-b9ae-b17bf290bc69",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "739a0610-f32d-4ab5-af85-5149759253ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d769f04-3c0c-4dc1-86f9-17ffc597e83c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53420467-7e58-45af-a333-5afe937f8fa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90411163-0e8c-41d7-997a-c90e0808c8d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc06ebc8-f4c4-4908-909b-5ca9f66bb096",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa783765-7cf0-4929-b48e-51987ee9bf76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b02191e-bed2-461d-878f-e4db9ee0ae82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c24b7e06-fced-4665-adb6-7e966787ffa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36ec73d0-6bab-4aea-99c7-b3171102f477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ef0b99-b9fb-4bdd-a6e5-164f90f86ac7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea03bc8-c7bb-457b-aae0-6017917ea2cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd1adba9-4bd9-4263-a752-72d0b239ce6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e6c3595-80fd-41be-bfe8-9a8227548dac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dda8b61-9472-4510-b758-d16c0da4e2b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfe658ef-afe9-4d06-8bd9-b81013184115",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb6c42a3-6e57-42bd-8a1f-18c8a5302c0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54684bde-1fca-43e5-ab12-ded01fa2ec42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f58e5d-d311-47b1-a3d8-866b1c947c67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "604bf852-7497-4ad8-8ac2-a451703dfa16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e4f1bfb-5d48-45db-824a-060d4ace2071",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed9eca4-813e-431c-80df-6498b418450e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c689818b-4b95-4970-b71a-a3a772879550"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52aac4f1-0a81-452f-9c70-c91578db7d5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bff3f7fb-fc77-43ae-988e-ff46d1107924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51968626-a82d-41b0-a5da-410c30f8286c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b50c7968-c200-456e-ad1d-92e2b6d32e35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "500f9e36-969b-4e6e-adfe-61becbfc0ba4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08cc1b08-1452-4fcf-89dd-2e917f233fff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba2ff20e-9170-44a4-950f-a8583b9f04a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c194e08-92f0-441c-9ecb-4ad5f727f4ca",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "861c7088-7892-472a-bea7-d628feabcf93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a4cee07-aed5-47c7-abfc-4e3c377fc2f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae3d085-6b01-4026-b8f2-81955ddd5143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cef95db6-9c93-427e-9ecf-fb957756a993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3456e4b1-b9d5-4215-83da-2d79463e1b00",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c2568d-1798-429e-9119-ebdc6baf9eda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d76de79-0590-434a-b154-098ed28e27fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f92896a-1cc8-468d-acb5-29cb80eecd13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa9150e8-14d6-4520-b1e0-4ae65b9f30ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9116be9a-2217-4465-9689-199d39684f3d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d28f5758-40e3-4735-b02f-898b2d92885e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00317171-2b1d-4662-ace2-06f3da3aa953"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6e899aa-9b20-4547-a6bf-5ef37e4289a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58f4531e-63b9-4d50-b844-d657a6334ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22668ec4-3b4f-47d5-9728-3e0d33a07469",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fae1eb8-285c-4bf8-8c62-1c8275de9b3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e03189ae-b169-4a51-9b80-44c536fcd9d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76bebe65-d0ac-488b-bd49-92be181125c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfb930fe-1913-469d-ba01-b936fa6f37f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff5eee0-5907-4fca-b3de-dfb708abb88c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1f0c669-7bf5-4196-a245-31961a500146",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dff7f866-3c41-4314-9aa0-076fbb229139"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb78dd85-296d-4dd6-ad72-eaece359c357",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a87f2be-18f4-4449-ae77-5e8e9cbe8ecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b0237aa-149b-4c89-b3ad-78818cb3cdf1",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be456e5c-8307-4eaa-bd33-5942a74c2668",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f68d859c-14e3-452a-af14-04fe1785e71f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d56e818-091f-4138-b597-4e4e0e8ccc70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6c64642-63c5-452f-9146-7b15e6c33ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea38b610-a276-4147-8e0b-ed2149a761ef",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b070b8-6c98-4c4f-8259-98f2125aedc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "802688be-6b07-4959-bf0a-930e4ab76847"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca1f58a1-8721-4259-bb09-a98eeb9ab6f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2005f9de-4b10-4d51-baab-73affc55a973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e4aae66-b965-491b-b893-eaa05e0499d1",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f699fa0-0ca6-40fb-a4a0-9372fe83cef4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5494dec5-62f3-4ead-808d-143786457ddf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f533ece0-c923-4279-ad96-21251d123bde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3cc0b76-a7f0-4052-9e3c-b6c88fd80a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc452ac-feda-4f72-ac36-5668f6e66989",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc37dd80-a06f-43a1-a0b0-46d1ca4f021f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ad2ef8d-7bd3-4c8a-908e-6695955f118e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2979d97b-dc6a-4b90-9643-2355b56e023d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44c196b1-a586-41a7-a1a8-b1c9f9dc5e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f0a72c-4f95-4fb4-b248-42568bd5626a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3228b2eb-3758-4eaa-bb28-4c0b8c6d57d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a116159-303c-4ad5-b008-407018fd22e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f3c4bd0-1da2-4b07-aa0a-bb61e9e8bd43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24db3e8b-2b8d-437f-be1d-37989d817188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2df53332-20b9-4c6a-baf7-1fda95b9ac07",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4b18482-916c-4a87-a49f-9d9421ca2e2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50eaae54-bc15-4ede-a2a1-67e9a9b161a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d573a8-5e9a-4e70-ac5a-211add862c99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "925d97eb-e959-4651-95ac-6a8d9860a049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bae79de9-937c-4112-acf6-abed6a8cf88e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e00228e7-7826-422e-9d63-ad75ee3b8347",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8917e9d5-5355-44fe-bda6-b93a98de8d80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a68e61a0-3f6e-4cb3-90cd-fb9e16dc4f5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88bbe779-9f02-4e70-bccb-12a3fb911368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c488baf-fe47-4e15-8601-23ed9668f46b",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ed151fe-a5e7-49b1-b7fd-83925f0e1902",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c6babc9-2a99-49f0-bd62-7cafb1525b1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "727d03bd-6111-4c07-a2c8-719b00beb465",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dc2a2db-6fd4-41d2-923f-355f4fda157f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97758064-7ab0-4724-b3af-cd00f67f738c",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e958a5f-6071-44aa-9c49-14d374d636bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6355aba4-5f59-4d4b-8c86-83598e87a156"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba7c463a-88e3-432c-9ac2-05cae76d2bb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a4baaec-0e73-4505-a04f-6a8640db3a7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae0d504f-459f-4634-913d-e17620f717c7",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a48d2acb-8458-44e1-831f-ddb3e8dadf47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6b82c45-a172-48dc-a79b-c0be6665c9f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "befbf8af-43b8-46f6-882a-da5c38654db6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d89acb0-86d2-4752-9e06-af425d96a97d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d37b8474-ad4b-448d-a0b6-5639d597ad17",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e98102c2-dac4-4472-b1fb-d65e9b5b86f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1dd9f2e-a78c-4108-bed8-847eeabeb26a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c3853e3-baf7-45f1-abc1-e8bebb6760aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b4c9ae9-6ccf-4dab-8401-bf63c895326d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2249d552-b5f1-4b25-9960-65fedf249cab",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03a3cefc-2ded-4d71-8816-05cee7d967f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54525370-690b-470e-8b5a-eab8dd22fbe0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36a35525-9bcf-41c2-8e5d-ae1fce9fd7f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72e7696c-991f-45e3-9739-c50c7bb1af03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7643bb0-7bb5-4837-a158-bf465b1c3587",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa7ea8cb-6d17-4d6b-b146-f1a94ef2e342",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53da2dcc-b4c0-4a5e-8dda-edda5a5ce0b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "397505f0-71ec-4309-b596-f76b4a89b5fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ced13fb7-60b9-493e-b067-1946fcad9444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f80d49-fff6-45e2-831d-e1e327091204",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18919e6f-176a-4bb3-b57f-6e12fcbb7f3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a44eda0e-7da0-4d65-a9bd-28c09a131008"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84544ce5-9dc1-44a3-8704-de681d486721",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "871e662b-e96d-49dc-8862-dfc773afd2e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "128b181f-07de-42cd-831b-c8067d5b5e14",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "507e5678-1220-4469-a27c-49ac1dbe666b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5167d1e-e1d3-4b71-b42a-3694fd4f09e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e13ee3-c9e9-43d5-a179-7b137e5b8414",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59956ed7-4248-444d-93be-000c32bf4933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3648c2a2-8cf5-4abe-b784-39b04bf0365d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f396b8a8-3255-438d-bccf-912ba17092b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f0ea7a5-f56c-4dc5-87b2-a93b4ac8ee35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ed791da-c540-4a47-af74-691150469bff",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ff0694c-ed58-4cd4-b4a4-394c5bc348e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "733f32b4-02dc-409c-b9ca-b4185a8c9866",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54503828-c79f-41a0-9c3d-364ba50847cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6128f16d-c02e-4fe7-883b-9034055fcbad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc82048-6fd3-4f2e-8438-3ba696b7c4ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "379bb404-d31e-473e-9d60-58b0fd974425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31c9bc1a-c4fa-415a-b58b-b88953597ada",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c39303c-ea3a-428c-bac5-037d53093dfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b33f3ec-23fc-4675-8759-b5f8fa5e9eaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df2c8556-9964-4880-bf78-6bc11398cc36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb4cc6ac-1192-4777-9a33-46e8ab61f448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590fd2b1-4a5a-4272-bf6d-5c7010121526",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9db2cf75-72c2-418a-b5e9-6f6abf0cee22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "760d1925-ce0c-4cca-b07f-2816ceb553c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "831b6ead-a3b4-4d59-b6a8-27608f772179",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afbc4220-bd41-4041-bf71-ab1662c1e2bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f19b9215-1f04-4226-9c96-60fc59ee6be5",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b8265dd-bcb0-4625-bce5-b9d81b8dcb88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "518ea496-4ced-4d78-9660-c7ddc1ec91e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61e6ba9-26c0-4e5a-974c-400eb0529c8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3c87691-a9fc-4bf6-bf6b-101acf457dd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac5e987e-bb9a-4dec-b262-611f43fae357",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b69d7be-3d75-496f-881c-71a1e67f7733",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "955ab158-3dd6-4b02-9ccc-2d545d1d8221"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1193b9ed-a6f2-4ae5-9f4c-13fa5abbdfe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76d2fde3-a8cb-4c70-9626-b3e1e82a1773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dabb4219-1857-402c-8afb-8300a47c23d1",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "990a72d6-576a-4256-98ef-21b2ca1aaf2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d074581b-8f62-4fe6-b00d-b81d75733e58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "785b28a2-7468-4169-98a8-7005b574d5b9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fdbbd2e-2b9f-4486-8844-d127e8376c42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0619daa-bd40-4f20-bbe3-82375fa46081",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57983397-c6a7-441e-8e4c-742d6db6e52c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a5f87f1-a103-4ec9-891f-60a0336d1d15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eda755cf-cbd4-446d-aeaa-e4c899146b1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcec5b48-4693-439e-96f2-bf2b300ff4e5"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d0c82e95-7f1a-4d6a-8945-11a72db86a19",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "afa5cdb0-9e7f-4aa2-b022-5ebe3064bb24"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b3849973-cbc6-41d7-bdca-8f5a5619a0a2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b4a15a6b-9173-4116-ad7a-7b2bb5bf0278"
                    }
                  }
                ]
              },
              {
                "id": "d1566f7c-ae8a-4214-ac50-dc6dfe89dca6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ae1f11dd-bf09-438e-b809-e4f156ad8114",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e643b989-ca56-40ee-b003-a093d944ef1b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "183c2ff4-cd70-42a6-97aa-6a4f273b01c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc8b0c57-23f9-4e39-84f9-2fa1fb8ddbe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3f67f1d1-b9ba-4c04-8159-e196ffb07b65"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3821f37f-74d9-4a7a-8d0e-31813278a360",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "079dd5fb-96d5-4357-8489-db8bbf8d2aed"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "71ecc414-988c-481f-8152-9ba66a3a3336",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "434f056f-5091-4436-8e99-08cdf0364b5c"
                    }
                  }
                ]
              },
              {
                "id": "42fc5cc3-5c1e-49de-9826-a45ebdf7fff1",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "4f43e465-b89d-463d-9b38-c19534e633f4",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76a93316-e495-4b1a-8f01-151aa7e5e3c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "92ddf233-9864-4d47-b890-19ef43398d3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c8cfca-3a8f-4c33-9be3-f4692d115220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b158ce4-db21-4b88-802f-e3eabf111e12"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4f238220-3dcd-4088-8bff-4549f0ae81bf",
            "name": "Positive Testing",
            "item": [
              {
                "id": "973ec187-d46d-4d0f-8b5f-33846d9c7fbe",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d23520ce-51bf-43fe-b147-6da2071d59bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "852c8c96-4cf2-4c19-82e5-edf299f3b2af"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ef15743-c7fc-4dfe-8e6f-32ff80ed9e35",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c3fcb240-8105-48da-9a83-9a701547c01f"
                    }
                  }
                ]
              },
              {
                "id": "f148d120-e6b5-4f7f-abf9-51f6866c6bdc",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8661898c-1a0a-4577-ad89-d0a8168c42e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "bd04c3ed-f26a-4089-ba5a-6c95f4381482"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c4cdc7a6-c28d-468d-bfb9-f15577c8f65f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d40dd72d-4e3c-433e-92d0-7de32888c710"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4a9faad2-df81-4fc9-b859-1aa7d85beac6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c54fe831-0679-4c71-9443-47b50873762a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2ba73c21-d246-44be-bb52-14640c6986a9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8c7ec37c-641a-4c74-9b12-ca6eb2bcc15f"
            }
          }
        ]
      },
      {
        "id": "0d55cf5a-14f4-430e-8b4c-e2ab35c47755",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "8bd154b6-49f4-4576-a871-5876f4bb995e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d3c8bedd-d93e-4970-b0a8-cd03da13991b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d13b1ccb-5b3b-480d-a05e-f500396374dc",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc089268-5523-4b5e-b551-43c0a4f8a2e0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ac5ee8cc-4fd5-431d-84e3-b77d158a9867"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "197a60c5-5c4a-4499-817f-59ba84d153da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "99429bd4-4b2c-4abd-ae5a-dd3e853a9312"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "111b763e-baae-4841-aefa-b0a281d1d2cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1d5dcd80-10b2-4a73-853b-b92be59a449c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "219a91b3-6ff3-4e5e-b07b-44e6e74da00e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a96e4116-7363-4a38-a18f-f4c420efc529"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0729aa45-3090-43dc-9488-82c4bdefe713",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9a7cf303-f69f-4251-9979-a992c416b3a2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d1996996-3fbe-4249-b82a-87f89ecaf2fb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c5f54a9a-abd6-40bf-8755-0713a403a3d0"
            }
          }
        ]
      },
      {
        "id": "5423ac3c-5512-4e61-a3c6-69868cf40e91",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "83908d5f-3d3b-48ec-866a-5331fa269ff2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d5351425-6c30-4f49-a7b8-c007b8ad7cf5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a5d63f6d-b31c-42ce-9533-2e49740a3887",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b71d6524-2e4d-4ba4-b363-7779ca5c52e8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f9471065-2393-4334-8f0f-87662381a27b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f65fff83-f899-4c62-af63-8e01dfc60a14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "46150826-96e0-41b4-ba72-ce353e4a9876"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45251b52-ded6-41a3-b9fc-a5e590d1956e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d7a98f95-18e4-4fa4-9c9f-e110afdfcf85"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef9d0931-106e-477e-956f-f1b424764049",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e625fe8-99c5-4143-8463-fed11d17dfee"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ecc9df34-7cad-402d-b809-71ba5b37feb3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "630f263c-efdb-4b95-8181-a9774fb296ff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b651871d-6c27-4a22-80da-b3f0420a4712",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2a146cd8-7179-4049-9c07-2b7976ddd6c4"
            }
          }
        ]
      },
      {
        "id": "b34fb121-d824-4fe7-83f7-d528e210ac41",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "58d31814-d78e-441e-a966-a4e4277e3f12",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3d93a340-a36d-43eb-b2e1-335b85801f73",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b2f1382c-c941-4349-a425-864fe926c7de",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e2b225c-aec6-42cf-8611-c6d7526dd23c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5f1ed06-8f1b-4a29-b46c-e31acd874cbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da71e110-014b-4f19-81b1-683587c14586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "626a3a47-fb41-44a1-86fa-34dbc4a1e9b9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7de4d568-7268-4bde-b6ed-4702a8513edf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a6dbc653-2b25-46c6-a42a-fa2e629731b1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "11014941-c066-4db6-837b-bf6331f00fb1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "01a1ef02-3261-459e-99ab-3ab577b77723"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a51b52e3-2d14-4196-b7e4-dc0832023a48",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7ef09cde-6ed4-477d-960c-8e782157dd65"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "51fc06b6-19d6-45b3-b863-799471aa1c73",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ccbb9b73-53b9-4c24-b7f1-778d80dad17a"
            }
          }
        ]
      },
      {
        "id": "f7968e9b-6a1b-4e47-ac35-167b6a6292c5",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4361ee7e-3398-4e0e-9ba3-5b343239167f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "570e2a9e-9e56-4a57-a0fc-44e95faa4808",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "dcaaabe0-fa46-4a73-9d8c-71c305be2602",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c5c40e22-2c1c-4179-861c-be67d8265cca",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "448bdda7-d5e3-40c6-9767-975ac9a2fcbd",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1853,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 246,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 495,
        "pending": 0,
        "failed": 30
      },
      "testScripts": {
        "total": 931,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 491.4837398373982,
      "responseMin": 7,
      "responseMax": 27923,
      "responseSd": 2357.809667593505,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1686357596306,
      "completed": 1686357730181
    },
    "executions": [
      {
        "id": "747cac7a-f51c-45c8-8026-67af099d5d10",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 244,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b74d452c-931a-459f-a1b0-61bdc8d893ee",
          "httpRequestId": "c8516416-63c2-4303-ab4e-98d03228d307"
        },
        "item": {
          "id": "747cac7a-f51c-45c8-8026-67af099d5d10",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "17a57cc3-53c2-438b-90d0-69141212584a",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 0
        }
      },
      {
        "id": "d4f59f1d-b57a-4ca2-97f1-2a4514bc7b89",
        "cursor": {
          "ref": "8f7dbe36-f095-4420-9e64-45fd10a9b8c1",
          "length": 244,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a448e247-ed20-416f-841a-a624d8d3b05b"
        },
        "item": {
          "id": "d4f59f1d-b57a-4ca2-97f1-2a4514bc7b89",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "2c42afc1-c5c4-4ba6-a21b-a9fd8fe9770a",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "f933e980-0826-484e-bbaf-8bdcbcf4407a",
        "cursor": {
          "ref": "2a1ef995-7ddd-49d2-90c8-ab15fdb94703",
          "length": 244,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f9449229-12f9-47e1-923d-c3b4766dd4bd"
        },
        "item": {
          "id": "f933e980-0826-484e-bbaf-8bdcbcf4407a",
          "name": "did_json"
        },
        "response": {
          "id": "9f51d06b-ec53-49c7-b762-b003686db120",
          "status": "OK",
          "code": 200,
          "responseTime": 439,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96af8042-db53-4a73-916f-9c99e551e858",
        "cursor": {
          "ref": "28ff65fb-c5d4-4d6d-92ec-a95adef7a29f",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "40d71e94-1a41-46e3-834b-ec34c850b680"
        },
        "item": {
          "id": "96af8042-db53-4a73-916f-9c99e551e858",
          "name": "did:invalid"
        },
        "response": {
          "id": "0d0f0c80-9fb5-495c-a8be-878892775567",
          "status": "Not Found",
          "code": 404,
          "responseTime": 21840,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "96af8042-db53-4a73-916f-9c99e551e858",
        "cursor": {
          "ref": "28ff65fb-c5d4-4d6d-92ec-a95adef7a29f",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "40d71e94-1a41-46e3-834b-ec34c850b680"
        },
        "item": {
          "id": "96af8042-db53-4a73-916f-9c99e551e858",
          "name": "did:invalid"
        },
        "response": {
          "id": "0d0f0c80-9fb5-495c-a8be-878892775567",
          "status": "Not Found",
          "code": 404,
          "responseTime": 21840,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "52bd7efa-1151-4e96-b768-67c8c859208d",
        "cursor": {
          "ref": "480d4f3a-d209-4c6a-8fb7-1dfd183a22a1",
          "length": 244,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5a33251b-fedc-47b0-a95b-d2830d8980f2"
        },
        "item": {
          "id": "52bd7efa-1151-4e96-b768-67c8c859208d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "6b6dc075-c892-4290-95ef-88ea3661fad4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 73,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc4808af-0796-43a5-808f-479fb326e493",
        "cursor": {
          "ref": "27a9d1d0-7d5b-4b4b-9fea-373d511bc49b",
          "length": 244,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9be645bb-adf4-4e45-ab96-985ff8514f89"
        },
        "item": {
          "id": "cc4808af-0796-43a5-808f-479fb326e493",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a3b6f4ba-6281-47f4-bc25-b7e966dc9de2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 114,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5990945-edb2-492a-8256-dfd7a266ac7b",
        "cursor": {
          "ref": "0b33a9af-f9b9-495b-ae67-9ab78935b310",
          "length": 244,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e0e5236d-686b-4cf4-9f02-a9cdbfaab905"
        },
        "item": {
          "id": "c5990945-edb2-492a-8256-dfd7a266ac7b",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b3543c09-120b-4fe5-901c-9fdac20efead",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 277,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "cb64a909-816c-47b5-a128-483961d28c32",
        "cursor": {
          "ref": "efb9e672-9d68-42cd-b0b1-1d52cb29463c",
          "length": 244,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9bc3fb65-8766-4dba-9656-0443c4680345"
        },
        "item": {
          "id": "cb64a909-816c-47b5-a128-483961d28c32",
          "name": "identifiers"
        },
        "response": {
          "id": "d061a1ef-8daa-4968-ad9e-f8a65b003a57",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b2931f0-83b9-4ca6-a6fc-9fa2e639d86e",
        "cursor": {
          "ref": "e54aa2d6-7270-4de9-bcd1-6f1a503d6b53",
          "length": 244,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ad604b0f-dfeb-4012-b571-cd479bc1f4ab"
        },
        "item": {
          "id": "0b2931f0-83b9-4ca6-a6fc-9fa2e639d86e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c2bf7e8c-aab2-4914-a50f-45dc03adba9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c6346ff-192c-44b7-bfd6-43fc6be2000b",
        "cursor": {
          "ref": "716a8a8e-fa1a-49bf-ba7e-71422fc2b79e",
          "length": 244,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b3a369ac-63d1-4938-a341-a4ca94751a16"
        },
        "item": {
          "id": "3c6346ff-192c-44b7-bfd6-43fc6be2000b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "09a3c48d-13d3-402a-8140-1f06b9ae5603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1030,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac473338-fdca-4658-ab9a-a3f1f9d47d63",
        "cursor": {
          "ref": "701b731b-cf79-4941-8ca1-77d7ef0c8335",
          "length": 244,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "98ff2134-0e45-42a9-83e0-42c59f8d95f0"
        },
        "item": {
          "id": "ac473338-fdca-4658-ab9a-a3f1f9d47d63",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "6279f62d-04ce-4a13-af8b-560e0040d7e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b88c1b14-0063-47bd-a899-91e4f4580bb7",
        "cursor": {
          "ref": "943eb79c-9c3f-4b0f-9f4d-185ddb0c8f9f",
          "length": 244,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2fbc8e17-af74-4b7e-b561-0d103eded3be"
        },
        "item": {
          "id": "b88c1b14-0063-47bd-a899-91e4f4580bb7",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "0dec2f3f-1092-4503-8d56-d356af0880e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 467,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ea105f-9a59-4c67-ad9d-06583dbb44fd",
        "cursor": {
          "ref": "bb8ceed2-5da5-41ac-ba54-0cfa300a0470",
          "length": 244,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b009b16e-1a6c-4c9e-9ec7-ea2b74c459df"
        },
        "item": {
          "id": "67ea105f-9a59-4c67-ad9d-06583dbb44fd",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "087031a4-28dc-4f39-8cce-06921ccf6469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 168,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea789e66-b862-4745-a1a1-fcae0db9a739",
        "cursor": {
          "ref": "22d15240-17ab-4779-93f3-06da056f12b8",
          "length": 244,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "c56cc8fa-3d45-4b7f-8c2f-74ab2e4fec04"
        },
        "item": {
          "id": "ea789e66-b862-4745-a1a1-fcae0db9a739",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "536ea67b-d780-4a60-b456-6c3575b2f8da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 299,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03c565c4-6267-41cc-834c-6b818bf3016b",
        "cursor": {
          "ref": "587eca71-0591-4552-8e28-16c2ff948e50",
          "length": 244,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9961ddec-7642-4e68-aed0-4ab59bf5d710"
        },
        "item": {
          "id": "03c565c4-6267-41cc-834c-6b818bf3016b",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ad63430d-15ba-40ac-bbb9-5dad799a1a19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 671,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d631d197-3005-4067-8237-f52782bde804",
        "cursor": {
          "ref": "6cc9a93e-b3db-4a83-8fbf-3381cf3523a6",
          "length": 244,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "971fb81d-1a9f-41ed-a182-d5486eacac8f"
        },
        "item": {
          "id": "d631d197-3005-4067-8237-f52782bde804",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "81895c24-27a3-40be-ade0-ec6adddf62e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21a67281-6c90-481c-86bb-59f699692322",
        "cursor": {
          "ref": "c864c921-b093-445d-8c4a-124c3d97d378",
          "length": 244,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d2adc0f6-c6ab-4a30-a69f-16b78ee31f98"
        },
        "item": {
          "id": "21a67281-6c90-481c-86bb-59f699692322",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "acfad287-712d-4d2e-af80-f3d78f3644ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f394248-e47c-4351-bb36-c7a21d8c06dd",
        "cursor": {
          "ref": "e6f81e9d-8e92-40cf-b160-8fa2d89a73c0",
          "length": 244,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f093a77a-e6aa-4cfa-bd55-6a1b656f008d"
        },
        "item": {
          "id": "1f394248-e47c-4351-bb36-c7a21d8c06dd",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "9885484f-202f-43ab-a4ba-23756a3c68a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 342,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf08ad4-895e-4f2d-a2d2-bf7ebec1a025",
        "cursor": {
          "ref": "c9b339ff-86a7-4c6b-b75c-d4292c10a37e",
          "length": 244,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2da179e5-f564-4299-9e8a-5ba7ad1a2754"
        },
        "item": {
          "id": "caf08ad4-895e-4f2d-a2d2-bf7ebec1a025",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "589b5ba6-5ad1-4ed8-83f9-b608bf99c9e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 354,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57aead41-6856-421b-b99d-4592780c0094",
        "cursor": {
          "ref": "a2261e6c-f802-4464-9f75-ca5e8698bb64",
          "length": 244,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "6d355cb0-d62a-4039-ac30-a6f19c34b3ce"
        },
        "item": {
          "id": "57aead41-6856-421b-b99d-4592780c0094",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "ad1e89db-04c5-4040-9806-02c2dab24979",
          "status": "Created",
          "code": 201,
          "responseTime": 828,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "5115d3a5-8740-4077-ad99-a07705b8d996",
        "cursor": {
          "ref": "7439973d-43c6-4b42-ac38-fbac53977f4e",
          "length": 244,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "0d75e363-e046-4218-9033-026349feec82"
        },
        "item": {
          "id": "5115d3a5-8740-4077-ad99-a07705b8d996",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "1209dc8d-8a74-494c-9e3f-033c4aef9db1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1180,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6622e349-b259-40dd-9bbf-b8998cffc2ed",
        "cursor": {
          "ref": "365f13da-cad0-4516-80b4-bf0167bd7262",
          "length": 244,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4b37d236-732c-406f-aea2-ca74cac8f9bf"
        },
        "item": {
          "id": "6622e349-b259-40dd-9bbf-b8998cffc2ed",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "39899c99-3bb8-463e-9a9a-d55fe787f4dd",
          "status": "Created",
          "code": 201,
          "responseTime": 4962,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "216ec516-4ec9-4009-9a6e-a72abafd8c0b",
        "cursor": {
          "ref": "0c8b5a9b-a1a9-4aac-9b6a-9c76364c158f",
          "length": 244,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "30a5fac4-ed63-4edb-80c3-dc1cf97070f3"
        },
        "item": {
          "id": "216ec516-4ec9-4009-9a6e-a72abafd8c0b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "9f5adbd2-0548-475b-849b-304fc110be78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f593f2b0-4993-426e-9e52-a545b5a08fe7",
        "cursor": {
          "ref": "ea053f8e-f2e4-451a-ad57-2c5de1509e21",
          "length": 244,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "63dab759-ba86-4bd9-80a5-a17df1b0a177"
        },
        "item": {
          "id": "f593f2b0-4993-426e-9e52-a545b5a08fe7",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "14245618-0666-411c-ad0c-38d739520d61",
          "status": "Created",
          "code": 201,
          "responseTime": 5973,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "82cd0038-ad5c-44f0-aa81-59a636057ff9",
        "cursor": {
          "ref": "49ab144e-e2cf-4075-aece-b364a84a59e6",
          "length": 244,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "4449b319-aef3-4077-ba18-613d2ab99f10"
        },
        "item": {
          "id": "82cd0038-ad5c-44f0-aa81-59a636057ff9",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "69ff4b70-e2b2-4a63-bff2-8a1573e43607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae287e36-71ab-4cf3-a79e-6995cdbbeefb",
        "cursor": {
          "ref": "5df50c3e-a490-4d3f-b58d-1218d2ccc7ab",
          "length": 244,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "8539f755-359d-45ad-b3ad-2d92010121e7"
        },
        "item": {
          "id": "ae287e36-71ab-4cf3-a79e-6995cdbbeefb",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c8916746-67e2-4d05-aa5e-3429a71ae4ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32f99c5f-be8f-445f-81d4-8fefee404e25",
        "cursor": {
          "ref": "9069879f-a32a-4afd-af56-5873491a8257",
          "length": 244,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2e726145-4fb4-4641-acc6-d10190e223c5"
        },
        "item": {
          "id": "32f99c5f-be8f-445f-81d4-8fefee404e25",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "1ed92f5a-6287-4199-93c4-405f4064fb90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82b303cb-d4d5-4656-b9b5-5872308ec068",
        "cursor": {
          "ref": "6b87d234-1ba4-4ec9-8ca4-8d4b1fd1c2da",
          "length": 244,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2c006b4a-f5b4-46eb-b5d2-62a2d0a9a242"
        },
        "item": {
          "id": "82b303cb-d4d5-4656-b9b5-5872308ec068",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "5bfc611e-f9c7-4be7-b716-759a2584a4cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1131deb-1d7a-45fa-a463-0bc1ca128386",
        "cursor": {
          "ref": "6ec4288a-8051-4489-8cc7-0af7bfadfb33",
          "length": 244,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "724cdd2c-a51a-4c15-b13c-499050700ba4"
        },
        "item": {
          "id": "a1131deb-1d7a-45fa-a463-0bc1ca128386",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "db163b1f-7186-44c4-a845-37e1245613d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dc7391e-fb5a-4b91-8d9a-6e99ba7676fa",
        "cursor": {
          "ref": "a81dac9d-d942-4be7-ae57-dc3c178d2742",
          "length": 244,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e1470efd-f6d8-4960-9eba-b1bd62a44319"
        },
        "item": {
          "id": "3dc7391e-fb5a-4b91-8d9a-6e99ba7676fa",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d5c0a3c9-83b2-43a8-b420-dfca27aa769a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec64316b-95d6-4ae7-b20d-731558310b26",
        "cursor": {
          "ref": "2ab49366-d763-42eb-b17b-9956d2979cdc",
          "length": 244,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "622272a5-ab27-4b1b-b9b0-dc66e79f784f"
        },
        "item": {
          "id": "ec64316b-95d6-4ae7-b20d-731558310b26",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4a974e3b-57fe-4f38-8888-b9b1ee5bc774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32b92faf-1e9e-495a-9b8c-2ba6df37e9aa",
        "cursor": {
          "ref": "573bec7d-d716-49f6-a4d0-c5486d5cbf66",
          "length": 244,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "97e8274b-eddf-4b20-91ed-230b71f150af"
        },
        "item": {
          "id": "32b92faf-1e9e-495a-9b8c-2ba6df37e9aa",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "fed49f06-6e03-4f3a-9fb1-a617d21c5eb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34b821f1-6eea-48c3-8a0a-60cc25a5e56f",
        "cursor": {
          "ref": "a86fb9e3-2180-483f-b6fd-b155714e4d20",
          "length": 244,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "40135c46-ff68-4022-83e2-8f0f981e1dad"
        },
        "item": {
          "id": "34b821f1-6eea-48c3-8a0a-60cc25a5e56f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "20b8f724-f126-4fd9-b7f0-7e79e70cc057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd4e5b78-30ad-421e-a9d1-2401f87da805",
        "cursor": {
          "ref": "987c5596-0bef-44c6-8444-8a7d25c10371",
          "length": 244,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "83e5b4ba-e7d7-42c5-99e9-ac29d64b915c"
        },
        "item": {
          "id": "cd4e5b78-30ad-421e-a9d1-2401f87da805",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "349a0abb-2f9d-4826-b258-20153265e780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9496b571-e104-4ca6-b3b0-e141952c7aa7",
        "cursor": {
          "ref": "54ca2963-c698-44a6-90be-8e983127d43c",
          "length": 244,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a0f35354-4007-46e4-af9c-f2cb87c30549"
        },
        "item": {
          "id": "9496b571-e104-4ca6-b3b0-e141952c7aa7",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "aea6c9b6-5188-42ef-93bb-6bef5b13266e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13efa4af-108f-44c3-8406-da3019147452",
        "cursor": {
          "ref": "135b45ee-d163-438f-ba33-8de93276af11",
          "length": 244,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a429976a-9fe3-442b-8a03-2a533ec8278b"
        },
        "item": {
          "id": "13efa4af-108f-44c3-8406-da3019147452",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "2f307f06-8a40-4895-bb8f-2834705caae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e126e828-371a-44e7-b112-7700152cdf7c",
        "cursor": {
          "ref": "f5cd6f18-31f3-4b6a-a2b3-1440b5cdbef5",
          "length": 244,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "74596a1d-a29c-46c6-9cbf-2c70579aeaff"
        },
        "item": {
          "id": "e126e828-371a-44e7-b112-7700152cdf7c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "294d02fb-8d7e-43ad-bb9e-449e556dcab9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4669188-bb7d-49e7-843f-e58b2091ca9c",
        "cursor": {
          "ref": "79729a37-b8d4-4bf7-9ecd-35ffbbbe97a0",
          "length": 244,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1f3cfd6b-a8f4-4430-82eb-bf6502e68c2b"
        },
        "item": {
          "id": "c4669188-bb7d-49e7-843f-e58b2091ca9c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "978aa004-cf41-438e-86e1-85f52d8b2183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc677c7c-da85-457c-bad9-a1afdffbe213",
        "cursor": {
          "ref": "529efe17-7cf8-4d95-8466-04c9cb46c043",
          "length": 244,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "58a44e44-6b57-4489-91ae-89b7903f1be9"
        },
        "item": {
          "id": "dc677c7c-da85-457c-bad9-a1afdffbe213",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "5c1fb588-2616-4dbb-843d-d7545e50880c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d360cb1e-7c88-4b19-97bf-353283607768",
        "cursor": {
          "ref": "b32b7d90-cb77-4886-a0cf-5eeadae639aa",
          "length": 244,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4d4460f8-c08a-4a73-8b82-ead29938d91d"
        },
        "item": {
          "id": "d360cb1e-7c88-4b19-97bf-353283607768",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "008f8ed6-983b-419f-8860-958a0eb3e08b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edf13591-21c6-499b-8f9f-7ee9cab731d8",
        "cursor": {
          "ref": "467378a3-e957-45e9-924a-369c26d71087",
          "length": 244,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c6b403c6-d289-4bca-912e-27782c2543c9"
        },
        "item": {
          "id": "edf13591-21c6-499b-8f9f-7ee9cab731d8",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "4fe36fb2-8c82-41ac-b674-88e52efcc9cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "718b278d-9a18-4774-b550-6fa77d826191",
        "cursor": {
          "ref": "3b86eb6d-c4b1-40d8-a9eb-60ff19342a9a",
          "length": 244,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "bc3b3da8-917a-40dc-996d-002c546bcffc"
        },
        "item": {
          "id": "718b278d-9a18-4774-b550-6fa77d826191",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "cbdd722d-722a-4959-98de-f30e92fafb40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95a10a92-bd09-49ab-b0c4-71e32f62c4cc",
        "cursor": {
          "ref": "5a9083e0-b3e6-456a-8230-df722f2ef7a1",
          "length": 244,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ece001a9-3c08-49ca-9551-8aaa7dd9b730"
        },
        "item": {
          "id": "95a10a92-bd09-49ab-b0c4-71e32f62c4cc",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "a4797906-d20f-4e00-afce-b32525bd05d4",
          "status": "Created",
          "code": 201,
          "responseTime": 2646,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "44df5349-635a-4f61-b5f1-267889029d4b",
        "cursor": {
          "ref": "53aaddd7-9da4-4e41-a1fa-058375f1797c",
          "length": 244,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "bc1e2453-8955-4390-9513-3319a12a377e"
        },
        "item": {
          "id": "44df5349-635a-4f61-b5f1-267889029d4b",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "7bd6da60-ad6a-4ec1-9eb3-e346ddb21d58",
          "status": "Created",
          "code": 201,
          "responseTime": 2858,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "ea8aa005-8b82-4807-a611-6af54b3de24a",
        "cursor": {
          "ref": "f782e46c-8050-462a-9540-a80f2a34546c",
          "length": 244,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ade240da-cf6e-46df-b7b7-38b703971f1b"
        },
        "item": {
          "id": "ea8aa005-8b82-4807-a611-6af54b3de24a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "7d12d223-d3cc-4392-ae32-2e9593b42f14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ed86145-497f-434a-8988-d8f4f57f32fb",
        "cursor": {
          "ref": "4e39e64a-63d1-4db0-ade1-097f91aad085",
          "length": 244,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c859dcae-0324-40c9-8a23-0d7a67c2d126"
        },
        "item": {
          "id": "4ed86145-497f-434a-8988-d8f4f57f32fb",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "254f430b-9dd9-4c2f-9da7-3efd0dc74276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45926089-6d1b-448f-ad90-15ce74a32fe5",
        "cursor": {
          "ref": "a4a3d329-f054-4088-801f-e826b2bfaa63",
          "length": 244,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "04e2bac9-204f-4d2d-b23f-efdf4c994ead"
        },
        "item": {
          "id": "45926089-6d1b-448f-ad90-15ce74a32fe5",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f6471e55-01f6-451e-8e4a-3d83c92948d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "621bff24-526d-47da-a4bf-2630dad91a5c",
        "cursor": {
          "ref": "cb6a95de-4ab2-4635-a546-1d3f7ca0610e",
          "length": 244,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2f992076-aaf3-4157-aedc-945eef057c76"
        },
        "item": {
          "id": "621bff24-526d-47da-a4bf-2630dad91a5c",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "88147360-a28e-49e0-85f7-545ffda86051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f473d7a-4358-4e9f-a6e5-b31f83634582",
        "cursor": {
          "ref": "20063013-f96d-4e5b-81a5-b41aa484c972",
          "length": 244,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2350552d-d0b1-4dd8-8d5a-5aad96c48675"
        },
        "item": {
          "id": "1f473d7a-4358-4e9f-a6e5-b31f83634582",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "3670b2e4-f4ba-405c-9727-1f1a73b13e0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f1a875e-5177-4310-a624-8a7f9143bb52",
        "cursor": {
          "ref": "08e571d6-c2e8-406e-8d82-004ffb3bcbec",
          "length": 244,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "303f0de6-4e3f-4559-85dc-0c758b8c436f"
        },
        "item": {
          "id": "0f1a875e-5177-4310-a624-8a7f9143bb52",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "3c6be73e-e086-4b6c-a3ce-98abd9c448ba",
          "status": "Created",
          "code": 201,
          "responseTime": 2944,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "562a1200-ac5e-4893-a6f8-ff7d2c7c5fdb",
        "cursor": {
          "ref": "88bce6c6-160c-47b1-8539-b50843e5007c",
          "length": 244,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "700520db-d442-4568-9302-7b0b472c77d1"
        },
        "item": {
          "id": "562a1200-ac5e-4893-a6f8-ff7d2c7c5fdb",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "9f006dcf-3063-4e7d-9151-6c6c8ee94248",
          "status": "Created",
          "code": 201,
          "responseTime": 2961,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "c9db1f15-9fbe-4149-b130-cda77c26c310",
        "cursor": {
          "ref": "9f176920-4ff7-4ef0-bc9f-6d730fad659a",
          "length": 244,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e77d6e07-0018-4aa3-bb1e-e06b0c530297"
        },
        "item": {
          "id": "c9db1f15-9fbe-4149-b130-cda77c26c310",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e699e7f3-dfcb-4ecc-87da-4f59946c33aa",
          "status": "Created",
          "code": 201,
          "responseTime": 2866,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "4dfeb94d-26df-437d-b94b-88e72ea26cdc",
        "cursor": {
          "ref": "a480140b-ac7e-4d13-b41e-5ab4be9db21b",
          "length": 244,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5bbe116d-7e3c-4dd7-9190-a89a5de39e60"
        },
        "item": {
          "id": "4dfeb94d-26df-437d-b94b-88e72ea26cdc",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "be87c4dc-3abc-4921-b7d2-80cc6c9eb41a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "725d9a16-897b-49d3-866c-51bd358107e4",
        "cursor": {
          "ref": "772d66ee-c073-487c-bc1d-a4bd9827a5fb",
          "length": 244,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d93ec21f-b86c-4ad8-b42d-80b7d0152e5b"
        },
        "item": {
          "id": "725d9a16-897b-49d3-866c-51bd358107e4",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a6e5fe90-fda2-4810-b140-e002cd2defa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c955395e-e8e7-4119-b8ae-330625e35623",
        "cursor": {
          "ref": "d381a13a-b640-4c5c-9a9d-ba3b7e4e22ba",
          "length": 244,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "598354ab-77ea-4b04-910d-c49740b368e3"
        },
        "item": {
          "id": "c955395e-e8e7-4119-b8ae-330625e35623",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c1df93f3-71d1-4b20-9c44-d0af4cbbc873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2c95049-bfbc-466c-a6e3-718785095a8d",
        "cursor": {
          "ref": "ea84c5f9-945b-4e83-a98b-f69d3a095143",
          "length": 244,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "467e2511-d919-4af2-b3ff-3194dd304799"
        },
        "item": {
          "id": "c2c95049-bfbc-466c-a6e3-718785095a8d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "74f7c339-cca4-4aa1-baff-2722dcb3cb09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46da915b-1fcd-4651-982c-943f12fb377c",
        "cursor": {
          "ref": "f5513014-1544-42dc-9054-607d10604a53",
          "length": 244,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "0442ef25-6ade-40c6-96fc-7667245dc014"
        },
        "item": {
          "id": "46da915b-1fcd-4651-982c-943f12fb377c",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f7c2165f-64ec-4004-b150-faaa3a5a0dd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c59c71d2-2115-4d9e-8edd-d1f04876c7aa",
        "cursor": {
          "ref": "9670191d-f7ab-458b-975c-52abebc05777",
          "length": 244,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "29e2efb0-cd76-41f3-980e-42069a1b3ecf"
        },
        "item": {
          "id": "c59c71d2-2115-4d9e-8edd-d1f04876c7aa",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "caa33500-f2d4-4bd4-8d33-866f0e83cb00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdd76998-2b19-4a63-9eb0-d8f2ec12772c",
        "cursor": {
          "ref": "bf2baa31-b3e4-4d02-a714-aa6998b313e3",
          "length": 244,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f57f1a1d-b961-4c37-8cce-1dc838087d71"
        },
        "item": {
          "id": "fdd76998-2b19-4a63-9eb0-d8f2ec12772c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "cf0be255-4c26-4a46-8fa4-0ca1cce74b53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c95c1513-53b9-4385-ac45-838b8f59a051",
        "cursor": {
          "ref": "bed3719f-5e9a-4872-9332-112ae9d2ed47",
          "length": 244,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "6e702243-f178-49ff-8a87-e10316f3cd1b"
        },
        "item": {
          "id": "c95c1513-53b9-4385-ac45-838b8f59a051",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "4c1449ab-0e04-456c-b9fa-f8628af7d777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b09de78-a1eb-4830-a74d-aa06517a7b6a",
        "cursor": {
          "ref": "f58b5f0c-6ccc-4d2f-a66f-e3a2ed2763fd",
          "length": 244,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "7fffec2a-77b6-4d23-9bf1-6b86eedc1802"
        },
        "item": {
          "id": "4b09de78-a1eb-4830-a74d-aa06517a7b6a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "450f7601-f364-476b-bf6a-96e6644faaf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fadc067-3f95-4c5d-ac34-22d5e61e97a9",
        "cursor": {
          "ref": "8505597a-ef90-4f21-9b82-511d538ee533",
          "length": 244,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f58c47ae-8b03-4fc9-8bc1-bf445d26deb2"
        },
        "item": {
          "id": "8fadc067-3f95-4c5d-ac34-22d5e61e97a9",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "ec492599-a5ae-477e-9fd9-802b0c708d75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34ad2392-6e68-40ad-8c7d-2be9e5c50db3",
        "cursor": {
          "ref": "1768646e-22f6-42fd-b991-b88ef79de6cc",
          "length": 244,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "68714680-4c28-44fa-ac68-67ac87fd2ca0"
        },
        "item": {
          "id": "34ad2392-6e68-40ad-8c7d-2be9e5c50db3",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "ce2810ec-19f4-484a-abf6-e2897cf27746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cfa073a-e87d-4ff5-81c1-4dce471f4523",
        "cursor": {
          "ref": "e6c68c6c-1cdb-4562-8d5f-6cb3aef29adb",
          "length": 244,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c5c2d914-57ce-42e6-82f3-7717f46bdbb6"
        },
        "item": {
          "id": "5cfa073a-e87d-4ff5-81c1-4dce471f4523",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "46a86582-cbb4-444d-90ef-e3b824477d98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "469d7e2b-92d2-46fb-9404-3312c7afd1f8",
        "cursor": {
          "ref": "8899e661-7488-441c-ac28-f28692ad7dc9",
          "length": 244,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "71d9fd50-37d6-49c4-87b0-24ea5cba46eb"
        },
        "item": {
          "id": "469d7e2b-92d2-46fb-9404-3312c7afd1f8",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "d5b87027-c7a0-44ad-b31a-ebb03c527ef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f7527f1-cf87-4530-8289-bf0c5e1bdd23",
        "cursor": {
          "ref": "c2713182-7c0c-4e3b-890e-0e1debef7048",
          "length": 244,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "56f653f8-33da-4d5d-addb-c8b009707b1e"
        },
        "item": {
          "id": "2f7527f1-cf87-4530-8289-bf0c5e1bdd23",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "fe003009-6ff6-485e-b6be-585362455617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e31698a-862e-43aa-8334-68fe11a93a4a",
        "cursor": {
          "ref": "e4b2a689-b3c9-46f9-a963-ce393e36c06c",
          "length": 244,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "76ce13cc-c02d-480f-8805-b183a34a8ab0"
        },
        "item": {
          "id": "7e31698a-862e-43aa-8334-68fe11a93a4a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "2450a80d-3034-48f5-b9b3-0e62bd2bd0d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9036f9c5-5c82-4f45-95ee-6f0ca001a046",
        "cursor": {
          "ref": "649d52f8-261a-467e-af11-3ee83573a6a0",
          "length": 244,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "9d74a1a5-4989-4594-b7cb-fe39223deaef"
        },
        "item": {
          "id": "9036f9c5-5c82-4f45-95ee-6f0ca001a046",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "08190104-a2a3-4731-bdbd-2489eff56446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00a54399-b3c0-4401-9d3e-c14614aa4421",
        "cursor": {
          "ref": "d52a483b-10b0-477b-a1c4-43f0925876ba",
          "length": 244,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d7422fff-293e-4d81-9d05-40c665319ca5"
        },
        "item": {
          "id": "00a54399-b3c0-4401-9d3e-c14614aa4421",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "1b58b11c-3893-42a0-a107-368ce840d2c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf38dab2-79da-42c7-8fef-f1dbc3c92eb6",
        "cursor": {
          "ref": "afeba53f-5313-4ddd-849a-3b2a6475c05b",
          "length": 244,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "5ba44b16-200f-4bf6-ba6e-519bf66f4fa5"
        },
        "item": {
          "id": "cf38dab2-79da-42c7-8fef-f1dbc3c92eb6",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f85071f3-196e-49fe-9ae4-30c8a77653b8",
          "status": "Created",
          "code": 201,
          "responseTime": 2339,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "f4f731bb-b6b4-4603-ba1d-f9b9f3ecbc93",
        "cursor": {
          "ref": "96f2cf40-bc5f-43e9-8f58-9ef73faeb0b8",
          "length": 244,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "590a70d4-42d1-4dae-ae72-3868642d90ae"
        },
        "item": {
          "id": "f4f731bb-b6b4-4603-ba1d-f9b9f3ecbc93",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "7dac2a41-2e9a-4d3b-ae57-e991a965f6ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7729cbf4-4e95-4894-8a48-cf6655868a14",
        "cursor": {
          "ref": "fe07b7f3-6efd-4c18-b6a9-eff62b36e022",
          "length": 244,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e02960b9-4b24-4a36-8103-348ce9f0fbe5"
        },
        "item": {
          "id": "7729cbf4-4e95-4894-8a48-cf6655868a14",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "811d296a-99bb-483b-a68f-d8f915f18d80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84325ea1-7101-4187-841b-3281b41314a3",
        "cursor": {
          "ref": "7a47316d-aecf-4e92-88aa-734af8d20768",
          "length": 244,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5c41bf50-2076-40fd-9e1c-47e11356bb2b"
        },
        "item": {
          "id": "84325ea1-7101-4187-841b-3281b41314a3",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "cc0f0e0f-d8b1-4e57-bb64-15a4aa835d17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7afb8482-ea89-4d37-8b0f-10fde85041a0",
        "cursor": {
          "ref": "68a3dec4-9218-48cd-841f-41d448ef7cca",
          "length": 244,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "64f0d02b-bc28-4fa5-9000-321995ebeded"
        },
        "item": {
          "id": "7afb8482-ea89-4d37-8b0f-10fde85041a0",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "b569bda6-3a56-4ecb-8b90-ef1574226d0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58da89e6-fd93-4cc8-8837-1016ecf4e2b9",
        "cursor": {
          "ref": "deaf9967-3b95-4c5a-b58f-5955005ac7df",
          "length": 244,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "4ee04cb8-f00d-4efb-9788-3abbee3936a1"
        },
        "item": {
          "id": "58da89e6-fd93-4cc8-8837-1016ecf4e2b9",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "9ef827d1-9f32-49f1-b0b9-f780b33b77c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d276296-bdee-46cc-9d57-d02f387a387f",
        "cursor": {
          "ref": "4d83af0a-d75b-4911-9b10-87191de9571e",
          "length": 244,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "85c05fb3-540e-4469-999e-f981fc720bf7"
        },
        "item": {
          "id": "5d276296-bdee-46cc-9d57-d02f387a387f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ca07c551-7704-4585-903a-95473f53557d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f626d32e-1120-4d8c-a247-00c01a52537a",
        "cursor": {
          "ref": "79967299-1b99-4307-be36-65a3b77bf783",
          "length": 244,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "b734d761-d680-40f2-8f07-c8b12d0afce9"
        },
        "item": {
          "id": "f626d32e-1120-4d8c-a247-00c01a52537a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "b9f47421-cb88-411c-a56f-7200b45674e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84ff336e-a375-476a-9b7a-ab3a3464cdd0",
        "cursor": {
          "ref": "61f2efff-72c1-43d1-9af8-206313c89607",
          "length": 244,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "8d9a4584-f71c-4061-9514-e74f1916e332"
        },
        "item": {
          "id": "84ff336e-a375-476a-9b7a-ab3a3464cdd0",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "53abd2da-f553-4e70-8c83-372826d66cef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70591358-f0b9-458d-9328-0b3a885e4272",
        "cursor": {
          "ref": "66a340de-c234-4053-aa68-1b4a4542f969",
          "length": 244,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "25ac4653-7615-4d40-a1fe-4a54117cfb2c"
        },
        "item": {
          "id": "70591358-f0b9-458d-9328-0b3a885e4272",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "1eab4c85-99ce-4d1e-ab9e-7d508c06c45a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6954d660-8b67-4a03-831c-348a7a88fbda",
        "cursor": {
          "ref": "33255c80-87cd-4035-9321-ce4031d6d01f",
          "length": 244,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "6776fc99-7983-48bf-abdf-80ad1b136392"
        },
        "item": {
          "id": "6954d660-8b67-4a03-831c-348a7a88fbda",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b00c6c11-5879-4762-ba79-0a1ab399a310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9062b985-4601-43f7-9511-0eb61ea8331f",
        "cursor": {
          "ref": "8b5f8c8d-a6c2-4ba2-9d8f-cb834424de4f",
          "length": 244,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "d35115d8-0180-42f4-8b0a-7a8bae79cc93"
        },
        "item": {
          "id": "9062b985-4601-43f7-9511-0eb61ea8331f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "43cab6ea-bb54-4f6a-8de5-f699c2dd031b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48ecfbbd-ef2b-4b64-be46-f55751d152a7",
        "cursor": {
          "ref": "13567eb0-2aae-48c1-b6e2-837b1bb7fbd7",
          "length": 244,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "03c33547-8112-4be3-bb66-b60f43ab74f1"
        },
        "item": {
          "id": "48ecfbbd-ef2b-4b64-be46-f55751d152a7",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e08ab47d-2a6e-443f-96e1-fa36af40f27e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b065d51-43cc-4b2a-afeb-1658fc030ac7",
        "cursor": {
          "ref": "0413bd55-7688-48b7-a7ef-102eb5d776dc",
          "length": 244,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "4de1f90a-59d1-4372-8273-61438ca1192f"
        },
        "item": {
          "id": "6b065d51-43cc-4b2a-afeb-1658fc030ac7",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "37f57c92-47f1-4b59-b955-94be06a112ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "484db1ef-996f-4b83-b840-2374b57ef436",
        "cursor": {
          "ref": "df0c99f5-8f19-4687-9a27-1441fc0b9c7e",
          "length": 244,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "6847f777-089e-4f1b-9476-ed40f02d86e0"
        },
        "item": {
          "id": "484db1ef-996f-4b83-b840-2374b57ef436",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "f1d41178-5e19-462a-a71c-ada1250d48fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "605099ff-2de0-4cee-9287-2dbcd28cf095",
        "cursor": {
          "ref": "2b956ba9-091f-4abf-9057-c425e88619a3",
          "length": 244,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "4ee685ed-ce2f-46fd-a7c3-bd7d6b907d0f"
        },
        "item": {
          "id": "605099ff-2de0-4cee-9287-2dbcd28cf095",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "20a00065-984c-4606-8805-b301eeb99e3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2cf061c-d8a1-4c0a-b9d4-c526f07bbe4c",
        "cursor": {
          "ref": "f26e95e8-ed81-404e-a0db-de49a03cf6c0",
          "length": 244,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "577eaf01-4e88-40a5-9a47-00ef81294970"
        },
        "item": {
          "id": "a2cf061c-d8a1-4c0a-b9d4-c526f07bbe4c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "52400811-f64a-4105-b36f-7add2c3e0017",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93e9f42f-ad63-4f25-92a3-de536dbf9075",
        "cursor": {
          "ref": "ec79b2bd-5ce7-4290-b770-9b7af9b8e7ba",
          "length": 244,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "4e69393e-c431-4dd5-bef6-c0eac0ffbb92"
        },
        "item": {
          "id": "93e9f42f-ad63-4f25-92a3-de536dbf9075",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "9f72fae0-5e71-49e0-9bf6-b2648d04f370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b22f24d-48f8-4c23-9149-a18573fb7b40",
        "cursor": {
          "ref": "4b2d9089-18e5-4ace-8df5-168f510099a1",
          "length": 244,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ebb47322-0cc4-4526-84f9-ce3f412bc914"
        },
        "item": {
          "id": "2b22f24d-48f8-4c23-9149-a18573fb7b40",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "ecde5536-f7d2-4213-9e50-97ef9aa94c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1288dc38-9116-48d2-9bac-c4d7462e210e",
        "cursor": {
          "ref": "b4f69202-e0ea-4a9a-86e8-28d8e3e9bf7c",
          "length": 244,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "47c0a0e0-de96-4408-8129-78aad53b9dd6"
        },
        "item": {
          "id": "1288dc38-9116-48d2-9bac-c4d7462e210e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "d38d828b-3440-4345-aeb8-d14e5d4c3a48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35693825-12b9-486a-92b3-d257a66b2eb3",
        "cursor": {
          "ref": "c5b947d3-064b-42c9-9a3f-edae9d49d614",
          "length": 244,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "2281c449-06ed-4cc4-b630-fad932c05309"
        },
        "item": {
          "id": "35693825-12b9-486a-92b3-d257a66b2eb3",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "3901718d-c385-4268-84f7-075dfe7a89a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17da8614-17e2-4290-aa17-c8a324a89aac",
        "cursor": {
          "ref": "e11f0835-da22-4cb7-8a93-c4371d7aada1",
          "length": 244,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "71bb67d1-354c-4d55-b18e-621195f8de04"
        },
        "item": {
          "id": "17da8614-17e2-4290-aa17-c8a324a89aac",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "976d202d-46d3-409d-816b-8b421961b9cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52b1d931-7929-485e-a19d-3df4b600eeba",
        "cursor": {
          "ref": "53e25331-dad9-4a40-afbe-31c83f7747ab",
          "length": 244,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "1f9a9952-7a33-4e45-9dcc-17272262b325"
        },
        "item": {
          "id": "52b1d931-7929-485e-a19d-3df4b600eeba",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "19cecc81-83ef-4562-902f-3913f0856d4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cbea96f-ddfe-4aba-be1b-812cbd48ba8e",
        "cursor": {
          "ref": "de786f4c-efda-4fff-9823-96950e588081",
          "length": 244,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "eb24a174-dd6a-49b4-a750-2e228dff694e"
        },
        "item": {
          "id": "3cbea96f-ddfe-4aba-be1b-812cbd48ba8e",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "0dccf1b0-379d-457c-a117-5e7b188a04a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa6bd8a2-9721-4c1f-9395-c49c6361eb67",
        "cursor": {
          "ref": "a5454bb0-6925-410a-9d09-a01b1f38841a",
          "length": 244,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "29e43acd-c8ec-41ab-86b0-28fc609b64ee"
        },
        "item": {
          "id": "aa6bd8a2-9721-4c1f-9395-c49c6361eb67",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "90936231-d934-4bbf-92be-5da720a36255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c7ffc39-a760-47f1-8765-e04cba4252e7",
        "cursor": {
          "ref": "7d46d854-7560-4045-b804-ad147505051e",
          "length": 244,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f4bcb8b9-372f-43dc-9621-e20ceb112b53"
        },
        "item": {
          "id": "0c7ffc39-a760-47f1-8765-e04cba4252e7",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "1b4726a2-c449-4ab2-a1d1-20e8b5f2b2eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "173d8892-bc42-4584-9784-6e2264fbc098",
        "cursor": {
          "ref": "317bf386-d530-4279-9e43-69c31372890e",
          "length": 244,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0dea722e-fce0-4098-b3a7-e37772620d61"
        },
        "item": {
          "id": "173d8892-bc42-4584-9784-6e2264fbc098",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "faa8b648-e515-4471-9b28-c22acfff0744",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "379ecd60-e813-4563-83b8-a166fec61de8",
        "cursor": {
          "ref": "339d2796-7a10-4d04-8b93-771fc5b12497",
          "length": 244,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "eb6309b5-4a57-4f38-b79c-23c8600cca4d"
        },
        "item": {
          "id": "379ecd60-e813-4563-83b8-a166fec61de8",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "57080c61-a0ca-498b-b168-adf46a1b9a54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7243230d-c375-4e89-8dc1-9252bcb2681a",
        "cursor": {
          "ref": "56787cc7-3f91-4897-8d25-1b068e9a8128",
          "length": 244,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "396ca5d2-d64e-4456-8df4-09aab99fb18c"
        },
        "item": {
          "id": "7243230d-c375-4e89-8dc1-9252bcb2681a",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "36efb64f-629f-4858-ba91-e2261912d270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2259025a-1fe8-45d9-9203-e738d3c1423c",
        "cursor": {
          "ref": "c1e57247-8b0f-4b97-a28d-852dd435cbfc",
          "length": 244,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "95abf20f-e3ad-4941-834d-20398614ee0b"
        },
        "item": {
          "id": "2259025a-1fe8-45d9-9203-e738d3c1423c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "15a27fff-6f37-46ea-8447-6f9af694b208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "006662a3-fd2e-4012-9cd9-13502180282e",
        "cursor": {
          "ref": "1698eb76-4907-4ed1-9704-0f7d0c6d092c",
          "length": 244,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "90ca64db-12ae-4438-956c-b25cb0e1a586"
        },
        "item": {
          "id": "006662a3-fd2e-4012-9cd9-13502180282e",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "1157571f-7676-4beb-b36b-0bdd52efcfb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee8c38ee-6916-459b-bf1c-d1221031ac98",
        "cursor": {
          "ref": "bde87065-7b33-47f8-b689-db7df3ec3a9b",
          "length": 244,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "31313ef4-eafd-4a7a-a8a1-2111a6b97cb7"
        },
        "item": {
          "id": "ee8c38ee-6916-459b-bf1c-d1221031ac98",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "68ca526a-2270-4fef-98d3-7ab0d393353e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "0d495a15-0972-41eb-82d7-f11e04e776ed",
        "cursor": {
          "ref": "e4ec34e2-f8dd-41bf-b4ee-3ea5d508a20b",
          "length": 244,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "4d173cdf-9c29-49c9-bf9a-ea892d082da5"
        },
        "item": {
          "id": "0d495a15-0972-41eb-82d7-f11e04e776ed",
          "name": "credentials_issue"
        },
        "response": {
          "id": "0dad5d17-e924-47a6-9d71-cf148dbd6d11",
          "status": "Created",
          "code": 201,
          "responseTime": 2224,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a668ca-1f08-4646-b5d4-f4e06a29793d",
        "cursor": {
          "ref": "db17671a-9fe9-4b66-9008-556e9436557b",
          "length": 244,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "6edeeb74-2434-4c42-bf0c-53245732001b"
        },
        "item": {
          "id": "f9a668ca-1f08-4646-b5d4-f4e06a29793d",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "407285df-3aaf-4daf-9b38-a4c1ff30b2ed",
          "status": "Created",
          "code": 201,
          "responseTime": 2354,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc7bae61-0471-4416-87cc-a53306c2703c",
        "cursor": {
          "ref": "924d45b4-7961-4817-a3ab-71b3acb37625",
          "length": 244,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ebd1811d-c9bb-4135-a246-15c95ff7aa2c"
        },
        "item": {
          "id": "bc7bae61-0471-4416-87cc-a53306c2703c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0aa981b7-9ed9-4188-a4eb-b482f82b0242",
          "status": "Created",
          "code": 201,
          "responseTime": 2426,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf4d3cb5-2067-49c3-b28b-c6dbbf8ae7d3",
        "cursor": {
          "ref": "01045b27-4f56-47f3-bec0-605c692b9aa8",
          "length": 244,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "c7e50646-3091-41cb-ba4f-b0ba18db1e36"
        },
        "item": {
          "id": "bf4d3cb5-2067-49c3-b28b-c6dbbf8ae7d3",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c736fc31-0ac9-4a12-bebc-0aa555b6fae7",
          "status": "Created",
          "code": 201,
          "responseTime": 2288,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "252385e2-bbbc-4d8c-ae7a-f19dfcb76f59",
        "cursor": {
          "ref": "1430314d-ec7e-4a71-8379-ae0845c80836",
          "length": 244,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "14206e2a-f1a3-4a8d-bdbd-5e684b9be317"
        },
        "item": {
          "id": "252385e2-bbbc-4d8c-ae7a-f19dfcb76f59",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "eafd7c17-5cbb-44a1-9a02-366b722d37ff",
          "status": "Created",
          "code": 201,
          "responseTime": 3739,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-10T00:41:41Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-10T00:41:41Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "a55b2540-10dd-4ab9-ac01-838d78e1ad36",
        "cursor": {
          "ref": "b1169542-a85d-4aaf-9d3e-3438695b6710",
          "length": 244,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "2b0677c8-175e-42aa-aa0c-655b862cfd2a"
        },
        "item": {
          "id": "a55b2540-10dd-4ab9-ac01-838d78e1ad36",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c68ea414-3404-460b-9c2d-4a70883fdf35",
          "status": "Created",
          "code": 201,
          "responseTime": 2435,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c65eb4f3-87cf-4ae0-bddd-cad86b8b4479",
        "cursor": {
          "ref": "58bde148-3b39-4f00-b0d0-08610c7f33fa",
          "length": 244,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "86944bd7-224a-46d7-a1ca-08646fe3742f"
        },
        "item": {
          "id": "c65eb4f3-87cf-4ae0-bddd-cad86b8b4479",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "cb62d9f6-c874-4469-baa2-ab468318603e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 167,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3ce4d50-42d9-4b72-8d95-f99d42966b7f",
        "cursor": {
          "ref": "353868d7-6ae6-49e4-ba4c-1fbac101d512",
          "length": 244,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "bdc41c4c-7eb0-4ba8-8566-de6a73f51ad9"
        },
        "item": {
          "id": "b3ce4d50-42d9-4b72-8d95-f99d42966b7f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "9ff367e7-cfc6-4f41-a07d-c4c6f30155a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ec2d4de-1c1f-4516-8b84-661b4bae58cf",
        "cursor": {
          "ref": "4be6856b-7cdc-42bf-b05d-1b0d5139bea7",
          "length": 244,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "2cd218b4-3b4e-4f72-8354-0a219d102e48"
        },
        "item": {
          "id": "9ec2d4de-1c1f-4516-8b84-661b4bae58cf",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "85ab726a-7bbc-4223-83c4-5cc8c630ecc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9af2f83e-256e-41b0-8777-3c925fd0fe1a",
        "cursor": {
          "ref": "9b3a83e6-4796-4e93-bea1-3061237d4110",
          "length": 244,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "cdc01001-ff13-4fce-ae27-0a7f5ab99828"
        },
        "item": {
          "id": "9af2f83e-256e-41b0-8777-3c925fd0fe1a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "387aa87f-cfa2-4e75-a905-c15693bd2578",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "620a07c8-c2d8-4d7b-acad-83328af95e8d",
        "cursor": {
          "ref": "b3ae288d-1ba9-4d4a-a76d-9726d45d381a",
          "length": 244,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "0e46be5b-6785-40c7-9e94-05bc39eeb6c8"
        },
        "item": {
          "id": "620a07c8-c2d8-4d7b-acad-83328af95e8d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "aba662c5-6828-4cfa-8157-598b05a0f8c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bebb91e0-dd98-43b0-ba5f-77f27c5e33ee",
        "cursor": {
          "ref": "aa5c42a9-7e80-4c2c-b22b-5c787cf727c5",
          "length": 244,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "21edd25e-ee54-4e18-9bda-3f95e8efdd48"
        },
        "item": {
          "id": "bebb91e0-dd98-43b0-ba5f-77f27c5e33ee",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "281c736c-aec2-4426-9af8-2a753b50adfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec789463-2347-4c2f-8914-07a80a07e915",
        "cursor": {
          "ref": "2bb769bb-111a-4aa6-9f3f-51217799d24b",
          "length": 244,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f44494c1-9a73-4d87-95de-88558bff5b31"
        },
        "item": {
          "id": "ec789463-2347-4c2f-8914-07a80a07e915",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "fca31d7a-8938-43cd-8241-e083a2397c0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4789363-5237-442d-bb22-82931dcf2e1e",
        "cursor": {
          "ref": "7820ca4f-fef6-454e-a594-0be77648d4ad",
          "length": 244,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "d2597682-3d01-4f4d-a9c1-82ff685a4704"
        },
        "item": {
          "id": "e4789363-5237-442d-bb22-82931dcf2e1e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "271454d5-014f-4eed-8a07-163d22038808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db767e9c-5c16-4478-b7b5-661da9e3d663",
        "cursor": {
          "ref": "465603d3-af81-4d31-938d-a8c553fb6306",
          "length": 244,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "b7af0d92-6530-4416-aed3-874fa47ddcdc"
        },
        "item": {
          "id": "db767e9c-5c16-4478-b7b5-661da9e3d663",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3990deab-e812-4d8e-8638-a746c9f14478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "576be94e-db0e-4c3c-90fe-79bc28568e8a",
        "cursor": {
          "ref": "0bf8e7ff-0a68-4faa-934f-59850e0fb049",
          "length": 244,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "417662ec-bbce-4ff8-afef-41daf1217f35"
        },
        "item": {
          "id": "576be94e-db0e-4c3c-90fe-79bc28568e8a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "fd55d333-31b1-406f-9864-df54fe290713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2dc0249-93d2-471b-a5c3-94693ff19c9e",
        "cursor": {
          "ref": "11b4d385-e127-44e1-b469-99da3e29cc15",
          "length": 244,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "8a647194-23f5-4763-8162-1c3bffa8a697"
        },
        "item": {
          "id": "b2dc0249-93d2-471b-a5c3-94693ff19c9e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ad290488-5cbb-491a-a104-b10eb1b59674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e70e9eff-9c98-46dd-88ee-866c38505ff7",
        "cursor": {
          "ref": "0f8cbff9-ef32-49aa-877d-9c6f45edc1fd",
          "length": 244,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "cdab4a35-0748-40c5-9401-eb7cc194f8a0"
        },
        "item": {
          "id": "e70e9eff-9c98-46dd-88ee-866c38505ff7",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8422d9f8-01b5-45f6-894f-09badb168625",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe02ea5c-7888-462c-990b-0b8ea2b143c5",
        "cursor": {
          "ref": "bacd5a76-aaf3-40fd-b66e-d3a886e1193b",
          "length": 244,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "b6f7ad6b-4461-403b-9e61-651c0b8a5e56"
        },
        "item": {
          "id": "fe02ea5c-7888-462c-990b-0b8ea2b143c5",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "39abcf9d-59e3-4839-9628-17e58548c81e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60277bac-3f29-440e-aa76-1297ac090e3a",
        "cursor": {
          "ref": "5caa076d-337f-4f0b-85eb-08e50d1a9ae9",
          "length": 244,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c5a78bb5-c790-4167-b674-e5fff8f24842"
        },
        "item": {
          "id": "60277bac-3f29-440e-aa76-1297ac090e3a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "07d14813-46ad-4246-af20-582364a8d4a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea1859f9-b319-4298-8ad4-068a2a76939b",
        "cursor": {
          "ref": "f7ba65b5-71ae-4f07-b792-10d61048d68b",
          "length": 244,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b79f64dd-5b6b-4f06-a7c5-3753647b771f"
        },
        "item": {
          "id": "ea1859f9-b319-4298-8ad4-068a2a76939b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "bfd13a31-59b8-4cb5-baca-c08129caf531",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8673011-7adc-449c-9000-5bfeadf00557",
        "cursor": {
          "ref": "d922a4d0-4132-4d8a-aa8d-014b26f0a4a9",
          "length": 244,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f38f24bd-56d0-4bda-963d-cad476959dae"
        },
        "item": {
          "id": "e8673011-7adc-449c-9000-5bfeadf00557",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "699f93f8-56ec-4386-8afd-155974ca1a1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecca69bc-7759-464d-b7f5-41fd366cc21b",
        "cursor": {
          "ref": "86ebb3d9-836c-43ca-9d11-340e259d16a5",
          "length": 244,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "9739cc61-294a-4e61-85ba-92c804e4e807"
        },
        "item": {
          "id": "ecca69bc-7759-464d-b7f5-41fd366cc21b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0bc8cc45-aa76-4b54-b2ea-2f2f073ff363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50e8afb5-19f7-42f1-8ff7-35a3a216d44e",
        "cursor": {
          "ref": "da821c1a-6a6b-4d37-bab5-1579e7e41f76",
          "length": 244,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "94a74911-d5f0-46be-847a-dc72f69cdd78"
        },
        "item": {
          "id": "50e8afb5-19f7-42f1-8ff7-35a3a216d44e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2fafb4d2-6a4a-491b-8b17-99dba2039670",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ff2e64-0696-4ce0-87d7-f847672b3fea",
        "cursor": {
          "ref": "f047396c-bfe9-4283-b090-0a97383f609e",
          "length": 244,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "2300711a-7574-44f3-82de-d516774acac7"
        },
        "item": {
          "id": "a4ff2e64-0696-4ce0-87d7-f847672b3fea",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ec8da429-43ee-4e53-9887-96ed4f4b908a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23a4080d-b86a-490a-8203-6ef1cff8b042",
        "cursor": {
          "ref": "379359a5-7737-4d86-9d1d-9619214ff73a",
          "length": 244,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "a37c57d0-6cee-44ea-bfcb-7aae76efdfd9"
        },
        "item": {
          "id": "23a4080d-b86a-490a-8203-6ef1cff8b042",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3f15e7d1-b407-4008-8708-d01a2cd3abd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b256207-4ce5-43eb-b317-b1577c65f992",
        "cursor": {
          "ref": "8e5d3be3-90a3-4aba-aaf9-6c27fc0035c8",
          "length": 244,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "6218d9e3-4e32-496a-b82e-b6e3d92cd293"
        },
        "item": {
          "id": "9b256207-4ce5-43eb-b317-b1577c65f992",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "3ffa8590-4dc7-446d-b9a2-b1941b2a6a46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63a04ffd-d999-4354-983d-c9f06a856df9",
        "cursor": {
          "ref": "69c2604a-c17f-4800-b337-96d4d54058f1",
          "length": 244,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "691d130c-5c67-4f8e-8038-e435f850f56f"
        },
        "item": {
          "id": "63a04ffd-d999-4354-983d-c9f06a856df9",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0c93584b-8df0-45ae-90f3-ca552a2cb751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34a6ad79-7971-410a-ae32-5eccf56ce0c8",
        "cursor": {
          "ref": "133e6977-b921-4d23-a3a2-2aaadc250e94",
          "length": 244,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "f84e07c2-c8ad-437c-8a80-9b1fef90b8b3"
        },
        "item": {
          "id": "34a6ad79-7971-410a-ae32-5eccf56ce0c8",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6ca5ac41-8b35-4d16-a103-218ebc8551c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4b4782d-4e98-4611-8565-1866eb3a3055",
        "cursor": {
          "ref": "d02c7967-0078-48d7-8fc5-848fea3484d1",
          "length": 244,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c106eef1-9cbf-49ab-b607-90c6cdd72199"
        },
        "item": {
          "id": "e4b4782d-4e98-4611-8565-1866eb3a3055",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "353ef5a8-0022-4cfe-a64a-67269b4ee6e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14579085-0ce6-4985-9619-c7a3de0b09cd",
        "cursor": {
          "ref": "f099bd2e-82b5-4dfb-b43b-7dc5be806f11",
          "length": 244,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "af8a021b-e635-4eb7-8b83-4ac628b4f124"
        },
        "item": {
          "id": "14579085-0ce6-4985-9619-c7a3de0b09cd",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "68147d88-603e-47bb-ad90-83973bc1ef5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dc24348-a043-48f3-9563-d71e22ac146c",
        "cursor": {
          "ref": "c33b9f66-96e8-4a44-a3ea-22cb67ef4e39",
          "length": 244,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "2c99783d-9958-4c7a-ac84-d1cd7ef73b2e"
        },
        "item": {
          "id": "6dc24348-a043-48f3-9563-d71e22ac146c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7d30fc51-c2c7-4799-8f00-f8875519c0a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a582d2f5-e915-4ab0-9754-1f5240aced64",
        "cursor": {
          "ref": "ad17ad4d-daf9-42ed-81e9-baee76e5a289",
          "length": 244,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "6384b185-45e1-415e-ab75-ac0caa45b060"
        },
        "item": {
          "id": "a582d2f5-e915-4ab0-9754-1f5240aced64",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1cefb279-ef03-4ce0-abde-bf2901fa2052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f531c3b-003e-4ba9-8a09-07391dfc7420",
        "cursor": {
          "ref": "d6f641a0-3149-444b-88ba-8b01d21cce04",
          "length": 244,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "890030b1-71ce-423e-94a2-964671afba91"
        },
        "item": {
          "id": "2f531c3b-003e-4ba9-8a09-07391dfc7420",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0fa4881b-084e-4515-b8ca-5179912bb85e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c512fb06-5264-42a3-8a7f-dc1e67be17cf",
        "cursor": {
          "ref": "c6d426f0-4e55-4278-9264-505c2a2d3da8",
          "length": 244,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "706c385f-61e7-482b-b277-7cfd7527dc6d"
        },
        "item": {
          "id": "c512fb06-5264-42a3-8a7f-dc1e67be17cf",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b66c9eb7-7198-4189-ad84-bb003adf4a61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "138ae7c2-8870-459d-8bbd-440f81f27d88",
        "cursor": {
          "ref": "6b7014bf-c6a0-48de-a8fa-01e07d8ef9ce",
          "length": 244,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "dfb1a6bf-5924-4875-b7cd-07195c162467"
        },
        "item": {
          "id": "138ae7c2-8870-459d-8bbd-440f81f27d88",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "fa75201c-14e1-4578-8374-81f922cbfa11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98a15529-99e1-4b66-98f3-c523b5d238fe",
        "cursor": {
          "ref": "4aa2d6f8-8126-41c3-8855-c99deeaa9236",
          "length": 244,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "b1b48eaf-f560-42ea-9d02-b36c0b68eb54"
        },
        "item": {
          "id": "98a15529-99e1-4b66-98f3-c523b5d238fe",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "3a09110f-6910-4d58-8eeb-785b0b582a86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "065a6d05-6c60-4c9b-8175-df9e264ce47a",
        "cursor": {
          "ref": "9674b3fa-567b-4e47-bc94-2e997396b25c",
          "length": 244,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ff3d07ef-160a-4ede-9f66-c6755d060152"
        },
        "item": {
          "id": "065a6d05-6c60-4c9b-8175-df9e264ce47a",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "9fb0ad08-7db0-4570-9194-03c66d36ee48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dda96a1c-dfac-4a51-8809-7e8b572efa0b",
        "cursor": {
          "ref": "11ad8a4f-0231-49b3-af59-ea4a31e4d377",
          "length": 244,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "88bab874-61da-4bfe-9eaa-73a761727115"
        },
        "item": {
          "id": "dda96a1c-dfac-4a51-8809-7e8b572efa0b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c2dd5e9b-b9a0-4297-bfaf-178480edb1c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "22d38b05-76d3-41f3-97c0-6efce4b57fe6",
        "cursor": {
          "ref": "f7737a46-22aa-41ed-a96c-df387602459a",
          "length": 244,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b0cc6663-ea78-439f-83ce-790e9efabd7b"
        },
        "item": {
          "id": "22d38b05-76d3-41f3-97c0-6efce4b57fe6",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "694ae482-68bd-401c-ae24-3a7ab0f86de3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6af93726-1825-4b87-a63e-67ebd0c9c578",
        "cursor": {
          "ref": "9b158760-5d70-4356-a07b-cde48bc39c28",
          "length": 244,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "5d3d92ed-4056-4e75-bfb6-122807c97900"
        },
        "item": {
          "id": "6af93726-1825-4b87-a63e-67ebd0c9c578",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d31c7f61-0425-4875-b8ff-dcb21cda7397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e440f39-19d2-45d7-8fe6-488b34569993",
        "cursor": {
          "ref": "35d1975f-14ea-4548-a68f-fb5c1a2ddb05",
          "length": 244,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "c8551195-97f6-4ec4-855d-487656fc662b"
        },
        "item": {
          "id": "4e440f39-19d2-45d7-8fe6-488b34569993",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "bd2696e3-eb62-40f1-9a1b-ccf12cb722a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87ce2d3d-7db6-4404-808c-e5d68cfba4d6",
        "cursor": {
          "ref": "915b1e1a-6164-493a-b170-13a239048736",
          "length": 244,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "baade61f-0511-484d-89c5-6cca0b48eea4"
        },
        "item": {
          "id": "87ce2d3d-7db6-4404-808c-e5d68cfba4d6",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "6c6f7719-3984-4fd3-a06f-0d86e8cc054f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ea43c66-014f-4790-9a4d-28af95feb9e9",
        "cursor": {
          "ref": "a8e8984a-b78c-46c7-b949-687ddef03765",
          "length": 244,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a8960cf8-3ed2-428d-ac6d-c735bd0b6627"
        },
        "item": {
          "id": "6ea43c66-014f-4790-9a4d-28af95feb9e9",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "df929412-d5f8-4856-b1b1-89b58132e9ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "252c3937-1cba-4712-b03a-aa53761b199f",
        "cursor": {
          "ref": "77079408-a409-4082-bb88-c133e49862a6",
          "length": 244,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "555bc545-a58b-46a6-8a5d-1d0c025d6c26"
        },
        "item": {
          "id": "252c3937-1cba-4712-b03a-aa53761b199f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "cbade1d0-a301-4202-886e-5694de14a7a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e52a2d8-44c5-4847-856f-411ee596d436",
        "cursor": {
          "ref": "1cccd686-fccd-49da-bfba-8f8fee2885d7",
          "length": 244,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d524b8a2-4761-4134-b081-50ffc1588678"
        },
        "item": {
          "id": "4e52a2d8-44c5-4847-856f-411ee596d436",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b01bc7a4-1f22-4285-a651-63e1cf5005d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b13c224-f83b-49d0-b679-65c785d47944",
        "cursor": {
          "ref": "0d26b8b5-5aa5-42f3-afa2-7825f1ee46f3",
          "length": 244,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "1c8a8bba-c840-4bfe-b596-fcce8bfb9a97"
        },
        "item": {
          "id": "3b13c224-f83b-49d0-b679-65c785d47944",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b9906100-45da-406f-9dec-ec138a3523d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5cfe487-1e68-44c5-b915-ad8a94e21987",
        "cursor": {
          "ref": "53e28bda-8945-44b9-baf1-04dad31d8910",
          "length": 244,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "3054f0a9-d524-4f4c-b6ce-cf9ec3c75685"
        },
        "item": {
          "id": "b5cfe487-1e68-44c5-b915-ad8a94e21987",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "cb193b85-239a-498b-85f1-9448e9a06901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afc4a5e9-8991-4b22-ac12-afcfa92a4c09",
        "cursor": {
          "ref": "3912aa98-0c3f-4934-a6a3-98489232aa34",
          "length": 244,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "4a1047a7-e127-4148-b93d-5120dd351624"
        },
        "item": {
          "id": "afc4a5e9-8991-4b22-ac12-afcfa92a4c09",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "46d8d51d-a052-4339-b6be-b5e88f4bebcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fafa6b8d-fdb8-4fcd-a88d-59935237bba9",
        "cursor": {
          "ref": "6a04dde4-8674-454e-a5b4-d75a41cd254f",
          "length": 244,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "9a71a1a3-a58c-44bb-b12a-157ed97199f4"
        },
        "item": {
          "id": "fafa6b8d-fdb8-4fcd-a88d-59935237bba9",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "0b3e1be5-afcf-44f8-b6ea-a5f75ced73c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7e7ec7f-b475-42ac-927d-52abee242116",
        "cursor": {
          "ref": "cb8c8ecc-ebfd-4ed6-b7e1-417cbe4d36cd",
          "length": 244,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e9ba101c-554e-4f63-adc7-92d97713d503"
        },
        "item": {
          "id": "c7e7ec7f-b475-42ac-927d-52abee242116",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c8d6b106-7f4e-4409-88fe-33942508b5fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d5d033-ae5b-42e8-8ada-4b38e8074ad1",
        "cursor": {
          "ref": "fb6beecf-ac82-48a7-baf7-a72a7005fe19",
          "length": 244,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "74cf9ba9-af55-4a9b-a553-b006f5ff0c61"
        },
        "item": {
          "id": "55d5d033-ae5b-42e8-8ada-4b38e8074ad1",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "c3f57fb8-8d27-49e9-a8c1-9ece9af02acc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08152ff8-f1bb-437d-ba4d-2ba6d429a6a7",
        "cursor": {
          "ref": "c116b956-3869-4cdf-ae70-89a9cff93cfb",
          "length": 244,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "506e80f3-95f4-476c-bbbd-b216dd1d9bdf"
        },
        "item": {
          "id": "08152ff8-f1bb-437d-ba4d-2ba6d429a6a7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "76a48be6-af91-4f38-b174-f89be725181a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec78682-c520-4fb7-9a4b-5f03b7a828be",
        "cursor": {
          "ref": "b8de651d-e75d-4cd6-b2ff-c75b2cc4c715",
          "length": 244,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c6fbd442-89b5-4047-9c8e-38a6bc310b7b"
        },
        "item": {
          "id": "1ec78682-c520-4fb7-9a4b-5f03b7a828be",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "1f040c20-e544-4012-a083-f3c75b84de34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e20aa68-1e18-4c5c-a5ac-4a85b566f6cd",
        "cursor": {
          "ref": "c9ebe0fc-e2e2-494d-8fed-277a969491d6",
          "length": 244,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "56655c37-4b55-44bf-9f7d-6346e70c4492"
        },
        "item": {
          "id": "4e20aa68-1e18-4c5c-a5ac-4a85b566f6cd",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "a9c2dfb4-fd37-42f0-a484-62c7217ad9fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "932d4dc7-a24d-420d-96d0-751799ef48ca",
        "cursor": {
          "ref": "38fd6bb3-ed96-4a35-9e23-a6f683817e69",
          "length": 244,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "968c4862-560c-4cc1-9110-a9192cbbcf91"
        },
        "item": {
          "id": "932d4dc7-a24d-420d-96d0-751799ef48ca",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b60baeed-1ff4-4a55-a88d-b5ad9368ec0c",
          "status": "OK",
          "code": 200,
          "responseTime": 363,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "6e2884eb-0ae7-4450-8167-267b488b9ca8",
        "cursor": {
          "ref": "0c3f8a56-fb31-4f01-b50a-1db01118cd79",
          "length": 244,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "a5fce505-3ae3-44bf-8833-e0f6fbaddaa8"
        },
        "item": {
          "id": "6e2884eb-0ae7-4450-8167-267b488b9ca8",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "3cfa9b74-0143-4c47-9bb9-08e8ef1442b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11e0e611-0578-46f6-befc-3c81615780f1",
        "cursor": {
          "ref": "68820e0e-f9cf-4ed2-a3f7-4530a8feff45",
          "length": 244,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "f26b2a8a-84ac-4ad7-b3ae-d561ca584cbd"
        },
        "item": {
          "id": "11e0e611-0578-46f6-befc-3c81615780f1",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "50de724d-88b5-44cd-8535-21ffa92ccba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcbc18a5-75a9-4620-ad5e-58ebab680c53",
        "cursor": {
          "ref": "bfecf0de-c1fc-4da7-b2c2-f223225e3b36",
          "length": 244,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "e3ec196e-054f-4838-af4c-30dfe34fc17b"
        },
        "item": {
          "id": "fcbc18a5-75a9-4620-ad5e-58ebab680c53",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "211fe0f7-eaf3-43d4-955b-c950a3624458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9175ec68-4ca3-4699-907b-caed104cd322",
        "cursor": {
          "ref": "d6133ec7-0595-41c9-81bd-65f879d02f89",
          "length": 244,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "58bb5009-854b-4bf9-8709-575c37aec427"
        },
        "item": {
          "id": "9175ec68-4ca3-4699-907b-caed104cd322",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "fe91130b-e6bc-4dfd-abde-35568b76f909",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d70a061e-07a6-417f-aa44-c11ba5f85904",
        "cursor": {
          "ref": "30972801-ba19-407f-80eb-4c74991b3424",
          "length": 244,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d718b8dd-ee14-486d-af8f-b78a217bf3cb"
        },
        "item": {
          "id": "d70a061e-07a6-417f-aa44-c11ba5f85904",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "0964017f-3fd8-4f39-9c3f-e6c1abd812be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f75f73c7-f5ac-4a7c-adb1-9a8c854dd8a9",
        "cursor": {
          "ref": "ab7b1c45-fe5d-4ea5-b97a-c01eb4f1b6a0",
          "length": 244,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "0a8777d8-6bbf-4c68-ba42-ca59cfc1cab2"
        },
        "item": {
          "id": "f75f73c7-f5ac-4a7c-adb1-9a8c854dd8a9",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "1da76c12-3a90-4664-8e45-599d6d412c52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9634c9e7-8ccf-414a-bbb0-c11bc2705e4a",
        "cursor": {
          "ref": "cd7d5c6d-f0c4-4011-86c0-5339ff9cd6c1",
          "length": 244,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "6869c6bc-a393-4c47-aa36-2d7aa032775b"
        },
        "item": {
          "id": "9634c9e7-8ccf-414a-bbb0-c11bc2705e4a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d5cff910-56a9-44cd-ab77-721631c8937c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b809c96f-4ed7-4847-a7f0-ac8afafafc9b",
        "cursor": {
          "ref": "977a5bac-f3e3-48ec-b8e8-f21640d82ace",
          "length": 244,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "65c23f16-c3bf-4929-98ed-67eb5cabb988"
        },
        "item": {
          "id": "b809c96f-4ed7-4847-a7f0-ac8afafafc9b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "1acede99-cb9f-4083-a259-6cf2033f2a87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "427ffcd6-f7ce-4f48-9812-f87d2e8d81d5",
        "cursor": {
          "ref": "c187b4b8-930b-496b-97b7-02b3b87b0485",
          "length": 244,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d159f816-7ef7-4424-a438-d215557137b6"
        },
        "item": {
          "id": "427ffcd6-f7ce-4f48-9812-f87d2e8d81d5",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "38766d74-2d8d-45c5-a07d-7120fcddaa15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0417751-e478-4257-ae04-0a6db50f1048",
        "cursor": {
          "ref": "3cd4aa4d-be65-41d9-b63e-ea87f0243098",
          "length": 244,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "0ccf0fd5-c8c9-4c90-84d2-2be4ec91cfb0"
        },
        "item": {
          "id": "a0417751-e478-4257-ae04-0a6db50f1048",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "0475af4f-9afa-420b-9751-ad753bd86b3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b102ed6-e068-41d3-8599-d4cc464a4325",
        "cursor": {
          "ref": "346a7851-8250-4782-bb66-f6f90c0ebb2a",
          "length": 244,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "cf908ee6-8904-4a86-afe0-b757059a0e2f"
        },
        "item": {
          "id": "9b102ed6-e068-41d3-8599-d4cc464a4325",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "27938e49-23b6-41a4-bf19-c00a960c2a2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bef73cb2-96e6-4c2c-8516-54cb1e0b0803",
        "cursor": {
          "ref": "776f2af5-cff0-4827-b345-1c50cd0d56d5",
          "length": 244,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "9a37036b-6142-4f19-9be2-126642b0e6e2"
        },
        "item": {
          "id": "bef73cb2-96e6-4c2c-8516-54cb1e0b0803",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c1845d1a-2908-466d-a3c7-36c9bd04c0c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4e290d-a7dc-4b43-9d6d-8bec6b34113f",
        "cursor": {
          "ref": "ce1fc229-eb73-4e96-88e9-349beec329d4",
          "length": 244,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "9dd62fdb-7b74-4651-a794-f509f15b10cb"
        },
        "item": {
          "id": "bc4e290d-a7dc-4b43-9d6d-8bec6b34113f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "688a8981-0d8f-4d3d-a752-cc6561b387f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08439587-fa9c-4659-ae6f-bc58404b8683",
        "cursor": {
          "ref": "6806777b-a539-4d40-b8e6-02c190598819",
          "length": 244,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "4ba7c2ef-2bfe-4b15-ba71-96b2728ec9fb"
        },
        "item": {
          "id": "08439587-fa9c-4659-ae6f-bc58404b8683",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e7759209-cdce-45a0-94c4-1a3b1674a1db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe23a629-ad46-42d3-9473-15105871941c",
        "cursor": {
          "ref": "9ae7491f-99e3-41a0-a3da-87292d2ad403",
          "length": 244,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "2015e9ed-65f3-4800-9ac8-461a53483743"
        },
        "item": {
          "id": "fe23a629-ad46-42d3-9473-15105871941c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "54b52050-7d8e-4105-b375-ca322f1a1799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a1dead7-70e6-46ab-add8-329d08a19a58",
        "cursor": {
          "ref": "d78776f3-5441-4393-a4c7-f48137a54515",
          "length": 244,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "5cd6e511-efa0-425e-9ffc-423a31e5478b"
        },
        "item": {
          "id": "4a1dead7-70e6-46ab-add8-329d08a19a58",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f74e1500-b5a9-43fb-8e14-eb837e9991bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51c1d872-c0db-4755-99c4-6499df58089b",
        "cursor": {
          "ref": "2c0e3e98-1e42-45c9-9b19-e146eccf7ac0",
          "length": 244,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "6b9c7d9e-539d-40aa-92db-506f7056546b"
        },
        "item": {
          "id": "51c1d872-c0db-4755-99c4-6499df58089b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "da610d39-c5d1-4fa8-89dc-b225e5e8b0ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d161176-9b63-4847-91b6-3cb55f6d4e9d",
        "cursor": {
          "ref": "abd4c760-acb3-447e-a035-e4ec2d39ada2",
          "length": 244,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "ce9a56a5-6a34-49a7-b24d-89aefaf8708a"
        },
        "item": {
          "id": "7d161176-9b63-4847-91b6-3cb55f6d4e9d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "0f00586f-a216-41df-9c3c-4815256a7e01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "916647a1-ae52-4c7f-8bef-5b39809eb618",
        "cursor": {
          "ref": "9068c5b7-2d32-45b7-8002-c33d3c6d7668",
          "length": 244,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "6a5b804f-a280-467b-85e4-054f26584d87"
        },
        "item": {
          "id": "916647a1-ae52-4c7f-8bef-5b39809eb618",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "5d97b3b9-c158-4288-ba4a-1e3f6c1d476e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a315e9a6-5234-4bf1-ad7d-896d3d0812bc",
        "cursor": {
          "ref": "f5579d1d-8819-4a1e-8648-2d82bdaa0986",
          "length": 244,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "d645a4af-04b1-4199-95bc-9d51d594a44f"
        },
        "item": {
          "id": "a315e9a6-5234-4bf1-ad7d-896d3d0812bc",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "387e6b8c-292e-4737-9701-51a60bb0af64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f3353d-c4ee-4359-b338-9c6fcea94a0a",
        "cursor": {
          "ref": "dae3307c-8055-456b-9968-0920e11280ea",
          "length": 244,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "c712bc5c-52fc-4991-89a4-11fd35c2787a"
        },
        "item": {
          "id": "83f3353d-c4ee-4359-b338-9c6fcea94a0a",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d09d3896-b804-4321-aa6e-85bd409a5508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4f158be-e67f-4aca-80b3-3c0d5323f467",
        "cursor": {
          "ref": "9be0ba24-2aee-40e9-a1ca-cc947b262f48",
          "length": 244,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "39eb7194-5da1-4738-bf2b-7355974671eb"
        },
        "item": {
          "id": "a4f158be-e67f-4aca-80b3-3c0d5323f467",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a827ce9e-1c47-432b-8cca-79bc3e13633c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b5498a9-2100-407d-9b0e-fd87fd72f8db",
        "cursor": {
          "ref": "caa8aaa8-649c-4ef7-8a8f-100d5ad854bb",
          "length": 244,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b4b20d59-3644-438b-adfa-dc485510644b"
        },
        "item": {
          "id": "1b5498a9-2100-407d-9b0e-fd87fd72f8db",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e6a04641-da22-4ab9-9360-751bea3522f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94c9dbef-5bc2-48e2-92ed-50b9c0a49eaa",
        "cursor": {
          "ref": "97d76188-bc85-4e18-9c26-84041e5b3f67",
          "length": 244,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "41dcc6ad-6882-4777-aa6e-59052559a42d"
        },
        "item": {
          "id": "94c9dbef-5bc2-48e2-92ed-50b9c0a49eaa",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b5eab0af-eb52-4d75-bf2f-970245c90151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6a4b619-01b0-4227-881f-7e0ea78b9034",
        "cursor": {
          "ref": "d51b2166-607d-4830-b7c8-ec2fb83fa8f2",
          "length": 244,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3b1bd94b-90d5-4caf-a50c-e243685869e0"
        },
        "item": {
          "id": "e6a4b619-01b0-4227-881f-7e0ea78b9034",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "3548a8ab-bfdc-48a1-a718-cc203209c48f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2303773f-7b71-488f-bc47-a8227b51dbf0",
        "cursor": {
          "ref": "5ac96a20-5039-42ad-ad03-af9c95f9215e",
          "length": 244,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "dba0a058-6121-4203-ba5f-bbce29224add"
        },
        "item": {
          "id": "2303773f-7b71-488f-bc47-a8227b51dbf0",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "df76cc49-542e-4b97-ae54-af919799c4f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c32577e-e430-4ab1-8506-ead4fca681ca",
        "cursor": {
          "ref": "2b9d3eea-812e-4d99-af41-bb50d653af96",
          "length": 244,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "6485dd66-c362-4f25-af1f-0ecfcf9dca97"
        },
        "item": {
          "id": "6c32577e-e430-4ab1-8506-ead4fca681ca",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "bf3accf1-4d3c-4d8b-8b91-880414a88de0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bae375d1-6582-4740-9cf4-f06507fd6445",
        "cursor": {
          "ref": "18b3be56-2cb1-4a29-998d-991ecc08b491",
          "length": 244,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "33ee8f41-3a76-448f-9fc0-0d3f030f629a"
        },
        "item": {
          "id": "bae375d1-6582-4740-9cf4-f06507fd6445",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c97559a6-a734-4a6b-8469-99442fe7ff90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b18265f6-6c56-49bc-b568-143f500a56db",
        "cursor": {
          "ref": "551ca772-fe26-4458-ab1f-30482dde5f5b",
          "length": 244,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "a63d64cc-8f04-46bc-9ae7-b269f0e2ad5e"
        },
        "item": {
          "id": "b18265f6-6c56-49bc-b568-143f500a56db",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1f04a092-51d0-4b51-9af1-420779be4323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e376ae3a-196f-4fdd-9756-7977efe33780",
        "cursor": {
          "ref": "6fbf7ce2-f7ff-4709-aa7d-3c90ef96c9e4",
          "length": 244,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "43d8e4e3-68bb-4b04-a762-76d6a2fa2172"
        },
        "item": {
          "id": "e376ae3a-196f-4fdd-9756-7977efe33780",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "91bf3edb-fbc3-467d-8628-35ec61812c14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41f4e1b5-cf09-4ef2-bc71-0227da5a211a",
        "cursor": {
          "ref": "1f638e9d-9baa-4e63-bc67-fe65b31b2b09",
          "length": 244,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "0d2f50a3-3632-4721-b655-78191c29987f"
        },
        "item": {
          "id": "41f4e1b5-cf09-4ef2-bc71-0227da5a211a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9b4d632b-8a39-44c1-9210-3e3930983f78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03703920-d5dc-47a7-9f95-58ebdb23520b",
        "cursor": {
          "ref": "df07694c-a019-4499-a115-679db8aa1255",
          "length": 244,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "05e7defd-52c9-45ad-a275-6a68e52d7a98"
        },
        "item": {
          "id": "03703920-d5dc-47a7-9f95-58ebdb23520b",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c62b7b02-9411-41e2-bb41-92b807405efd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbc24f9a-adc4-4307-823d-e8a918667dc1",
        "cursor": {
          "ref": "67cd83ca-aecf-47fc-b7f8-95a44fc194a2",
          "length": 244,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "46b6fc83-e607-40b5-8843-b418fc39dd2b"
        },
        "item": {
          "id": "cbc24f9a-adc4-4307-823d-e8a918667dc1",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "19e731b7-0cd4-4382-93f5-d730832d7f71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e9dca1-dcb1-4ad9-b5b4-de46c347a840",
        "cursor": {
          "ref": "98b0e2d1-020b-4a27-a4d4-7ca2913ec254",
          "length": 244,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "27059ab3-b89c-4c89-bb6c-b527d2882749"
        },
        "item": {
          "id": "17e9dca1-dcb1-4ad9-b5b4-de46c347a840",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "835932c6-22b8-431a-ba24-4d2cdbb52f4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1997e677-4a79-4247-b82b-874a54eda840",
        "cursor": {
          "ref": "93e30e9a-900a-4cf1-933f-2231a7034587",
          "length": 244,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "72ad9a93-055a-452e-adf8-f9d9f982da08"
        },
        "item": {
          "id": "1997e677-4a79-4247-b82b-874a54eda840",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "936075d1-6bff-46e2-9d25-03de558e6a48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37b258a0-9d07-4e18-b1a4-a20b3251f501",
        "cursor": {
          "ref": "41784161-71f9-4040-8296-22618132aba0",
          "length": 244,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "367d1140-2a8b-4d07-8839-87ad734495f2"
        },
        "item": {
          "id": "37b258a0-9d07-4e18-b1a4-a20b3251f501",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "05c750d8-fc11-42d7-ac05-deceb219bde1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f92d7873-25ff-49f5-a150-435076b423db",
        "cursor": {
          "ref": "cb6abeac-c661-46e9-aff3-0e0852538314",
          "length": 244,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "208009b5-73cb-4966-a39d-8565b87d4677"
        },
        "item": {
          "id": "f92d7873-25ff-49f5-a150-435076b423db",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ff7b79f9-1b82-49f1-b533-5ee734b54e30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc6a02c1-c699-4193-93df-4049d42cf39e",
        "cursor": {
          "ref": "fd23040b-97a3-431f-9407-880c41c2c9b3",
          "length": 244,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "290aa537-2c59-4e91-aa66-8a26be663f05"
        },
        "item": {
          "id": "dc6a02c1-c699-4193-93df-4049d42cf39e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8e80eafb-398a-4bd0-8376-34e5096bb84f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91aa63a9-552a-40fc-98f8-114842cf2c45",
        "cursor": {
          "ref": "5720c81e-d069-4d6c-9605-cd8e7f36d36c",
          "length": 244,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f6377372-0bce-415d-86ee-cc3af9730b25"
        },
        "item": {
          "id": "91aa63a9-552a-40fc-98f8-114842cf2c45",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "5400e4de-3b6d-4cba-888e-8b0b7935fd82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 272,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1f09e34-aa75-4a49-ae84-7822b6e573ae",
        "cursor": {
          "ref": "8dcb819c-6c73-4e5e-9479-5c918158b386",
          "length": 244,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "355f8f9e-8537-4f29-a5a7-ec65295b0ddf"
        },
        "item": {
          "id": "d1f09e34-aa75-4a49-ae84-7822b6e573ae",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "bb700811-f91e-4130-82d1-5e855af47dc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 244,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6da13b1-e165-402f-9e8e-b10340e76a9e",
        "cursor": {
          "ref": "b98da70a-21b8-429e-9157-476ad5489f8a",
          "length": 244,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "fd4b353b-2c02-40ff-ab34-c3ea1023fefd"
        },
        "item": {
          "id": "e6da13b1-e165-402f-9e8e-b10340e76a9e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "145cb465-bc34-4317-b798-30a0fcdf5b9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 164,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9f53459-f820-49b8-addb-b8f02f7807fe",
        "cursor": {
          "ref": "9f51b02c-f826-449d-b0b1-866a27901b84",
          "length": 244,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "64123e4e-b716-4850-9d25-1c68d3c6db5e"
        },
        "item": {
          "id": "f9f53459-f820-49b8-addb-b8f02f7807fe",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "2615dc2e-23d7-4499-9e75-283d805aa585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7f7732e-e244-490e-9b2c-3a202c5e698f",
        "cursor": {
          "ref": "cd9a78e7-5abf-4322-b94d-da9b4fb67876",
          "length": 244,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "abb6ebda-c11b-402e-ab0a-9bc02e430f8c"
        },
        "item": {
          "id": "c7f7732e-e244-490e-9b2c-3a202c5e698f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "2cb20877-b0ee-4226-ab11-c52e9bb9d48d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36fe1ee9-f78c-4d3e-a840-9b3c4a43cc69",
        "cursor": {
          "ref": "a03f66d2-ad23-4eaf-a852-cf6dcac87d1d",
          "length": 244,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "522c8c45-447a-439c-bd9a-160afeb3a364"
        },
        "item": {
          "id": "36fe1ee9-f78c-4d3e-a840-9b3c4a43cc69",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b7fc16cb-f0b6-4c07-9a78-dac1debf1151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1563c6d-6e7c-446f-bdc9-a1b61c9de042",
        "cursor": {
          "ref": "0144d7ec-1472-4058-8dc9-c04022148825",
          "length": 244,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "19958faa-bb74-4903-9f83-5af774aed159"
        },
        "item": {
          "id": "c1563c6d-6e7c-446f-bdc9-a1b61c9de042",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "192e59ee-ad9b-41d4-8d9c-a86c4f96f19d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aa35e32-65dc-400f-8859-697236795a9d",
        "cursor": {
          "ref": "7acb6021-5fd4-48ce-9a93-9991b0507fc1",
          "length": 244,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c1584b79-2b68-4b29-8503-c4116ca50ffb"
        },
        "item": {
          "id": "3aa35e32-65dc-400f-8859-697236795a9d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "a81977f8-fbd4-4a65-8d59-e034350020c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddb20b5a-0b36-4527-b9ae-b17bf290bc69",
        "cursor": {
          "ref": "7290aca6-f70d-421b-a9a2-e9e5aba3bbe5",
          "length": 244,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "64d7446a-14e0-42fb-b370-a284df4d416a"
        },
        "item": {
          "id": "ddb20b5a-0b36-4527-b9ae-b17bf290bc69",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "6a4f7794-b8fe-47b2-a0c9-0955848524af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc06ebc8-f4c4-4908-909b-5ca9f66bb096",
        "cursor": {
          "ref": "d5de5ec0-44df-4c1a-a6c4-32aeb33bd0f2",
          "length": 244,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "10061ffc-eeee-4488-867c-ba9d60d48209"
        },
        "item": {
          "id": "cc06ebc8-f4c4-4908-909b-5ca9f66bb096",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "54ca002b-dba5-4fd0-9a54-c796eae78f53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2ef0b99-b9fb-4bdd-a6e5-164f90f86ac7",
        "cursor": {
          "ref": "d77a6c85-72b1-41bf-99c0-25b4521a7ef6",
          "length": 244,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "861e4e86-5611-456f-b773-8e0ca3f1b494"
        },
        "item": {
          "id": "a2ef0b99-b9fb-4bdd-a6e5-164f90f86ac7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5aae35c8-5762-4d15-ac49-57ac18b3c395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfe658ef-afe9-4d06-8bd9-b81013184115",
        "cursor": {
          "ref": "c0d11204-1c45-4b88-b04b-fdd8c7515a96",
          "length": 244,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "3246241d-75d6-402b-8ff9-385030bd1309"
        },
        "item": {
          "id": "cfe658ef-afe9-4d06-8bd9-b81013184115",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "63d90bc6-75ad-47fb-92b2-6a13290598a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e4f1bfb-5d48-45db-824a-060d4ace2071",
        "cursor": {
          "ref": "824742e3-6ee5-4d91-be4e-58380203906a",
          "length": 244,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "8842020a-3483-400e-9311-148eda7407b1"
        },
        "item": {
          "id": "9e4f1bfb-5d48-45db-824a-060d4ace2071",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "3358cb80-3035-435a-9988-d2a90cae37c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51968626-a82d-41b0-a5da-410c30f8286c",
        "cursor": {
          "ref": "5ccefe5f-0b58-460e-a104-0fd6a89a2b27",
          "length": 244,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "a1658f66-a408-48e5-ab9f-90fdf2119a2d"
        },
        "item": {
          "id": "51968626-a82d-41b0-a5da-410c30f8286c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "40d01f79-479b-499a-b2d2-2cd8a8aafc33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c194e08-92f0-441c-9ecb-4ad5f727f4ca",
        "cursor": {
          "ref": "4cee363e-730c-4924-ad4b-b22ae4b7eb81",
          "length": 244,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "fafae256-b46e-481b-b53d-79da18baa2cf"
        },
        "item": {
          "id": "6c194e08-92f0-441c-9ecb-4ad5f727f4ca",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "fbd1cec5-d513-437e-adb6-27d547db1f3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3456e4b1-b9d5-4215-83da-2d79463e1b00",
        "cursor": {
          "ref": "59dcd5c2-4ee4-4dcd-adc0-fe4fab062818",
          "length": 244,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b3467eff-b009-4789-8243-55eefa055798"
        },
        "item": {
          "id": "3456e4b1-b9d5-4215-83da-2d79463e1b00",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "342c9f9e-6fbe-4a30-8e96-1a3b1a449010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9116be9a-2217-4465-9689-199d39684f3d",
        "cursor": {
          "ref": "9ed3c6c9-8aa9-43f8-82e1-74bef3f98195",
          "length": 244,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "350cf286-a7a8-4476-9949-2b4ef21fd729"
        },
        "item": {
          "id": "9116be9a-2217-4465-9689-199d39684f3d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "11b1b6d3-0317-402d-b841-a927713b88d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22668ec4-3b4f-47d5-9728-3e0d33a07469",
        "cursor": {
          "ref": "7d47ab17-d1fc-4466-b8a5-6527107d9f22",
          "length": 244,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "fbcf5959-3755-49b0-808a-c105f7dbf148"
        },
        "item": {
          "id": "22668ec4-3b4f-47d5-9728-3e0d33a07469",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "3f48d0e2-b255-436b-be29-d01b6bbadac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff5eee0-5907-4fca-b3de-dfb708abb88c",
        "cursor": {
          "ref": "ed210078-ed1c-4cfd-95d4-621b40f893d8",
          "length": 244,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "7142d8eb-1989-4dfd-a685-0b38bac3d83f"
        },
        "item": {
          "id": "fff5eee0-5907-4fca-b3de-dfb708abb88c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3ca5ccc4-2a2b-4966-b7cb-3ea9711ad233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b0237aa-149b-4c89-b3ad-78818cb3cdf1",
        "cursor": {
          "ref": "1bd7199c-e8b5-4c3e-80f0-e6e58601c2dd",
          "length": 244,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "15b96ea3-234c-49b1-979e-235e0537bc2d"
        },
        "item": {
          "id": "0b0237aa-149b-4c89-b3ad-78818cb3cdf1",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "931f9a16-3d60-49d4-af4e-ea9df56215d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea38b610-a276-4147-8e0b-ed2149a761ef",
        "cursor": {
          "ref": "f034648c-319b-43d5-b810-b2f00fb0a4cd",
          "length": 244,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "2b3f4d4f-8741-48ff-8055-b692040d6cef"
        },
        "item": {
          "id": "ea38b610-a276-4147-8e0b-ed2149a761ef",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "9b6058bf-f1c2-4bf0-849f-c50a2563d20b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e4aae66-b965-491b-b893-eaa05e0499d1",
        "cursor": {
          "ref": "bdbe58fc-508b-48a3-b2b7-04c04735a25b",
          "length": 244,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "8e309db9-c7c2-4c69-bb57-546c24d7dac1"
        },
        "item": {
          "id": "9e4aae66-b965-491b-b893-eaa05e0499d1",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a196155f-7612-4265-b64f-426a6d72c6f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fc452ac-feda-4f72-ac36-5668f6e66989",
        "cursor": {
          "ref": "d8e8beee-6904-4d64-b0fe-08374c9b152c",
          "length": 244,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "bfd0b76d-3650-481b-87fd-a8dd6b8ce4c3"
        },
        "item": {
          "id": "4fc452ac-feda-4f72-ac36-5668f6e66989",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "c71a0e93-9067-4a13-8a77-87810562ded3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f0a72c-4f95-4fb4-b248-42568bd5626a",
        "cursor": {
          "ref": "5441965d-dbdc-490e-b179-c88b129f0c98",
          "length": 244,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "63962a6f-fc86-4490-8c13-cbb55d28c3e9"
        },
        "item": {
          "id": "36f0a72c-4f95-4fb4-b248-42568bd5626a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "dfb07906-3875-4a8a-83c8-c1fbac745309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2df53332-20b9-4c6a-baf7-1fda95b9ac07",
        "cursor": {
          "ref": "e4c5f158-61de-4832-bbfb-05aac3138ff2",
          "length": 244,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ffc2b206-5e0b-4809-bb9d-e70fce30a888"
        },
        "item": {
          "id": "2df53332-20b9-4c6a-baf7-1fda95b9ac07",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "17f8a70a-865b-442b-8935-5f9dce4de975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bae79de9-937c-4112-acf6-abed6a8cf88e",
        "cursor": {
          "ref": "a137d71e-fc24-41d8-a4a1-e4151bc342c3",
          "length": 244,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "b3197f82-4ce1-40e3-ac0e-e8374666d22b"
        },
        "item": {
          "id": "bae79de9-937c-4112-acf6-abed6a8cf88e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "4393b41e-7e4a-48a4-89a5-7f54ee02dd1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c488baf-fe47-4e15-8601-23ed9668f46b",
        "cursor": {
          "ref": "40b8b713-02b3-41d7-a245-4e18a6bbfeec",
          "length": 244,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "646e3050-9f1d-4803-933f-ea97e9e89ee3"
        },
        "item": {
          "id": "6c488baf-fe47-4e15-8601-23ed9668f46b",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b429d2fb-bc72-440e-a995-11730010ec8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97758064-7ab0-4724-b3af-cd00f67f738c",
        "cursor": {
          "ref": "84bdb262-4ef7-47be-a97f-fcfc958d4007",
          "length": 244,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "17f78d6b-2fdb-426f-a1e7-7b3baadb0ab4"
        },
        "item": {
          "id": "97758064-7ab0-4724-b3af-cd00f67f738c",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9841ecad-d8e3-4ba5-afeb-e8bfcdae6bed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae0d504f-459f-4634-913d-e17620f717c7",
        "cursor": {
          "ref": "b0023991-3655-4783-8336-b0f7a7c45bd2",
          "length": 244,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "2a35b6e6-5435-4916-94f0-1919084bb358"
        },
        "item": {
          "id": "ae0d504f-459f-4634-913d-e17620f717c7",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "2785d339-9b1b-46c0-aebd-7d16be132a78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d37b8474-ad4b-448d-a0b6-5639d597ad17",
        "cursor": {
          "ref": "ae5126d8-5f34-4d4c-a2da-39350bc01b27",
          "length": 244,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "f334f5c8-7b88-42ab-917b-95ed828a30b7"
        },
        "item": {
          "id": "d37b8474-ad4b-448d-a0b6-5639d597ad17",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "89423e5c-9016-4d62-89c2-cece0d7150fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2249d552-b5f1-4b25-9960-65fedf249cab",
        "cursor": {
          "ref": "3e4ad26b-fcce-4f6f-9bd5-cb9f95b1f644",
          "length": 244,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e2f82b5e-9a38-491e-98ca-9ace562f946d"
        },
        "item": {
          "id": "2249d552-b5f1-4b25-9960-65fedf249cab",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "0fa11362-a00f-41b5-80fb-35b5be0418f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7643bb0-7bb5-4837-a158-bf465b1c3587",
        "cursor": {
          "ref": "5ced29ec-a847-4dd2-88a1-1679bbc32295",
          "length": 244,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "56d0f8ee-1cc7-48d9-be6e-663afa65e803"
        },
        "item": {
          "id": "f7643bb0-7bb5-4837-a158-bf465b1c3587",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "0a55e299-0c96-4ed9-953c-d1aa175df4c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2f80d49-fff6-45e2-831d-e1e327091204",
        "cursor": {
          "ref": "e104edb5-064f-4654-90ec-b182c14aef81",
          "length": 244,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "412b9097-b21c-4bd0-8229-46e4268b2ea7"
        },
        "item": {
          "id": "d2f80d49-fff6-45e2-831d-e1e327091204",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "72db9dcc-acd0-4446-9f9f-5ea450da0b09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "128b181f-07de-42cd-831b-c8067d5b5e14",
        "cursor": {
          "ref": "2cc374bb-de3b-40e1-a62a-acee476f5fad",
          "length": 244,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "4eccd386-443b-4fa6-8c75-60cffd3f4df0"
        },
        "item": {
          "id": "128b181f-07de-42cd-831b-c8067d5b5e14",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "04b086b2-d7b8-47d8-a724-ec28b1021722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3648c2a2-8cf5-4abe-b784-39b04bf0365d",
        "cursor": {
          "ref": "62bd1201-0db5-4490-840b-7899c710c737",
          "length": 244,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "9f2a1b08-dd53-4fac-9e27-61bbe80a4e13"
        },
        "item": {
          "id": "3648c2a2-8cf5-4abe-b784-39b04bf0365d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "3882ad07-d028-4108-b682-01474c345ab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "733f32b4-02dc-409c-b9ca-b4185a8c9866",
        "cursor": {
          "ref": "b6cfcd5b-e8a7-49f5-bf44-f5594f710de8",
          "length": 244,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4fc970b2-f798-45c4-a824-1969fcaacddf"
        },
        "item": {
          "id": "733f32b4-02dc-409c-b9ca-b4185a8c9866",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "776c0ae7-2ca9-4e80-b72d-c4ac16b31bd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c9bc1a-c4fa-415a-b58b-b88953597ada",
        "cursor": {
          "ref": "d507200a-604d-49e4-a904-2469273b9f48",
          "length": 244,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "347b1e55-74d3-42c6-935b-811c3f831640"
        },
        "item": {
          "id": "31c9bc1a-c4fa-415a-b58b-b88953597ada",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d35a9d3c-0112-47de-9940-562346bd184d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "590fd2b1-4a5a-4272-bf6d-5c7010121526",
        "cursor": {
          "ref": "a977dd13-10d8-4a81-8d0a-1005535ba532",
          "length": 244,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "f11c1e28-dc1e-435b-acc6-ef752152ec92"
        },
        "item": {
          "id": "590fd2b1-4a5a-4272-bf6d-5c7010121526",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "9acb959f-6c8e-48c4-9db6-e180cfc26367",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f19b9215-1f04-4226-9c96-60fc59ee6be5",
        "cursor": {
          "ref": "3b787626-5431-40ce-a750-efe6939623c6",
          "length": 244,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "a4e9640a-24a1-490d-850e-4332481081de"
        },
        "item": {
          "id": "f19b9215-1f04-4226-9c96-60fc59ee6be5",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "80b7c1be-9519-47e6-bd2e-758223fbd246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac5e987e-bb9a-4dec-b262-611f43fae357",
        "cursor": {
          "ref": "fa6f6b45-4dfb-4f50-8e2d-98e8d7243119",
          "length": 244,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a5ac4c15-c52a-4d61-998f-2750ebfc38c0"
        },
        "item": {
          "id": "ac5e987e-bb9a-4dec-b262-611f43fae357",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "f464365d-ec9c-41dc-b99b-6d2b5b12f161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dabb4219-1857-402c-8afb-8300a47c23d1",
        "cursor": {
          "ref": "f17399cb-0440-4137-9a6e-d813f05432c6",
          "length": 244,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "64d28f10-ab71-4ba2-8240-af97a4536e33"
        },
        "item": {
          "id": "dabb4219-1857-402c-8afb-8300a47c23d1",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "216afeb1-27b5-4503-98e3-03007969d3c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0619daa-bd40-4f20-bbe3-82375fa46081",
        "cursor": {
          "ref": "e9e3eafc-1f9e-4b0a-bfde-2eb79a9c0fcf",
          "length": 244,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "d3b48178-0f27-46de-b34b-da2cc016a53d"
        },
        "item": {
          "id": "e0619daa-bd40-4f20-bbe3-82375fa46081",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "59b10197-facc-42ac-aa0b-cfb9bdcbecbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae1f11dd-bf09-438e-b809-e4f156ad8114",
        "cursor": {
          "ref": "1f2cabc1-c7b7-4e8a-95f5-88a5ce0d7e55",
          "length": 244,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "520143ee-9220-43c8-9604-1867689dbc69"
        },
        "item": {
          "id": "ae1f11dd-bf09-438e-b809-e4f156ad8114",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "cbc6b3b4-d7dd-4563-b4d7-cb6b54c2d899",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "4f43e465-b89d-463d-9b38-c19534e633f4",
        "cursor": {
          "ref": "69a708e0-6cfd-4e30-a662-ae8389280e1f",
          "length": 244,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ab17c8f2-f946-4642-9a66-b4113e398a6d"
        },
        "item": {
          "id": "4f43e465-b89d-463d-9b38-c19534e633f4",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "123a53bc-5748-4b91-be95-62301dc741b2",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "973ec187-d46d-4d0f-8b5f-33846d9c7fbe",
        "cursor": {
          "ref": "144e4060-9514-4c28-b8a0-89510aa4c60a",
          "length": 244,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "50043070-fc1a-4582-921d-9f9e4bbaa1cc"
        },
        "item": {
          "id": "973ec187-d46d-4d0f-8b5f-33846d9c7fbe",
          "name": "credentials_verify"
        },
        "response": {
          "id": "81f1e53d-3eb6-4e04-8db4-822ae24998a6",
          "status": "OK",
          "code": 200,
          "responseTime": 2372,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f148d120-e6b5-4f7f-abf9-51f6866c6bdc",
        "cursor": {
          "ref": "5babf055-0d3d-476e-be00-a00eac43977a",
          "length": 244,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "9d67bf55-2100-4fb7-8be3-f89b89a86127"
        },
        "item": {
          "id": "f148d120-e6b5-4f7f-abf9-51f6866c6bdc",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "ff17f7ff-0f7e-4315-8d58-0409680e0cc5",
          "status": "OK",
          "code": 200,
          "responseTime": 3250,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d13b1ccb-5b3b-480d-a05e-f500396374dc",
        "cursor": {
          "ref": "3223edf2-db7f-401c-9579-5432955c951f",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "e0f57569-d136-475b-bbcb-9ab354493ec6"
        },
        "item": {
          "id": "d13b1ccb-5b3b-480d-a05e-f500396374dc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "15f8666f-021e-4222-9492-f3e44c81e80f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "d13b1ccb-5b3b-480d-a05e-f500396374dc",
        "cursor": {
          "ref": "3223edf2-db7f-401c-9579-5432955c951f",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "e0f57569-d136-475b-bbcb-9ab354493ec6"
        },
        "item": {
          "id": "d13b1ccb-5b3b-480d-a05e-f500396374dc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "15f8666f-021e-4222-9492-f3e44c81e80f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "a5d63f6d-b31c-42ce-9533-2e49740a3887",
        "cursor": {
          "ref": "8408c62e-18de-43f4-8a1b-d999d3a3c16d",
          "length": 244,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b9794efc-1f29-4942-9dfe-880b4781d576"
        },
        "item": {
          "id": "a5d63f6d-b31c-42ce-9533-2e49740a3887",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d6c20bae-4f98-4df0-b96c-2bd5434b8ed7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "b2f1382c-c941-4349-a425-864fe926c7de",
        "cursor": {
          "ref": "b15a75f3-b16a-4cda-9e6b-63df2608bb92",
          "length": 244,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e923ae0e-bf05-4fd8-a4da-eda5eee5eef7"
        },
        "item": {
          "id": "b2f1382c-c941-4349-a425-864fe926c7de",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f6bcfbb4-b845-4c15-94a3-6c330852158d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      }
    ]
  }
}