{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "0001b033-7d4b-41de-a95c-4ddca1279227",
        "name": "Clear Cache",
        "item": [
          {
            "id": "9da12d0b-9970-4a39-bec5-c108099a622f",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "abcf23b1-b6ee-4468-8d29-89f3c422aacf",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "fdfd820a-4012-48b8-81ef-ee27969c5557"
                }
              }
            ]
          },
          {
            "id": "c9f3a497-bf5e-4e0c-8d05-ca599e04d1d1",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "09dd8df2-9eec-4a46-96a0-9a9bb4ca642e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f2de7b06-03d6-493f-933e-802cd7ff4b57"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "95f915ac-0725-4a63-a8e1-3d0ddee30ed8",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "4044f3c4-2c2d-474c-bc93-547adecc689f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a5bc45aa-e792-4da2-9861-9d59abe6515d",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "10b74445-282b-4cc5-abff-582bb383be51",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b89876bd-a1cd-426c-914e-288e29dd736e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0ba9fb04-c686-4238-9e96-3d645f2f4d9f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "61517cfb-d427-4bf4-a984-6b14246bab6f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "336acf46-62ba-43d7-a0f3-0d07ee8aae0c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7ae0b57a-a7a1-4c4d-a537-b78da1d87d25"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "486aa296-362f-4281-bb5b-a79a9b4ed69d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "bd11cc8f-6cf6-4dd0-b13f-1f820c888a08"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fc710fe0-0dbd-458e-add5-70a204ff399e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eada3325-689c-4d2f-aade-2ba2597de9e2"
            }
          }
        ]
      },
      {
        "id": "4bb5883b-c106-44f2-85e7-b11631a33198",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "00698673-d85b-4a4b-aaa6-689e5df92cdc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9e7ed9b4-1054-461b-85c1-96bc680b8a7a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "13873361-4dfa-40c8-bb21-ac0ef8b18db8",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15153eae-f918-4d69-afe9-b7070cfe4604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "be73ec2a-28b1-4cd4-9572-2f8d269fe6e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29074e9c-908e-4d77-85ae-b86a0acc46cc",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13561501-f71e-44c6-ad23-054c1da33820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "75b7367a-20bf-45ab-a423-62bd1484bf19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a08bf003-2f5c-4110-876a-175dbabd224c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea38ade-8480-4f2d-883a-bead753542ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "52bef139-e4d8-46eb-9965-14608587a17f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2e93f6ee-434b-40ec-b238-aae404a93fbd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f002cadd-ee47-4131-8245-313a5b764fb9",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e59eff-b6dd-430d-bc13-13fb68d22017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef909019-0c35-4b92-b178-cf6741ceb1ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "772f18e0-d08f-475f-bed5-195778d5edea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b36ec232-3cb3-4906-8b5e-2668887a726d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "870e5474-5384-48c3-acea-b8f714d91315",
            "name": "Positive Testing",
            "item": [
              {
                "id": "184b988e-bb04-4bf9-b503-594cf08ab060",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4394af14-d233-437e-81e3-cca5dad7ec8d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "7a30e202-2219-4298-be63-0849c7e87a81"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e9e0aee1-2127-40f0-bf12-09a1d8a203b6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "eb4bf4ec-7fc7-4be1-8b70-81c347dbe853"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8b2a2135-b3a3-43a2-8d4d-06bab8e8b69c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cb0b2667-e649-46a2-aaf3-8c0894eefd8a"
            }
          }
        ]
      },
      {
        "id": "692f6bda-a00b-4610-a01e-6b271a7c6527",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "4903aba6-8ff5-43a0-b0f7-aa7b047ad47a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3c8fc701-92ec-4d2a-923e-9d40c2458241",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "7c3a22d1-7f57-4e52-89b9-ff29ca440eb4",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf4e8621-8640-4709-8547-0086caa850b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "720a936f-2bd3-41bb-ba6b-a5e775523d60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e320b7a-593c-4205-a172-d56017d68bb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09e3b124-9b61-4677-8f73-8fbd3c5032dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "667156e5-fe2f-46d8-a095-a6c8d412d7a8",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a69dca-4133-42de-9e7b-f3274bc81617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cc14da8-fd83-4abe-99ba-7d15997b786b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b98ec73f-b347-42aa-8eb6-63c49c5227a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f4d59402-8374-4b38-a80d-55e413c411d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21ddafcd-2d7c-4782-b458-cbc21b153e7c",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ded8bc1-c723-43c6-8fd9-294eb9100b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ce0868f-d454-45d7-91a4-62e3f5decd83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd0c228b-1a88-4e7e-b519-6f2ce0ac0dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50075032-de07-4ba3-9465-e094cf0d78c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dbb7e14-30f2-4854-a25c-b10c46c1a99d",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "069976f0-ca87-4a54-a34c-dbc713eeb84a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eaa73f0-56ce-4082-ab5a-e6b45eaa6172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a41fb9c-d308-419b-820f-79f65079bfb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e958f4e-28e9-4a69-90a6-7cf79492989c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21df8f0b-ea29-417b-babf-20db0f295942",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2baaa2ce-112c-49e7-90b0-961da6173fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4877126-5da1-4c68-be28-4d8ce327e6d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "338d2d8b-a7ea-47fc-b7dc-ea2a5c29945b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "064efb40-b549-4795-a9d1-b8e714d375b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7967ad1e-55e5-4049-a914-7f5fd3d6d36a",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6adb59a-8949-4fca-8382-74057c6e1761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a908a794-c636-4a46-98a0-e7c050f597f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b2cdef8-afa8-491a-98f6-17d78426c1f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "012189f0-fb74-49bf-89c3-3f13cd2cef93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28faa2c3-4666-4ef9-ac12-f52bee80c86a",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a47fcb5-93a7-4cfe-9c67-257d13ccd280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1fb75cc-b2a5-4000-840c-ca6467f65ebc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3259d94-9002-438f-9b5e-8ba40d752517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47181b1d-f10f-4198-b12c-5bc6750ed675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e94685c-cf42-400c-94a7-672d9cd4ef84",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d87cca3-f646-49f7-b1b1-fcf9047447c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "210cb9f4-13ef-43a9-a347-f14a07de0553"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "603a8c06-e517-4aa6-8067-04f9679ce304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23b8669c-7543-48d5-86bc-71a162a3ed16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0220aa3e-cf5e-4409-bef4-dd65ed7de601",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "725b7c32-6b70-4627-8317-e1dbeffb4fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c5108c0-d5d7-4f73-8dce-d52dd0d10cdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "320e6f8d-f612-4d6f-b6d6-29948a4406d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f6144bbf-db88-4e35-9a93-933620ca67f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b5a13e6-b03d-4824-bfa4-c2377a8b6fb8",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "293845e4-22a4-4692-b879-9423becf8bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8418f3cd-083f-40c3-ad99-6d9f32cf4e0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6a309fb-8d5d-4723-977e-a9c9b7273e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4c178b81-a5c1-4b89-af3e-0565c91dcf60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90cfdadf-6d5c-4b96-a567-4efd68f1260a",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef4769a-d4bf-4328-abef-0852ee42623d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86c236fc-213c-42c0-a954-1a801569e6a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "697fed06-edab-497b-b3a0-06c7e9a23ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "60c4b143-eeda-47a1-af9a-e39c7da82066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8ac2742-6263-4250-9579-38d4821e8436",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f702e7-e5fa-43cc-a7e2-0eeb61dec1f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0317153b-a5f0-4b4e-8b16-ce217db2620d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9114f9ec-7af5-4eb7-9c71-294485f02548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "004bc27a-3042-4c59-80aa-31086b6fd9f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32c3b3e3-200d-4db4-b8e9-d2dbe836615f",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6940e9a5-5915-4239-bef7-b8b55b5f95e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d2e98c2-7c4a-48c4-bd7b-d605d439f01a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d15afb0-7777-4ad5-98e9-f34ce26b7f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3dfaaf29-9fc9-4f51-be74-92f3c03641bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd61a838-e8f1-4b41-991c-efac890199af",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e87b3881-c3fc-49f7-859f-a89e1a4acac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e09321f7-469c-4ae2-80e7-e1a5ce2c0e86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "616bf3b5-301f-4883-af87-7f4853ce62b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "717d02bd-654a-4ba2-b07c-bfaccda0c52e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2416bce7-f7df-4864-ad75-34e17ac3b847",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9a9b3f3-7847-438b-b056-bf095bbba50b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ae8b50d-b02c-4b5c-8f68-877cacd6ce88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87befe70-6ace-48ca-a77e-7728e7a7bba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94d78f3e-0dc5-49d8-ad5f-a22bfdfaa768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c1c6a48-a622-4fc1-ab1c-c9907c41cc21",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd209b17-83a3-4206-9620-787adf60bc27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc6915a6-7248-4bf6-bef2-de5783fed49b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "949b6e1e-3cf1-4a13-948f-412948416658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2951916a-247a-4474-9c92-14f2ef6df2a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9352fffc-e994-4405-9347-b43e09c0456f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "948c2f0e-e509-4295-b147-ec6f6f3a19fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c02b77f-384e-4537-9acc-6010daf4ed76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4244f6d0-daf2-4508-8fff-f3bcae8386cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd3a2ab9-78e5-4731-b761-7068637fd42b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f96910ca-89b5-40f1-98fb-5e9275d375cf",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15729629-e801-4874-8dea-f22a5c9f37ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fa7b059-7ba3-458b-8ce1-a9ebfb75872e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a07fbdb5-0f68-4fee-8013-d7e64a051ffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "81efff28-d7cb-4912-b255-47a75361854c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c12d9c71-9903-49a9-96b7-8d79adf82a29",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd793eb5-00aa-4e4f-863b-2a485d8459de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51f95e21-f0f4-43ab-b865-98d150bbad1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6724548-40f8-4475-8602-c9953ba93e7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0b4220a-8c05-458e-a278-32435c0d1062"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c0b9c1-3226-45db-87f9-2efda5108756",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d958d8-03dc-4093-9bb0-e3d2c9894eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5757cfd5-217f-4a7e-8fb4-fa5f194028e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dfe4562-2af9-431c-8b14-de932a1ceedd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8609005c-a283-4e02-8861-7a1e7c266cb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "455bf006-dc7f-49d1-a6eb-586f3d103ec3",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00af7d65-77e5-477d-9583-f41cc88f2230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94664c71-b6e8-4a26-b2e5-a687e8a45921"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a772165e-e5b2-4f64-99cc-69c07dee3519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1fb1fa26-b93d-44f1-8b43-bda66e68e226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d16097-1aa2-4259-85e2-0c9dd2412052",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fbc7020-2f95-420e-9d08-49fa3d6a0cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c35efcba-2a20-41a0-a123-980b637298e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17816d55-2cb9-44bd-954a-81d31b567679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d42724aa-8d81-4e06-b1de-22242f74e7bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621148f5-de57-4aec-8a23-5b157d3c5caf",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcc80501-155f-4982-9aa1-473db003304d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cd73b13-056e-4e30-b391-a20443b375a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "952a6c42-32fe-426c-92c4-edd01d9572dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "16e8e4c7-6d12-4633-8bef-a37bcb85b6ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82de08f4-6534-4a65-a7e7-9552d9e69da4",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f78c4e-a95a-4732-b023-449bec10f880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6201e8a-5601-40f1-8b5f-9e7169c21419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ecad39-8236-465c-a8bf-9130f64f4577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1b234ad-71d7-4bb2-8b77-5fe2e7dacfd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e46d917-6a8a-4dbe-8fad-701e5277aede",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc104640-a4f3-4716-a81d-93be63f7a9f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6a229cd-f149-457b-8ff7-aba8ec2dd7e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ff8d6a-3f71-453a-a1d9-60abe45a04c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3484175e-e4e6-4fb7-873b-7228a6cd43bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5f66bc6-d6bc-4c92-bd88-3c9004997a34",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e079919-3dc3-4df1-b998-face900f1604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cebe5502-e20d-469a-b30e-fbc67d0432eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0338b430-1737-4eef-b5d6-df9cf3eac772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1eb0538-469a-4332-ada0-5ad6092205cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f819c391-4038-47d4-819b-d8be1f0419f6",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7363b24-5d81-4fd9-a6ad-45b51d9ba3dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e265990b-aca0-475e-8b10-96c5091cdc9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a29980f-340f-4cea-8c1f-7aa412d26b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d7dfca9-e0f9-489d-90ba-37e5de4c988f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a11ddb78-f561-4f91-8f2f-7b264319bcaa",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35c02243-fe9c-4bce-8a21-5a566b32f834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb8eaea7-a5ec-420c-991f-2ec1c1a90eef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32cd9c83-c1e1-4b70-8fe1-f7b08d67ca65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "31470612-c474-4ef1-976c-6ea77c71ff3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a83b0dc6-d0bd-412f-80aa-1636b3db234b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8cab11f-0c64-46c0-a7d7-f6ca0eca0f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92d1eba0-f536-4359-af5e-29ea081ad062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "709bdb32-98d4-44d8-9323-455cb5b8e40a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6e6b692-6e11-4988-b6a0-571d23b7cf7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cd6bdda-aee5-41aa-9889-fccabc130bec",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fbd70f1-9af2-423f-8ffc-15cdf0af1d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "263d8142-56d0-4047-8691-857c047c0946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ddf1305-e758-4bac-a066-ddb69a2872c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "2945d865-ee89-4ad0-b112-bdf3544d5ae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a84d5091-b21f-4b7b-8829-7c88aa8d6f3f",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b39ad813-e3d5-41ee-9e43-56f88cb34eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19b3f050-3925-4b51-8037-834dfd049338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8cad7ed-a2da-4167-8e62-03220be5c639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3694504b-d547-4755-9427-d8166c04c0e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b708b78-b78d-45c1-9213-960eb3149471",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d0f79df-7ea7-45d7-a85f-eefff37fde18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bf07b61-0568-4b05-8738-3b0e8dccec99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a1a45c0-2db7-4438-95e5-721caf6bb4c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5dddee80-cbce-49de-b5f1-81ade0355d75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c65b002b-b974-4adf-80ae-feb442eaf9eb",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a60ca58-b993-4828-a7bc-4bf3a33d9a07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb7e99e6-ee25-44fd-8ad3-7532fd0dca0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d8812c-4890-45c5-b278-44566539108a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddfa0b42-f88f-4909-8997-83de9dd4cde6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c137ef10-8f4a-457d-a03e-73343c1cdb8f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deae0736-a739-472c-8510-95fc6210ddf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6b8c625-9271-4afb-af0e-0734048958c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47d54105-9962-4d85-bd16-c870832baec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "58168d4f-31ac-4e6e-8d8a-62cec950cd43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cba9ebc-31b9-4380-b958-02ff54a75bca",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61871ff1-019a-4196-bc56-0a971513cb82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9623214f-d843-42ae-856e-4c468b9bf35a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44995d5c-a4a9-417e-af22-b0e1ce26d2db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "e8ca9245-7696-42d9-beb0-3c10f98feed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eb13767-2b43-4c02-9e1c-c59909be1bec",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9272a2f2-9ef1-4e65-90aa-2496addb8da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3747af31-f204-4b29-a5b8-fbc1fef59c18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d77f655-9d20-49df-925d-bee06d4b9ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5b7030f0-25c3-4e35-8fcf-590585b47242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24322535-be1d-40cf-bf81-3c3388e79bac",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e0d3d1-a1a9-42db-b64e-8e1b56fc8e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94d36fe1-b213-4d32-9333-2213bbb85691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "938e4085-3864-4915-a577-20480a4d7c71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "99a2c28f-844d-49d4-8f54-febe9f4c7111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7178a29f-fa6c-4b51-969c-7eab26d02ff2",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53428955-4abc-4ba8-ac0b-c6c13d70a7f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4e8f527-4e20-4838-9446-b7f928cb2edc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bfd98e1-60f4-4457-ba69-38302e66417a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e71f5ab5-476b-4092-821a-4e19beed59fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a3e70bd-13da-4bae-bce2-8045e602bd9c",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6acc6aff-f5f5-4f4f-aebe-f53d88ccfc83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6389329a-c402-4344-98fd-3ade06898c1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ccaec12-dba1-4043-b9b8-fc1ca7c5489b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a2035c9-6c4c-42c4-929e-c96eeaf80d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b33978e-0a97-4592-b820-5bd40b5c907c",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d0d2a7e-40b0-4014-a0d5-2502e3d4c152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40dac251-f7d9-423e-a5fe-ff24da0802c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "614c3d26-d71e-40a6-a04d-a919e33da381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "acbdd276-159e-4d12-8d5d-e1063dc36e06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdc282bb-a304-4b64-bbdd-a995ae1ef32f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b9f7e2b-6727-4dbd-8412-6da72dd2f4b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c21f011-d68e-4b2f-8066-0ec329401ea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a878fc-7649-4b1f-b38e-89cc529d9ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c492f8c-eaa8-41a7-9d84-86173b984595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d932ca42-79ae-4d8e-bdcf-5af088b200a7",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7c2c124-4110-47d5-aa2e-b2bbcf5f6122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "573fdfb6-3b25-48ed-ac07-91a47b12bf40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e887b632-cd9f-44ba-b4ef-b70003245082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "88b40d08-993f-474b-b724-5b4fc4392942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a770dc3e-39d5-4104-b301-a2ae61db0b08",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac2843f5-bd9f-4663-959b-95f33bf92416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42c99b2e-8d82-4c7b-ade8-3998d3dd3725"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9503c201-4227-443b-98f6-b512391f13b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "896639ab-8126-48f1-8731-eb0409b6ecc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b86dbdf2-2c49-46de-9704-0ae39629c37c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0607345c-32cf-43bb-a400-d98067bbe7fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6926a185-cf26-4847-873b-367e3a45d18f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0e74acd-9f7d-4d5e-983c-2aa63441aa87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "8539304e-69a4-4461-83bd-ca8569444db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c878eb3f-1e19-49c1-9b23-dfb3c17ba3eb",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ec36454-73da-44b9-84d1-4234524ed261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9ecdf30-33f4-49af-88b7-4d605c2e0c35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2c7c9cd-bc13-4431-942a-be8c8ad6e2b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f6a8843-b26e-41d4-9caa-04c5b6bea46e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4989a489-af9c-4085-8069-5ecf954b824b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8f6e529-bb00-49b5-9d63-9cb2f8586bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f17bcb0c-6907-4383-9cca-9c1f9c40d91a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a225e57-09af-4dbf-8820-cab75fc5edee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7866f7b-35b6-4c93-82ab-275ba46a43bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac7d994-a4ac-41b7-aaf0-c9e8d02c365a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ae3395e-adb1-47aa-9b3f-f700957fde52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "981c1050-0a8c-40b1-86f9-b7a470c3b1c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73ed0d9f-1609-473b-bef5-55ce2b676dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "74da5714-b5aa-4405-b76f-4c0fbe81468c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af803760-a757-4e9d-a670-603c7cfd762e",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f0fae31-f168-4ae0-b51a-05043effe12f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7c607e5-3f02-4b82-97ba-f87f1c1af5a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29f52da9-b122-4c6e-8d4d-2beb55f2b677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1eadab4f-9a09-42c4-9bcb-ff5399a4e7b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8f4402e-50df-4cbf-836a-12cf98d49535",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a75d954c-b33e-4a96-bffd-7bc3b92c212d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b54704b-4143-4b58-95a7-d0ede00928af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b2fad26-f404-48c4-a84c-9f3664e959e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "51b995a0-6350-47a2-b7d1-5d82fcb9a095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35d4c726-54a1-4716-9348-aace43cab906",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73824322-224a-46aa-a2ed-460cbfaef5df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e7cd959-f912-42b0-a0d6-6a42499a6f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80153d31-dda3-432b-99bb-ec0dad22d0dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "02510a77-f788-4aeb-b537-51d6a55cbdeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d023904-2683-479b-b053-8a7044806336",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eacfd6a7-adf2-4540-825a-b8ef9033a6b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe16e5b5-db30-44b0-812b-123ba5ed565f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a883bcdd-dc33-4e00-850b-fb84b90f2a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd34233e-f48a-4541-8fbd-3347eeeccc8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a69b3bf-d278-4efd-baf3-27d12ead21ca",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dfa607c-33e6-4db9-b8bf-b49d6d78130d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cc47f17-664c-498b-a465-594fcb0ac1b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b55eff1-2e37-49fb-83ac-e62153c25d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dcc54ae2-9fed-42b1-b676-f733719b991d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f578c648-13ed-400f-988a-24a70acaf3ed",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b94feb96-1ad0-4a43-bdc6-df3f47b57176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65c42640-0869-41c3-bce5-29298394b026"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3615925-86bd-4a0d-b848-f0945a09063d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b89337b-a524-4a2f-9282-9d86d85bbcd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce2a7e9e-3314-4d0d-afc9-4600219260cd",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c587fd1d-8141-475b-95f2-c659c21de36d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa0efd7a-a8c2-4b8f-a93c-2213304615f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "388f990c-c61e-4cf5-917e-23e3ddb9b64a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad31b57c-d9c3-49ec-bb7e-371326fa44fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9efbf58e-c487-4235-bf92-e2abca7ed2da",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "830d3897-87a6-4368-9b00-8c0fb09429ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "943f60f9-a407-452f-bb22-1329731c93ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feb60e74-4faa-4310-bd25-de1bc63612ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed8a0755-1c21-4d21-92c5-4312e8a6e980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbf49c0d-50c9-49c5-b815-47ee8bf93fc9",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "277a2943-6945-44f6-a6e0-56d4aa7864fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7789534c-561f-4b44-9f6e-6c8d2d50c757"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "412bfaba-2ceb-4f21-85ce-9dc6c07ed1ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "238e036f-2486-4974-bb64-cff68fa6acd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d2ce62e-0c21-4ed1-816d-2aef14b5d6ad",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86f8e510-d622-47ec-b91b-eea10ec3d22a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "306b6c73-e65a-4fc0-9cec-dd6a4ead5faa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0f72650-3c51-4263-882d-a9bd6ec3feda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "22d22980-0593-4177-9d09-d8489c269deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b9f6990-a8df-4ad6-b486-bcc724167c31",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be83af5-5be8-4b53-a65a-461a99467e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a564a277-416e-4ca5-9808-382445744066"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c90cd088-9185-4b09-b5cf-26b649fc72d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "808f9e58-b1d3-48ba-acc1-6380153ed90a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "611a0b7a-094e-45b5-80aa-02fdc965298a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "294b2047-4f61-4b78-92d2-db8c7295c525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e41b2062-2025-44ba-811f-d2c57c56c048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4594add-dd6b-47a5-bbe1-61f784d5c689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ebdf68e7-327b-432f-a1a0-e53bd89729a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7313e21-7b4f-4811-bbdc-5a53d0166470",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e2fc276-d4d5-42a6-9eab-d3e814ee2b9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "451de73c-d0aa-4f30-a980-15cee4a3aa45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "019f7794-1cd8-400f-a494-671c7743cd2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "aae598bb-6d62-4505-9ec7-fe72564aec0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2800dad2-0e22-436a-9d2d-2a9c6d8372a8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dce39fd-6d0d-4c74-beda-f92ac62d9c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17692859-bd04-4fa5-b2f2-77b2e144b026"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6e0b3b2-acd3-4b15-b336-5da5570c706e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9af60e7f-d438-4fcf-b38b-b8782e963432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16802500-5f73-4769-9af5-978a71bec165",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77327e81-54de-4b7f-9a35-fc9927a4778d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79bb57ac-4eab-448a-9039-307b8b22457b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ee3ea8-7153-47ca-b643-8c20d18954ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c5f3b9a-c6bf-4728-b940-f6cdae878a12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ead65fa0-1ff9-4509-a5a0-39c24356db66",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a7a2a1-1355-4de0-960f-3e1f8801d685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d30ffc8-fa75-4e2a-8d8a-b3c5ddbf8ea8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c703b3a-c969-4689-b752-e26f4064a6cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1739aca-1fe2-4366-9a3e-9724b80d6c9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c22b9eb4-f445-4664-b80b-625f5e71ccf5",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1143dc4a-f00c-4e87-9bc2-d294a27226f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbee6d29-3334-444f-8d62-a2df6fa05447"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd8aac8d-ff57-4f66-834f-1c73c3228c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "de456de5-7d0b-4a3d-8551-ee5759226a47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc9547d-3fa4-425a-98e8-30de473e5cf0",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21126096-f2d2-47ed-9424-d0fdde080536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb8803fc-05fa-4f9b-b4ca-2e37fe7616f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc8f1213-c338-4d17-80d7-594946b2e54b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e518157a-bf5e-414e-825f-b6d3f434a2f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36327deb-61e6-4dd1-9979-2f0a1f901110",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b27962-1770-419b-aa22-ddcc8d6ff93c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cac58321-29a6-4bf7-8c14-48dcf36621bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf12e4c3-26d9-4e68-93a5-236a9d9883c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ef18764-3f87-48f9-b0b3-43356559d279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffb331e6-950f-44b6-9b1e-bcedcb8e8011",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed284a1-9a96-4c0e-acd8-c742e669f545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e861c014-68e0-4409-8b28-e0a7a7f620d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9807f503-b2cb-44ad-aa59-20370503efdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b80e3fd8-47e6-4f7a-b7db-77a9911e5be7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b6c468-8e8d-47f5-9ba3-82133b895bff",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f9e2ad4-3c5d-4423-bf9e-27b4f5ce4166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d6c1b4e-439a-4c45-b548-5fa3bbf17539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "754f6fc3-991c-4c9f-804a-752dc565e61b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc8d0d48-aa53-4384-9194-6abbdff908b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2633a579-3d1d-411e-ae6a-08aa254bfbd8",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a77d9423-e9d5-4618-b052-af1644144620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91ac3053-1c5f-4418-b53f-c0c6ed3cd00f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e28a6e-6d97-4fa8-ae4b-45ac4af25cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ada4099f-e608-4199-a8e1-787c1666ee0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f799ceae-1cd2-4c57-af0d-b9f6f4634a93",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "961fc325-62b9-44ad-8b55-496181a16bf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb428751-ab0a-4633-af14-5c25e48f976d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b1fe2eb-9498-45a1-a793-fd612d3e4464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e80a9227-943b-4f1a-bafb-0a994ab51da6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8218574d-47b5-4921-83ca-9d636a996278",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1204644-2ed1-4432-8a86-b79f73360da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a57c6055-235f-4d85-a759-592b4465022b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114f9341-9995-48a8-90d4-2d25e44fb7ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b3c8a9b-30e3-4b81-8c8e-5fc7b6c99bf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e5f720-058c-43ba-b1de-432176e3b45f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "672ce1a6-b629-4fc4-8a60-38aaf151cb37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ed39201-0185-470a-bb8d-d5de9ed4d345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf7bd4b9-527d-4530-bbeb-0351bb601e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0847abee-2ed1-4f55-9e93-518c8ed133f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe998be1-529c-4932-b245-237a696ca9f8",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "012e3f73-02b7-4d4f-a20c-c1a4ddab0a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72c1efbd-7324-49d0-8f9f-c14b660ef146"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6710054d-43aa-4c0c-ad05-d3c000706904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "495885d6-cdc0-47fd-8886-508e2e1ec580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a822e7ad-5250-494c-8878-ce4488a0f801",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66542666-9027-4a01-ad52-1a86b5153857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f1c6172-f865-4434-9e6f-0d4112c66f88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d36e882f-93d2-4e27-9ed5-f108ecadc263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "871d94ef-f131-4bfb-8334-6b3e1bc5b40b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58005843-6539-4bec-86cd-6ccb6cc20541",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcc069f9-92f6-472f-8025-5e7f0883c25c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf98080e-a588-4fd4-b49c-78a0d7be12fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79096f71-76f3-4e6e-9638-08e9382d77fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "63e0e629-8112-4cee-8408-f026668d5fa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89f2f698-531e-4d10-824c-919a47d71785",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "114f91dd-2b3b-479e-8e20-eb21e6ef4dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4833937f-62e5-4282-89ac-d83e4540093a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc8a6464-7726-4908-94e8-e3380948f2e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8557b431-6494-4ccc-ab14-a29dfed96480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e17dc3c1-8249-4daa-8d8f-09a77b734a4e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "094f3f25-e7eb-4628-9858-4ec4b6585af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d3756be-424c-46f7-845c-61fd755300ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c16b2245-d00c-457c-a760-ecbc16b5af57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bf55c3c-bfe8-430f-b6e1-b1eb8cde195e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8b174b9-977d-4d26-ab32-01882076dd1d",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a30cbc89-8dc4-4ba2-a785-2d0f81af5bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1f09faa-6b6d-4ebd-8bbe-bfb771ba3bf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1a734aa-dbda-47a6-ad58-47e898e36db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd448b0e-6018-4358-80ab-f97ea6cb62e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ff7aef-b940-4b7f-ba7f-8708bc113650",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "758dffa9-b676-4fd2-8df8-f1950a3afb9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d4c0140-2373-4493-bb7e-fbbd80b9f37e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "005ad4ba-4605-452a-9d9d-4a5af4f11728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "234e612c-58e7-4626-9c95-1af67405128f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff322aca-2acc-4516-8af1-a1f3fb88527f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a07ea3b-4d2f-4811-8b56-243aa74068d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b18ddde0-66ff-4eab-a6be-2edcc4e3a547"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e86134c-7269-4306-9e76-4693ceb4591a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c36e60fa-098b-4a88-984f-b0c058741a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb19b239-893b-40b8-a159-f3292d4828c5",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cac9159d-153e-486c-99fb-c30c0798fe02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e9af13e-4bff-4ea1-bcfe-8d6c7c869b60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ed4d03-a531-4999-a665-0352dff7f361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5addecdf-678e-405e-b3dd-f25b8b438577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5317cf83-311b-463f-9023-4cb8dac8ec8d",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa74bf89-a3b0-469b-af9a-dc842687674c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54b94e85-ee96-4571-9703-7403ce45260d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc1ff4f-7a01-4b86-a012-2c48cb385758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f993dabc-115d-4dde-8165-0869c9c82649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abca0105-0864-441b-8462-a943364d19bc",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d96a4b9-55be-4aeb-905b-5180fd203168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5152c10-c30e-45f9-b82c-27aa13f6eba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e86811e-8414-4c5a-acc7-2a5ddb8926d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4056c627-8ef4-41ae-8170-ebf2472aa84b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26ebf655-eba9-48b9-915c-79faf32466f6",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95ab9805-8207-435a-8d89-1da327294a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27cc5da3-eb48-47a4-b153-f10a9e3de25e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cf2d146-3839-425a-9500-9e0a39b14230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "24e2607d-721a-4307-8b85-1e180e887078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2db0e8c8-7406-4e07-8069-65a2bbb61819",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7af62e59-8a07-465b-adc6-d11700ee8e89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "167f9fca-5592-4a72-a46d-352e72700198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d9156b1-01ea-4aaa-ac8f-51ee28ebe752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d71a0490-9fc3-405c-bb93-412a5bba6438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06201b50-00a1-4a85-9594-e3f602d105f1",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a94cfdc-2d74-459d-b643-38b452238269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0101b85c-6d31-424e-8c79-eb86dc95dacc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "192f6343-c157-49dc-ad3e-dfbd166d8db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a39a94e-67ee-4c4d-9586-0b2b37ad6751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ed5634-60c5-41d6-83ad-77ec168f5184",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "435b6107-0072-4802-b10b-ab2aeaf5df1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44cbed21-5404-40fc-8879-0f2f8104d7f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3eb36c1-b513-4d9a-8d24-4d79d25a95bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "50895a4e-676e-46ee-82c4-788316364346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14f28421-5603-4618-9602-8acdd78dd1a0",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bc8c941-dc25-4a4e-9dc4-1628c3e898a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e051b7af-643b-4577-8e35-e59092be2556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1293d1b-acad-4392-9c35-3a243d9de673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a45a3b03-f116-4073-ae27-2addac4b4ae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3193b95-2a88-47ec-930e-d93b3be31a96",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f0e48c1-9d98-43b7-b6f8-88fb838504be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb446f48-3f86-4507-b950-fe056697154e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c060f2-b711-4152-a20f-eceba859d549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4766b96-451c-4c35-8254-8dc954e77584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "290f298b-a9ed-4b26-ba07-899a69f81dc6",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed99539-7267-4294-91c1-142b88e8fa53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97d242e1-0bed-4645-b43f-445e476f7242"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61f5b9a9-6597-4da9-995c-4a0449be56c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0488c141-d373-40b1-b0a9-bcf9ea59a80e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0d473c-dc06-4090-8266-96ffe12ab190",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caf22dc0-f65b-4d1a-a396-d9d830531cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8c34733-1f04-46c0-bc0b-665d6af64df0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cb1b637-94df-49d9-805a-d9b1768fe362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "933d0e7f-80ae-456e-a62a-f2f8c2465f92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc6043d-0797-4c1e-9c41-62d4e8bb2190",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76c8ebdd-3e93-4232-bf53-930e8a7191dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4a7914f3-3a5b-46ba-afbf-e660920ba26b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da72d242-53f5-4b7f-89b7-4e8de7fe281b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e832253-e87b-46d8-af4f-ae5a83784acd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e03ee88c-6e70-4e11-a39e-766af3bf6471",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1a7611b9-f515-47be-bc60-5f7f34b562c2",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d16091a-be47-4e34-909e-4fa6de6fe991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "997dfb01-6251-4e14-8aeb-aa1547c8ee28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b0f9e54-10e6-45df-935f-58133143e30f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5820adae-5146-4159-aaa9-b5ee94913813"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "72af9aab-fb8f-4a78-ba80-c549f26510f6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "effe8a2a-5f69-4556-b4ab-915fb57e9f82"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8119ee0-bd96-4c80-b80b-e6d39eafc1d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5fe077c0-9ab8-49bc-8bd3-acf0fb3ec4d8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5a1821f5-a76e-4788-8651-d2222723182e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "92577c9d-a1de-4604-83d9-6f26f3b86573"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "247a8ba3-ce3b-40d3-9a7f-ae2ffc52482c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "201a131d-655f-4f0a-9dd0-0e8caa386918"
                }
              }
            ]
          },
          {
            "id": "a5c42747-0ea3-4799-991b-0a0456de5275",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7f58d709-420b-4fc4-8303-a6fc36d6bb64",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "9523b0c1-45cb-47be-af94-edbaa8e4f741",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b974cdcb-1038-443b-80dc-46b7d229ea83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "211eecc6-ff9c-41bc-b449-4dd80c7529bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3adc50af-ac55-43f5-9006-ee7b0cbf693e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fea5ddae-413d-4039-b4be-0399f00881cf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "147c6607-6ff8-4cd0-9e6e-38ae1925eb0d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba70b14e-bcd9-4617-8ea5-f27c8478dc3a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "579d6120-cb76-4f91-a6e5-dfb3d8e13634"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f21984e0-8cbe-4291-b622-c90c104c9c23",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2c353600-f9db-4187-bc60-cbb1a78a134f"
                    }
                  }
                ]
              },
              {
                "id": "7f3921b0-909b-4dc0-86cc-6416c3d06ce2",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b59b4a5-2a58-4e9d-8015-414f2a196dc4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "766ebcaa-afed-4f3a-9dec-ed667bb43ef2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f66a922-ea46-4817-8e78-03d1366fb5d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "34c61071-51b9-48df-8f7d-fc46d004d5c8"
                    }
                  }
                ]
              },
              {
                "id": "4a72e025-95e2-4120-9cf1-8dfd493779e4",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dfdb8ab9-20bf-471c-b65d-3a0dd62c7f47",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "287564d4-090d-4f31-bb45-0ee402eabbc7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb338fd2-95a1-451d-8d2b-4589bb19658e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "02e4d5e8-7d8c-4618-9d9d-e4500534efb9"
                    }
                  }
                ]
              },
              {
                "id": "660e2674-5669-49df-b2cf-96dabf8878de",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c838773b-c150-4442-8ea1-c889e29f1e52",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "501bb5ab-7f19-4ed5-833e-2d75fa8053eb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8fa1d1cd-886f-4e58-a222-665de52a04a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "1016f761-83ab-47c0-9e73-00a9d60f1b2e"
                    }
                  }
                ]
              },
              {
                "id": "9fc275f7-3a23-48ec-a617-15b709d2a93c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "38c5e9b4-1c76-4285-b190-811ea0e434a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7e22553b-7699-4391-9543-ef27006aa49c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0aac915d-38cd-498b-8794-953f9f105ae1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "3ed9539b-1c81-4fcf-9191-2fdeb5abb61b"
                    }
                  }
                ]
              },
              {
                "id": "3eff4e42-6dfd-469e-a7ad-3ed913ffe436",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5ed31d6-d746-4c63-86d4-a8c12a0e08dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9b9aaf27-bc37-4c27-b3c4-9bc9234b9375"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "66680509-5040-4146-9a75-c51a02362e32",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4c63c982-6114-4609-bd28-a217e2dfb87c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1fcb5eaf-ce77-4833-a3d9-d77942399eeb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d6308bfe-c73e-4023-9dd0-7a78726602d9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "50c3f0dc-1a32-4ffa-9c60-bb994e8d521d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f0d9a539-2d75-4751-97d3-86889d9df2ed"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f069bccc-0e41-4f9c-91ca-49c82d093d05",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "c8733cef-f43a-481b-b4c6-571d40f61372"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "76b4cd77-ce83-4a87-a8a4-db38acf68f05",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c0cba69b-7485-4060-a876-f4dad4b19ece"
            }
          }
        ]
      },
      {
        "id": "4ce400ff-652a-4b0b-8daf-2c108ac3ef46",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "6acea061-6ac2-4a93-b01c-06c637a02c36",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b3d07ff8-80a1-45f1-ab12-ae89c6183908",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "86dc8412-4592-41b6-81ee-d17ba3938313",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c2ae0d8-4d33-4de8-bc12-7350aeb7c9ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f582bf6-56ea-4aba-8391-b916c2f5c675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63178343-556f-449c-abb0-0ca6b09c6953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7918cad0-1588-4bb2-87c6-44db78c03c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "165f2d05-172f-462d-aa61-a0d3e96f3284",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf7492dd-9300-4b29-92d5-174e13627ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ce825de-6dc3-4a91-8b05-6db36fc41000"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e32181cf-dab9-4844-9e72-0e1a53f908fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1b1116d-e116-4476-a545-6b0c28285a48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38609249-bb8d-46ae-a4a1-362959785a6d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2553f03d-341d-497b-8d35-6ff043270b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "971a3ea1-9ee1-4dba-bb85-8a354c000c5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d25e361-5bb2-4e2c-9762-e311a1fe8d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f7e35bf-8377-4842-b810-f9ec6f47ced9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac906291-c92d-474f-b172-3f74e00aaf42",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "241fa693-c926-4bd8-bbb2-685290e4a819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0691b69-ad32-4f5a-b4ad-8c3beef20990"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73f919a5-1d1c-42ad-aba4-02df38558f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5078758-10e0-4bf0-94a4-ba7243d6d35d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1087d178-b5a9-426d-9cb0-2a06418262dc",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1fd9ca1-aef3-403b-bf3d-e30136558fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4482c629-6253-49ec-9590-872522258630"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c537ac9-c073-4aa6-8dcd-d4188dd5c272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f0d6b12-d714-4331-b7d6-9c1732e381db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc59589-3525-4414-b775-9090f7e29a88",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "977683d7-ac6d-4bfc-bb18-4d6d0c54b79c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e49777b4-c003-40e4-97b1-e63c5a7d5ad0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f9504e-aab2-4251-bc57-4ca70b6f5e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3d295fd-1397-4c42-8190-5da069c5d27a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "687a94e4-c33c-4b94-95ba-0fc76f89943f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0dcaada-2988-46dc-adf4-de8a87fe0dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "473090ed-ea9c-4607-9914-8db5f192abea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b539b34-cc0a-4866-87c9-07a185912e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8afb5dee-e0e8-457e-8fec-28cc9fe9effa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6e9f25f-34b4-4cc7-8310-35f731e8d7ad",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd865245-a0ae-47da-b516-8a904260fbdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6025f0e6-4f56-46cb-b8da-8d966cc2a42a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac3869ca-5e45-4af7-9270-00976f8be316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "277a01b4-5937-448e-8584-d979892d6641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e169368a-b1ac-4862-b3e0-91c6425f5c23",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade2c295-18ca-4e80-8c7c-9f7ddd36dec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3401ce8-3a49-437a-953a-3afb6cc5161b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e432305c-9dd7-4226-9727-e678dfa0d65c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "536d50f0-40e9-4d40-903f-14f0f304b8ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c02af3a8-650d-426a-85d2-7ea54aa7cb1c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f58fe7-7bb6-4bc7-96e3-6f33c87c3f42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64087260-a007-4502-ad88-86b05ad1207e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef5900be-9dd2-4667-9800-9a83a89ff629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf90ab0d-b451-4977-85a3-98145445b48f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5ba0dee-3a1e-4083-9b16-4b2426711cc7",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a21110-0bd8-4d98-9bcf-235acec899bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54d4d4e7-0106-48f2-9163-0b326bcfb0fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41ece76d-dbe4-4bab-b3b5-30be0e235c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f49fa69a-6c88-47e9-96d3-96e7031a1629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e53900f-f2f8-499b-90dd-0a5c70c82e19",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c59ee53-7970-44b7-8384-e8e2af6601cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "342cba9c-e126-42b8-9fcf-fb12dd3bfdce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7253aa7a-2aa9-4526-9b42-b7494ca39b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ca413630-5285-4d71-bf24-4ef7f6cdb77e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e495838a-2149-4f89-8353-8352be583309",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fdd929c-7552-4c25-af55-102becbed957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bed3d226-18d1-434e-8b64-ef2bbcaceb00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab161bf-ab52-49c4-bb89-4f27c1fe88f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc8f754b-baf2-4e39-81fe-bb601d66fa00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa65cc59-1965-4cb4-a431-6874f6cb733e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3429afe-2643-480a-95c5-f88a3047330d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "690a2fac-65c0-4015-8f24-fc556010703e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b565d6-f2ac-49ab-81ac-acd6b1595627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ecff8ff-37f5-44d6-80d4-829cfb24e1e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f385754-58ab-4684-b1dd-752773689652",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "858e6ccf-907a-4fe4-884d-cff9e7dc36e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da994777-e73e-4d3b-99d1-542d73ec14f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "565c6c05-1498-4e7b-b9ac-612da1c348ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1d20319-5880-4211-b455-b475e9039221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ca8fe6-f545-436a-87fb-4dbd34dfa036",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "265ab065-c536-45e7-b0b3-3136e2681db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0942cd29-5486-40e5-af26-794bb5d66112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e19a7927-5159-47b3-8dce-fd3bbeeb7477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea4376b4-ccb7-49d5-9ebf-3ec64f78f403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "449af343-1a47-4844-9ed0-bbcbac567ef5",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbeff8a8-1d7a-4751-9447-2ecafeb0af64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4129218-8785-44f6-b80e-239e2f1b74e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8de71ed-125d-4700-be42-55eafc84c351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "45a21d36-5bff-4b32-b4e3-e7a332436e4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3ea38c0-a2df-43f6-b0ac-c72a70b4bfc7",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca11e31-fe94-458b-add1-3c5ce035985a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "275eb69e-b7a3-4c1e-89f7-035842cecfcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1339032f-6e61-40c3-b031-acf9d546fca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bed3fdad-7e14-426e-85b5-96d96c8eff7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c438b13-f453-4513-bca9-31ddce412bcc",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40750bb5-4f96-449e-ace7-f2065fb87040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b02c0abd-a474-40d5-a3de-c4e1f27d50cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23f573a1-be22-474c-aff6-3d5d5b82056a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1dd0c2f1-f331-4c92-af92-c8335cc78d20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9d95dd8-6d87-44f1-820a-0a44711dfa52",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "713af910-0214-48fc-9f11-375cf46d04a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e051daa-a04a-459d-92c9-4c8ecb823a3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fecd776-a643-4968-a531-240292149dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e142cf98-8b44-42a3-985e-5f10d00a4ac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45316a74-270e-4f06-bc93-a1c0b7bb2169",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f8e508f-c3fd-4c7c-883b-281087d92a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "973cadff-94f2-4163-8368-0d19edb4a30a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a95cd411-9f29-4f18-9120-5d38a0804cbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8437e416-af89-4195-bd33-5a865908d977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58dc82ac-8401-4dec-8da2-2d5585adcc79",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9941dc0e-e061-4cbf-a74d-823dbcddfdc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "907945b9-af32-4f71-a770-559c7017a419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14f3e2fc-7482-46ec-bc30-f8de9ccb46f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "762eec1c-1abe-4e78-8c06-1e483eeb9388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7775616-17fd-4d0a-aaea-d83206daf826",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9dee611-26d5-4cad-b6c6-27e2e28f6d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "827210e0-07e0-4695-b6e4-ce533d7b3afe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1012b87-67dc-4c70-9f72-598c3f50325b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17362939-902e-4a5b-bc46-e70cd7f6b193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd461b84-8489-4ab0-acdc-06800c7acc15",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "840f2120-e714-45e1-96d0-507863f63ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a727e16b-d5cf-4845-9f95-78dc2dde62d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97a079d5-8c87-40b5-b859-b5e043eac614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "068cb1ff-26fa-42d9-a3fa-33d5b33d1677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b0b9d8-d7e3-4ded-b856-a3731a2cdf6a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8057479e-846f-4ced-83fc-066ce5dbb605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04432307-e16f-443c-abe9-a905d773c82c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe850ad4-3461-496e-aae3-36c5f3019cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c3a5062-56d3-4d61-8f98-303d649b516d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "266687be-73d1-4dd1-944c-c7ced2961266",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa5a1389-d021-41f1-ae21-ba14d83e0d63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b6d85b6-a6cd-4b96-8572-976568a40d47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36a32b9d-6937-473e-aef9-40d8647c7471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4c8e209-783b-4434-b9fb-fedcdd5a68ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9967cf2-afd1-4795-bd40-33d10923660f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddcc2bca-f369-4736-9410-a58b72d8b417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80ddbb5e-3845-41eb-8550-ec6f2d10034b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f837a500-42c3-462a-ad92-98f04ddd9bb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c6ce4c0-1829-4226-b409-a2efec8ef33f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def91c51-1285-432e-8e99-df3898ac28d2",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "381a5c16-034c-4175-ae4f-dcab95f13ce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d54388de-3544-40f2-b40c-f36d4c23dbbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65684884-fa4c-4f27-86be-3766df99aabb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d6f63dc-b2cf-4ec7-9c31-02ebe2f64231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88869292-50c4-410b-84a1-3d8340a8a17f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd707fcf-9d9c-4827-a326-53c130657c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5b020b9-1330-4fdd-897f-b71069fc9067"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc2ed7f9-223d-42bb-bbde-011bcb65912c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d58ea95-2840-490e-bf11-ddb74f488f7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de0ebd13-9bfa-48e0-963f-2bee668e8d62",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1edbdb9-6406-4ce0-8a88-cf86163f23a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23e8e325-c08f-4dc6-8c8c-feb4af07c051"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd77fb49-a846-48d4-928d-2b360d01eaef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "781ec051-2d89-4f2a-bb63-da15f6d83ffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2480dd74-f411-4192-af09-0a8e5ab33c3c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f396204-4d28-4e8b-9be0-4a4dca38221f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c23bc6d0-6406-4698-8be4-877c4a23a3c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e40f13a0-3136-4c25-a13b-35f184edab49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb03fc72-3261-45a9-8e58-8c56cb07d49f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d514eaf1-c308-4113-96a5-1fe63d2170c7",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c0238a-4d32-4ad0-92da-3de6ed7a916e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87787469-31c6-42bb-9cc8-c60999a5da82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ba77969-7987-438a-b846-38c865e9af50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac7e8a4c-75e6-44cd-90f2-f83b13f6abb9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a0c3310d-0789-476e-978a-9a3fcda14c02",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0f8b7b2a-8dc5-4565-bfe0-f6d05dd6bb3f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c62292e-1f82-426d-9e17-b45fdc562062",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8ccf0e92-490f-40ad-8ad8-6d12c89bfd26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b181ffce-5c0f-497f-bc26-11713800543b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e58da539-066c-4dd0-a29f-8ddfd6eff690"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a10cffc-4667-42c7-b774-80731ce9ad3c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f2b5bb9d-de88-47a0-b321-f58e57cca806"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f711a00-6218-445a-a4ce-b0945e006a50",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a3a07152-4f92-47be-8022-8b3fc63cb757"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8fd83615-72d9-4b34-99d9-1c6a8d6de0b9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "66f5da07-0ca5-4c68-9906-69d476fdf2e2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a2554653-a292-473a-a4ed-600c1c4396fb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e23cfd60-9f3e-470e-933f-14922eb4f2c1"
            }
          }
        ]
      },
      {
        "id": "16a252e3-863a-4233-ae45-952e97eeca02",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "2a8715d3-a647-46be-a64b-7bcc73408bf3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6168707c-6445-4233-9ada-6c047a6b8820",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5d90db7d-77bf-429a-971d-026b3ff5adf3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e11fb42-eaa0-4c27-a8bc-d4e4bb5e8038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19e9530a-f6eb-4cba-ba87-bd6a5fc6e867"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ea1ebb-450e-44c1-a4e9-a9ed4ee0f45d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d195acf-9a2d-419a-ad3f-31b6287ab2f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1576e44f-b9cc-467a-9215-560939c17894",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20104914-bac3-40bd-aec3-813fb7db1e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8de495f0-07a2-465e-b9a2-f653e7ab01ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fbd603c-9f02-4216-baf5-0e12277a2a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "318151e2-d78b-4cfe-813c-4d3a0810fc25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94b97f10-5bb7-40cc-98ed-6744e54a0ac8",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f9ffddc-8852-42e5-99b6-e30f043aa79c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7511dd8-a59f-40ee-80f1-bcbe4c829648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a555f60-bebc-400b-ad1c-386867d43738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "133d002d-295b-4cc4-ba6e-f5504acf0228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c40e6b9-9146-46d1-b237-a9b37ba7fdc7",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f8309c-04e1-4977-bc53-12771bcf6bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22921965-b21e-4d70-bdfc-a71c7ecfa9c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a29ccae4-baf6-4ef6-8cc9-303984b2ba90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6a7fb77-c6c5-4262-af3c-61a4f4558d25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19ae244f-57a4-449f-9840-065b0c2e9cc8",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b26b51c3-ddc5-4780-8efe-65e7b4fc30be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac4072f1-317b-485f-afd8-490b552152c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d278f8ff-88c7-4bc9-8a78-3cc8adf13d3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fc4aa24-91cf-4b4d-9521-ee91c377eb19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a6d606-37f5-46bb-8b65-88f36d437e9a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cae803e-76b6-4f17-90b6-bf0d6043298f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1abdd666-705d-43cf-ad78-f48c5c215b95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f569b8-dd6e-49f7-92d7-25983734296c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d65974ed-b66b-4564-ac33-088be028521c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5be888fc-a547-43ce-985c-b35983a0fd9f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f20401-c075-481e-8fcb-dd4c29ec788c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae6cf2d4-6025-4f6d-818a-cc5320cc0dfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78b686a0-87f5-48fc-a3df-340cf1c5b750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "88327da5-882d-45bb-895d-cfea155a9ad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6b38278-aa59-4b8a-8b1a-5cc215fddd1b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc706b15-8ab0-4dab-abe2-40fd9b59e462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06d9a2fc-946c-4542-bf26-34d2a3fd268f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d2f2892-75be-4338-bdc9-b2a4329999e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b0295d7-0dd9-476b-907d-5e1f451f0f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1141cc7c-cdbd-416c-870d-b4208f3e38fc",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a628873e-f656-4c12-bb68-5019ead52086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a145c62-a699-47c1-b653-59bc8ede0415"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "302f4be5-a117-48cf-abc5-5435cbfbed01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ae3250b-87ea-4390-8c24-71af2c711e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b504e6da-7837-4fdc-baeb-a51364b90225",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4da440f-4f6d-49be-8fc7-b91b79073a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a9ec780-73b2-4bdb-aa08-39a28c93943a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ed86533-2c1e-4d14-9762-77d64cc190c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2181edce-8d80-4b6b-9356-8dc26cbcd612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "658f4702-7623-4d5f-8fbf-73c9402517df",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "704f7133-cd85-44d4-9976-64ecf1e5de77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d865658-4330-46d1-8754-6108da16a4a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873173cb-8e12-4af4-9457-9a9226b76c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a291acfd-ec24-401f-9459-fc03876735b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7e85893-18ff-45ba-94e1-dbad99c7c682",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b8f7ec-c9af-46ac-affd-4db5ec90829a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b0752eb-d1d4-456a-9450-a64035cd1909"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ef42608-527d-4284-9a01-ef42fed9b8a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "92976d35-e40d-4fd2-98e5-bb5cf8e42054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceebc3be-0819-4cf8-94d5-672c1bb32a9b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c9c15f-e558-40f2-810b-74283481e115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78c6e650-1fba-4a7b-94cd-5bc578aded99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de3792fc-41df-45a2-a514-4c405a371434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "62eea128-c2ac-4014-898f-2b788f2c5012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eae7f16d-d828-4d19-bdff-427d4f5c6362",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be800066-3b64-4b97-aca7-e085295b69b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "956ddbae-877d-4ffa-a264-0c2abf96246b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d6d117a-91e7-4ddd-8a39-288344a459c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a3668d8-fb01-44db-b494-63d365c63fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bc067c6-981e-489d-9d30-fcec68275d76",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1d9665-2119-4c4c-9c21-94288f2c2044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e96854e-600e-4b03-9f92-c141190b59e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "807e2186-1430-45c4-b8a2-5fa9964c7586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2514d8cd-5814-47e4-8173-d4ec9034f892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89b1fec5-cf35-4f51-9986-6a97b4485078",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92594f2d-5375-483a-ba84-0730d01250bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df92a184-5e34-40b2-b03c-b75a9cca1dee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96e36ef8-bcbf-421b-82aa-a9b22c0c87aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "2250f8bc-9e51-43c6-a271-c7120cf76e45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e105da57-2629-4f6e-ad35-6315a370f942",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47270a41-f655-42cb-b92c-9bc22f2d4390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9c2acba-ef02-472f-b701-279259e08ce4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84106a8f-9637-4cc4-85ad-a0cb5de1a99d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "00ce6f33-f926-4697-a80b-a80118963835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd0e68bc-5e65-43ab-b235-6ad8a9fc74cc",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36db170f-6610-4b8c-ae43-5f1d559f1f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2903e23a-f1b3-4d4f-8613-daef7022beb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34286f02-49a9-4c48-94a6-61a290c88d9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ac63f94-b191-4597-9277-795592d05d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3e3d84-93bc-4406-aff3-6b155cd0f974",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a70abcad-b865-4489-95a5-751e8a6ef7ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35b054e5-7e5d-4bbc-993b-5077b8acf1dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a79e2966-bdfd-43fc-8acd-19f42dff8b5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b176c397-1583-4c41-9562-4a59c5dd6ffd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9840940f-9080-4fc3-842c-104527448e93",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "803a2bd0-b4fe-4200-806e-907249943d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ab1d4ed-2998-4865-8179-76b849e786ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce80a7c-4487-47f0-a32f-d0cda2ad19e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7e1e531-29c6-4139-8547-4c4d8f59eab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19ff59d7-3cab-446f-99b2-97af404fe0e5",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d78f563-f12b-440c-b116-d3e99deb5aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a73ffe39-88e3-4a04-b764-b7d0f68a8fea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16e7943c-dd63-4b1d-8f5c-896df7ae105c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7260cc7a-065b-427d-8452-d3fd36e30145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1cdd87c-e6b9-483a-8b26-f6fd44c9d57e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "444f5a61-a19d-49b1-98eb-e5a695aa62d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cf8c07b-1e00-4be4-a80e-00fc7f9618be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe8630e8-1b57-4cff-8c3c-85fef7468e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdfe018f-e86c-41d4-944b-76fbe1b7c8be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4795573-eb93-425c-8cfa-9eeced1412e4",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eaa4869-0e6e-4c04-83ad-c7b1a9848ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e0648cf-721a-414a-bb7e-80dc255f5c6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f61d36b2-76a3-490c-96f2-f3953b89ce21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c6ade73-c530-4734-a7e7-9a0a7fbba308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9423353d-3eec-4dde-9d9c-33f16f6636ab",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a0c492-7331-4a41-bb6d-b957f69b6ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "690434f0-7d74-4bbb-a105-5eace78d4893"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d5119f-e301-43e9-b9dc-2f29e82770cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26e77fe9-1a9a-499d-8d93-3580d90d96b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95ba8530-fee4-41fb-8997-1f385efef0d8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "514826b2-4993-4d5c-a4e9-5b957b2be9e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0a8c3fb-d620-47a6-8967-4f67e10d622b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12a11b89-179b-4448-9685-792f865550dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7144a6c5-4934-4d5e-b4de-3969bce5a64f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "595c6a1b-656d-4def-853b-c36ec919c357",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d94cd786-9e79-47a6-a283-fc4ea549af46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bb682ba-5433-4c6b-9f07-4d1be5b03dfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcc98165-c940-426b-9106-585369c04f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac06c4bb-01ae-4a52-8fd3-142a0e75befe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca8ef21a-5064-47c5-a032-b073bff0147f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4c4bf16-fec5-4d8e-8694-32c7ffbf10c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8a25b4d-bad3-41dc-be31-290da2d54182"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31969a63-3a4f-49e7-b64b-3cb23b44f890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f1370c1-5e74-41b8-a31d-2cb7c5a4c90b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a64813cf-521c-4ae4-ac9f-4d48ebef2da1",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5726014c-5620-42b2-919e-28a8175c5f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca81ae3e-a2b8-4c9e-b602-0fbbd4ab3acb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e84720a-bee6-4fa0-9c65-10b50ccd9f93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "20b581e2-cee9-4c9a-aac8-e07e5cc4dc93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83cde585-80c5-437d-bd6b-81f8ebddcaaa",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3a0098c-f4c8-45e1-8b05-2714645ec6d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9dec838-16c3-4fe5-a8a9-e93ea5b9cae9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16e63c2f-92c9-4b59-9417-fedaf2cfafb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "020c46a8-0499-44c8-a553-6baad90d99c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "765b9365-6f58-4de5-b7d6-32e708334aa3",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f30899e1-ac93-43cb-9a0e-16a5e1a91c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "476c22dc-0abb-4b43-8c1e-a6469f26ffa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2173358-69f5-4a18-8fd2-50c953b9de2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f2ea706-0d99-48e3-9b06-1f0c6e6320ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e5654e7-c163-4395-82d3-5877f691a5ad",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d094bef6-4849-48c4-ae0e-e3da49d22f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16132e52-8140-4f22-a2cc-dfb750398834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be936cc6-66f4-4e74-acc2-5f150dbf5de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "25562442-2805-488e-8d93-a8591ddabfd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c551b480-a1d0-4d36-9df0-be3156a4778c",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "280d7ba0-d6a4-46bc-abaa-7d5a48825dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17610c4d-c5f8-49d3-b72c-2119b46d84b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73945b1d-82cb-41f5-afd9-635cf631d551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a769753f-67ea-4a48-b744-b743605d946f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085eda20-41be-44cc-9acd-289afb44d577",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7544826a-edd5-4c94-a3b6-a0e37ac87be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7fa62d8-adc1-428a-8971-857d497d476d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbceca79-99a2-4398-9c14-1e3b9e1131d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c73191ad-8853-4e8b-8e80-eccb52bb5827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41b73b4f-dfab-400c-ae07-e4af1b0381fa",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11004a2c-0840-4c49-927d-d75988c8ff81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e52a347-d437-4140-a225-94b8b7c80820"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "326f4d10-a4cb-4102-a2fc-038622b433ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "045e5414-fa94-4594-ac02-f668a8131166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfffd5fb-9cfb-4a49-b41a-cafab79ba005",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85be5cc0-969f-4a63-bcfd-7cddf9417df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "615d25a4-1a09-4e0d-909b-d5088faece7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aef7900a-78cc-481a-895a-b15b161cf443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad834150-ae07-466b-b650-fcdc678bf95a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c919e37-c34f-4f51-980a-cc768bc05620",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca4fbfb6-599b-4b69-97e2-7affe81b2867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eb16922-1ba9-4653-a85c-63260504deaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6fc4b1c-32d5-4c03-9041-648455ac36fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b758ca0-a7b1-4646-add8-93029ed8fbea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4801be5f-b8e3-46b4-97aa-c9a24f29c33a",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7353120-10f5-4d96-8005-9674c9806f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef7dfd6f-aaef-4bd6-86f6-2e5480c516f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a54d5c76-b41a-4c80-ada6-04d9e06f3449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dafc119f-92a0-4ed5-86de-845d5f4e492d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b5fec51b-00b4-4eeb-95f4-5833759cf895",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "73f6b475-cafb-4a50-af55-023def094588",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85542d02-70e7-46d7-b1e3-1f022eb8d6f4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "24b4bb13-17db-46a2-ba20-9ee91975f585"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd4dd7b-fb1b-437a-a33d-2ff178405f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da7c5c50-0fbe-4ff0-9dd5-d2de97a75036"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb55a221-b44c-4de4-82a6-0f4c640eeb7d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b4f00f0e-fdb5-4df5-9c25-a22d274cc2b2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d635a765-830c-4ed2-af72-8cbefa3ed611",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c5b8cbc7-76ed-4d7c-8cd0-e5c4a044a090"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2a6f8c9c-e390-470e-816d-13ef6a104a9e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1dcb2db8-6dcf-4111-86af-9915c24e0c9c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "84a21512-0f83-48f0-9566-d332bc90b827",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e515ba82-9247-48d0-b8cf-1537916b45e8"
            }
          }
        ]
      },
      {
        "id": "75be2a3a-1158-4e59-b0ed-d0116928fe73",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "12d3590d-f4fa-4c7f-baca-2d9dff69589c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5c30ef31-0f2e-44c6-b4ca-d9903f5e2d53",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ee7fe46e-1efd-4ecb-9f74-ef321b21e68d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e3ea03c-0c47-4fc6-9612-4e6665109b4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13b67dfd-4b9b-4749-85cc-61fb5e54701d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c7311a3-e59b-41c8-bd16-43ed1c46a5d5",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd1a4fb8-217a-47e2-819f-f4cfc77db3e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce6c5e57-f14d-41ed-aa29-5affa01115e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b6e408-85a9-4b9f-9ffa-74f1090117c3",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd39b306-9123-41d6-9ac0-fe22d0621c9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "981b5452-4577-4068-a2b3-40bd53b3fa39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecae0d7f-6263-4ced-86bc-2fc3f9052531",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c08e9f-f9e9-433c-a03e-24b6341b6544",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb01461d-f4c5-4961-b6d8-6d9c4293a5fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47406261-9576-4764-9c5c-c142c922fd4a",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47dd6fcb-5344-4bd7-8e6a-93c3f35b08f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "327ef6d6-3a6b-4a1e-9175-e2f76f015655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a8a2ad2-3255-41a3-ba57-b54618603eea",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6975e18a-1655-4530-ad0b-56987ebfa0e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad6be1c5-31e4-48fc-881f-0609827b511e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed1acd93-9e42-41b6-be70-0936b23e17ce",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "055e24b1-086c-40a0-a771-5aca82d02c00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68bdda67-c464-4901-a1f7-3df692887d6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b70085-492c-42ed-a362-1e2469e6c9d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d02e07b9-128c-4b9a-bac3-a148cf7bc457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c65b273-43b9-437d-877d-50b3f9a11bbd",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d54fe04c-5b5f-45f8-bd29-e1d989239f68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa3b0bf8-a390-406d-9065-be919f42294b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca92d0c4-4182-42c4-addb-07dd7cea9276",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eff59ba3-2329-42d8-afa8-d7df1d25c9ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "965c00ca-6468-48c8-8a35-37a0545fd061",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "824147be-e536-4f06-b6df-4d4b7b3db1e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce7ee49e-e9d9-484d-a0a7-9e13b30ba637"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ffe3f6-dbfb-452f-846d-fce39a23b216",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03880d9d-0e9d-4db5-9ff0-a75f7525a3ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "270066b5-80c1-426d-8568-cc8e4ccd5873",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1afab8b-4df8-4491-ae34-594f5284221b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1fe7fef-f4b0-4771-a62a-bea3ad592d5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d49c369-c8fb-47a1-9a85-75e9581be294",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d49c41df-a737-4412-b2ee-1d5adcf7f701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a4dd748-cc7e-4887-b1bd-181394c53a29",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3761a8bb-8b8c-4560-8d27-21026bc10dc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc1baeb6-4527-496b-b121-9726918fd780"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c5a7471-b7ea-4c69-a866-73f617aeacb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "218e268c-9645-46b6-a0a0-1a17ce2da117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3833ac2e-2b49-4fe1-802c-70a0f5a0d0cc",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10d71838-9207-476d-a46a-3a1d99a8f7e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5769e508-9dc0-4c86-a57f-15a265d9605f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f4a26a-1c57-427a-86e3-e7776b4869fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6855b88d-3d21-44e7-a689-c84f00bcc1a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e586daf7-af8a-4c8a-a5df-5d651a34ba02",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e9b9007-ed13-4bdc-b2ae-44666dab4d37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "628a39e0-8085-44e6-9f8d-388ca6c147f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ee9bff5-1e87-4f1b-98f3-78285781ec75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c325f57-8d3b-4165-a869-ce999884dba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c84eb212-931e-4aba-ae48-a544721c37c5",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9858578f-b2a2-4823-ac63-cb6e9834aa7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb3f66e2-5565-4f10-ba1d-5c1bd58e9569"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fba724a-4b68-44f6-b948-1d1e13d02475",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e47fd356-8f94-49c1-b677-8f839aeb0592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "550724a8-3449-4ba1-8b78-d4b5583d1188",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f669f17-3835-439b-9ad0-b50f365d6c75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df8ff02c-d20f-4195-a7ec-373e8dd3251b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "372f8247-1bb8-496f-bb9f-5423683e7b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5936daa-a75b-488f-a42a-067d2a50e2c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90482917-46a9-4976-a1b8-3da8629bd20f",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc8c417-e8f7-4d80-b042-a26af4d28d4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35c198a8-1ee3-4c7a-910d-398510653a43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "950aba61-d274-4258-aeac-48f8eae55b73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88d563bb-bf00-4f8c-b850-118b49327e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe2a4d3c-a6bc-44d4-bd39-4d4a6b150590",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34d09791-e3a0-45ae-aad3-80fd12a94105",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "246aa56d-6b13-4e2a-af35-0b467d447ff3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4ff69ff-529c-4266-83d4-a273c04b0b47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a62b7d2-41c4-4337-8b90-48a518fee68d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1261c4cb-a579-423c-a27c-f135f5db2095",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30b4cbbe-5095-46eb-b3de-81727830ba9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b67a5b7-fa92-48f8-8899-f96b02fcf595"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b8ddf3-27fd-4110-b720-85d496c3672b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "416bcdda-8109-4418-8817-2b867e9cbe76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d893f5b2-e696-44f2-b93d-6b330ced993b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c0820d-3796-49d9-9302-ac909359a0f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "661c8554-17e9-47d6-883d-640f680717a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89dc08be-d1b9-4352-b14d-989d6565688e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a815eac9-cc3d-4682-8815-628b73d1beb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ba1fa6c-49ff-430f-9029-56735f348316",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71eec21f-76de-45c9-9fb3-986250c8793a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d8dc505-3e33-41cf-8fd7-4e63afce3273"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd3bb24a-e175-4f07-a0ae-0d849706a546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b54c2e2a-01d2-4adf-a8b5-6e7a431e987e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31d1237c-b1fc-4b43-b1cd-f616f7863c78",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e3b2c07-eb0a-4b43-9b81-d1ffae4bd08c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6b05909-e3db-4023-97b2-fec56cb0044c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bbff314-49e4-4a4c-8530-936d8257a531",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b14b56a2-51f4-45f4-835d-2a012715ef6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5b2a5f9-67c8-466c-8f71-87f8075fa2ac",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "382262e0-f0fd-4d7a-ae46-5f573ebff811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1aec082-7431-4bdc-a3b6-ffe54b9f7ab6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f7cd8e-f7c3-4779-9601-69ba2f2db4f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90549a57-6faa-4919-b887-9b1252f99941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9143038-38af-4c05-accd-b3b4899ed55f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9daebe01-9a29-40e2-a768-6bc70c22226b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49d33737-d1af-4d32-aeef-37848859b1b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ecb264c-1ba3-45fa-928c-75f52ea8af5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a312b398-c78f-4aef-b5ca-5fc5c6ad3244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9493b8cd-ba4b-4963-9061-b3ac6bb4f5cb",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "908469cb-ac3d-4c7f-ba22-27e6a7e8e56c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0231732-1c24-44a4-9650-321169225087"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7742798b-2d1f-45ad-83fd-874d57b9ead6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cd84f7c-24f5-4401-a0d4-211a2d83df6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13859705-bc7c-47cb-b24c-a8114a407439",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c8d47c-78de-49f8-b1e6-90dbda665e8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "307e11d3-578b-42ba-813d-57be45bb48b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b622f9e-0626-4322-b1eb-3915621fc0a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c40e009-a420-4375-a939-442aaca5c1d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36cc3060-4a8d-4a7d-a32d-1553cc42f26e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ea35c7-eaf5-40af-a8d4-24ed37475094",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecf4cd92-8056-40c9-9f37-9afedef03fe4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e287116-6703-44b3-8ffd-ccdbc064fc48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eedd1b4-55aa-4e9c-9fc2-01c6cadc4bee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaf1aa6c-b570-4a86-be65-4b028a6462b8",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e96bf12-d9bd-4ea1-999f-507c483b4f37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1054532c-7d85-464c-9e33-8aa1a0b52caf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "094d5e8a-4bca-4f77-ac4d-b25ea2bc7e44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b921193-36e8-495e-8a94-d29a5ae4e494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c541364-c062-4101-aea4-241d47ba80a5",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5538fc90-4923-4be6-8207-b162221f44e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7d3657b-09a6-43ac-adf9-cb80eb727888"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7b4ad7e-315e-48e5-93ae-ab47b3d19b51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75e4d5c7-1695-4d55-8857-b8cb04faf3ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cce87077-0571-46cc-9828-f15c311fa06b",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b091737-9b65-4542-aff7-138535f9ad2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6be29fb-7981-484f-b250-eee706a605f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d36bca6-bbee-4b6d-bf1a-a89acb7b5557",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04691800-c329-4ca7-8353-9164f4fb243b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "964b999f-d25f-4fb2-9e01-12487d67ab11",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "449418b7-89e6-48de-8886-1979eee63a22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "434f2366-a47a-4399-923e-881780d96d94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d8f23f-eb9c-4f27-9976-edcc7036e25d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f58026fd-7a4b-44dc-be39-aa800084b7bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75caa2b5-b7ce-4cbc-9960-0a182b641ffa",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c77780-6c19-4d48-9543-14729a2dbbd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "888d0225-6a45-4b1b-94bb-4d5ace8d2cc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8465120f-6f89-41fe-9eaf-988a6fbb990a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc1dad67-2213-42d9-b7e0-d1fe67d631d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a5a93b3-0281-4550-8e1a-ef906077ff5c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475f4e21-af29-4ed0-bf5e-27b95e233b56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6556a29-8b99-4a0b-a203-00b5756e07f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "612c9d22-2890-4539-9014-cb24cd021b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faf7432f-743b-4b12-af8b-c845e051911d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec308d2e-0f30-4d1b-9e57-eeecae1df717",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "840735de-637f-46ae-b9ee-303d088673f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a3052c2-c0e7-4dff-a5d4-a6865c02931f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c71fb0b-4b73-4a6e-aa48-224aaf5873f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c0baf82-ca91-4caa-965f-9b7400233e89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71f4e46b-bf5e-40da-917f-d3176d322788",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a38f4a50-897a-4709-8d9f-f9c509df62b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e70f109-303d-4722-95fb-b7a96cb853ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e36f48a4-e543-4f64-801c-3b62406bd318",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eccd2a8-a4a7-4af0-a4b5-8cc29199586f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ab3ceeb-5c66-43d3-91a6-25d7c2d068d2",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "548d43fc-df5e-4f37-98b8-c58f12010aba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09d113e2-9359-49b8-a1c7-a00f8560cf91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44649c46-c881-4f9f-9c5d-4efedea50049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea4807d8-5bdc-4f50-ba6b-e84eb40ff1bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa5ca6f-0849-477d-a5a7-e3803f667e58",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ced4569e-35bb-4ded-9225-594ad0840249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed1eda1c-9446-44f0-85df-b0b44dfb0d02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed887842-5ad4-42fa-8395-f85eb2205658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ad5bb9a-38cd-47d0-80fb-2dc40372fda5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfaed8f4-fb89-4e82-a3dd-1d179a3c612b",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd4fc4b7-1403-4fb6-88e7-15ee5d715924",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bda2bfb-2889-4247-a586-f5b37bbe1584"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abad3e06-1c2a-40b9-a9c3-fab1832b8b21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b15a840e-6e6f-49eb-ac95-ad474f69ed69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b8e4db-c73a-48c9-a1ab-e7f9c159eac8",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d9ffe8c-e8ac-4228-af3c-772fca6c67b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e283e28-4d8f-4844-b001-f5fff41c6a30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d6bf59e-77f0-4dc2-928e-0562a258e8e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce8fc205-a12c-4661-ace0-9a0ef57e9185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e2a7b70-64a5-4605-ba3d-1a7bd809bd64",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6b0b763-d315-4c31-afed-1bf033b00a57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58cc4780-7283-476b-a8be-18ad502fafa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e4cf7c0-b94a-46fb-b2bf-617481098f01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5849f4d9-a043-4778-9ff0-94fc529aa8cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "343e205f-05ad-4c7d-abf5-d9483d645ac5",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efff2711-6912-4de1-bbd7-7e7cd0785aa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d1433e9-911d-49bf-8dd7-5e5a872914fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b04232-3564-4f43-bb1b-d06e6f8624a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86bb6245-e288-45c2-bb60-bd5618f74bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baf77a7f-45fa-4527-be1f-1742ad41feb0",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce75e224-63ef-4661-9b1b-0b749702c2d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5d1ae71-fb1e-4871-8bc9-a16ee21d3b36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd61a3c-7f90-4150-801a-7c07da5cde85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ada1c9b-5c8a-4c68-b1d9-6daedca8307a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e8ad472-3812-4a84-ba1f-b018451beea1",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4cc4f1b-fbda-46d5-9be4-d5749b86d2f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b219ad5a-c80b-41da-891c-5c0135304868"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f1fddc5-39dd-49b0-809b-5ccda6f55cae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2757dd29-3ee5-4fbd-b6c5-fcc17dce422d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43e9ae2c-10f2-4cc1-b3a8-4ab91468a871",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d43d39-8d1b-4f02-826b-40994d66e653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a198dc17-81a5-4272-824d-178647abd34e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e83253ce-cbf2-4f37-897f-34ae6268e2c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b552e4f-995e-4f1a-828a-d8662aad9777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "049fccb0-09e2-4a5b-9a28-d1e629819bf7",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02c0ba34-7d00-4204-ae64-d6d9c1709ad2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "522e6275-3287-4e0b-b756-18b85bd46926"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e5d8f8-6373-4c52-bb71-41eab1db7c82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c0c49dd-69aa-4163-a243-4502e9d9cb9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d423b8-c268-4fad-85d0-77b8832b3831",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40a7a168-1792-45fb-8e4f-c6aff314c184",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b90654f-7341-408c-b235-dc1921e6d56a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7ad9cec-bc60-4e46-942b-95415b84b47d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3936f7c-a79f-4cbb-83a5-1e7377dfe955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b28dc5f3-38d2-4165-ab4e-1af8fc26fe41",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e10dc3-0cc4-44a8-933f-ce08164d4c0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8dbf1f0-7904-4d43-9e08-8c3655b0ba72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08a791b5-8621-44a8-af46-b5eadd35cda4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "809a485c-5dba-46bf-8097-4975ddf24fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a778eef6-d650-4575-b5f8-3b70b790dde4",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "006159fa-3999-4e31-ac1e-6f7c06c9afd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c168441-9780-44b4-9c75-e77352fb5f3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b14b0471-15ab-4cf0-9be2-d5315bf86239",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75ce7dbf-6cc5-4a1f-a2d6-d95d36962ce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "712dbb81-8d30-42a9-9c28-8e8eafbf8414",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb1b54f-e931-4665-9d26-aacea6ab8841",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70487213-9701-482a-8791-5bf6615e2bc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7676052-833f-44e5-aabf-9982652d331d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "252440b9-de0f-431c-98a1-bff31afb2b8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44c25e41-9098-48ec-900f-c55cd2ae0d28",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b85b4e9-a15a-47e7-bd20-f79e6fd069e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d379e705-e66d-4ea5-b036-ad28c023485f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8654d25-d434-4fbc-90dd-2ccde4d39cfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc3e6032-ea71-46ca-96ed-6d1cb2a1e7ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "950ce7f3-ea81-4559-86fc-3955e150ed8e",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c0b7337-0eb4-4650-b7f5-1b3a8f4f11e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8269ea0c-442c-42aa-9d6d-b2876543cc95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcfc7463-430e-4b21-af7e-2a174e388b64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc6c0106-985d-4231-ac21-4e972b231835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eafcc4ef-4576-48bc-b7be-eb31f8e044a2",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d2800d-2be3-49c0-b187-f46f67453786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cedc5247-8664-4ed9-8414-29c273c1b0f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a96e151-67de-482a-ac66-60f6d71d215a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dd3d064-bd31-4623-a896-258db7585ab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb243b06-e95c-48e3-8502-02866cdee1df",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d46b6e72-059a-4335-b33b-5cd9d5697eff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10d0b7fd-14c0-479b-bb6f-b79007c91b3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba1232a4-088d-47fe-a895-66928f153710",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44353db2-9a02-472b-9570-ae0cd5dff0f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba6cf59-21f0-4e4a-a2a4-62ad3a9c5e40",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96542eb7-d06d-452e-b506-ed6ea9b0d54e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d80aa219-8297-47a7-9fea-d9f5411cde58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "820c1e61-839c-4d8f-8432-f275ec3ae3fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "465eedaf-c7fa-4e38-afdc-2ebc9b53b10a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "726b5733-993b-415f-bf80-ffa51fd15025",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3442c91-76b3-4d7e-b7b3-2c0843a7a366",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e6f6e36-dd90-4a2c-8291-6468b32c7e3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c4ad19b-4505-4567-a631-761d099789af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06a774df-aa65-41dd-9e0b-dbaae8bf717b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d3a451c-4e26-4b4a-b0bf-21c927ef3190",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40b69632-f5a5-40df-9e09-1e005b955440",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "107efcb6-d6af-4e67-bf6d-726d89c3fc5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f30a8b-78b6-4fbd-83f6-2f01a64dc40b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8563c865-1429-45b0-a58f-fd39219bde50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "805c3680-8d90-484c-b336-aefec5199509",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba1cb9d4-c983-4437-8cca-4cd933e8bb93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9193dfd7-3fdd-42af-a77e-ab80fb23c5e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "149afc49-d76a-40b4-9bec-f80ebc04741a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a113d2a2-c62c-421d-bb89-5f2072ce356e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1ce57e8-1f03-438b-95df-31ae15a43534",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67733ce2-fbb9-46b6-accf-d74e2f33cd55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e5e5ddf-587e-4c7a-8159-fdf0eb3b13e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "904b55fb-3dba-4ee8-bc71-60248a256ef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a70a491-136a-40f2-b13f-7f3c72d7d2df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dcc375a-1e65-4009-9238-4e79c5ca9779",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f58dbc7-3afb-47b8-87be-fcb9dc17a9fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d6bfeec-2625-4a95-bd72-1b839507560c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8940a510-54ce-4a7f-85f5-3a4aefa5a88f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "517f952b-43e0-4b20-a1ce-96e772426a1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74b1ca87-42e6-489e-8911-d2aa1c837dc1",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e84aecae-e366-448e-9197-d697f489691a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "015dd695-5443-4d57-9f4b-0b5510b7abec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cbcc5fd-c7ba-49e2-9cab-3c2c1d32a381",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02819ff2-235a-43a2-973a-8c2217ef7119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a708bbfa-5139-4258-90ff-f4b68bd8f410",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9116ffb-9312-417b-953a-2f5e4f288802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "222f4ea8-1250-4234-8a74-de8654b753ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7407fc4e-5127-4fb4-bd06-6b70fcaf6ae3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72233d18-f1dd-48cb-8ba4-d488040f59db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69dd2152-5e14-4987-82c4-a1a1b76200b5",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35057a78-5972-444a-a65b-a8b2608a490f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f4e8f63-586a-4418-a88c-163b432b8b54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8625e25c-ee91-4b32-83d0-795eaf52f8cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33e00c74-65f1-481a-8da0-67561c3a60e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7193774f-5624-4c6e-bd10-b16db6e3ef38",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "161fc673-b5bf-48ff-b20e-03319736c3fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bc060d6-2fca-47ec-ad1c-0979e4095841"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10a960ca-dafc-4d84-b519-0d9b3ea8e2d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cbee423-93d6-4429-b7cd-d44eb2c66e38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a676854d-57a3-4207-b618-6b6d58a0397c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bedd3dd-f32b-4885-9913-22e4c2f2874c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9b39002-cf45-4a6c-ba8f-f1779c325b11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e660a82-fe67-4488-b101-83f2dc72478a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7e4e75a-685e-4bdb-83bd-090c214c283d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f665d73-bfe3-4a4d-bc9f-cf7a5ba4e78a",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dd6e614-c573-4c97-880a-cf50921f7ee0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3fc233f-a17e-4d9d-a656-fd6ec5af9384"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5f3c3be-db04-435a-ab81-538b976f78f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8906e328-511a-4ada-9051-ce72764bdaae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2d56b9d-bebd-49fb-874b-c873364aff40",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f234cc0d-ca4f-4fc4-be33-baa234c2f201",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "563e461e-7e36-419f-a27f-1a51e4ac250d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ee7fdc1-0cc8-47a2-bf97-c1a50b594157",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00f7e164-48f1-4a24-8506-2997b6a3b9df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edc8ce88-fda0-4da1-9568-b2734367a8aa",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af7c8da-9bff-4e3a-b7d7-abc3d5e61eef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09878dae-e4ea-4360-a796-aa3340e9237b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69090d82-aede-475e-8772-e411a6b5b673",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af14133b-c472-448c-9a85-6336124e800d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbfe98e3-7954-4421-93b0-9e92a5e381b3",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2277b6c-e5df-4d23-a65c-c2b2a8608fd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af5a12f4-c92b-45b7-9fd6-7bf099750769"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff06dc2-51f0-4fee-84f9-0fc66ead238d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4f48b20-3d72-4ad7-849d-4d55632c37ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26da427b-2f91-4794-9ae2-6c0236ca101d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc22ddc8-4fb5-4188-8b97-66a9e4a384f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57995e05-e413-4b9d-bda2-389aa0f611a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2799adf4-3532-4a7e-b8e1-74ca53dd7311",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c45f9ebb-cec5-4004-8d33-4e9a86bae0f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb154710-8b89-475e-baaa-b5a1ebaa8ccf",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9868bb6f-9252-465e-bca1-bc488a991208",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb798727-6bb0-4509-97b6-f9c3ffc1c6e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "927189d6-7679-438d-80d8-7aefe5f93ada",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71452a42-27ea-4dd7-b60a-770740e2693c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "692aeec9-0835-4aa4-9741-8ae42a849227",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f435e5c-a221-497a-9496-84e593ad42b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbe208ca-1616-4c62-8528-45080f8052c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c54f6a2-d41c-4ed0-9259-a5959311f340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25fe43b4-951a-44ef-9084-6641369e17f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ca6082f-1d70-491e-8566-9403c4a50274",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e127832-ffb9-4f54-8528-88f768ce0db4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "141d2470-b116-448f-8907-4e32cb70a49b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7480dc93-c085-4901-ba26-b3ca425f09f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2451ee3-7aac-4f30-80e9-5198f1e58706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1fb5f9b-562b-4613-8dcc-8bd3d08c4721",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c80bdba5-4f3a-4980-9ed2-d953b569f8c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9c97b58-12ae-491e-ad37-fa31dc31e4f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b07cefc-041b-489c-9f81-3641734640fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72ff27c0-2c1f-4134-980f-06f9afdd0196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f7500c-17f0-4bb5-bd4f-0c57f505090f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eee57db-7dfd-4306-8356-6ede85926730",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b703fc06-e7d7-4eac-849f-60a5fc9ed3a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc76373e-c01a-4781-b5a1-a175d5896570",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1575004-15c0-4c6d-baed-d7d09d09a351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21d112e3-7254-49b4-8a00-ac7e9e326758",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f52019-727d-465c-b00f-3a8fc818814a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64257f5b-3654-49b3-84c9-177f827c3ca2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1265fdf6-9eef-4460-be89-51cd60990d75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb7a3242-2b6b-49a0-a998-6fc0f7c63c2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9495bac3-5ef2-4532-a573-f9769373ff1d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39102486-f597-47cc-9314-b9dabc17ad91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cd9d5a5-c2f4-4873-bfc4-04c152d4b02f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc5c722a-ac20-4dc1-bded-0b9bb13a344b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ebf9656-31d0-403d-9b48-912beaff24ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c8f0bbc-4c9e-475f-b64f-ffe3f6f86ef0",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b19fd60a-d6b8-431f-8daf-32c05fb0a7c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11a8a8d6-76f0-47b9-958a-8c3070af9f24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63df4af1-1b1a-4994-a541-03664658c997",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0331fb3b-fe59-4599-a154-e80f48299cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f233ee1-5429-4560-b9ef-08cc4035f18f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7da0181b-4d64-4dd8-a5af-a86688c8133f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63e21c95-3e06-42e8-b9af-b997b3dee7bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23788b73-e776-4cb3-8d82-5a08cff88e8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "628396ba-d329-4e06-853f-c8de81ffaa11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b87752fe-a20d-43a7-993d-27d0f74a64b7",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b49ef986-c286-45c7-ad57-a1591151ae9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e51effcc-fcc4-48f2-8720-2b5b79044d12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ac802d1-38dc-4173-a3df-ae02e35c6e80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4775ff01-2981-4198-815e-9fe1012b9684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a263e0d5-fd09-48d6-b889-932969cdd6e7",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b15952c4-a697-4b20-add2-bacee51684db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "714e4247-7b8d-4801-9624-0f758d95a1bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df3f7a56-552d-4ed9-9b66-f3c27193623c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bdf1ec9-47c4-4b48-ad56-2e2d492c488a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2b78578-c203-4415-9331-a5146324dc6c",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1941c377-a2fc-417e-821f-cbcf631f4f78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3136c099-2018-4479-aa60-c83dc3eac935"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9c6751a-aead-4917-baae-4b61ff6f875a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd05d587-51c2-4e77-9472-975d15c85dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bec28039-d6f2-472e-ba7d-ea9e5f3ffba2",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9083e0b-3679-4d05-b928-4f73eb7ce4ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "850892ec-7b1f-497d-9560-3cadbd7bf71d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c2e7ce6-61cc-43e5-a158-d699e13f485b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5919b5e8-38f1-4706-bfdc-09076fdbc3df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb3d94f0-bd1d-46f9-b3b0-9335e23744d1",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e46496b2-136c-422c-b09d-40220fb02ef3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9be62a85-16b7-4812-9a0d-f98a805558d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2c43e93-0ac7-4993-acb4-f70072eb1900",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e835bcc5-103b-4686-b76a-dd8bd7a02981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f88a916c-0baf-41de-b12c-0a9f05799216",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c29dbc0-19f4-4661-ba1c-37cd4dd751e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e35bf2d-0481-4066-a5cd-a106416a069f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a5c2c58-5c0e-4647-8dff-ce904e409d39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b57ec7f0-9724-4644-91f3-8562eb5f6def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b6bc2d-ca27-4d39-8544-9dac525dafc5",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fcf2ec1-9bb9-4a80-a98a-9e5262f24f55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53777788-022e-4a71-b0f8-d3c355d584a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "367ed32f-3edc-4f42-84eb-9bed6955d04e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "646105cf-c5fe-406a-ba9b-046ec08f6acc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e02349e-590e-4534-9d45-d4f6b76f2397",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74fd4e7-b381-4ea7-9182-db0255cac135",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3131375-c804-4c57-aa8e-e47608de947e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acf4e360-e039-4594-8d2c-fe9bb6c2f4de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3544cb7-0e5d-4401-b301-e6d1c7ad67d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a481c745-49da-4653-a6f6-f36912a902db",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a312109a-9975-41d7-a535-44b33219e1c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7049d05-0d06-4fba-8a44-ac2ed957f04e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae240c3c-7681-4ade-a5bf-0cd4b842b755",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9599296a-3606-45ac-b682-e41501e5ea68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba874cd3-968f-421a-b02a-c38cb512e960",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44955c8a-efd2-4774-b221-30046060b9b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d979f8d8-f06b-460f-b700-c0f856247629"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83e082a3-afdb-4a49-8074-cac4b4a725e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e65d8791-b84d-411e-a035-f3881aadbec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7660e867-553f-4ef9-bcfc-07017f91b574",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "471f82fa-06e4-4810-8e1c-d5966e67dd7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c64eaa2-31fe-43af-a212-94ab1d4dfca9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b57b6a23-0a51-4509-857b-977aaa3b6ad6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e54372e8-55ad-43d1-a253-1f6534cea2f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "553bee47-99fb-4824-9e9d-ac1c71747a73",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb62072-bf7e-484f-a183-50c74951e949",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e15a8721-cec4-4947-8ad1-bf0e31970928"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f959998-c2b8-4152-8f8e-832e3cf90596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a69dddec-a9b0-4295-a23f-77e35d1f9bc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eba8d3f6-174a-4ae0-9493-c799c1a56db2",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60ccd373-8f85-473f-b57f-89ca22afc83c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2f90eeb-be50-4a5f-9715-6dc0a523eafd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e551f872-39a6-4b13-a2cf-437182e3797e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "051dfc21-481e-47e6-9562-b8bacf3aba9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d01d91d-b09d-4c35-badd-ff52ef5a3ab2",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8bfb443-f0d0-4835-9280-634102771a19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1155da07-82a0-47f6-ae2a-53c56b2846c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f55d287-276f-46ca-8a5a-51b89f7cb61b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12f31104-a84d-4b8d-8d2d-dcf2fb22ac66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d914ba2-a06c-4854-8003-48004efc4607",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc43c98-1f32-461f-902d-62f07b22edb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e8449d9-b71a-49fb-9e0c-876a522ac79c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7348566e-e6c2-4f38-ad4f-ffcc53b2b9f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eaf941c-0c4c-4f51-a42a-ac7000c58073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b61769a1-b572-4e67-8bd5-de07debe664c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9f7172b-285b-497e-ba6e-6235a42c128a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9594e9c4-c5a3-4d0c-b309-21214133ef2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e4338e-8469-46a4-83ca-08ddcf11d555",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "debc9585-349b-4749-9f8e-a761ae5e73db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "887a2fbd-5bd0-4f0a-b98d-d754573b4bae",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afba1db4-dbd4-4ce3-922e-a7fcfeb68d92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84f79b7d-69fe-478e-bb55-af8e5710b7cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5645b317-ee4f-4e0a-9468-35f909230ed5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d2624e7-6d38-4b22-bbe4-d965a688717d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d403c7-a0f6-473a-8e37-5040cb0cacf6",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab17aa8-ad03-4d02-8785-20561483054a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "040f7a2c-cb95-44e5-a970-1cf5cd43faf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fbdea34-ffe1-4253-b557-bed28925d089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba869264-5d6b-4640-8956-53ae0b3cd268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d6c0235-7765-4abd-aad8-5da6c3deb6d4",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38d63a8d-993b-4c1c-a3dc-ff2dab72b2c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65904650-0e84-408b-9ba4-8def7a1bd0cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a52af621-aa7a-4008-8478-26f513f8f7f7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "980ce337-8f7d-4149-aad8-15ca263eea70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be2582db-fc38-4b77-bde9-c779ae999508",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e26e55ff-b2e1-43ec-9362-c7af8dcb18e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1dae458-26d2-4527-9be8-030de33f5bc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d982efac-f166-486d-adb9-f1a08b20fef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "348be919-5396-423f-86a7-a95681f3cf71"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5cdfe40d-4d7d-4a74-b9b4-c33680f24007",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "384f9e79-a83f-4d7a-9daf-40ae55b305b0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "97d85a46-fc4f-49b4-a29b-80965b12ff2a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0bb04bf0-7852-40bf-90dd-4e99a53f24da"
                    }
                  }
                ]
              },
              {
                "id": "da069b96-7088-442a-a7a5-57bbe083b07b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "faa40452-9b9b-435d-b21b-3ab1bbd43f00",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad1a694-58d6-4ced-a115-8d72a09761d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0da9488b-83b8-4bc3-911d-0f4c995ab619"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "145c287d-e053-4540-b72f-df152905ff3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "78e1a140-8695-42ed-8e3e-36ed74eb82cc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f85d693a-db4f-4eed-b94d-fc5744b8441f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ffa241a8-3fe2-4109-9344-68a94065658f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c712bf52-80a8-4d99-bd9f-76f2b7f19a7b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a48e768c-3195-4be2-a92d-ddb2dc5d957b"
                    }
                  }
                ]
              },
              {
                "id": "0b54460d-92ca-4c07-a566-1b772582295f",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "a6f8e778-a334-459e-80fd-8478bff52707",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da5bdf7-0f65-47d9-bcde-0432b982576e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "850d1335-246d-4d29-954d-6bd81fe9298e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f07ab88-ffd5-4fa6-b8b3-b59f62125713",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "391b7fe0-655c-490d-af59-c9d35bcf1a11"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0faa4a8d-5156-451f-b088-8b326ddcfdcc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "edd89e5d-2e7b-4206-8161-f894da6044d4",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e0ab142f-f05f-4f56-bb45-d29fd4d837ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "15878929-4987-408f-bc7a-b8f45119a0bd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9755355f-c847-4653-970e-e3c1124e2e33",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e0c60e3-e7d5-48cd-b731-3b9ab035ad3a"
                    }
                  }
                ]
              },
              {
                "id": "2ef4c8b7-764c-4d6c-9721-a468a1e3a32f",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "475b2caf-5788-4ead-a625-b41b13c3803a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8794d35d-a67b-4834-9ca9-109d69678063"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e106268-72d0-4e4a-b487-2599a87939f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "72d35723-0771-4cec-9470-456fb6837c57"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d9a00a7b-fb13-4443-bfcc-21174c06ad5a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c5d56d26-560e-4df4-870b-56d94349b027"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b932f45f-e428-4a11-a8cc-e062e7bdc0ae",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8a00ff38-d1f9-40df-83d0-91b22d0943dc"
            }
          }
        ]
      },
      {
        "id": "0dcaac22-b6ab-4e32-8ea7-5a4d24f4ac2f",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f15bf3dc-6696-4bdb-b040-31a38511c157",
            "name": "Negative Testing",
            "item": [
              {
                "id": "95e218c4-d92d-43ce-94b2-28dae8e5e1c4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7dbaa146-9185-43d6-b500-d758d33f5698",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5da3c07b-352a-43c9-b35a-ddbd24da965c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7d5aa529-1902-4433-91f5-72b093ca67db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4c152c3-c3a3-4466-bc0f-3e0b379008e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e386f3d7-f90e-40bd-9bf5-b6e2cd2fb7d1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "169e37f9-1d90-487f-9153-703778bfe6b1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e6f58ae-8d6a-4dd8-9cf7-0b3a04ce1db2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b925c84-0dc6-4596-a6e8-d538749f6dae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1bae1427-f07b-4bae-b622-b3ff54717d37"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "81473e94-7cb6-4a93-b7ff-818153c161a0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "956ff64f-7ac0-4f80-9155-8af1e99fda37"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "88c4983a-f786-4293-be43-869ee6a14ea8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d580a31a-812e-4698-b82b-e549c556fd96"
            }
          }
        ]
      },
      {
        "id": "0525c22e-a0e1-4081-acea-5fe3923c35ed",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e28ee043-e2a0-4250-9148-f518dc0b3218",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f09d2f40-8d75-430f-bf3b-2f4eaccacbf0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "73906bba-b465-4f08-872f-413b0d1d75ba",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f795c5-ff13-4d59-8a22-ae1b03601fb4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a838622c-262d-40f2-8df8-b113544fbfdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a6bff88-3988-46b3-8cbb-caf618bee779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "36606db5-1707-47af-8376-406a7d878f63"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9f36783-a85c-415b-b012-32ae275aa2a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e90d1f2b-0184-4ed3-a601-d721dd69160a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "69460dc3-ee70-42cc-b5ab-8f022e755cef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d241810-c830-4e1a-95d2-7e163ed33ef3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "67af5f59-5a3e-4edf-b971-14a343a2aa5e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2209f29e-760f-42f2-ba08-64f12dcb467e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4ef77232-cc67-4b09-b2de-1559244c273f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "68977eed-794a-47fa-ac88-596a3880c573"
            }
          }
        ]
      },
      {
        "id": "a08fe6b4-9dc3-4488-8142-eee34082fecb",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d2ec168f-0580-4a44-8023-021d8ec04ca3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "67cbfad7-d77c-4d39-b914-51fc29a4a032",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7ddcd632-be13-4678-b4f3-02746c237e96",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb60cef6-5805-48c3-8a28-a683b93f8ec7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c10d326e-cef9-40c6-a0ae-2383cdac1ca3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58c893cd-b537-4258-b89f-1cea3f643275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48459f18-4964-4141-95c1-cf0e5d7ceb5f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f074b7b9-3ae0-4900-b628-a73f6d34b03d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b24f86ed-becc-4804-ab68-f489771763ad"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "933f2b3a-22f3-4496-8573-40972470e300",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ee539e4-4093-46a3-9916-84ed648ad540"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "33755e2a-da21-4186-b78a-256261686ad4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6d3d5dc9-d323-43d0-8539-262afbfe11c3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c43ae762-8005-4e99-946a-354bd9f7baa2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ba82a732-bb64-4504-bdd5-744490684ecb"
            }
          }
        ]
      },
      {
        "id": "1097f30c-1c23-4b13-bab2-b6e4aea419e1",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "04212a0e-fd08-4fc9-b32c-1c9dd7a88c42",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5b21c23c-d11e-455a-a427-db93b59e92bd",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "3aa6c7e9-b2fd-4516-a301-cc15c09c48b3",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d3cc8b92-70c6-46db-906b-b08945c591f1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cfdcf908-6586-49b0-b1c5-03657a8cf9b7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 65.80350877192978,
      "responseMin": 6,
      "responseMax": 667,
      "responseSd": 86.91704043231732,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1697762021257,
      "completed": 1697762052156
    },
    "executions": [
      {
        "id": "9da12d0b-9970-4a39-bec5-c108099a622f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f4a05798-74c0-4165-bde0-d062fa760f34",
          "httpRequestId": "e579d6bb-652d-487f-b4e4-2b0906564322"
        },
        "item": {
          "id": "9da12d0b-9970-4a39-bec5-c108099a622f",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "ffd4e336-631a-47cf-8422-25bc41c192ec",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 0
        }
      },
      {
        "id": "c9f3a497-bf5e-4e0c-8d05-ca599e04d1d1",
        "cursor": {
          "ref": "ac6a0c61-ffe7-45ff-a509-29816c716c6e",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a7553bcf-5d2a-48b1-bccf-74bb7d13ce22"
        },
        "item": {
          "id": "c9f3a497-bf5e-4e0c-8d05-ca599e04d1d1",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "b4b38dde-2878-4e4f-bb3e-ee9308eea12f",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "a5bc45aa-e792-4da2-9861-9d59abe6515d",
        "cursor": {
          "ref": "8cb7cb21-c0b2-4ff2-94e1-8e55523517c3",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8a74e570-6a50-4058-89e1-6bf67bccb13e"
        },
        "item": {
          "id": "a5bc45aa-e792-4da2-9861-9d59abe6515d",
          "name": "did_json"
        },
        "response": {
          "id": "851bc778-b6b8-412f-838d-d8cc7694e582",
          "status": "OK",
          "code": 200,
          "responseTime": 269,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13873361-4dfa-40c8-bb21-ac0ef8b18db8",
        "cursor": {
          "ref": "09b52069-20e8-41c6-8c51-7c5fd98d185c",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c6a97a9b-94d7-4715-bbb0-abe2ded08f4d"
        },
        "item": {
          "id": "13873361-4dfa-40c8-bb21-ac0ef8b18db8",
          "name": "did:invalid"
        },
        "response": {
          "id": "127ac04a-76d0-4942-b350-a38c1e50652b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13873361-4dfa-40c8-bb21-ac0ef8b18db8",
        "cursor": {
          "ref": "09b52069-20e8-41c6-8c51-7c5fd98d185c",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c6a97a9b-94d7-4715-bbb0-abe2ded08f4d"
        },
        "item": {
          "id": "13873361-4dfa-40c8-bb21-ac0ef8b18db8",
          "name": "did:invalid"
        },
        "response": {
          "id": "127ac04a-76d0-4942-b350-a38c1e50652b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29074e9c-908e-4d77-85ae-b86a0acc46cc",
        "cursor": {
          "ref": "b127733b-608e-4d73-b8fd-a0022c430b3a",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "da18f342-2d80-426d-9064-ff71dd612d65"
        },
        "item": {
          "id": "29074e9c-908e-4d77-85ae-b86a0acc46cc",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f530acce-a826-46f9-8576-31f5c9305702",
          "status": "Not Found",
          "code": 404,
          "responseTime": 102,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a08bf003-2f5c-4110-876a-175dbabd224c",
        "cursor": {
          "ref": "9388e90d-33ef-4984-b20a-8e55ad4db7b6",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0e59b988-aec4-43e1-a0cd-957871de6d44"
        },
        "item": {
          "id": "a08bf003-2f5c-4110-876a-175dbabd224c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e3e7cd59-945f-4463-a611-880e5f67f7bf",
          "status": "Not Found",
          "code": 404,
          "responseTime": 39,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f002cadd-ee47-4131-8245-313a5b764fb9",
        "cursor": {
          "ref": "d0d5ef3d-3eb4-4057-b0ae-0ea4b50f939f",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c65be0ba-fc51-49bd-b477-285f5d3d7c0f"
        },
        "item": {
          "id": "f002cadd-ee47-4131-8245-313a5b764fb9",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "95705cc2-5666-4791-b3f3-cf97dde82c3f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "184b988e-bb04-4bf9-b503-594cf08ab060",
        "cursor": {
          "ref": "ba7b5baf-52d6-469f-ae6a-9db8906799e1",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "dd0a08b5-6235-4a80-b95b-4aefae9e2bff"
        },
        "item": {
          "id": "184b988e-bb04-4bf9-b503-594cf08ab060",
          "name": "identifiers"
        },
        "response": {
          "id": "72990c2b-8abd-4ded-a6ca-25c3ebf673ee",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c3a22d1-7f57-4e52-89b9-ff29ca440eb4",
        "cursor": {
          "ref": "08459b71-ad33-4e68-b29b-19163d6d4707",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7f900ad2-5ddf-462b-95c3-b0a06890ca53"
        },
        "item": {
          "id": "7c3a22d1-7f57-4e52-89b9-ff29ca440eb4",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3366a915-1774-4d34-9f2d-73a07bf8b44d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "667156e5-fe2f-46d8-a095-a6c8d412d7a8",
        "cursor": {
          "ref": "20dc29a6-e2e5-4b31-ad29-f5763801e8e7",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c83e3d16-52fb-465c-94f1-68b39be8721e"
        },
        "item": {
          "id": "667156e5-fe2f-46d8-a095-a6c8d412d7a8",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "2082badb-9589-4123-bb07-bcebca2c900f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21ddafcd-2d7c-4782-b458-cbc21b153e7c",
        "cursor": {
          "ref": "c940431d-fd8c-4898-af1f-1da4017bf6dc",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "fd36e900-177b-4a43-b27d-0d721aa339ef"
        },
        "item": {
          "id": "21ddafcd-2d7c-4782-b458-cbc21b153e7c",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "89aa3a06-7ae5-4a1a-a198-34a697e7c5d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dbb7e14-30f2-4854-a25c-b10c46c1a99d",
        "cursor": {
          "ref": "bed9758e-2ff7-449e-8efc-bc754f78fa72",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "bf908c15-ef05-4845-a1b8-45bc435cbcb7"
        },
        "item": {
          "id": "9dbb7e14-30f2-4854-a25c-b10c46c1a99d",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "f54d0efd-f33e-44e0-adbe-32949c4729b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21df8f0b-ea29-417b-babf-20db0f295942",
        "cursor": {
          "ref": "ff53a05f-3862-436f-88c9-5512f6f9f16b",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "30d41245-727a-4892-9f7e-870dbfa84797"
        },
        "item": {
          "id": "21df8f0b-ea29-417b-babf-20db0f295942",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a711ccc0-92cb-4c87-bd91-164e49545232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7967ad1e-55e5-4049-a914-7f5fd3d6d36a",
        "cursor": {
          "ref": "eef9b23f-da16-4424-b2b9-33d8da2e4336",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8fd9eb5f-907d-4608-86e7-75d512d85de3"
        },
        "item": {
          "id": "7967ad1e-55e5-4049-a914-7f5fd3d6d36a",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c47a7c6e-6044-44d2-b035-898a4b7e90b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28faa2c3-4666-4ef9-ac12-f52bee80c86a",
        "cursor": {
          "ref": "bf1a26a9-9624-4cdf-b2dc-8c107e8e51d6",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "5e038386-3018-4f01-ad84-c94fd373497e"
        },
        "item": {
          "id": "28faa2c3-4666-4ef9-ac12-f52bee80c86a",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "23990852-b560-468b-a165-8cf628d6025d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e94685c-cf42-400c-94a7-672d9cd4ef84",
        "cursor": {
          "ref": "65e5fffc-b0a6-4039-b1bd-360b7bfd505f",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2f04df99-0e6a-4f4d-a306-270c6c821d8a"
        },
        "item": {
          "id": "2e94685c-cf42-400c-94a7-672d9cd4ef84",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e8244cdc-0cc2-4273-94be-05288a397942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0220aa3e-cf5e-4409-bef4-dd65ed7de601",
        "cursor": {
          "ref": "72f61c85-0d10-43b0-b8bf-78a0aa6e26c4",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "bd47ce66-cc18-4f62-8bb5-8cc1e86b8ac3"
        },
        "item": {
          "id": "0220aa3e-cf5e-4409-bef4-dd65ed7de601",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "31e9b11d-9050-4f11-8228-20c87fb98d1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b5a13e6-b03d-4824-bfa4-c2377a8b6fb8",
        "cursor": {
          "ref": "ca27648b-7c8f-4395-96cf-c3f7fbcc20a9",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "444ad282-c989-4e27-b940-7b8b3c5b6837"
        },
        "item": {
          "id": "5b5a13e6-b03d-4824-bfa4-c2377a8b6fb8",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d5939db4-093a-46b9-9d3c-e48db3ace633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90cfdadf-6d5c-4b96-a567-4efd68f1260a",
        "cursor": {
          "ref": "b562e460-3a6b-4798-ab50-e48cc709a361",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0a3dbbd9-31a2-4fe9-9794-117a7005efe2"
        },
        "item": {
          "id": "90cfdadf-6d5c-4b96-a567-4efd68f1260a",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "22ae2784-639b-42bd-b40a-057cb7daadff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8ac2742-6263-4250-9579-38d4821e8436",
        "cursor": {
          "ref": "20f10a9e-1afb-407e-a931-ccc43db47b97",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "689b3bd9-796c-4991-81ed-be9699281685"
        },
        "item": {
          "id": "c8ac2742-6263-4250-9579-38d4821e8436",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a370c179-6a65-482e-93c4-0af258166c1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32c3b3e3-200d-4db4-b8e9-d2dbe836615f",
        "cursor": {
          "ref": "d4693dfb-88f9-4d63-b7cb-22be44746939",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ccab38a9-16f2-4c4c-8ff2-e5c9861cdab9"
        },
        "item": {
          "id": "32c3b3e3-200d-4db4-b8e9-d2dbe836615f",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "2c3aec12-89ca-448f-936c-25678a678aee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd61a838-e8f1-4b41-991c-efac890199af",
        "cursor": {
          "ref": "3ba7117e-664a-4477-8417-f43b60a19bbf",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "af30530e-d9a1-4a31-8a47-ac4fa2c0f01f"
        },
        "item": {
          "id": "cd61a838-e8f1-4b41-991c-efac890199af",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "555e5e7e-6357-49de-90ba-391a7e542bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2416bce7-f7df-4864-ad75-34e17ac3b847",
        "cursor": {
          "ref": "156e3a5e-eb17-4eef-a403-af292cadbea9",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b8b219a7-99d4-408b-ad6c-e656ba4ce108"
        },
        "item": {
          "id": "2416bce7-f7df-4864-ad75-34e17ac3b847",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "0beba915-0566-42e5-b8e9-38ca8bef636c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c1c6a48-a622-4fc1-ab1c-c9907c41cc21",
        "cursor": {
          "ref": "28e9dbf7-ac9f-4240-8101-28196b6c08b3",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "35b1e8c5-f25c-43f8-bdc8-bb7794c1c6e7"
        },
        "item": {
          "id": "4c1c6a48-a622-4fc1-ab1c-c9907c41cc21",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "238aadfc-9e08-4f0e-ba80-36068c1ba465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9352fffc-e994-4405-9347-b43e09c0456f",
        "cursor": {
          "ref": "4cdc44c8-362a-46c7-bc2f-00f17778b4b3",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "95b03d75-83f1-4460-b68b-f020a1b4801e"
        },
        "item": {
          "id": "9352fffc-e994-4405-9347-b43e09c0456f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "6fdb91c2-11f9-42b3-bd75-31f9382d883d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f96910ca-89b5-40f1-98fb-5e9275d375cf",
        "cursor": {
          "ref": "61076c61-d24e-42dc-bc46-92091b6a70d8",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f1b1bf8f-aaea-4c3b-a799-1eeb037a36e4"
        },
        "item": {
          "id": "f96910ca-89b5-40f1-98fb-5e9275d375cf",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c6a7f757-07b1-4a5a-8716-9e50bfef1b8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c12d9c71-9903-49a9-96b7-8d79adf82a29",
        "cursor": {
          "ref": "322618a6-bc1f-4dbc-aa18-aeffda70b071",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f7303b32-7ada-4748-9fc6-6a650cfdcbef"
        },
        "item": {
          "id": "c12d9c71-9903-49a9-96b7-8d79adf82a29",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "8ff77c3f-7ecf-45ee-9929-67b295cd3b3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c0b9c1-3226-45db-87f9-2efda5108756",
        "cursor": {
          "ref": "a31587cf-72f9-4ddb-ae5f-47aa6f701536",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "bdc1dda1-3c85-4592-a3a5-e73b1c5489fb"
        },
        "item": {
          "id": "23c0b9c1-3226-45db-87f9-2efda5108756",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "055c191e-10a4-49d2-87f5-f40e854496f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "455bf006-dc7f-49d1-a6eb-586f3d103ec3",
        "cursor": {
          "ref": "2904c9d9-61bf-41c8-af8d-29d01f32a44c",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "5a49c54b-5cf9-407e-8ed8-439c5648db5b"
        },
        "item": {
          "id": "455bf006-dc7f-49d1-a6eb-586f3d103ec3",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "7ac09c82-f3c2-44e1-8d2a-a64d470918e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63d16097-1aa2-4259-85e2-0c9dd2412052",
        "cursor": {
          "ref": "39c6b858-fe5b-4513-8d65-9bc18095a04e",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "509fd15c-ef70-482e-95b8-599308a49c9f"
        },
        "item": {
          "id": "63d16097-1aa2-4259-85e2-0c9dd2412052",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c43616a0-7379-4049-983f-caae7c18b206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "621148f5-de57-4aec-8a23-5b157d3c5caf",
        "cursor": {
          "ref": "59b0a5fa-fc40-47d4-948d-84bff1b880b4",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "237ef9cd-7b85-4718-96bb-0f76639c85ea"
        },
        "item": {
          "id": "621148f5-de57-4aec-8a23-5b157d3c5caf",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "7e289f36-8214-4d69-b75d-e0df8de1c95e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82de08f4-6534-4a65-a7e7-9552d9e69da4",
        "cursor": {
          "ref": "1a37fc84-f34e-4121-a39b-f2b6b4c9b04c",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "bef506df-19c5-4238-bf96-bc75f8d7ffdf"
        },
        "item": {
          "id": "82de08f4-6534-4a65-a7e7-9552d9e69da4",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "29ebd872-8319-4b97-98d1-cb24c44c0aba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e46d917-6a8a-4dbe-8fad-701e5277aede",
        "cursor": {
          "ref": "6e86892a-cd5f-4c64-9db4-e28cfa09e19b",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6c7eeb72-6702-4a00-bcc3-42f9d7753241"
        },
        "item": {
          "id": "5e46d917-6a8a-4dbe-8fad-701e5277aede",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d4d736ca-02ff-4f78-9b54-9e6c6121931b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5f66bc6-d6bc-4c92-bd88-3c9004997a34",
        "cursor": {
          "ref": "5e31aa7c-91cc-4cb0-a367-52a2635b2032",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "3393989d-8c7f-4610-9e7a-91f499558553"
        },
        "item": {
          "id": "d5f66bc6-d6bc-4c92-bd88-3c9004997a34",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "3fea6a20-1652-4c23-9ac3-f9db42cd0fbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f819c391-4038-47d4-819b-d8be1f0419f6",
        "cursor": {
          "ref": "a62fa406-4546-459d-bbdb-554cd49f32cb",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "99fbee2f-c12a-41de-bc9e-1c30d3a666e4"
        },
        "item": {
          "id": "f819c391-4038-47d4-819b-d8be1f0419f6",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "ccd4c860-e280-4b61-b4a3-ec305eef58d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a11ddb78-f561-4f91-8f2f-7b264319bcaa",
        "cursor": {
          "ref": "69d4756c-d438-4465-8068-78f7d16c5e68",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "7d398257-32be-4aac-b2f1-139ec4a2e0fe"
        },
        "item": {
          "id": "a11ddb78-f561-4f91-8f2f-7b264319bcaa",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "afe6e1ae-244f-45f9-8fde-ab8855b9dd44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a83b0dc6-d0bd-412f-80aa-1636b3db234b",
        "cursor": {
          "ref": "f7c227f5-77cd-41a7-ab04-51b39130c45b",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "12f2a047-0858-46a2-803f-2a342c33ec25"
        },
        "item": {
          "id": "a83b0dc6-d0bd-412f-80aa-1636b3db234b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "525abe55-e77d-444c-86a2-e5135f5ea445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cd6bdda-aee5-41aa-9889-fccabc130bec",
        "cursor": {
          "ref": "89464d86-b86a-4c73-a8f6-e15c142bf7af",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b5b854f3-1edd-47c1-80cf-92ce4631d78d"
        },
        "item": {
          "id": "4cd6bdda-aee5-41aa-9889-fccabc130bec",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "8400898f-c2c9-46e9-b751-d801429bdd9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a84d5091-b21f-4b7b-8829-7c88aa8d6f3f",
        "cursor": {
          "ref": "b543b077-c682-4703-a498-ccd718b647ce",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "69290495-a467-492b-bfed-3831fed1cf90"
        },
        "item": {
          "id": "a84d5091-b21f-4b7b-8829-7c88aa8d6f3f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "3d63139b-de0d-413b-b130-8504c28f7557",
          "status": "Created",
          "code": 201,
          "responseTime": 633,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "8b708b78-b78d-45c1-9213-960eb3149471",
        "cursor": {
          "ref": "78a2470f-5a00-4d44-bef3-92323c791962",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "0bb94bf4-87bf-410a-8077-75377ae7c31a"
        },
        "item": {
          "id": "8b708b78-b78d-45c1-9213-960eb3149471",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "ed92720b-0892-4880-9f47-279d09378405",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "c65b002b-b974-4adf-80ae-feb442eaf9eb",
        "cursor": {
          "ref": "885c6742-b548-42be-8625-89ae9375af5f",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6bfcaac4-0d6a-4855-9dfa-bb07be795a7c"
        },
        "item": {
          "id": "c65b002b-b974-4adf-80ae-feb442eaf9eb",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "9b324219-5b7f-4854-866d-851f2fe25251",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "c137ef10-8f4a-457d-a03e-73343c1cdb8f",
        "cursor": {
          "ref": "ceb38181-cc46-4df2-901b-715201dbbe5c",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ca45a6e3-4014-4994-bdce-dca8980a3019"
        },
        "item": {
          "id": "c137ef10-8f4a-457d-a03e-73343c1cdb8f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "4c4f8ae4-0df4-4a58-bb01-227d4e94da71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cba9ebc-31b9-4380-b958-02ff54a75bca",
        "cursor": {
          "ref": "0db4b42e-5d0c-4226-b96b-d3ebd7b9789c",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ba8781b0-6510-41d8-9cd9-3b69677425cb"
        },
        "item": {
          "id": "1cba9ebc-31b9-4380-b958-02ff54a75bca",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1c6e97bd-d482-47fc-bdf9-6ba8001af442",
          "status": "Created",
          "code": 201,
          "responseTime": 422,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "2eb13767-2b43-4c02-9e1c-c59909be1bec",
        "cursor": {
          "ref": "13647576-611d-434b-b461-a6135cda9c15",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "8de276c1-e32f-4ee3-b626-66f2c025fcbf"
        },
        "item": {
          "id": "2eb13767-2b43-4c02-9e1c-c59909be1bec",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "78008e3c-f21a-4b48-9e89-d8ddc74f1f26",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "24322535-be1d-40cf-bf81-3c3388e79bac",
        "cursor": {
          "ref": "24443e62-3b26-404b-aa11-f15caa059bd1",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c81c956b-3870-4168-b9d1-fa65b35ec4a8"
        },
        "item": {
          "id": "24322535-be1d-40cf-bf81-3c3388e79bac",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "49d84f35-96d7-4b2f-8f30-2bfea2f9e274",
          "status": "Created",
          "code": 201,
          "responseTime": 667,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "7178a29f-fa6c-4b51-969c-7eab26d02ff2",
        "cursor": {
          "ref": "f6de9dad-377f-46aa-99fd-1e787cbb0483",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "df5f5638-7e68-4009-a817-68fd216854a7"
        },
        "item": {
          "id": "7178a29f-fa6c-4b51-969c-7eab26d02ff2",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "c131a2d3-ebb0-4400-aa01-669e90e9779e",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "8a3e70bd-13da-4bae-bce2-8045e602bd9c",
        "cursor": {
          "ref": "47d63273-fd99-42f1-bc34-de4fcad087ed",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "9aeb86d7-d68d-4092-afc5-ecddee34b4bb"
        },
        "item": {
          "id": "8a3e70bd-13da-4bae-bce2-8045e602bd9c",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "2d33f59a-49c2-4577-8069-88037f671000",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "4b33978e-0a97-4592-b820-5bd40b5c907c",
        "cursor": {
          "ref": "af93189a-3621-4792-a209-98f0e6f04b67",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "05794158-7ef7-4ade-b850-09ed171c7b61"
        },
        "item": {
          "id": "4b33978e-0a97-4592-b820-5bd40b5c907c",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "b04c6116-5918-4c4b-91be-9a983b271221",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "cdc282bb-a304-4b64-bbdd-a995ae1ef32f",
        "cursor": {
          "ref": "1735018d-3e74-42e2-adbc-3f16fe079952",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f262c81f-7f97-4764-a4ba-b6c653e48d38"
        },
        "item": {
          "id": "cdc282bb-a304-4b64-bbdd-a995ae1ef32f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a8e4a656-4304-4b0d-a9b4-671852afd2ff",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "d932ca42-79ae-4d8e-bdcf-5af088b200a7",
        "cursor": {
          "ref": "f229e4a7-6c48-4517-9a3c-f749eae9e62b",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "92094859-c6bb-434f-8bc6-4093be6dbe91"
        },
        "item": {
          "id": "d932ca42-79ae-4d8e-bdcf-5af088b200a7",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ef5078b4-b8b7-418d-bf1b-7e166e2b4b41",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "a770dc3e-39d5-4104-b301-a2ae61db0b08",
        "cursor": {
          "ref": "8185eea9-14e9-448e-a7b3-a8892ffd0714",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "7fdcb631-5a7d-449a-8589-80deae142f7b"
        },
        "item": {
          "id": "a770dc3e-39d5-4104-b301-a2ae61db0b08",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e628bcf9-e685-4040-9157-5c2ae78a0257",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "b86dbdf2-2c49-46de-9704-0ae39629c37c",
        "cursor": {
          "ref": "903f87bc-096f-4017-8369-f6450ac441e0",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "55865aae-aa37-4235-9ba6-d49d095eaff0"
        },
        "item": {
          "id": "b86dbdf2-2c49-46de-9704-0ae39629c37c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c089681a-8aaa-46a1-8edc-3724899ded4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c878eb3f-1e19-49c1-9b23-dfb3c17ba3eb",
        "cursor": {
          "ref": "6585a8e3-797c-49eb-9973-10c4fc2cf072",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "4d8f6a92-d85d-495b-b5ab-18f480d8c0a9"
        },
        "item": {
          "id": "c878eb3f-1e19-49c1-9b23-dfb3c17ba3eb",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "2437ce4b-284f-4239-a407-b7fc612515f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4989a489-af9c-4085-8069-5ecf954b824b",
        "cursor": {
          "ref": "88302657-c2d3-4585-97d1-df865804da6f",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "627fa283-65f5-4d24-9eb9-ed1a8f7beba2"
        },
        "item": {
          "id": "4989a489-af9c-4085-8069-5ecf954b824b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "531601ee-b820-42c2-8734-80a4b903fe3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eac7d994-a4ac-41b7-aaf0-c9e8d02c365a",
        "cursor": {
          "ref": "dba2c893-8266-4c9f-a3cd-c58c725f50bd",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "56f771f8-acdf-47cc-bf5e-1b483ee21417"
        },
        "item": {
          "id": "eac7d994-a4ac-41b7-aaf0-c9e8d02c365a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "b41fbcf1-fa77-4a70-a3fb-8f7c73304c7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af803760-a757-4e9d-a670-603c7cfd762e",
        "cursor": {
          "ref": "37f1992e-689d-47ce-a1bf-4a9fad0fc678",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5b7451c3-34c6-4406-9785-622e85606667"
        },
        "item": {
          "id": "af803760-a757-4e9d-a670-603c7cfd762e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5b17883a-6ff8-4e17-9bb9-54e5790a49e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8f4402e-50df-4cbf-836a-12cf98d49535",
        "cursor": {
          "ref": "ccd73c32-e4d6-4be0-9bcc-e6e6446dd6a8",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "e8d88a9c-15b5-4877-b92a-b6ad5ce7d039"
        },
        "item": {
          "id": "e8f4402e-50df-4cbf-836a-12cf98d49535",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "4d1acfe3-4639-44a4-aef4-775f36a44bb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35d4c726-54a1-4716-9348-aace43cab906",
        "cursor": {
          "ref": "d9d474b7-54f5-4de0-a6a8-4ac01b600ca9",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "07481c69-b372-4343-9fa1-fecf0230dbe9"
        },
        "item": {
          "id": "35d4c726-54a1-4716-9348-aace43cab906",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "3f895b1b-7c37-4d63-8954-a6c7fd9b53ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d023904-2683-479b-b053-8a7044806336",
        "cursor": {
          "ref": "463fdcff-65f3-41b0-81df-63c907f690f8",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "641c1a46-0d57-4426-9b3f-81102e4c2527"
        },
        "item": {
          "id": "2d023904-2683-479b-b053-8a7044806336",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "785a504b-61c6-4a32-bd9f-9fe0dd694084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a69b3bf-d278-4efd-baf3-27d12ead21ca",
        "cursor": {
          "ref": "cf92f05b-a668-477a-8a83-7df16285582b",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "60d2024a-b537-4b78-be6a-0454ba29d156"
        },
        "item": {
          "id": "9a69b3bf-d278-4efd-baf3-27d12ead21ca",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "6945f6b9-b335-4cf8-aa98-9ff5fbed99f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f578c648-13ed-400f-988a-24a70acaf3ed",
        "cursor": {
          "ref": "bf0287e2-0763-4deb-8c6b-bf1a146195e3",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "9db8ecc0-84ac-4011-aca7-ddc6777b356e"
        },
        "item": {
          "id": "f578c648-13ed-400f-988a-24a70acaf3ed",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "6acb4ba4-c744-49fd-9d44-34b355450bdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce2a7e9e-3314-4d0d-afc9-4600219260cd",
        "cursor": {
          "ref": "bd928339-d672-45e0-933c-12ef08d00d80",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "1b88f9c4-d89a-45de-a253-1727e70c792b"
        },
        "item": {
          "id": "ce2a7e9e-3314-4d0d-afc9-4600219260cd",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d9df41cb-5ae5-4431-92b1-1fee92121319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9efbf58e-c487-4235-bf92-e2abca7ed2da",
        "cursor": {
          "ref": "d6340076-108b-46b0-8601-8adb85b6f9a2",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "0db416d3-b769-42fd-86c4-ad6ed5e1e6d0"
        },
        "item": {
          "id": "9efbf58e-c487-4235-bf92-e2abca7ed2da",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f77693be-8548-485c-9ed2-8b8655adfe8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbf49c0d-50c9-49c5-b815-47ee8bf93fc9",
        "cursor": {
          "ref": "88553b56-9c22-42dd-b892-1a593441a525",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "30ac3d96-5eae-4c6f-b160-ce51a7f70cb4"
        },
        "item": {
          "id": "dbf49c0d-50c9-49c5-b815-47ee8bf93fc9",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "568a17a4-1e73-4861-ad87-d9cc34229b59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d2ce62e-0c21-4ed1-816d-2aef14b5d6ad",
        "cursor": {
          "ref": "cebaae49-8d17-4535-b583-b63a236eb67e",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "13566a74-e46a-47ce-b7b3-b9e67bd7cdc7"
        },
        "item": {
          "id": "9d2ce62e-0c21-4ed1-816d-2aef14b5d6ad",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "56b935e9-5a7b-4ce1-9341-faf1a4617629",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "7b9f6990-a8df-4ad6-b486-bcc724167c31",
        "cursor": {
          "ref": "2011f329-7f5a-4da7-8b14-8a0fcbb86953",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "e59ca484-7a39-4e4f-8779-67c616dc9349"
        },
        "item": {
          "id": "7b9f6990-a8df-4ad6-b486-bcc724167c31",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "4162e8c1-7ded-4bca-a3f7-a1bd00e632e9",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "611a0b7a-094e-45b5-80aa-02fdc965298a",
        "cursor": {
          "ref": "a9ef3b7c-5471-495e-95e9-028f1d628b6c",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "65dfa0e8-2a31-445f-b248-0d1a8319aaa0"
        },
        "item": {
          "id": "611a0b7a-094e-45b5-80aa-02fdc965298a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "f0eb4e95-0068-49fd-9d49-4f77d92bcff3",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "a7313e21-7b4f-4811-bbdc-5a53d0166470",
        "cursor": {
          "ref": "d18998a0-8c8b-4a0b-8aed-821c5229cb10",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a4520c13-86eb-460e-8e7f-6d8aabdbe262"
        },
        "item": {
          "id": "a7313e21-7b4f-4811-bbdc-5a53d0166470",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "fb37b327-e4f9-425f-8b32-eb4df91f71f4",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "2800dad2-0e22-436a-9d2d-2a9c6d8372a8",
        "cursor": {
          "ref": "50a803d4-f751-4a5f-86b9-46239aaee924",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d656dfee-ad22-4dc0-8259-d5792c5025ed"
        },
        "item": {
          "id": "2800dad2-0e22-436a-9d2d-2a9c6d8372a8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "ceaf9f21-51aa-42ee-a31a-cb4861f4f9c0",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "16802500-5f73-4769-9af5-978a71bec165",
        "cursor": {
          "ref": "185113a6-8743-4cd9-99e3-bca5ee52639b",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "8f8e486a-214e-496e-9fa0-f4132348f278"
        },
        "item": {
          "id": "16802500-5f73-4769-9af5-978a71bec165",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "8374dbcb-aeb5-4e18-aa39-434ba57dbdb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ead65fa0-1ff9-4509-a5a0-39c24356db66",
        "cursor": {
          "ref": "e43ea52f-d2ac-4302-8a55-055485f301ae",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "93119a5a-82b0-405b-b862-c730dab8d146"
        },
        "item": {
          "id": "ead65fa0-1ff9-4509-a5a0-39c24356db66",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "69f641d7-606b-4e2f-8e85-909921419efd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c22b9eb4-f445-4664-b80b-625f5e71ccf5",
        "cursor": {
          "ref": "6f572b90-26b5-42ba-bb19-664e97a6e1f0",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "23ae1a77-4e87-4eb1-927f-7f7c8427f6d7"
        },
        "item": {
          "id": "c22b9eb4-f445-4664-b80b-625f5e71ccf5",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "fdc358c3-e5e5-4dc9-aab6-c59bc1038ce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cc9547d-3fa4-425a-98e8-30de473e5cf0",
        "cursor": {
          "ref": "629d873e-032f-41d2-915f-0bb0e95d63a2",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "7b66ed77-90e0-42f5-8569-70d0b309f9a5"
        },
        "item": {
          "id": "1cc9547d-3fa4-425a-98e8-30de473e5cf0",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "7c293e41-a382-4db3-ac5d-147af19a6d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36327deb-61e6-4dd1-9979-2f0a1f901110",
        "cursor": {
          "ref": "8c0b7e83-c994-4b06-b324-9ded511b4c33",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "f744b4cb-7578-4836-9f44-b935cc545955"
        },
        "item": {
          "id": "36327deb-61e6-4dd1-9979-2f0a1f901110",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e35b3560-8982-4b17-8204-0d4859bf0750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffb331e6-950f-44b6-9b1e-bcedcb8e8011",
        "cursor": {
          "ref": "7fe83d99-ba94-4132-a5d2-e2e8d5a241fe",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "7fb32d36-b895-4c59-8c8d-d763a8897342"
        },
        "item": {
          "id": "ffb331e6-950f-44b6-9b1e-bcedcb8e8011",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "8000edf0-1039-481c-aeea-ac292da8ecf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b6c468-8e8d-47f5-9ba3-82133b895bff",
        "cursor": {
          "ref": "b6c634bd-69da-4509-bc76-1d7e0f38c72b",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "765d036c-d77d-4397-b26b-00ae43ec3ac6"
        },
        "item": {
          "id": "d9b6c468-8e8d-47f5-9ba3-82133b895bff",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "19043217-a93f-4b69-9d0d-ec7d2bdb9074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2633a579-3d1d-411e-ae6a-08aa254bfbd8",
        "cursor": {
          "ref": "dce70b7f-bdb2-48a4-8ad0-b83eec4c7aa4",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "259e488d-fbf6-4e63-9a44-82606cbeee67"
        },
        "item": {
          "id": "2633a579-3d1d-411e-ae6a-08aa254bfbd8",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "484c4bea-ee32-4600-90ab-c466e9e5b859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f799ceae-1cd2-4c57-af0d-b9f6f4634a93",
        "cursor": {
          "ref": "9093ce17-6427-4b01-8c0b-825b59c7269f",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "7bf39f9b-a5b9-407a-9d3f-77811f8f8f7d"
        },
        "item": {
          "id": "f799ceae-1cd2-4c57-af0d-b9f6f4634a93",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a6ceea81-d6a8-450e-bc4f-c1cf751c8d7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8218574d-47b5-4921-83ca-9d636a996278",
        "cursor": {
          "ref": "4dc1d8a4-c3e3-4860-88b2-a16b038f6ce2",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "901319e8-a04a-4ca8-8193-fefe83808d7a"
        },
        "item": {
          "id": "8218574d-47b5-4921-83ca-9d636a996278",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "7f8a0381-d8a3-4110-9e77-09d1e263abf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e5f720-058c-43ba-b1de-432176e3b45f",
        "cursor": {
          "ref": "b93c642e-0890-4be6-9807-0e85b1101687",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "98770434-95de-4e7d-a9d2-78af518a5a2f"
        },
        "item": {
          "id": "30e5f720-058c-43ba-b1de-432176e3b45f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "7d605b50-738d-4024-8d79-c5fb2124a853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe998be1-529c-4932-b245-237a696ca9f8",
        "cursor": {
          "ref": "9ad8ab05-ec42-4618-81b5-2f7c78c840b2",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "40e49adf-e405-4ae6-a81e-04f9fb29f7ee"
        },
        "item": {
          "id": "fe998be1-529c-4932-b245-237a696ca9f8",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "4233db2b-6394-44e8-8e5e-7fc164220736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a822e7ad-5250-494c-8878-ce4488a0f801",
        "cursor": {
          "ref": "5209fcdd-9ae1-4f8e-b970-2455e026d426",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "bb0a32d2-4df8-4520-b0f0-384990253319"
        },
        "item": {
          "id": "a822e7ad-5250-494c-8878-ce4488a0f801",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "f54c2ad1-8226-42a6-87df-108592b85cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58005843-6539-4bec-86cd-6ccb6cc20541",
        "cursor": {
          "ref": "79ae8065-96a2-499f-8e2a-52b4d5f43bca",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0ea30a05-210a-458c-a636-e50d7c2b3354"
        },
        "item": {
          "id": "58005843-6539-4bec-86cd-6ccb6cc20541",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "6b6defc9-1433-40bd-abb0-d201325c231b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89f2f698-531e-4d10-824c-919a47d71785",
        "cursor": {
          "ref": "f7edb6bf-001c-47d7-84ce-0daf2e3a0771",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d2224aa9-592d-417b-9559-6dc95699eb5d"
        },
        "item": {
          "id": "89f2f698-531e-4d10-824c-919a47d71785",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "c800d572-fb7c-4109-99a9-c2ae44137d3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e17dc3c1-8249-4daa-8d8f-09a77b734a4e",
        "cursor": {
          "ref": "bb3046b0-3cd9-43fd-bf2b-b7cb651b6a53",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c20f6e6a-d805-4f66-a8f9-382ba18d146d"
        },
        "item": {
          "id": "e17dc3c1-8249-4daa-8d8f-09a77b734a4e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "11a45795-a5f2-471e-b7e1-e46dcb1b2f50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8b174b9-977d-4d26-ab32-01882076dd1d",
        "cursor": {
          "ref": "0ea5f1aa-79c5-41cb-8bf1-6b641c16d9b9",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "97b9d799-c2ae-4068-a409-e0ace9f9fc69"
        },
        "item": {
          "id": "b8b174b9-977d-4d26-ab32-01882076dd1d",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "5b6343d7-e53e-4ccf-8b01-7b7499ce7bcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ff7aef-b940-4b7f-ba7f-8708bc113650",
        "cursor": {
          "ref": "4adfe1ac-f497-4c67-a34c-048bf542f55d",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "292b796f-0172-4f8e-ac81-1b1aab3f9dd8"
        },
        "item": {
          "id": "73ff7aef-b940-4b7f-ba7f-8708bc113650",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "eb9ae05c-1728-40b4-9f11-99990bd5b951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff322aca-2acc-4516-8af1-a1f3fb88527f",
        "cursor": {
          "ref": "c1222ffc-4aa5-4960-b553-994490f4565c",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "27e5a903-a604-4ba2-9918-2ebe9759fb25"
        },
        "item": {
          "id": "ff322aca-2acc-4516-8af1-a1f3fb88527f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "23b4bea1-9e23-4913-8d6f-9e121c19ba4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb19b239-893b-40b8-a159-f3292d4828c5",
        "cursor": {
          "ref": "9ea79284-7c51-4ea0-9d25-5025996a2d8a",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "52057ecb-8c3a-4b33-9cb0-1598c97c3937"
        },
        "item": {
          "id": "cb19b239-893b-40b8-a159-f3292d4828c5",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "3cb5bd7c-4a75-43ab-8b6c-6981cffeee92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5317cf83-311b-463f-9023-4cb8dac8ec8d",
        "cursor": {
          "ref": "64e5d779-92d8-4bdc-a475-4766b51ee65d",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "0f065687-3bbc-4120-ac4a-1f4e1a3212e4"
        },
        "item": {
          "id": "5317cf83-311b-463f-9023-4cb8dac8ec8d",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "129eae2b-688d-4c8e-aca0-0cb66a4c695b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abca0105-0864-441b-8462-a943364d19bc",
        "cursor": {
          "ref": "4626fb60-348c-4454-8df6-60e74d6dcfa9",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a2e2afbb-cc3d-42c5-9515-0ae2850e6740"
        },
        "item": {
          "id": "abca0105-0864-441b-8462-a943364d19bc",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "d4f37d42-09f9-4639-9823-416588c80e5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26ebf655-eba9-48b9-915c-79faf32466f6",
        "cursor": {
          "ref": "29b64e6e-ce79-4d8c-aa2c-c598f2c08c52",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "79afe96e-7e00-47dd-ab87-ac1c751fac09"
        },
        "item": {
          "id": "26ebf655-eba9-48b9-915c-79faf32466f6",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "cf4b2fcd-b8ed-4632-b9aa-576a1f74cb69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2db0e8c8-7406-4e07-8069-65a2bbb61819",
        "cursor": {
          "ref": "bc9217fb-1a14-457c-ac66-758e248a130d",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1d8e2788-88dc-4f29-abf7-901d8dbbaccc"
        },
        "item": {
          "id": "2db0e8c8-7406-4e07-8069-65a2bbb61819",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "4270714b-98ab-4d1d-a31d-fb52715c386c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06201b50-00a1-4a85-9594-e3f602d105f1",
        "cursor": {
          "ref": "777b6efb-b943-4eac-8d58-aef64a03d0a8",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f64f3f67-51fc-42d3-b693-a67926ed8894"
        },
        "item": {
          "id": "06201b50-00a1-4a85-9594-e3f602d105f1",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "7fe4d8c1-29e5-40b7-bfae-4aa524254688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ed5634-60c5-41d6-83ad-77ec168f5184",
        "cursor": {
          "ref": "885b4d23-1001-4bd9-b657-8582b47c2f74",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d326ec0e-4d34-434c-992f-452446e6a634"
        },
        "item": {
          "id": "e7ed5634-60c5-41d6-83ad-77ec168f5184",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b0e5c835-a023-4621-80e0-477055d2f18a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14f28421-5603-4618-9602-8acdd78dd1a0",
        "cursor": {
          "ref": "d5a18e75-4f54-431f-8508-41739125f869",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "4cf5112f-55b6-4cd2-88b5-10d7febb3409"
        },
        "item": {
          "id": "14f28421-5603-4618-9602-8acdd78dd1a0",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "73360af3-45af-4789-910a-dc92ec855168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3193b95-2a88-47ec-930e-d93b3be31a96",
        "cursor": {
          "ref": "a977e953-5c10-49cc-8070-bd0bc315e77d",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "5234225f-8f78-424d-8309-068783cbc632"
        },
        "item": {
          "id": "e3193b95-2a88-47ec-930e-d93b3be31a96",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "4fa53e02-68d7-4f1a-89b1-f8cf3f806d26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "290f298b-a9ed-4b26-ba07-899a69f81dc6",
        "cursor": {
          "ref": "afa6f42d-dccd-449b-8106-80fa8ba7e11d",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "0a3a5880-e077-4e8d-b3d5-893999d448aa"
        },
        "item": {
          "id": "290f298b-a9ed-4b26-ba07-899a69f81dc6",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e19dfb26-4719-4989-a469-c09ec1cd1f1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d0d473c-dc06-4090-8266-96ffe12ab190",
        "cursor": {
          "ref": "848fd169-4474-4656-97e3-3cfbbd128dad",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "70a7f655-82f9-4245-81f5-01ceb73a24ea"
        },
        "item": {
          "id": "3d0d473c-dc06-4090-8266-96ffe12ab190",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d0bb9122-d76b-4612-9c31-bc75a8dcbeae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bc6043d-0797-4c1e-9c41-62d4e8bb2190",
        "cursor": {
          "ref": "8c612579-3e26-4cae-bcfe-73a06c95a8ed",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "eacf9f03-d763-4717-8d2f-11b79f8710c8"
        },
        "item": {
          "id": "7bc6043d-0797-4c1e-9c41-62d4e8bb2190",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ed763e93-0baf-443f-9df6-b539eb0a247a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a7611b9-f515-47be-bc60-5f7f34b562c2",
        "cursor": {
          "ref": "7cc97f2a-9dc5-4fae-b6ea-4a393e4c5b76",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b86bf8ab-08fb-4071-a05f-6e757f19aace"
        },
        "item": {
          "id": "1a7611b9-f515-47be-bc60-5f7f34b562c2",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "6c448a40-ba42-46a9-bcb5-719c86038452",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9523b0c1-45cb-47be-af94-edbaa8e4f741",
        "cursor": {
          "ref": "7f8b53e8-be69-44f0-a408-0815759d9e47",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "17eec537-15db-42c2-a33d-6fb4771f12e1"
        },
        "item": {
          "id": "9523b0c1-45cb-47be-af94-edbaa8e4f741",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "4829a356-0573-45c1-bb26-83b623ef9bf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "147c6607-6ff8-4cd0-9e6e-38ae1925eb0d",
        "cursor": {
          "ref": "3e935796-4c41-4f36-b05d-3121145c19e2",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "4eb5722d-5643-490d-bcd7-cdb649f87657"
        },
        "item": {
          "id": "147c6607-6ff8-4cd0-9e6e-38ae1925eb0d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d90611c3-16e2-4757-8a77-c4b00726b37e",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f3921b0-909b-4dc0-86cc-6416c3d06ce2",
        "cursor": {
          "ref": "cb007058-2251-453a-be0b-0957b23b618e",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f114c27b-8f46-4b89-8827-f4e37d7dd413"
        },
        "item": {
          "id": "7f3921b0-909b-4dc0-86cc-6416c3d06ce2",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "d3f233b6-ffd1-42e7-bfb8-df3987b70040",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a72e025-95e2-4120-9cf1-8dfd493779e4",
        "cursor": {
          "ref": "4012c28f-e64a-4713-b98b-69be7d37eedb",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f5896c1b-b9de-444b-b3c5-186faf61bb59"
        },
        "item": {
          "id": "4a72e025-95e2-4120-9cf1-8dfd493779e4",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "fbf782ae-d517-4dc7-9d24-6b49919fad8a",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "660e2674-5669-49df-b2cf-96dabf8878de",
        "cursor": {
          "ref": "ac78a84d-1e18-4961-9edf-b1ec77572c68",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "d906423a-9308-466a-9729-29d3ac842da0"
        },
        "item": {
          "id": "660e2674-5669-49df-b2cf-96dabf8878de",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "cf20d7fe-ba68-49f7-8e78-0fef029e1d90",
          "status": "Created",
          "code": 201,
          "responseTime": 457,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fc275f7-3a23-48ec-a617-15b709d2a93c",
        "cursor": {
          "ref": "b9494bcc-ffd0-4cae-aecb-2fdc538b009a",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "56b569e8-8048-4bd2-8654-834d2ee4ffc7"
        },
        "item": {
          "id": "9fc275f7-3a23-48ec-a617-15b709d2a93c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a9c54adb-1c26-479e-acab-76963596a76c",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-10-20T00:33:56.920Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-10-20T00:33:56.920Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "3eff4e42-6dfd-469e-a7ad-3ed913ffe436",
        "cursor": {
          "ref": "2b0de830-9dba-4b30-8735-4d4a9d267ea5",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "745fa554-77b2-4c41-aa6f-ac5d4bd6d1f9"
        },
        "item": {
          "id": "3eff4e42-6dfd-469e-a7ad-3ed913ffe436",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "62ba0366-a417-4cad-a519-ab67afcd029c",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86dc8412-4592-41b6-81ee-d17ba3938313",
        "cursor": {
          "ref": "6ff2dfdb-f71e-426c-ac00-1491f993ec12",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4dae3856-3ed5-4b47-ac97-8a52456141cc"
        },
        "item": {
          "id": "86dc8412-4592-41b6-81ee-d17ba3938313",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f4ebcfb2-c1a4-4433-8e0b-f94c95c6442b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "165f2d05-172f-462d-aa61-a0d3e96f3284",
        "cursor": {
          "ref": "3fff7e44-894e-472c-bbd8-0aadb2418187",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "535e6423-f0e1-4947-885b-aeaf33fc791a"
        },
        "item": {
          "id": "165f2d05-172f-462d-aa61-a0d3e96f3284",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "03ebd6d6-4445-4696-813b-b37e7d1484f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38609249-bb8d-46ae-a4a1-362959785a6d",
        "cursor": {
          "ref": "6fa247a3-d43e-4b60-9848-7b6ba1ccf2ba",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1d6f221b-9adc-4959-8a71-edd3e7bcbad1"
        },
        "item": {
          "id": "38609249-bb8d-46ae-a4a1-362959785a6d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "04bdf162-985d-4044-8f2c-48b748ac3cf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac906291-c92d-474f-b172-3f74e00aaf42",
        "cursor": {
          "ref": "2f9a1d83-e9a8-40f1-9dc9-f6492b6e5de9",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d2ba0d01-ce2a-44dd-a0a3-5ea2508d89fe"
        },
        "item": {
          "id": "ac906291-c92d-474f-b172-3f74e00aaf42",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6c9e09fc-3102-40be-bd8f-d93be1c1cc9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1087d178-b5a9-426d-9cb0-2a06418262dc",
        "cursor": {
          "ref": "0086f2fa-1247-4275-9816-2ac4bfa344db",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "091f87f2-f2ef-43f0-8e7d-c9eb6059f35f"
        },
        "item": {
          "id": "1087d178-b5a9-426d-9cb0-2a06418262dc",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "de7b3f44-9cc9-4d2e-aa4b-cfe018399d50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc59589-3525-4414-b775-9090f7e29a88",
        "cursor": {
          "ref": "178e4339-5065-4c1b-ba83-0a436b9acc4a",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "5730fdff-391c-49af-b89c-25614c2c3756"
        },
        "item": {
          "id": "9cc59589-3525-4414-b775-9090f7e29a88",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "586ce51c-d132-4375-8d84-20e134eb8394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "687a94e4-c33c-4b94-95ba-0fc76f89943f",
        "cursor": {
          "ref": "de075e94-61f4-46df-8bcc-f34c82c97f63",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7dd16a02-b467-428b-8483-9cdaa7f2ca9e"
        },
        "item": {
          "id": "687a94e4-c33c-4b94-95ba-0fc76f89943f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "76ca159b-d42a-44ab-966e-71b2b40e5d59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6e9f25f-34b4-4cc7-8310-35f731e8d7ad",
        "cursor": {
          "ref": "265a4371-7c5d-4f49-a836-3d91a1667c71",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "0428ee29-dc1a-42e1-a175-3c344ece33ec"
        },
        "item": {
          "id": "f6e9f25f-34b4-4cc7-8310-35f731e8d7ad",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "939306f4-85da-4c5b-8470-bb73fb3c7954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e169368a-b1ac-4862-b3e0-91c6425f5c23",
        "cursor": {
          "ref": "60beb687-8d04-4b45-8bac-f4acdb96c35e",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "55786a79-153d-42bb-a579-bb22c41c9941"
        },
        "item": {
          "id": "e169368a-b1ac-4862-b3e0-91c6425f5c23",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "7e76091d-6ca6-4b42-849b-218f8c229328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c02af3a8-650d-426a-85d2-7ea54aa7cb1c",
        "cursor": {
          "ref": "72889814-2652-466f-ac2f-a5185de8d65e",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "dcbcb25d-6337-4717-a1c5-65a5f5ee62a1"
        },
        "item": {
          "id": "c02af3a8-650d-426a-85d2-7ea54aa7cb1c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "748e84aa-0a53-4d8b-89cd-bc149885fd88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5ba0dee-3a1e-4083-9b16-4b2426711cc7",
        "cursor": {
          "ref": "b159ad6f-17ba-492c-ab36-1030b0d21a1b",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "5a6c34b1-4d49-488f-8a76-822acee0c2db"
        },
        "item": {
          "id": "a5ba0dee-3a1e-4083-9b16-4b2426711cc7",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "02e16024-63a8-4974-bb6c-3bc1c2a12c96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e53900f-f2f8-499b-90dd-0a5c70c82e19",
        "cursor": {
          "ref": "1873b492-aed0-4484-8ae6-96b7ca670f04",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "2f61d026-06ea-4f23-8c62-2ce34ab64088"
        },
        "item": {
          "id": "7e53900f-f2f8-499b-90dd-0a5c70c82e19",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "4494e220-75b6-4560-a27a-cd3d467a733f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e495838a-2149-4f89-8353-8352be583309",
        "cursor": {
          "ref": "c15c67d5-f623-425c-bb81-a525761d9b38",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "906ced07-4876-496f-be7d-b42d1470c88a"
        },
        "item": {
          "id": "e495838a-2149-4f89-8353-8352be583309",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1905bddf-ff54-425a-b74c-cd5a809f052e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa65cc59-1965-4cb4-a431-6874f6cb733e",
        "cursor": {
          "ref": "69234ca2-fc11-42e5-b9ba-48b72c3d3325",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b57400b6-b43c-420d-9edf-ef9ceea871c9"
        },
        "item": {
          "id": "aa65cc59-1965-4cb4-a431-6874f6cb733e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "26293c7f-d1ca-4c77-9726-34846708c075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f385754-58ab-4684-b1dd-752773689652",
        "cursor": {
          "ref": "35063815-19a1-486e-a0c9-353c41bd5a24",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "11df62f4-e7d1-4b5e-b62a-3c244fe5c72a"
        },
        "item": {
          "id": "9f385754-58ab-4684-b1dd-752773689652",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1a0d1857-f2a4-4584-9d50-0ee3380c80fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2ca8fe6-f545-436a-87fb-4dbd34dfa036",
        "cursor": {
          "ref": "812dacc7-52a1-42b4-a546-0b6d370ea6b1",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f203d58b-43bf-4eaa-b158-96b20721fcb5"
        },
        "item": {
          "id": "c2ca8fe6-f545-436a-87fb-4dbd34dfa036",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "cd3ca29e-5c42-44a0-bbcd-5ac595a8428b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "449af343-1a47-4844-9ed0-bbcbac567ef5",
        "cursor": {
          "ref": "3a6a4438-6407-42e7-bfb8-1f062ec9dc19",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f761d45c-11d0-4b40-bc8a-f62769342562"
        },
        "item": {
          "id": "449af343-1a47-4844-9ed0-bbcbac567ef5",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2dd0cf82-6f86-4255-b510-50879bc75139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3ea38c0-a2df-43f6-b0ac-c72a70b4bfc7",
        "cursor": {
          "ref": "f1c2a109-28f5-4470-bdb5-951ee308c449",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "a46c9708-47de-4a3d-8b61-4d307e3fff86"
        },
        "item": {
          "id": "f3ea38c0-a2df-43f6-b0ac-c72a70b4bfc7",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5f6dccf1-520c-4b2a-ae91-9021f9e81f88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c438b13-f453-4513-bca9-31ddce412bcc",
        "cursor": {
          "ref": "17abd5a1-0742-4a3f-83e2-a9db6bfa6357",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "bd220a83-e11d-42f9-94c3-d7c5a2184f67"
        },
        "item": {
          "id": "4c438b13-f453-4513-bca9-31ddce412bcc",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "8d7d18fb-6d5e-41a7-8b27-ea2a08a2e2b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9d95dd8-6d87-44f1-820a-0a44711dfa52",
        "cursor": {
          "ref": "f8290284-8d5a-4f49-a6e5-cf04a3b05192",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "1d3cff91-5fc8-4e58-ac0f-301a7c914b48"
        },
        "item": {
          "id": "e9d95dd8-6d87-44f1-820a-0a44711dfa52",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "6a7de5b5-ee91-41b5-89fb-80ca5e4e1146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45316a74-270e-4f06-bc93-a1c0b7bb2169",
        "cursor": {
          "ref": "8a4eebe5-cb6f-4a5e-89bc-82eef64581b0",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "48b3fc65-2ba7-4101-8598-d8b5e9010173"
        },
        "item": {
          "id": "45316a74-270e-4f06-bc93-a1c0b7bb2169",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c9c1a781-ff9a-4116-adf3-aa7afedd6668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58dc82ac-8401-4dec-8da2-2d5585adcc79",
        "cursor": {
          "ref": "a22b330a-7a08-415a-8901-0bc6d56aef0b",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a3b101f9-fbfb-42b2-9388-e93380296592"
        },
        "item": {
          "id": "58dc82ac-8401-4dec-8da2-2d5585adcc79",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5beed222-234b-4891-9bbb-28d4e5e6dcdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7775616-17fd-4d0a-aaea-d83206daf826",
        "cursor": {
          "ref": "b83bf663-4752-4310-b583-9578a15d7ca5",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "5a13f9a8-0ea4-429a-b171-a4f3a1a77023"
        },
        "item": {
          "id": "d7775616-17fd-4d0a-aaea-d83206daf826",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e58e5cdb-2c1d-4959-a324-b2a83a46978e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd461b84-8489-4ab0-acdc-06800c7acc15",
        "cursor": {
          "ref": "f531e49f-ad3a-4d18-a152-d97d6c58fd3c",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "6f5439b8-b31f-4534-bf96-614c43789682"
        },
        "item": {
          "id": "cd461b84-8489-4ab0-acdc-06800c7acc15",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "180add25-c80a-440d-8133-7f946300d36d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65b0b9d8-d7e3-4ded-b856-a3731a2cdf6a",
        "cursor": {
          "ref": "ef2f7db9-5a04-44ec-8c1e-97bc2244b7da",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a62d05f9-d000-46f4-bdec-8539bb878fda"
        },
        "item": {
          "id": "65b0b9d8-d7e3-4ded-b856-a3731a2cdf6a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f11ef40f-d01d-4ca9-b326-11788eeb25d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "266687be-73d1-4dd1-944c-c7ced2961266",
        "cursor": {
          "ref": "0382e0a4-af83-4086-89b3-4baa6c749ad8",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "85ae3214-bbbb-4e70-8171-c4f4af79c82c"
        },
        "item": {
          "id": "266687be-73d1-4dd1-944c-c7ced2961266",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e1995a70-22a5-4c15-81f3-cc60e20a82b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9967cf2-afd1-4795-bd40-33d10923660f",
        "cursor": {
          "ref": "0e949a9b-e957-4588-a8b2-fc9a357ad2ba",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "e2c56b73-5a6d-4713-b4d0-742c5a4633a7"
        },
        "item": {
          "id": "f9967cf2-afd1-4795-bd40-33d10923660f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a6fddcee-ce6c-482e-90da-6bf548f5da30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def91c51-1285-432e-8e99-df3898ac28d2",
        "cursor": {
          "ref": "1170492b-bc2c-4e31-93e6-d106b7d88675",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "feaf66b4-d320-4a7c-8b97-d1490b693e55"
        },
        "item": {
          "id": "def91c51-1285-432e-8e99-df3898ac28d2",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ea41d3dc-01b2-4892-83ee-286d3bd6800b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88869292-50c4-410b-84a1-3d8340a8a17f",
        "cursor": {
          "ref": "e13c65e9-6851-4194-b501-f82f4369a7f0",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d2640c31-5fe5-4148-be66-43d0b4b53308"
        },
        "item": {
          "id": "88869292-50c4-410b-84a1-3d8340a8a17f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "d61768ab-42c2-4759-a72b-dd6a5782a70b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de0ebd13-9bfa-48e0-963f-2bee668e8d62",
        "cursor": {
          "ref": "68a4d938-010f-45b5-8ed6-a2bf6d9b35b9",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "fd255b59-a1aa-4c0a-a949-0457ef3550f2"
        },
        "item": {
          "id": "de0ebd13-9bfa-48e0-963f-2bee668e8d62",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6e398486-6bbb-4047-ab45-3099c06c5916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2480dd74-f411-4192-af09-0a8e5ab33c3c",
        "cursor": {
          "ref": "cd056a3d-3e32-40df-bfe0-30994c736674",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "1d9582da-8c75-4737-8d0d-005a5c1d7728"
        },
        "item": {
          "id": "2480dd74-f411-4192-af09-0a8e5ab33c3c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "cec1a5b2-522f-4000-b800-2fba1858206d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d514eaf1-c308-4113-96a5-1fe63d2170c7",
        "cursor": {
          "ref": "4bf48aab-6a08-456a-89a3-79a5a5823ab8",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "697609b8-57ca-4a8f-ad7c-bca78e3dc312"
        },
        "item": {
          "id": "d514eaf1-c308-4113-96a5-1fe63d2170c7",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "5496ae46-b3ca-4d5e-ac2e-85f011c7c6c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f8b7b2a-8dc5-4565-bfe0-f6d05dd6bb3f",
        "cursor": {
          "ref": "dac8cf8f-2195-42b9-8a50-b0220b42b599",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "e5e10138-eb3c-4800-b90b-592ff92c34ed"
        },
        "item": {
          "id": "0f8b7b2a-8dc5-4565-bfe0-f6d05dd6bb3f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c0d75a1b-086f-41af-933f-936caa9e2444",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d90db7d-77bf-429a-971d-026b3ff5adf3",
        "cursor": {
          "ref": "ab2c222e-0f5a-4559-9b1b-891192e4f9e0",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "0e813b9f-3462-46b8-8751-eb0883bd9111"
        },
        "item": {
          "id": "5d90db7d-77bf-429a-971d-026b3ff5adf3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1b98e3e8-010e-4d39-9435-f9b039c26ad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1576e44f-b9cc-467a-9215-560939c17894",
        "cursor": {
          "ref": "1b163ff0-3819-4604-ad4e-497e1f1fffc2",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "aefa1252-3a97-478a-827d-7c7948c256e0"
        },
        "item": {
          "id": "1576e44f-b9cc-467a-9215-560939c17894",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f21af89c-3ffb-4eae-8875-6d3869d94925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94b97f10-5bb7-40cc-98ed-6744e54a0ac8",
        "cursor": {
          "ref": "62c2c5bc-02d9-478a-a831-9dca820d05f0",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "954de1be-0f1f-4593-9260-eac4aab6c2e9"
        },
        "item": {
          "id": "94b97f10-5bb7-40cc-98ed-6744e54a0ac8",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "65343fea-5797-4692-bc85-caf4985e5556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c40e6b9-9146-46d1-b237-a9b37ba7fdc7",
        "cursor": {
          "ref": "6d579e99-5a7f-4c32-93c1-11522b10e764",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d51a2f93-21f2-4e8c-ad9e-5fa1985b47da"
        },
        "item": {
          "id": "4c40e6b9-9146-46d1-b237-a9b37ba7fdc7",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "70ee72a4-c1b0-42b3-abc6-a14dba395619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19ae244f-57a4-449f-9840-065b0c2e9cc8",
        "cursor": {
          "ref": "3d0600c2-29b8-4280-a4b3-f013ca5b0494",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8e549ae0-7e10-4ed7-8621-b53d19197626"
        },
        "item": {
          "id": "19ae244f-57a4-449f-9840-065b0c2e9cc8",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9ea6dfea-61ff-479b-88f0-98a3ed0802e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7a6d606-37f5-46bb-8b65-88f36d437e9a",
        "cursor": {
          "ref": "eb551d6b-0047-4bfb-a93f-f633d98b6f38",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d7618d86-38c6-4a35-889b-b5063e33c5da"
        },
        "item": {
          "id": "e7a6d606-37f5-46bb-8b65-88f36d437e9a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "fa73146f-a4dd-4415-b383-fb22ab83a8e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5be888fc-a547-43ce-985c-b35983a0fd9f",
        "cursor": {
          "ref": "0316adf0-6ed4-4763-8535-53ea34d2acc7",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "6c66590a-d52d-45e2-a02e-42ed29b32ca7"
        },
        "item": {
          "id": "5be888fc-a547-43ce-985c-b35983a0fd9f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "bfc4c2e7-fd80-4cbb-a9df-217de27c07d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6b38278-aa59-4b8a-8b1a-5cc215fddd1b",
        "cursor": {
          "ref": "8095875c-b0ca-44b5-82f2-17032fdc129c",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "2ad598e7-0a40-4fa4-80ae-0ebe18eeb076"
        },
        "item": {
          "id": "d6b38278-aa59-4b8a-8b1a-5cc215fddd1b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "49e26fe4-db2e-4384-802e-88f84c24b04d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1141cc7c-cdbd-416c-870d-b4208f3e38fc",
        "cursor": {
          "ref": "37ffec8e-465e-4b90-bc2b-275242298092",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8106c47a-7184-4bd0-b7b2-2eac5a00338d"
        },
        "item": {
          "id": "1141cc7c-cdbd-416c-870d-b4208f3e38fc",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ae620f38-a165-44e8-b0e7-526952f15a62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b504e6da-7837-4fdc-baeb-a51364b90225",
        "cursor": {
          "ref": "774a3445-daa7-4c6a-b494-0164fe0fadf0",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "458dcace-e815-4880-a714-488531a41c8d"
        },
        "item": {
          "id": "b504e6da-7837-4fdc-baeb-a51364b90225",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "848cf1bf-f25c-4f9a-a5a8-e74d57173233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "658f4702-7623-4d5f-8fbf-73c9402517df",
        "cursor": {
          "ref": "9f0ebf43-fe90-4a22-a999-6484bd821281",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "94369175-d400-4e1c-aa2c-6a5f9191e753"
        },
        "item": {
          "id": "658f4702-7623-4d5f-8fbf-73c9402517df",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f9728f5b-6ad5-4f16-b6e2-0787744d550d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7e85893-18ff-45ba-94e1-dbad99c7c682",
        "cursor": {
          "ref": "092a461f-c161-4a3b-8d85-06409476f50d",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "6b8fcf07-fa37-48dc-8e7e-e9f2845fbabf"
        },
        "item": {
          "id": "b7e85893-18ff-45ba-94e1-dbad99c7c682",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ec31322c-1692-4e24-bfc5-a147ba77fb88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceebc3be-0819-4cf8-94d5-672c1bb32a9b",
        "cursor": {
          "ref": "e78514cc-6aae-4b1f-8622-856e98e5eafb",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "7aba028e-2fa4-4eae-8814-030e65f4e829"
        },
        "item": {
          "id": "ceebc3be-0819-4cf8-94d5-672c1bb32a9b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "88cb4c24-0a42-4914-a1d3-2b767bb413c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eae7f16d-d828-4d19-bdff-427d4f5c6362",
        "cursor": {
          "ref": "ae28ebb3-bda8-4584-913e-d43ac7b6c8e5",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "087715f7-9aaf-49a0-9264-9282b4dc0bd7"
        },
        "item": {
          "id": "eae7f16d-d828-4d19-bdff-427d4f5c6362",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "041dbb26-b57a-477b-a630-8da73fef0e56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bc067c6-981e-489d-9d30-fcec68275d76",
        "cursor": {
          "ref": "7d3e7543-0ffc-4f68-83ac-2d1f9ded30ed",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f1a8f0ec-083a-4bcf-a3de-723a8916da75"
        },
        "item": {
          "id": "8bc067c6-981e-489d-9d30-fcec68275d76",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a13f2904-5760-45a2-aafe-6203f21669bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89b1fec5-cf35-4f51-9986-6a97b4485078",
        "cursor": {
          "ref": "fecd5695-eb4f-448a-a8c4-ed34dec28132",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "9900b018-5d6b-4b41-ad59-b41886723a88"
        },
        "item": {
          "id": "89b1fec5-cf35-4f51-9986-6a97b4485078",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7e6f7584-96f0-4939-8916-d5d1987f86f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e105da57-2629-4f6e-ad35-6315a370f942",
        "cursor": {
          "ref": "b1c417b3-efaf-4096-8a9e-0c8015ec556c",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "af088cac-3b61-42bf-9b0a-8bd7db632b9b"
        },
        "item": {
          "id": "e105da57-2629-4f6e-ad35-6315a370f942",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "30fd7ca4-b608-40a6-ab9a-a0fc8eb5c204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd0e68bc-5e65-43ab-b235-6ad8a9fc74cc",
        "cursor": {
          "ref": "24f5e09c-2399-46ae-aa24-2b0c7271069c",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e3d11301-cffc-45b7-a776-856f5d5f70d9"
        },
        "item": {
          "id": "bd0e68bc-5e65-43ab-b235-6ad8a9fc74cc",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "624247cb-97ad-4c93-b2a5-32366c396c27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed3e3d84-93bc-4406-aff3-6b155cd0f974",
        "cursor": {
          "ref": "262b1a94-dcf6-43df-a470-34dba6c6bfb4",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f98305b0-003c-4418-b6da-d7d34246e9bd"
        },
        "item": {
          "id": "ed3e3d84-93bc-4406-aff3-6b155cd0f974",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "fd0999dd-5328-4b71-a529-9b97ad9bdd2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9840940f-9080-4fc3-842c-104527448e93",
        "cursor": {
          "ref": "3ee0c400-9033-4458-9361-994fd7f2159a",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7a92d536-242a-46d4-a6f6-e181272015bf"
        },
        "item": {
          "id": "9840940f-9080-4fc3-842c-104527448e93",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a47aee04-8d2b-466c-9ecb-578dbedfa589",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19ff59d7-3cab-446f-99b2-97af404fe0e5",
        "cursor": {
          "ref": "87e9ced6-c7d1-467a-a727-be8f3b0a417a",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "dfe1d532-eba2-494a-8fc0-6d986c6059ac"
        },
        "item": {
          "id": "19ff59d7-3cab-446f-99b2-97af404fe0e5",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d841da76-5ee5-464d-a813-e552e1cbf9e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1cdd87c-e6b9-483a-8b26-f6fd44c9d57e",
        "cursor": {
          "ref": "439f7395-622d-4217-a9fd-4834cca6e116",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "dba70f7e-a714-4ee0-a03f-428bb26a9427"
        },
        "item": {
          "id": "f1cdd87c-e6b9-483a-8b26-f6fd44c9d57e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b62ea117-6037-48da-9d6f-66c497874b80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4795573-eb93-425c-8cfa-9eeced1412e4",
        "cursor": {
          "ref": "aeddd225-3cde-44e4-af99-373eb0e5dea5",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "0e18bf70-a18b-4fb5-909a-68d958fa7362"
        },
        "item": {
          "id": "b4795573-eb93-425c-8cfa-9eeced1412e4",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f0e4a936-e079-4ee3-b46e-7716fa5bfff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9423353d-3eec-4dde-9d9c-33f16f6636ab",
        "cursor": {
          "ref": "21ef371c-638e-4eb4-8213-24f04861abac",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b1b72edd-f888-45d5-aeff-ce53fb31bad1"
        },
        "item": {
          "id": "9423353d-3eec-4dde-9d9c-33f16f6636ab",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "45ea5a7d-d33d-4adf-8f33-75bd59cd0ea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95ba8530-fee4-41fb-8997-1f385efef0d8",
        "cursor": {
          "ref": "b96315c1-3ab9-4bb6-86b3-2469ce730b7c",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "65ee8f80-58ee-4b39-89fd-6ab9bba6b61e"
        },
        "item": {
          "id": "95ba8530-fee4-41fb-8997-1f385efef0d8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "07a20d28-82b5-4272-9ee6-f4ad92256f70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "595c6a1b-656d-4def-853b-c36ec919c357",
        "cursor": {
          "ref": "657ca37c-9462-4b6f-b785-3f3369f21cd6",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a33256a5-66d4-450b-a67f-1551c5886669"
        },
        "item": {
          "id": "595c6a1b-656d-4def-853b-c36ec919c357",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c1af7102-d2d6-4a50-af04-c918a55bbcfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca8ef21a-5064-47c5-a032-b073bff0147f",
        "cursor": {
          "ref": "5eac6dab-04c1-4521-8682-d5d35913d4dd",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "134d7802-d9a0-4a7a-b14e-767e7301a2ec"
        },
        "item": {
          "id": "ca8ef21a-5064-47c5-a032-b073bff0147f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "77f6b7b3-99ba-463c-a8e6-9fc65c307e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a64813cf-521c-4ae4-ac9f-4d48ebef2da1",
        "cursor": {
          "ref": "056f5592-bab2-465b-8661-ab3068747f7b",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "e1cecb77-51bb-47f3-9365-cc05230d8993"
        },
        "item": {
          "id": "a64813cf-521c-4ae4-ac9f-4d48ebef2da1",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "fbf40394-8a03-4db8-8af1-ad4cdf9c1f77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83cde585-80c5-437d-bd6b-81f8ebddcaaa",
        "cursor": {
          "ref": "5c8f353b-db39-466f-80ec-bd5b7641be4a",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "81881a10-babd-43dc-a39d-8e2f2631d51d"
        },
        "item": {
          "id": "83cde585-80c5-437d-bd6b-81f8ebddcaaa",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b1e5500e-6fe7-48e9-b8dc-ecc346dda9c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "765b9365-6f58-4de5-b7d6-32e708334aa3",
        "cursor": {
          "ref": "b226f4a7-2040-43b2-a3a9-2e9d1f737db7",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "72a705bb-7dee-4fe5-bfd1-fd4a879e2a1d"
        },
        "item": {
          "id": "765b9365-6f58-4de5-b7d6-32e708334aa3",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a4a4d02c-6e8a-49a3-8303-cdd41d9e2dc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e5654e7-c163-4395-82d3-5877f691a5ad",
        "cursor": {
          "ref": "e592f0c2-26fe-4012-9033-1a5fa16fc602",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "09c74b52-1227-4c6d-b347-7d4621489817"
        },
        "item": {
          "id": "5e5654e7-c163-4395-82d3-5877f691a5ad",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "5d1a4356-76ae-4fce-b2c0-33ce14236346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c551b480-a1d0-4d36-9df0-be3156a4778c",
        "cursor": {
          "ref": "8e5c0b02-c472-432e-a5d3-c8455ac85c30",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "eecdfcfa-0c4c-4e69-a42a-3a0276269924"
        },
        "item": {
          "id": "c551b480-a1d0-4d36-9df0-be3156a4778c",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "7865ca7d-1a1c-4d4f-bc35-53ab32160918",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "085eda20-41be-44cc-9acd-289afb44d577",
        "cursor": {
          "ref": "9f450e9d-502c-4700-9127-25434e1d9812",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7423eb03-6267-4266-becc-39aa0549ec59"
        },
        "item": {
          "id": "085eda20-41be-44cc-9acd-289afb44d577",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "85cc215c-f9a6-4e47-b18e-4c2b21daa0af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41b73b4f-dfab-400c-ae07-e4af1b0381fa",
        "cursor": {
          "ref": "e1899aac-4783-4a5a-af5d-1c7ed3b55c81",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "4c4c2684-7aeb-4500-a2b7-d984eff3e3aa"
        },
        "item": {
          "id": "41b73b4f-dfab-400c-ae07-e4af1b0381fa",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "67d00866-c8f9-4d9d-9f34-6bc5dd21ba57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfffd5fb-9cfb-4a49-b41a-cafab79ba005",
        "cursor": {
          "ref": "3b63c866-0b03-4114-b939-9133261c8161",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "cd0ef57e-1b43-44fd-9667-01b1c65bb776"
        },
        "item": {
          "id": "cfffd5fb-9cfb-4a49-b41a-cafab79ba005",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "844c14d8-f91f-4d02-ac7f-028e5531a926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c919e37-c34f-4f51-980a-cc768bc05620",
        "cursor": {
          "ref": "7162e0a0-b7af-4cd8-87c6-1b2d8706729a",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "1f923aa6-e1e9-487c-a673-a89ee10f951a"
        },
        "item": {
          "id": "2c919e37-c34f-4f51-980a-cc768bc05620",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "48d22cdc-c574-49e4-8f60-77f8c696d9c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4801be5f-b8e3-46b4-97aa-c9a24f29c33a",
        "cursor": {
          "ref": "59abd981-e7b7-4647-91ef-7a37bea70ca7",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "8ba08e7b-45b5-4b88-a27c-956031ee3b63"
        },
        "item": {
          "id": "4801be5f-b8e3-46b4-97aa-c9a24f29c33a",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "7abee8d8-fe1a-4288-be3b-0ae985937eaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f6b475-cafb-4a50-af55-023def094588",
        "cursor": {
          "ref": "6272c14a-11cf-4777-baca-cf512737bd87",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "1dab7bbf-1a56-42d1-b3c1-2263c76e01aa"
        },
        "item": {
          "id": "73f6b475-cafb-4a50-af55-023def094588",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "fc0094b8-ccc1-4d0b-906e-7e84b97ab84b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee7fe46e-1efd-4ecb-9f74-ef321b21e68d",
        "cursor": {
          "ref": "db645303-3820-4f76-8b22-890fdbf6777c",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "c32a3781-72c6-4177-9ced-a779994a0ba9"
        },
        "item": {
          "id": "ee7fe46e-1efd-4ecb-9f74-ef321b21e68d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "58414e6f-774f-4c59-a0b4-1443ff95491f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c7311a3-e59b-41c8-bd16-43ed1c46a5d5",
        "cursor": {
          "ref": "92f496fc-406b-41fa-ad18-221ef68e9fe4",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "1f11a84c-30f4-467c-8b68-5952e88bb54d"
        },
        "item": {
          "id": "9c7311a3-e59b-41c8-bd16-43ed1c46a5d5",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "0506688d-9db2-4b67-9015-729b792a4a16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b6e408-85a9-4b9f-9ffa-74f1090117c3",
        "cursor": {
          "ref": "4cf72a29-5109-47a3-b1f7-9c05e6733e74",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "6c7cd47f-556e-4b27-bf98-627bd91e5f19"
        },
        "item": {
          "id": "39b6e408-85a9-4b9f-9ffa-74f1090117c3",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ce37f07a-b929-49c5-8dbc-a974c87f0d24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecae0d7f-6263-4ced-86bc-2fc3f9052531",
        "cursor": {
          "ref": "0336eb8b-4dbf-42a3-bd59-d2027ce7feb9",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f8f34e99-0823-46ef-a388-a857a5c40541"
        },
        "item": {
          "id": "ecae0d7f-6263-4ced-86bc-2fc3f9052531",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "af15a025-279a-4a41-9e06-a531af0a8c2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47406261-9576-4764-9c5c-c142c922fd4a",
        "cursor": {
          "ref": "4e764f05-2f2e-47a4-897b-24fef700f0ca",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "609537bc-1eaf-4f11-a722-5757b44b359b"
        },
        "item": {
          "id": "47406261-9576-4764-9c5c-c142c922fd4a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "165202ab-6623-4325-b34f-337dd0890b27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a8a2ad2-3255-41a3-ba57-b54618603eea",
        "cursor": {
          "ref": "cda891be-16a4-4255-99cf-5835ac07ee87",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "7426b435-6917-4250-9953-7dd6fbe4116c"
        },
        "item": {
          "id": "3a8a2ad2-3255-41a3-ba57-b54618603eea",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "9345f2e4-ee05-4cba-b216-97122af7f306",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "ed1acd93-9e42-41b6-be70-0936b23e17ce",
        "cursor": {
          "ref": "e76fb765-3b8d-4053-86ad-6a88060f362d",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "6d83a8d7-b078-48eb-be41-1c0c37512c61"
        },
        "item": {
          "id": "ed1acd93-9e42-41b6-be70-0936b23e17ce",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b4bce1a7-a359-4005-81e8-ad6de596e98a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c65b273-43b9-437d-877d-50b3f9a11bbd",
        "cursor": {
          "ref": "13559543-5d80-46d7-a48e-d046d58b7366",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e84d6187-3c32-4132-94dc-9988317224bc"
        },
        "item": {
          "id": "0c65b273-43b9-437d-877d-50b3f9a11bbd",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "1526dff2-26fb-4dd0-997b-6f155e75ad8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "965c00ca-6468-48c8-8a35-37a0545fd061",
        "cursor": {
          "ref": "297c90ad-3e95-451c-a914-b0b58bc8f53e",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "4f615b0a-c0f8-4e25-b6b0-1997c7485b87"
        },
        "item": {
          "id": "965c00ca-6468-48c8-8a35-37a0545fd061",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "47218cb7-3c26-4130-aba7-af8ae48b5ab9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "270066b5-80c1-426d-8568-cc8e4ccd5873",
        "cursor": {
          "ref": "e01e0c50-9488-452a-b16d-30f0895daf14",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "adad897d-dd98-4891-becb-a2060b8149a4"
        },
        "item": {
          "id": "270066b5-80c1-426d-8568-cc8e4ccd5873",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f07f5fdd-88d8-4606-a968-9a7f77012228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a4dd748-cc7e-4887-b1bd-181394c53a29",
        "cursor": {
          "ref": "ac53e2a0-3d3b-42e9-ac45-bce72924e88f",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "6b3d1916-8a63-4b07-a484-5d1043b316f7"
        },
        "item": {
          "id": "5a4dd748-cc7e-4887-b1bd-181394c53a29",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "99ec03ef-2167-450e-94e9-36e309b75e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3833ac2e-2b49-4fe1-802c-70a0f5a0d0cc",
        "cursor": {
          "ref": "08578ea1-9f6f-49db-97ed-77d331b8ef3b",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9cbbd554-3917-4dd3-ad3c-c7709765f61d"
        },
        "item": {
          "id": "3833ac2e-2b49-4fe1-802c-70a0f5a0d0cc",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "df2ad4c3-af7e-40f8-8230-f512731f3792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e586daf7-af8a-4c8a-a5df-5d651a34ba02",
        "cursor": {
          "ref": "d04e0432-2aa7-40dd-884d-0b408aef3200",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "37d61d1c-f787-456b-b91f-a8df2a7bef15"
        },
        "item": {
          "id": "e586daf7-af8a-4c8a-a5df-5d651a34ba02",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "b93f9b8a-9bcb-41f1-8f3c-cfb93f38c4dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c84eb212-931e-4aba-ae48-a544721c37c5",
        "cursor": {
          "ref": "f0e76734-6b07-4fe5-a49d-c2d83e796fe4",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "2711a44a-51d0-49a9-b862-617f01bcf376"
        },
        "item": {
          "id": "c84eb212-931e-4aba-ae48-a544721c37c5",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "c6ed1b61-448e-440e-9f78-bb07320e9702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "550724a8-3449-4ba1-8b78-d4b5583d1188",
        "cursor": {
          "ref": "520254ce-df65-4c77-ac4e-d9221e2c4c21",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "64fc1b1f-306f-4c1d-a456-646aae28d9e7"
        },
        "item": {
          "id": "550724a8-3449-4ba1-8b78-d4b5583d1188",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "337885e4-5b77-4157-8103-aae1fce55e4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90482917-46a9-4976-a1b8-3da8629bd20f",
        "cursor": {
          "ref": "18bf1c31-8631-4f4c-9582-936f203a806d",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b67b83fc-346e-4b93-a2e6-a3bc7303453a"
        },
        "item": {
          "id": "90482917-46a9-4976-a1b8-3da8629bd20f",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "206f62ab-8e2e-46e6-8d63-99bbe7971b6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe2a4d3c-a6bc-44d4-bd39-4d4a6b150590",
        "cursor": {
          "ref": "636a42a1-a6f4-49e2-b8ac-8968dd857cf4",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "6f7ceedd-4626-44f1-9ac4-a6d6bc4b8faa"
        },
        "item": {
          "id": "fe2a4d3c-a6bc-44d4-bd39-4d4a6b150590",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a0edac85-58e9-437e-a171-6c17b453fdc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1261c4cb-a579-423c-a27c-f135f5db2095",
        "cursor": {
          "ref": "a3d33f5a-ec00-48a9-8228-d2c8a0c96509",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "e32cfa50-f601-4c88-a8ad-c85c6260671c"
        },
        "item": {
          "id": "1261c4cb-a579-423c-a27c-f135f5db2095",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "04d6ecd8-e01e-45c1-a844-5201456bb648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d893f5b2-e696-44f2-b93d-6b330ced993b",
        "cursor": {
          "ref": "b3886267-b002-49b4-b7bd-1b3bea7c8bf3",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "519989eb-6dd7-4560-9433-97c8e1ef983d"
        },
        "item": {
          "id": "d893f5b2-e696-44f2-b93d-6b330ced993b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f657be39-26b2-453e-8c11-9e2ec267cc52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ba1fa6c-49ff-430f-9029-56735f348316",
        "cursor": {
          "ref": "5edfa37e-4881-4291-bb16-1bc051429b90",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "2d0816c3-bdae-4dbd-a447-376498898564"
        },
        "item": {
          "id": "0ba1fa6c-49ff-430f-9029-56735f348316",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "dd6ff3d5-72dc-4daf-b657-9d36a4fd2148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31d1237c-b1fc-4b43-b1cd-f616f7863c78",
        "cursor": {
          "ref": "d558fad1-b3f2-4dc3-91f0-408b2bb43eec",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "01f16a77-743b-4cbb-afcd-4027237da5d5"
        },
        "item": {
          "id": "31d1237c-b1fc-4b43-b1cd-f616f7863c78",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "93cedda1-b4c3-4a62-976a-dbbb2cc7ba3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5b2a5f9-67c8-466c-8f71-87f8075fa2ac",
        "cursor": {
          "ref": "0e770a39-0084-468c-a782-878bbe05644e",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "5afd811c-b04a-4ebd-987e-da6127563a05"
        },
        "item": {
          "id": "a5b2a5f9-67c8-466c-8f71-87f8075fa2ac",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "89524b60-358b-4529-a8e8-42f5e77d46c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9143038-38af-4c05-accd-b3b4899ed55f",
        "cursor": {
          "ref": "66975903-99de-43dd-b542-4dc81eca1b87",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "65352f3b-7668-471c-9f85-69ff0dad84da"
        },
        "item": {
          "id": "c9143038-38af-4c05-accd-b3b4899ed55f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "105937f2-532a-4a33-be38-3ff961c526d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9493b8cd-ba4b-4963-9061-b3ac6bb4f5cb",
        "cursor": {
          "ref": "57f5e4e0-bf3e-409f-8a8a-70a0fe6f200c",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "a51ee5be-a7b2-493d-9879-b582a6789a12"
        },
        "item": {
          "id": "9493b8cd-ba4b-4963-9061-b3ac6bb4f5cb",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "aa172461-e0a0-43f2-8c2f-1cd7141a52c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13859705-bc7c-47cb-b24c-a8114a407439",
        "cursor": {
          "ref": "6c0d63e4-8436-42ce-97ef-110158c71d3e",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "f15fc31a-a897-45b3-b54d-ba02dff3f394"
        },
        "item": {
          "id": "13859705-bc7c-47cb-b24c-a8114a407439",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "901023cf-cfcc-42ee-ba05-7e2816372659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36cc3060-4a8d-4a7d-a32d-1553cc42f26e",
        "cursor": {
          "ref": "c20f0c97-d7f5-484b-b3b3-79d30e1384ce",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2c92a037-8e7a-4f96-87dd-0f85fe90dbc3"
        },
        "item": {
          "id": "36cc3060-4a8d-4a7d-a32d-1553cc42f26e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "614406b9-3c89-4645-88ea-52245fcd57bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaf1aa6c-b570-4a86-be65-4b028a6462b8",
        "cursor": {
          "ref": "0af95562-d762-4f0f-bc75-70de6427f7e8",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "30584879-5782-4d20-8a78-9c6f2c3163eb"
        },
        "item": {
          "id": "eaf1aa6c-b570-4a86-be65-4b028a6462b8",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "41caffb1-4fb3-47e8-af1d-76cc6e384028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c541364-c062-4101-aea4-241d47ba80a5",
        "cursor": {
          "ref": "b9c45044-abad-4176-91b9-fd784f3485de",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "f920692f-d45a-44f3-8cc0-9d93e6dce078"
        },
        "item": {
          "id": "9c541364-c062-4101-aea4-241d47ba80a5",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "e2c43c4d-95ac-45d2-b65c-f69c53b099be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cce87077-0571-46cc-9828-f15c311fa06b",
        "cursor": {
          "ref": "73adad4a-cb6e-49d8-9aa2-a72dee122637",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "ebe4cc1b-42a4-4ef5-a12d-7ee8016fba96"
        },
        "item": {
          "id": "cce87077-0571-46cc-9828-f15c311fa06b",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "86fe033c-f2bb-4d33-b5c3-deddbb13f129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "964b999f-d25f-4fb2-9e01-12487d67ab11",
        "cursor": {
          "ref": "8b6e8554-c432-4c70-94bc-bb1bb302c6f5",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "b5302063-8489-48ea-91b2-86ab7d817828"
        },
        "item": {
          "id": "964b999f-d25f-4fb2-9e01-12487d67ab11",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "a2b65af0-923d-4357-8a31-fa8013b2b573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75caa2b5-b7ce-4cbc-9960-0a182b641ffa",
        "cursor": {
          "ref": "8c1c42c4-a000-4931-b7fb-6cda20816a10",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "6b569ba2-d1ff-42c9-8828-dff4c3dc09eb"
        },
        "item": {
          "id": "75caa2b5-b7ce-4cbc-9960-0a182b641ffa",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "29c65532-0628-419d-ac25-ba80cad72153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a5a93b3-0281-4550-8e1a-ef906077ff5c",
        "cursor": {
          "ref": "5c13e733-2fbf-4bd1-a488-533fd66102cd",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "84264dd2-a7b4-4af2-9737-c53a05116dea"
        },
        "item": {
          "id": "7a5a93b3-0281-4550-8e1a-ef906077ff5c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "9d08a322-cace-411c-927d-02108ec0c937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec308d2e-0f30-4d1b-9e57-eeecae1df717",
        "cursor": {
          "ref": "26a02ce9-83ba-4920-9cb2-576bd9a48f4e",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ecfe274f-4e71-46f9-be5f-b76c2dde317a"
        },
        "item": {
          "id": "ec308d2e-0f30-4d1b-9e57-eeecae1df717",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "62e6ec17-c180-4960-9838-a77096c25580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71f4e46b-bf5e-40da-917f-d3176d322788",
        "cursor": {
          "ref": "4de73990-5ff3-4756-81f2-be2a0ce93eda",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4fa9e98f-3fe3-4f27-b0a9-8077654da98c"
        },
        "item": {
          "id": "71f4e46b-bf5e-40da-917f-d3176d322788",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c3b3825a-2d3c-40b3-a680-14cbb9b4aeba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ab3ceeb-5c66-43d3-91a6-25d7c2d068d2",
        "cursor": {
          "ref": "79cdae99-997c-4c1d-889d-5f311d4e6187",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "0d758e55-f74d-43a6-8586-732f57790ca2"
        },
        "item": {
          "id": "3ab3ceeb-5c66-43d3-91a6-25d7c2d068d2",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "4f61cebd-d6dd-4f57-a1e0-7c2e16d6f537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aa5ca6f-0849-477d-a5a7-e3803f667e58",
        "cursor": {
          "ref": "606add81-20f7-443a-9f70-709212bf1d70",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "78abda67-7dba-4774-a30f-bda2ecb77c67"
        },
        "item": {
          "id": "5aa5ca6f-0849-477d-a5a7-e3803f667e58",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "fa4cedcf-f78b-41e2-a24c-1970daee671c",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "dfaed8f4-fb89-4e82-a3dd-1d179a3c612b",
        "cursor": {
          "ref": "ede921a4-b641-4c64-b43c-a81b866d67ef",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "e14287ae-839b-456a-933b-816cb1263b86"
        },
        "item": {
          "id": "dfaed8f4-fb89-4e82-a3dd-1d179a3c612b",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "1aceb095-b3b3-40f1-9bf9-f9bb3d83d69b",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "13b8e4db-c73a-48c9-a1ab-e7f9c159eac8",
        "cursor": {
          "ref": "ff0de86c-17ce-46e3-ae2a-596da8d5271e",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "edae3f57-27e2-49cc-9119-d692ba87870b"
        },
        "item": {
          "id": "13b8e4db-c73a-48c9-a1ab-e7f9c159eac8",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "3d9a54e5-12b4-45ed-96d1-e426dcd13cc1",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "5e2a7b70-64a5-4605-ba3d-1a7bd809bd64",
        "cursor": {
          "ref": "fafcb136-8dd4-4776-8301-409d1583cf9b",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a549e410-85bc-486b-a897-aedcbcf85aca"
        },
        "item": {
          "id": "5e2a7b70-64a5-4605-ba3d-1a7bd809bd64",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a3313d6a-4c90-4b9e-a999-f3c459355428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "343e205f-05ad-4c7d-abf5-d9483d645ac5",
        "cursor": {
          "ref": "b9896b2f-b984-4c9a-af78-1db56c01efee",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "092fe30e-3167-45c2-a576-981551c75d06"
        },
        "item": {
          "id": "343e205f-05ad-4c7d-abf5-d9483d645ac5",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "58406f0c-c3bf-48ff-a381-a1686f1efa82",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "baf77a7f-45fa-4527-be1f-1742ad41feb0",
        "cursor": {
          "ref": "16b5211c-1a46-41aa-8655-8a116e813a43",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "31227c63-c8ed-4ebe-935e-fb2a64b8875f"
        },
        "item": {
          "id": "baf77a7f-45fa-4527-be1f-1742ad41feb0",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "9f6682ff-776f-4787-9647-a885ce282b4f",
          "status": "OK",
          "code": 200,
          "responseTime": 156,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "8e8ad472-3812-4a84-ba1f-b018451beea1",
        "cursor": {
          "ref": "aad48686-aa01-420a-bbd3-02f54031ba3b",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "bb60dfa5-9b08-4155-bb4f-679df53292d8"
        },
        "item": {
          "id": "8e8ad472-3812-4a84-ba1f-b018451beea1",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c6ff804b-a5bf-4a2d-b477-a9f59e434a0e",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "43e9ae2c-10f2-4cc1-b3a8-4ab91468a871",
        "cursor": {
          "ref": "658fbfcb-4486-464a-acfb-d2d46882748d",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ea6c1a29-3c27-4918-b914-4cf5c60baf6e"
        },
        "item": {
          "id": "43e9ae2c-10f2-4cc1-b3a8-4ab91468a871",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "6c0e4df7-b767-4461-98bb-c82fce84cca1",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "049fccb0-09e2-4a5b-9a28-d1e629819bf7",
        "cursor": {
          "ref": "19d2a1b9-33d9-4a37-a806-69c5204c7f04",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "81d6bed8-b691-49e2-90af-a789b8625bd0"
        },
        "item": {
          "id": "049fccb0-09e2-4a5b-9a28-d1e629819bf7",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ce5fcd99-93ba-4cb8-8080-db3a4128e08c",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "c2d423b8-c268-4fad-85d0-77b8832b3831",
        "cursor": {
          "ref": "2148e502-af26-41d6-836e-07e6d2a4663f",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "9492bf50-609c-43f3-b941-374386497692"
        },
        "item": {
          "id": "c2d423b8-c268-4fad-85d0-77b8832b3831",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "1fb8fd60-9830-4d32-bc3d-1ffce0c6bba0",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "b28dc5f3-38d2-4165-ab4e-1af8fc26fe41",
        "cursor": {
          "ref": "66e2ab9c-7d06-4f6a-8511-f2ca16d3e092",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a11b8cf5-afe5-4250-807c-3766029d2daa"
        },
        "item": {
          "id": "b28dc5f3-38d2-4165-ab4e-1af8fc26fe41",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "05486416-8056-4553-b408-c73ae8a3cc3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a778eef6-d650-4575-b5f8-3b70b790dde4",
        "cursor": {
          "ref": "f0eba92b-9d9e-4031-b932-97378b3edc19",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "886b51fc-c246-4ee6-b6ec-c91cfe00ffc8"
        },
        "item": {
          "id": "a778eef6-d650-4575-b5f8-3b70b790dde4",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d1594e1e-2265-4025-8fd4-a0fce5307362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "712dbb81-8d30-42a9-9c28-8e8eafbf8414",
        "cursor": {
          "ref": "1acfbc2f-693b-4cf8-a7d1-5d58ee28e974",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "9290fbfb-66f2-4386-988e-ab7f310796a5"
        },
        "item": {
          "id": "712dbb81-8d30-42a9-9c28-8e8eafbf8414",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e75f72f1-3e88-4f0d-9a11-32fa39b6d925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44c25e41-9098-48ec-900f-c55cd2ae0d28",
        "cursor": {
          "ref": "e4878951-92c9-4c14-a975-9a729dc61130",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "12014e74-8872-4adc-b031-240d31b6c362"
        },
        "item": {
          "id": "44c25e41-9098-48ec-900f-c55cd2ae0d28",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "b862e40b-b26f-4338-8927-6a915bb7d507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "950ce7f3-ea81-4559-86fc-3955e150ed8e",
        "cursor": {
          "ref": "9ae3c3e9-dd2f-4def-9ced-84a6b938b662",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "4e04c070-24a4-4901-bac1-7f03b18af164"
        },
        "item": {
          "id": "950ce7f3-ea81-4559-86fc-3955e150ed8e",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f8d708e1-8626-40f5-9377-45b1bb1eb92c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eafcc4ef-4576-48bc-b7be-eb31f8e044a2",
        "cursor": {
          "ref": "53216721-ed26-48ab-894e-4c9a07a84580",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f89ffb11-9282-4756-bafb-6a08a576e45a"
        },
        "item": {
          "id": "eafcc4ef-4576-48bc-b7be-eb31f8e044a2",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "9c0de8d2-5174-44a8-ac24-ffde492428e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb243b06-e95c-48e3-8502-02866cdee1df",
        "cursor": {
          "ref": "9d53fa76-444f-41c9-9597-bfdcd8bc62c1",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2c0a3532-3522-46f1-898b-11bff418ebbb"
        },
        "item": {
          "id": "eb243b06-e95c-48e3-8502-02866cdee1df",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "de8f1038-7705-4fbf-acec-4ac97fbdc722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dba6cf59-21f0-4e4a-a2a4-62ad3a9c5e40",
        "cursor": {
          "ref": "afbb83b3-2a95-46ce-8bb7-a0d2c678d280",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "fffc69d6-0dd6-409a-9476-9a1725ccc85b"
        },
        "item": {
          "id": "dba6cf59-21f0-4e4a-a2a4-62ad3a9c5e40",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c982de4b-1858-4ac4-a54f-85d0245011d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "726b5733-993b-415f-bf80-ffa51fd15025",
        "cursor": {
          "ref": "4e592816-6d3d-4b09-b264-912992c6e75c",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ded32872-6aea-4064-bfc1-dfdb5e4bdf1e"
        },
        "item": {
          "id": "726b5733-993b-415f-bf80-ffa51fd15025",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1021c438-e93a-4aaf-9c8f-70ec844c117f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d3a451c-4e26-4b4a-b0bf-21c927ef3190",
        "cursor": {
          "ref": "a3a8c8e2-236c-4e55-ab7e-2b9df4b37065",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "cd442b53-154d-483a-8845-c71c35930777"
        },
        "item": {
          "id": "9d3a451c-4e26-4b4a-b0bf-21c927ef3190",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "de280a8a-318e-4a2b-9bd9-f71ab7291528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "805c3680-8d90-484c-b336-aefec5199509",
        "cursor": {
          "ref": "ba74887c-aad5-485e-9fb9-8b07cae224f7",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "96d779b8-2c5f-40a5-8dcc-92202b617edc"
        },
        "item": {
          "id": "805c3680-8d90-484c-b336-aefec5199509",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "bdfd0dea-437b-452b-91c5-36705bd65320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1ce57e8-1f03-438b-95df-31ae15a43534",
        "cursor": {
          "ref": "4dbe0f5e-b334-452a-9272-61a743b3be23",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "e5ad137b-4387-40df-8343-f66ea44650a3"
        },
        "item": {
          "id": "a1ce57e8-1f03-438b-95df-31ae15a43534",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "3d8af6c3-9c4f-4ab3-ba5f-8d6f2421b7ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dcc375a-1e65-4009-9238-4e79c5ca9779",
        "cursor": {
          "ref": "3c1a6471-482c-41ab-9ef2-9346a7def62a",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "5cb2abaa-ef8c-413f-875c-ec330a649964"
        },
        "item": {
          "id": "0dcc375a-1e65-4009-9238-4e79c5ca9779",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "f85aaed6-6b04-45e9-832d-c39bef6e38c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74b1ca87-42e6-489e-8911-d2aa1c837dc1",
        "cursor": {
          "ref": "6e294af7-024b-4301-bec5-6695237d7899",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "41f1d2dc-7565-4b0e-879b-71753644c8b3"
        },
        "item": {
          "id": "74b1ca87-42e6-489e-8911-d2aa1c837dc1",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "0d65ee35-3930-4e9f-8d16-26ea442b303a",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "a708bbfa-5139-4258-90ff-f4b68bd8f410",
        "cursor": {
          "ref": "685168d2-b5af-458b-b340-fafcbdff87a7",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "72973f6e-262f-4273-a9a1-d91a45e8d199"
        },
        "item": {
          "id": "a708bbfa-5139-4258-90ff-f4b68bd8f410",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "0e92b42c-6fb8-433e-8b54-79f31b327b41",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "69dd2152-5e14-4987-82c4-a1a1b76200b5",
        "cursor": {
          "ref": "4761fa28-3f08-4e5a-ae01-c1709ba5a525",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "118983fa-d31e-4798-9d73-c3a55bc1e842"
        },
        "item": {
          "id": "69dd2152-5e14-4987-82c4-a1a1b76200b5",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "13f02aba-65a5-442d-8c31-2aff0ed09858",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "7193774f-5624-4c6e-bd10-b16db6e3ef38",
        "cursor": {
          "ref": "4dd0a17d-bca0-4a82-942e-a7b5b27ba33e",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "5447b123-bac6-409a-9472-91165e133a6d"
        },
        "item": {
          "id": "7193774f-5624-4c6e-bd10-b16db6e3ef38",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "e293af5b-c2b9-4832-a25d-8199fe095db5",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "a676854d-57a3-4207-b618-6b6d58a0397c",
        "cursor": {
          "ref": "4c974cf4-ad0f-485d-9e7d-07709b5739aa",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "b3e58844-1c5a-4e7e-88b9-1298e3072a8d"
        },
        "item": {
          "id": "a676854d-57a3-4207-b618-6b6d58a0397c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c23ec8fc-3e47-41c9-83d2-13de46204543",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "8f665d73-bfe3-4a4d-bc9f-cf7a5ba4e78a",
        "cursor": {
          "ref": "8ed3dcfb-1277-486a-82f8-6830790198e2",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "7b48be4c-50e8-4ea1-8bce-3c0a7a53063f"
        },
        "item": {
          "id": "8f665d73-bfe3-4a4d-bc9f-cf7a5ba4e78a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "5c809547-4e23-433b-8485-4071b027a5a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2d56b9d-bebd-49fb-874b-c873364aff40",
        "cursor": {
          "ref": "f8c75323-55be-43ba-a58b-9b2d9b88892c",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "b45590db-bb8c-47b8-abb3-79bfd196babc"
        },
        "item": {
          "id": "f2d56b9d-bebd-49fb-874b-c873364aff40",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "75ba08ef-147d-4e17-b55b-992e6e10d8db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edc8ce88-fda0-4da1-9568-b2734367a8aa",
        "cursor": {
          "ref": "8f0a6981-a5d6-49da-993a-12a3cab113e8",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "da498c92-6461-4c6e-8e11-60b0fd6808fd"
        },
        "item": {
          "id": "edc8ce88-fda0-4da1-9568-b2734367a8aa",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "78c9e685-9cb7-46e8-a351-1235a030a170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbfe98e3-7954-4421-93b0-9e92a5e381b3",
        "cursor": {
          "ref": "beaa9cfa-7669-49b6-8b00-0026be82845a",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "275c1f25-7c05-4abc-a8b5-441ce6c0ed33"
        },
        "item": {
          "id": "bbfe98e3-7954-4421-93b0-9e92a5e381b3",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "fbee2e03-5072-4487-acb3-2e0b37ae8c96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26da427b-2f91-4794-9ae2-6c0236ca101d",
        "cursor": {
          "ref": "8f1e7611-e0cd-447a-abf8-97087fbe6672",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f84b53ca-6bb0-4220-b14a-1c35c12f5169"
        },
        "item": {
          "id": "26da427b-2f91-4794-9ae2-6c0236ca101d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "da92fab9-9547-496a-8929-8b41a13b12bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb154710-8b89-475e-baaa-b5a1ebaa8ccf",
        "cursor": {
          "ref": "4fabb278-690f-46b9-83a3-63783911cd06",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e1e5e285-8983-48bb-9f2a-c70ad484a73f"
        },
        "item": {
          "id": "bb154710-8b89-475e-baaa-b5a1ebaa8ccf",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a4376582-0eb3-49c6-b073-56594a9d7d7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "692aeec9-0835-4aa4-9741-8ae42a849227",
        "cursor": {
          "ref": "318ed23d-40f5-474f-9a9f-7f1a07928bed",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "18b22ea4-e7a5-4602-a69c-8232f5896055"
        },
        "item": {
          "id": "692aeec9-0835-4aa4-9741-8ae42a849227",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "959630d3-19d7-428f-8a7e-a37dc04aef62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ca6082f-1d70-491e-8566-9403c4a50274",
        "cursor": {
          "ref": "028808f2-d3d2-41c8-b78d-0f9902fe57e4",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "909da8f9-6371-4d43-a0a3-b60d31afe121"
        },
        "item": {
          "id": "1ca6082f-1d70-491e-8566-9403c4a50274",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "bfb1639a-7d68-426d-963a-4a3e6fd64b1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1fb5f9b-562b-4613-8dcc-8bd3d08c4721",
        "cursor": {
          "ref": "2b529836-d361-4e68-9a53-f708de9b3280",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "ef7dacb3-46db-4374-a105-25fabffd4b52"
        },
        "item": {
          "id": "a1fb5f9b-562b-4613-8dcc-8bd3d08c4721",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "6325d6c5-5b74-4cc8-b500-f1d8dca85adf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41f7500c-17f0-4bb5-bd4f-0c57f505090f",
        "cursor": {
          "ref": "8394b723-5536-40f9-8102-7502697aafe9",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "8991df4f-6cf8-45f1-b345-233f628910a1"
        },
        "item": {
          "id": "41f7500c-17f0-4bb5-bd4f-0c57f505090f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "dbfa7459-8e30-42f7-ac33-0e58945076de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21d112e3-7254-49b4-8a00-ac7e9e326758",
        "cursor": {
          "ref": "415a69a9-5b3f-456e-9736-80ea498ba3f5",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "f48f65e0-2621-4d68-8a8e-e0dfcb6759a0"
        },
        "item": {
          "id": "21d112e3-7254-49b4-8a00-ac7e9e326758",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "4840c845-b87c-41ed-af52-43ef445b17b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9495bac3-5ef2-4532-a573-f9769373ff1d",
        "cursor": {
          "ref": "9cec3ce2-b688-40a7-8ff3-710c044d96d1",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "678c887b-94c6-4357-86e0-d76c651c5e50"
        },
        "item": {
          "id": "9495bac3-5ef2-4532-a573-f9769373ff1d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "eaf134b6-43b1-4e52-a017-947de8844327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c8f0bbc-4c9e-475f-b64f-ffe3f6f86ef0",
        "cursor": {
          "ref": "4363fa0e-d266-4d3a-bd98-78e5c130ca51",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "ea8a2955-961c-4737-ad6e-e3013fc6aafa"
        },
        "item": {
          "id": "9c8f0bbc-4c9e-475f-b64f-ffe3f6f86ef0",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "c0d10bde-3084-4459-8385-4f511ecb4c01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f233ee1-5429-4560-b9ef-08cc4035f18f",
        "cursor": {
          "ref": "6ec311fa-1750-43f1-93c7-c093f670ef07",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "2ac5b364-6e57-43a4-8db2-374425d8ed9e"
        },
        "item": {
          "id": "3f233ee1-5429-4560-b9ef-08cc4035f18f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "42fc3c80-1374-4949-959c-035d1e16e7fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b87752fe-a20d-43a7-993d-27d0f74a64b7",
        "cursor": {
          "ref": "c79c843b-0fbf-4694-9468-740c12636058",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "25713755-d5ae-4983-b2ba-4662c0583a28"
        },
        "item": {
          "id": "b87752fe-a20d-43a7-993d-27d0f74a64b7",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "ebb0d849-a96b-4c1e-896b-c683ab48cd74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a263e0d5-fd09-48d6-b889-932969cdd6e7",
        "cursor": {
          "ref": "4608ad0f-097f-45a0-b765-c9e87004bd01",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "4b950572-deef-4f5b-831e-b02859738cab"
        },
        "item": {
          "id": "a263e0d5-fd09-48d6-b889-932969cdd6e7",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "9da3b980-776a-4ebc-8778-fcf9070482fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2b78578-c203-4415-9331-a5146324dc6c",
        "cursor": {
          "ref": "d153bad9-70b2-45d5-aa88-ec3e2264d841",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "cdae1c7d-5950-488d-86d7-3889f230bea7"
        },
        "item": {
          "id": "a2b78578-c203-4415-9331-a5146324dc6c",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "a2e31880-9e37-4660-99f2-1b6a3e473152",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bec28039-d6f2-472e-ba7d-ea9e5f3ffba2",
        "cursor": {
          "ref": "ba1737ca-752b-4a04-bea2-3ac1f44a787b",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "77955fcc-3c0d-43e8-9efe-137904502e0f"
        },
        "item": {
          "id": "bec28039-d6f2-472e-ba7d-ea9e5f3ffba2",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "830d0fc6-4493-4f56-85d2-736d13b4a67d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb3d94f0-bd1d-46f9-b3b0-9335e23744d1",
        "cursor": {
          "ref": "bab4eb28-f405-41cc-b790-6f72136298a2",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "5f392ffe-c332-4383-b091-23c84056984f"
        },
        "item": {
          "id": "cb3d94f0-bd1d-46f9-b3b0-9335e23744d1",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ae725f01-e64c-4458-afe9-b152fff2886c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f88a916c-0baf-41de-b12c-0a9f05799216",
        "cursor": {
          "ref": "4a79e525-7bc8-40e9-940f-8c217fd4987f",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "04392355-3972-43a5-8fdd-2427b989b650"
        },
        "item": {
          "id": "f88a916c-0baf-41de-b12c-0a9f05799216",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "1f857197-033d-4918-a702-6eea6ef19c0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b6bc2d-ca27-4d39-8544-9dac525dafc5",
        "cursor": {
          "ref": "f7654e6e-c9e2-4098-b87f-edfe1998ed5c",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "bdf45eb6-3f3b-43e7-b8eb-a91fcd823dda"
        },
        "item": {
          "id": "c5b6bc2d-ca27-4d39-8544-9dac525dafc5",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "007c63fc-2fa3-4f9a-bd7d-dfeb1ebeebfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e02349e-590e-4534-9d45-d4f6b76f2397",
        "cursor": {
          "ref": "e4ac98cf-8b72-405e-accd-614f9ca0585e",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "cbf23882-f6f8-4010-9e26-12bf29759c02"
        },
        "item": {
          "id": "5e02349e-590e-4534-9d45-d4f6b76f2397",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ba00dbf3-8220-411a-834a-237fc504b540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a481c745-49da-4653-a6f6-f36912a902db",
        "cursor": {
          "ref": "5cd29c80-aae8-4697-889e-42e2b8d86652",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "01d4fdbe-815b-4006-863c-2cdd332f367b"
        },
        "item": {
          "id": "a481c745-49da-4653-a6f6-f36912a902db",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e8d9a775-06ab-4eee-8ce1-1d45a3280b8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba874cd3-968f-421a-b02a-c38cb512e960",
        "cursor": {
          "ref": "9b0a4a02-7d3a-423a-8e0c-ba5d3e887980",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "4406711c-9e9c-46ee-aa0e-9d30adb5c7c1"
        },
        "item": {
          "id": "ba874cd3-968f-421a-b02a-c38cb512e960",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "14cc0f1b-cb70-4c06-acf1-3f802123d390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7660e867-553f-4ef9-bcfc-07017f91b574",
        "cursor": {
          "ref": "f2a7a267-f62b-48ac-b18e-223f3052a124",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "7a0cf0ac-b4d6-4917-9b8c-0040ad8c1434"
        },
        "item": {
          "id": "7660e867-553f-4ef9-bcfc-07017f91b574",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "fa7f0574-96c1-4785-bf43-336eb0105309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "553bee47-99fb-4824-9e9d-ac1c71747a73",
        "cursor": {
          "ref": "a6cd683b-3e78-4254-a08f-3d5804ab7a7f",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "b95c08de-8a94-4e4c-ad37-d9d54ebff6da"
        },
        "item": {
          "id": "553bee47-99fb-4824-9e9d-ac1c71747a73",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "1a736383-1519-413e-b0d4-17b0b79f8ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eba8d3f6-174a-4ae0-9493-c799c1a56db2",
        "cursor": {
          "ref": "880802f9-64fa-4477-a76b-8c3e31379735",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "54da0740-1db6-4bdc-8cd3-a1e051c777cd"
        },
        "item": {
          "id": "eba8d3f6-174a-4ae0-9493-c799c1a56db2",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "ed37c51d-448d-4328-aca4-140a493e66a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d01d91d-b09d-4c35-badd-ff52ef5a3ab2",
        "cursor": {
          "ref": "7cd234d6-0f99-4fb3-acb4-c8235d41a42a",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "27f783b8-244b-4537-8d72-7797df90deb7"
        },
        "item": {
          "id": "4d01d91d-b09d-4c35-badd-ff52ef5a3ab2",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "7ce2b874-89f9-49bf-bf7a-c4de34b5cf17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d914ba2-a06c-4854-8003-48004efc4607",
        "cursor": {
          "ref": "5ffa516e-a94a-48df-89be-feb0b31ff99c",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "c01d35fb-20c9-457c-9bdb-0f60174ca571"
        },
        "item": {
          "id": "7d914ba2-a06c-4854-8003-48004efc4607",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "57e51381-4956-4e4a-a9e1-ee5da5f4568b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b61769a1-b572-4e67-8bd5-de07debe664c",
        "cursor": {
          "ref": "dea05d93-fec4-4dc1-a02b-7efdf2c65a2f",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "57f63780-4ae1-4ce2-9857-aa1591d3b4d1"
        },
        "item": {
          "id": "b61769a1-b572-4e67-8bd5-de07debe664c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "bf5e6980-0c57-473d-bc1c-825e6b41c158",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "887a2fbd-5bd0-4f0a-b98d-d754573b4bae",
        "cursor": {
          "ref": "89cca25b-e7d9-40f6-a046-d3a9a79e3c06",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "dcca97b2-3dad-4fe9-9662-685be0fbd84b"
        },
        "item": {
          "id": "887a2fbd-5bd0-4f0a-b98d-d754573b4bae",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "64889371-e9f5-4d22-b4d1-b9d8b6a07ed3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05d403c7-a0f6-473a-8e37-5040cb0cacf6",
        "cursor": {
          "ref": "5b4e3196-ea9e-4d80-ac95-4d44326d8484",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "73901947-4004-4a28-a5ec-e1772c437c97"
        },
        "item": {
          "id": "05d403c7-a0f6-473a-8e37-5040cb0cacf6",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "a72647e8-5218-4881-b509-296fa1585b8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d6c0235-7765-4abd-aad8-5da6c3deb6d4",
        "cursor": {
          "ref": "48c31a3a-cd9f-4f2f-8f3a-33192f2eb1c0",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "0ed3ed50-1a32-4700-9bb9-5e78fa3f01b7"
        },
        "item": {
          "id": "7d6c0235-7765-4abd-aad8-5da6c3deb6d4",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "7c08279c-ecc0-4596-85b2-2ff4d589f752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be2582db-fc38-4b77-bde9-c779ae999508",
        "cursor": {
          "ref": "db85e6fb-083f-43e4-9ba4-22857bc9c5ad",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "9ffef96b-5bc7-496a-b1b3-30283a87c6e7"
        },
        "item": {
          "id": "be2582db-fc38-4b77-bde9-c779ae999508",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "8022b6fb-f9f1-444f-bc74-edc4b864c926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faa40452-9b9b-435d-b21b-3ab1bbd43f00",
        "cursor": {
          "ref": "84804a87-6323-40ec-9d8c-4786c88a8ecb",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "08d7ec44-3ba5-4efc-8b5b-4d90d88214ff"
        },
        "item": {
          "id": "faa40452-9b9b-435d-b21b-3ab1bbd43f00",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ef4d12bd-2838-4e08-9460-48715cf58b0a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6f8e778-a334-459e-80fd-8478bff52707",
        "cursor": {
          "ref": "753d5a6a-56cd-4fa8-aee1-6b9d732c8674",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "adc90bb0-2383-48eb-917f-a73ff8f90606"
        },
        "item": {
          "id": "a6f8e778-a334-459e-80fd-8478bff52707",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "42151fb4-047f-4056-bc84-f5cf80f4ebd5",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "edd89e5d-2e7b-4206-8161-f894da6044d4",
        "cursor": {
          "ref": "3a6e0181-0504-4730-a43a-c634ee85439d",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "5d1933b9-395c-4fe2-bc63-90a9d47d1d27"
        },
        "item": {
          "id": "edd89e5d-2e7b-4206-8161-f894da6044d4",
          "name": "credentials_verify"
        },
        "response": {
          "id": "5e02ce65-2687-4a43-8c97-1ccc9d0328f9",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ef4c8b7-764c-4d6c-9721-a468a1e3a32f",
        "cursor": {
          "ref": "e057a87c-32a5-43c7-a62b-6068b860b6f8",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "306a8eae-6142-4da9-b6e5-a87f36f4b6c7"
        },
        "item": {
          "id": "2ef4c8b7-764c-4d6c-9721-a468a1e3a32f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "1148dfbd-c5c8-43b0-a667-bab5306b44b1",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dbaa146-9185-43d6-b500-d758d33f5698",
        "cursor": {
          "ref": "ecef8781-5a42-4e8f-b8be-365a307e7882",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "94655333-0268-4e1f-becb-69de93cc5a42"
        },
        "item": {
          "id": "7dbaa146-9185-43d6-b500-d758d33f5698",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "19e5681e-d01e-45b0-a7c3-007fad0eaa1d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dbaa146-9185-43d6-b500-d758d33f5698",
        "cursor": {
          "ref": "ecef8781-5a42-4e8f-b8be-365a307e7882",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "94655333-0268-4e1f-becb-69de93cc5a42"
        },
        "item": {
          "id": "7dbaa146-9185-43d6-b500-d758d33f5698",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "19e5681e-d01e-45b0-a7c3-007fad0eaa1d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73906bba-b465-4f08-872f-413b0d1d75ba",
        "cursor": {
          "ref": "1d71296b-2d22-4157-ba2a-fd2800916e5f",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "26b9fe47-76c5-4318-9eac-2e5fdd7a1590"
        },
        "item": {
          "id": "73906bba-b465-4f08-872f-413b0d1d75ba",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "01adc7d2-45cc-463a-9959-e9da70bf9fcc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ddcd632-be13-4678-b4f3-02746c237e96",
        "cursor": {
          "ref": "fbefb787-d25a-4c73-92f2-1b532a6f5694",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "57848681-7696-4717-aafb-93e61ff84119"
        },
        "item": {
          "id": "7ddcd632-be13-4678-b4f3-02746c237e96",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "52a5fed4-dae2-42f9-85ea-ca3d3446b856",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}