{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "2821a907-05fb-4bde-b3e2-ae28ecb14617",
        "name": "Clear Cache",
        "item": [
          {
            "id": "166e7af3-cee4-41da-a395-c12788a7b597",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6d79d459-676e-46ec-8b37-2140a7f471e7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5dbfc0dd-c869-4553-b679-e30274bb83fe"
                }
              }
            ]
          },
          {
            "id": "81f9eca5-a2bd-4462-84e2-715b646b2fbc",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4bbcdb4a-5c57-4671-8ada-59b306e77845",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9e4dde70-5e5d-4bc1-a64b-1e7ab726c176"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "edbda51e-9f79-452f-a158-83209e26cd49",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "8646f08c-5314-4408-b9df-3058d6adbcad",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3f70f55e-2d61-4e7a-aaac-429b654b3875",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f6d3738-b91d-4edc-933b-cfc3a948a4da",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "61b56918-b0cb-4fdf-a745-dda59208b8dd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e3f85be1-f954-4e3e-87eb-e4bebebea310",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0ecefedd-4244-4d4d-8330-365cc5542103"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "21459ef7-b2de-4a88-827b-1e87298925e5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4477e573-36be-4883-ac82-30515b78a537"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "af91c9e8-ba56-457c-b156-8370dca0aba4",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "bab2cd70-6447-4494-88fd-644f0a83926e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "23d7c9f0-d87d-4c15-acda-55da6e48246e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7d9cf65b-35ad-4827-8c8e-0e6450ada165"
            }
          }
        ]
      },
      {
        "id": "b9bdd158-dcdd-46b8-82b0-49a89df62f30",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4d2752a1-c60f-4d51-ae1d-f79b64d0cd59",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1b4507f6-c4de-4731-84f9-a75025e8d360",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "029b5340-5790-4a02-a237-db7ce094fd87",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e645eb07-9b57-4896-be5a-c08a3a4ed7d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a1bcfb98-f9db-46c6-abf5-0bde8fed1c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81363cfc-7855-4c7b-bb81-2ff5545a0db9",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10b1811e-487d-45d4-90f9-2f1484bfd56c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1b287f89-287a-43fa-99c1-121e86efea56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7f8e15c-c6f2-4a1d-b46c-7fb592ac0af5",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0daf839a-b9d2-47d6-aff6-81ad1261a73f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "71e6e888-27ef-4366-87cf-9bd595bb544c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "35411eb9-161d-467e-9b68-1ebc588ba05f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2cb46a90-1458-40f4-b84a-b417ceaab9c6",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68398ad3-e69e-4703-a520-6161bfc5dd4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7718d99-17aa-4eaa-b173-feb4f150a86c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "172703f9-444b-42d9-a5b8-8063cd51fe72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0540597b-5b00-4340-b21d-543522a7a87d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3958e66-0c57-40e3-a2f0-870850963343",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30669d29-d398-46a5-8620-22ba1311c0ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b8b96de5-9412-472f-9935-51f4d059ea93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fac4f14-1e3a-46cf-a16a-c9f7007ff9e5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "439c56ab-3bc6-4fd0-af24-79e791b04495"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9ff131bb-d11b-454c-b4e1-dafe800f03dc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "85be1728-d42b-4294-858d-5664d0fa9a90",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e60be96e-6e0e-48ed-a6fc-ad83cd0e06c0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "7212969c-7a45-44e2-a341-6ee4d7dc5f60"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "72c4e37e-3be4-40e3-930b-6bd8d4f15bec",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "7b29eec2-16c0-42dc-8763-966d59dee69b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "01adb9c2-c191-456d-ab02-0bcbb19a949c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a611b930-eb76-46ef-b38c-3465d6c1d5d0"
            }
          }
        ]
      },
      {
        "id": "b19ebe40-fe6a-4e58-b568-42a26d7ee6aa",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "500c7a24-c020-43a2-a8d8-89576cc7fc3a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "095b975a-966d-406f-b986-387f49af12e0",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "fe6da4d5-7669-4ee0-8c34-e76ceb53de6a",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "169e400a-f348-4a94-98e9-200b69846d67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fca0e47-fae9-4b63-928c-af2efadde682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d080c81d-3bb8-4d9a-a4d3-699d5e51f66c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "453bb06c-6a5d-4761-8c05-4ebfa15ed7b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "653b0888-fc75-406b-8e2b-49a055387747",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4a9ded9-0cfa-4aae-a0a7-479de92529fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a17582ee-d9e9-4588-8b8c-ccb1fcbec00a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f232b90-4654-4a9f-8de5-be3d6bf037bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c61c696-cafa-415c-a5cb-bc49cec526bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bcc47e2-bb6d-4799-af6b-4a3ad6ac4f33",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1b43d04-a85e-48d0-95f3-debe0838f2dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c620d8d-4798-4271-b8f0-3b5bdacb6fc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c106f518-bbf8-414b-9922-8ff4ba6b7a6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "71850d35-62af-4415-8725-d9baf41ca157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7b49608-17b0-479a-81d8-7acfe5f506c9",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b780c0a-5051-462a-9987-d82bab0c9958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03236f76-ef5f-469e-9e64-9adb7fb78906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "933350b9-396b-41b3-909d-8640084bcfee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c27fc4b9-041f-4458-99a3-e8fbd657fa99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "700e0c99-8131-4210-8b66-04dabb0ed2ea",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14774276-0734-4729-8187-32969a5e7749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b46570f6-5b1f-44e1-bab3-96bc1dc0b893"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5750656b-b12d-4a60-aaa7-62d2b2d3767f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "087a1231-8d1c-468e-ba3f-af6b86d88176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b56132f6-cb6b-47ff-9351-e15b5ce27f23",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "818dd4a1-85f7-4e29-8788-aea701504e5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44b7f4b9-8561-43f2-8e0d-dcdbc03c94eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87d9125c-386f-4b3b-9b87-564cdd1fc783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "11f8f6b1-d1ec-4441-9a07-181d0e739300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e014d1e1-933c-44ee-83cb-758925ce6b0c",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b0d3e5-3016-46ac-af66-d4d4e62eae26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b747a13-fa38-4d8d-a17b-54a46524e944"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "529340f0-4202-45d7-9c74-852244ba2461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3da5109e-0ce7-4557-be0c-dc27738705bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "075674a1-8c49-4f6b-af83-5bcfbeedc59d",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de361d60-2585-49a3-ac48-a4f8b9dc46f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fb79a06-6347-4dcd-826e-ece7dd14eda8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af4e396e-99a6-4322-9aae-e80493345cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "075651e6-764c-4165-8c73-9c2f5762436a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6c24ba1-e9b8-446c-9b61-cbce46d5921e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1301dab9-02b0-4457-9c94-07deed72b38d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bb8e2b5-196c-4e2f-9bce-12a38901fb83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db8e301-8a5a-41cc-9de0-10209642c0a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b7443d4-bc6b-405f-899a-99c425f7c99e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17315253-fa0a-4d3b-a6f9-93d73674b60c",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e147339f-afdd-4412-ac6f-056e76795964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b89a555-342d-4663-90b9-bb1e376fb1e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fda19826-cb41-4ea9-b9d2-cc9d4a98dca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc327871-d3a9-426d-83f1-da1bb1dfec87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "004604b2-0b70-4f2d-81fb-c99b05a52fa8",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ca61bc4-41d9-4208-bdbc-53e206aa0a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "471fe5de-9586-45b5-8ba4-9a8498d20d4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aad4081f-690f-4366-aacb-430b32e92b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0d89598a-d3fc-4539-92d0-9d8c7608b8fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06d79d7f-b673-42b6-8e2a-2661f0e21790",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e03083a-c005-44e1-a0e5-5b17911d0235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b925ddcd-1c7b-4d49-8c3f-479c72a2ff1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fc63201-33e2-497b-ae57-3a2ff1eaafe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "11579002-7327-4af6-a593-0002a2358db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d681628-c7b9-4e14-bf3f-20b3fa328d60",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1c573a1-cb0c-4804-9f7a-2ad10dee6858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a77707d4-58d2-46ac-b65f-8df30e05bcec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22e15537-888a-4aa5-b3bd-41a8d3de723d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5a52923-8758-47aa-a7e8-92df0f858601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e51aa83d-35e8-4c27-a2ba-993a40229ff2",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e19a35fd-9fe6-4aa9-afee-7e507c6e619e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6737c2f9-0994-44d0-b762-e9dcee340ebd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de98d8b1-6dab-4057-942c-54baa09120ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa936d08-a5e0-4f19-ab84-ee30378fcc0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d34e73-9763-419e-8fe6-e9753bfe4ceb",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef4fa3f3-b0f8-4d2b-b11d-d3dac8762b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c71783d1-4739-4af1-ad78-9514a7295fcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410ec655-567c-4ccf-893e-93bf02562b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f504f07-572a-4dea-b33a-c75cf2444634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "155ca858-c243-4efb-8f13-13269844a6f7",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fadda276-836f-4e63-ae60-cfbe584ea479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9867f5dd-b47e-4fe7-a0bd-a6df34ca052d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e25a48a5-b271-49db-81bd-1a7f51ab41a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "17640b86-e17c-4a1a-ab4e-27cf7e705c9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d9095d6-2625-408c-9a1a-1b54e1e6a270",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "036eb5a2-add3-41a2-8e02-fce11d3596be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68669f67-74da-41c5-b576-bf7db94b9e9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a52d106e-501a-4857-bd15-2a9f5a2e531f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2dc8ca8-4d81-4848-bf1d-6318caa8f642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c17916e-fbcc-4ad2-ba82-e1966e042b27",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ade6794-a4ea-4b25-a511-453984a414ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7690b1db-19a9-4666-a0e9-998be88eb585"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19c67d64-29d3-41bb-a949-111e4b151f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ee39332-49b6-4bf6-8bed-96fab59b1480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d65bfc9-9b64-4022-912d-76bf58f6b227",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5056c308-b14f-4189-947d-d87fa6686a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1fef1b8-d7a5-4e57-a18f-f72b79440927"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0438db8-03e1-45d7-85cd-52fd92cc3702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "541a5b33-8565-447c-b74f-8b7829eeffb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77c88cfd-086d-483a-b282-31fd6121db20",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b85f8435-c564-4bc3-99f6-ccfdea89a96c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3185fe5-e674-4ade-b289-cee270e25000"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77e518d2-a275-4bbe-adde-8e992273666f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e324c3bc-c98f-47c2-93c9-0739e8b5ad2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "081e6941-228d-4692-a352-a8daf7b293a3",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34046f7e-7016-4086-bdac-d03531153664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ffc83a3-acad-46a8-80ea-fc7068d41911"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca293103-077c-484f-b025-b58a501e6726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2739af24-37a6-4169-b479-2bf0c82a1b67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2092e358-b67c-4fe4-86ab-a6fd1bfce7a1",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3dda307-7fc0-42f2-8518-a72745167c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6df90e66-cea8-441a-a8ab-a6a07a65724f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bddc5a7-3e12-49f9-ae6c-8bbf735ed369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "793cb501-38a5-41a2-b48a-0d334bc72cc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3642ee1-dd3b-448a-98de-8c651a8a664f",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c4c7000-4b95-4901-86e8-c87ca51e70f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f2111a9-ce95-47b6-b9e7-03ed1c2c351a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e023e30c-d4b5-410a-a934-2711b1bcb836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ab72cf2-3e9b-43fe-9d08-cdf2207b0f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a35ec3-44b9-4a58-a921-8ef38eb62493",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4680212-927f-4fec-98b9-e14abdaac43e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ac668c5-1f3c-49cd-a1eb-90a2995fa8be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0868a79a-0ce9-47c8-b07b-09498c853fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8c8c1523-c4fc-4eaf-9bad-ebfba09277d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c689b8d-211b-4fe3-b5a1-459920557f53",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "581552f5-519a-442f-802d-adbaffbead68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c4a6358-0240-49c0-84c5-ac2a5e6d0035"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a8e0fd-28ce-4004-b752-2e130f6a2465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1d144c68-0906-4f10-b6e6-6ac9d04eb805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf20f84-0af7-4d29-929f-ed6f5d20318e",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6af7e452-9295-4086-b76d-62ef8ac97104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fb4c618-359f-42eb-a284-36b208b08fa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a5a7e8-3709-4467-8726-5a15a67b8991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee8c526f-96f2-454b-82b2-8fa41c179673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "728711a2-3245-457b-88ce-065085db420f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d6a5ef8-0412-4439-b624-fdcb41c15cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "370616e4-23ad-48f9-a8b0-884acf1ab29a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f5d4aee-bf45-4d69-9b22-717ed3f3e25f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "342ff266-cea0-4427-9365-27e6bdcda986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cf582f4-ab85-4d90-accb-f786918dc3cb",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "468c2115-8e8b-4112-aa5b-eb2aea421186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2bcc944-011c-4900-b769-4ef45ca6763b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08bef5e2-2e8c-4371-9a61-4a5b52578efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "73fbf7fe-e904-4625-a49b-aadd58d517f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4978e1bf-ce4c-4b3d-b794-46bbca3da389",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9278a974-682f-459a-b03f-6cc57d6a5df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f45b4a2-aefb-4750-a4ea-f9b71f287f52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8cf6d05-dd1f-4a7f-b360-98b8eed3fef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f4eccd2-32b6-4e81-b866-ea91d61cc9dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1e6662d-ada6-4592-82eb-08d8cc2b74fb",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9259a150-0c27-4171-acef-228e864c7143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7407a6ad-d947-4de1-8a11-16b3e105ace1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2a7e9f5-c9f0-4802-b53e-ae66fb5f3d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a43812a9-843e-49db-b039-970470fb3dbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9604f70-aeaf-4f5d-ad7d-9acacbeb5e26",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98935d11-539f-4ac7-8c8d-da550ae8d5c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1530e11-4f6b-4c55-bae7-761ffe821287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d77824a-618a-4b7f-aa38-2648c5705e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ad19d46-d0b5-49c0-9d8b-1016f6aaf0c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0a9ba74-306d-4640-8c07-4dbf5fa1de5d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddfcfdab-c117-40ff-8316-c84fb29f0af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "191cf776-8ef2-4d0a-b4de-a547f07dea39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "641cb121-fd98-4f8a-9819-bf763a4daa82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2c918fb-7f35-4654-9ae3-b559bd35b650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65009902-c37f-4fa8-9c3a-fa33291afe08",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00735643-92b9-4082-9632-c0fb4c1a79b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f97dc92-938b-46d2-9f9d-3060993b4c46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a8c838-1094-43ca-b292-59474355b569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4157769d-e656-4ffa-8d31-dcff9e5597ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84682a31-ef62-452f-8964-f760c08193f1",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66ff3020-41f2-4d27-bf49-fb3aaeb6c8ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f3e219f-80f8-4856-bec4-347c79a25eb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c3e4baf-2ead-487b-ae42-05413fc05da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d621e46d-3145-467c-8278-e04e866bbf63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8227c4bd-cd7b-435e-b9f7-de9d65c18dab",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8417edd1-1440-48c4-8094-e95a5717bd64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e49b501-ce9a-4e2f-b87f-1a66a62a246d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d52db73f-757d-4235-a768-f6398cc8fb98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1f0601f-28a8-4c82-b069-42cdf44b357a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e4f4514-6dd3-4f62-b2f9-ff4b1d155ca1",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c7319ea-ee96-417a-94d7-bc493694f201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53052289-d446-49b5-b7ca-84826c17a1a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da039ce5-2db2-48c5-bafb-5463051e97d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb550d4c-137a-4b90-81c3-b655254419c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc385abf-658f-4b64-90a6-6fd9ce790d58",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92791d8a-5c39-4241-8b9e-fe1232b366b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81fe02a4-6e10-4b37-943e-0992f4373641"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b3d3aea-e70c-4cf2-8c85-15175907a8c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "87c6de3e-3234-4de2-89e5-831283c08046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "899b054d-5663-411a-bdf2-70fd8f7e6c96",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b33cbf-37eb-46c1-b9f2-8efa3df1be93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cba5e217-8919-45f8-af47-26d9b28f62dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85bb6d11-4bc7-49b7-b0ac-5726f8c12caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0c4cb715-28d2-4a8c-b806-77a2a409df9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "145f656e-1e2e-45d3-ad93-c7f5b2d13e0a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d10d0fb0-2143-4ee6-9b7a-30d86c227348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cc36bc2-3232-442e-9c67-2800fb80f05f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af13694-3010-4b82-bd06-d161daccb96a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f0e4150-f141-4268-ab37-cd62be050595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8151651c-549d-4307-a9d0-ac05a0536eb8",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7ae9f90-44a3-4214-bebd-d1d0a48462cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89ae0894-d5f0-4537-9981-83ece16bf61a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0848d1c-19ea-4ffe-9cdd-af1be52f55f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf9e7916-6013-452d-89cb-cb91e0750227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9095428d-bf36-468e-a006-2929d8eb9ba4",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8be7c10-e4cc-4ff0-9914-8f552136cd6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b6bebeb-8797-44cf-ac79-a816114e234f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0343270-8247-4a5e-97d8-efae30e3eedb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf0d88a8-599e-494c-909e-850fa3a8f89a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ccd413d-3e00-4014-98c9-2a4eec3a7857",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0bec3ab-fb26-4f3f-9b59-34cb52f9cb8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b0ae4f5-0ed1-441d-ae45-98a6090ea2e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb03c74f-f6d8-4120-83d9-4b7f8e74705d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8491caa-1d8c-4a2d-837c-329f4af0be07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f3be2f-b02c-4443-b7ea-215ac160d55d",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eca932cb-0278-4f71-8c7b-62dba2cdc397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2330162-f39a-4d85-a0bb-0c2d49472826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1293c558-c5ad-4280-a99a-0b36dccb2bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "16b43bd5-6370-452e-8568-4ad6113b99d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26e0e3e1-0c8e-4943-b7e2-ae2961847fce",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf22a33c-032e-4588-89e3-4b9ad6ad06b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01f1d24f-6232-497f-adfa-4b61cccaf77c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c88feeee-da18-4e2c-a31c-06b04324ee33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "9faac5f3-9493-48d2-a199-685d16137070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a17758b-f297-4018-a610-ac0a9a1b9ca5",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a55c3418-ce08-46a8-b52a-271cc4ebc2a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17d216cb-e6f2-43c6-b637-68b98b5a581c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada8c583-2fb2-4c81-ba17-1b10e5555148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5dff5ba0-1f90-4be4-88a0-a14287804708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b19a8655-60e2-435b-9e15-98136e0e25fb",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "086c75ac-af26-4ede-ab7c-b39a0cfc1c8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f939269-95fc-4198-9383-9b818c28f962"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be87ccd-98f0-4ee4-b01d-a2929498fee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6443ee6-6648-4688-9182-488086bc2be0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c2efdc-658a-47ff-8529-422e202e397f",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db25d037-ae47-42d4-8d7f-788c382d4d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fc25aec-8abb-411e-a87e-8a4b95d9679e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21011fe0-eb30-4fb4-bfc8-230f23453735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdfc8598-6516-4ac4-a189-0b3e9c073c2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c09e2457-ff9a-4117-a426-9f708020fdf0",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc07530e-96b4-4e73-8cca-dbfaff3f0f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16fa8681-05f1-4d62-b508-e08cb81d061c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb68c54-ff04-4cc1-8309-0f73d19e0df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "db4ff8ef-9312-4963-a487-d86d00955048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa75785-1d40-41aa-b0fd-8e3949ac4e9a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9676933c-3c74-41f1-b514-18e99e2a54fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8536ad5c-6cc3-436a-b318-89c95285d06c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74d8fdda-22d0-4cef-b3f2-684f151fba63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "395aa54d-9f54-41c5-b7f3-3055c9eee3e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8219f530-9cd0-4d24-894e-231f34c31bdf",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "417ee375-9951-4631-b048-56f9cc5a81b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6003e6a3-bcb0-44f8-8a21-a05cbecda803"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89817f18-2da5-48f4-bd80-7ec92c1ccfda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "35fffd13-52f1-405e-862d-e2a6e4ec24ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "275c4df4-1b44-413a-b1cb-abf439bccae7",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0e6b021-5cc5-434c-ab9c-950313624b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b15edc04-2b39-4c93-b05a-26b8477a7df7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0b14468-b375-4bf8-ad8e-445ca299091b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb1b3320-a40d-4356-a48c-f026b1b54d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aad5f95-1d0c-4a4d-898c-0c4f49a9c832",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be95c312-604f-4e1a-805b-a439d30f4a01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dc46fe5-da4e-45f5-8756-83a581b34f80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da18ba67-ca77-493a-8bed-ed12db890a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ca2b1009-7259-4032-8f6f-53236bc49a14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c3d3dab-9254-43a5-877e-d8ec64f7eb6b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34ea3688-87db-49e4-8189-156103823641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a60d656b-f24f-4039-98d4-9f32393d8859"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb0605d-efcd-4fc4-a5db-b4396ace4422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab3d2114-6901-46c6-a604-30a524904bfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94c95aa5-ffa6-4987-8471-7d238da8a4d4",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2803129a-20c4-4099-8b4f-801ba11656ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5342e866-064a-4488-8f06-e6d4ec4b3de7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e8d05ac-a170-4e4c-b470-d24767a7f1dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c0f68fe-e328-4a32-8f35-5c5b8b6d970c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7896c8e-820a-4a13-a454-e6febcf74788",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5be287cb-7550-436b-923c-de15c0e25bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffb4410f-fd49-4928-992a-be18bbe13f14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cc6f635-d2c3-47cb-99ef-15e3d1391672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0661e317-0bdd-4272-be7b-af76f4cd8f56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41a925e-ac3c-4cde-9008-2606970a6aab",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "006e3fbe-9cdf-4dfe-aa13-a2f962757734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b70bf2e-1e69-4d5b-bb25-1d86a3511477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7369481d-45fc-4043-8409-d83eded5ed60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "09a80346-3fb0-46c3-a831-507ef69a44e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2ef77bd-3eca-4140-8e35-f86e54a60c31",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f690f65-09ec-424d-b128-fc827f19bb35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a356a27a-3ca0-40df-a113-3e08487a2084"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a3af8ba-b710-43c0-b1fa-14a6556d5ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "90aea2ff-1c9a-4697-9fdc-f1f26bfd8eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1397d704-5b09-4a02-805b-82985cb5e254",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "181c9254-dca0-468a-a276-26a22e0da53f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0729e88d-e40a-440a-bf17-df43d0ab7d59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88aaf811-6707-4de1-95b6-27fa3d546c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "3775659b-d4b4-41eb-add7-77ca2180d846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ff1dad1-a774-444d-97a0-fb2110200f15",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "500e9109-d8b1-46bc-9765-8369d4874083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "130d5e57-b528-424d-b9f1-317f23cd2664"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f528fe22-241b-49cc-b180-d2ce157f8d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a095fb4-d553-4877-8ef4-5d6b21bea6e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e7005dd-02d7-4709-adbf-d41805aeaae6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7f7c56-acf8-435d-be11-d4445b8bda6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d1999db-070d-4e86-9f30-2ecc6e28377d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eb0ee7b-98da-4bbb-a3bf-edd1b3ec8a31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee58b887-1217-4ce8-9ef8-c8d161fd091c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0754b4e-4298-4b30-bb07-f00c4858ff94",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e49a1b-16b7-4d4c-a2b1-6a73e0d3fa09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99c44b6e-9f2e-415f-9294-a85d8a830beb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a69904c-0ecd-4aac-a645-3534fc7fc63e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "85c86f85-d1a8-40e8-ab72-14a460e7f0d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b005269-e866-4ebf-980b-dca0c4ae7592",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f68309e-3562-4cfd-b53a-33c19caf4952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e3ef2b5-2f5f-414e-b798-117967715a36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c29e195-2bbd-4455-aa3d-acbaf297e328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "48a76e15-c7a5-4e57-aa71-3d55a0ca1490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "325a2b70-9155-429c-84de-49f4dde2337e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a0040b0-8338-40f1-b4e8-8a17408cbe4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d4444bd-a4f5-4f6c-a704-cf4ce5f0e9ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42ea945f-69aa-4d99-b0f0-a3ab28d67a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f699a2a-0825-4827-a5ca-b11e1a7a5394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb8f3c1b-3b4f-421b-9234-1bef7c0987c6",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f759630-6369-4e53-8d40-33f668869460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc3c2972-c6be-435e-8053-963f28a3797c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5942d45c-9222-47a1-a027-073c9dbd63cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "17f65b21-ef87-4bbe-b606-c6a27a36065d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "300c5cfe-9c7d-4b1d-84cd-4bc2e9e2aef2",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46279f49-f043-467f-9077-711fd877a062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23653993-022f-47a5-a506-e3fe3fc87083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e553b577-41f6-4f5e-8c5a-461ea1e57c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9001e31-d047-49c0-9217-3cc4f276e6fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5fe0513-12ca-4a02-b37f-f86feca29ad9",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21839e4d-b311-439e-b05d-4df8cf7931b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0956b64e-39ff-4d71-a168-9e81a468010f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da6e517-5b3a-4547-88b0-15df5487138c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "29bec2c1-0a64-4590-8d63-4b28c5dcd38d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "595141fd-c575-4c34-a808-84e8a16a8e52",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a48d9ee-b88b-4db4-994c-b30fd138ba94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e9e4375-dc77-465d-8164-0dce31ec8450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96cd75eb-6711-45aa-8f85-812e0a4eb6a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "93457237-e8a9-4d5d-8495-10904ef8c4e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "854d5c72-2498-41ae-8119-94b2691ccc5c",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06077119-9955-430c-995e-961acce8667d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "186bba3d-8fa9-4b2f-bf8e-372e969ff036"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d29f93c-d6e6-4744-9d5f-40b5d5f605ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8107e29a-d526-4d84-8630-6bff2d95bc1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1937f47-43d8-49b5-8e56-653b671914b4",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "331f3a4f-1d87-4c70-a27f-b32915923175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41530c0f-aa05-4d14-a2c0-f28bde098548"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffed9107-93c9-475c-b598-23747adbc0a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4869d309-c590-4bf5-90a7-069d47d25423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa8115c0-a66b-4313-b04a-da9ca0e1097b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31befa72-6072-4870-b371-ca581e4f7a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98c69c87-0b17-4485-a804-603ff57dca09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5d1715d-20a3-47ae-bfd8-e2aa944e35de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfc42b5d-f9a2-49ad-8160-92a1df3df674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cc0469b-ba51-41e8-9fff-0a8f3f88894c",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ca96e7-6d62-4e64-a4d3-41e635d8364f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8323a346-75a1-418b-a1eb-a4dec7c4f744"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac8bd44c-2963-4836-afe1-f299edf4d926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "99cd1fa7-a06c-4e88-9630-d567bfc37f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a75d7c64-f924-4fa2-8904-87fdc4ea707c",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe0a012-b325-42b6-8c7d-5c589d1b9f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd8db884-34dd-4a28-ac84-347db3c8b1e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b57c49d-6c1b-4fb9-a5e5-8a1b12c9f48b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac8903c3-3011-48f3-95c6-ac95a2b09229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb94c4e-93f8-4726-802f-1ac08bccda31",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4e7378e-1849-4ffa-86b6-db807d260ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1395d6d4-64cc-4663-92aa-9766d6fecad8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "636e3ca5-ac2b-42a3-91c7-62fbf8d1f91f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e4d4d29-3b4a-49d6-bd29-79ec850e3925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d6394c-46b1-451f-9f57-3f68124ada89",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5093f097-5dfe-4a26-89dc-00c323d48f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eee0c99-a5a7-4315-a326-751c0d7ef763"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc3b86aa-1840-4967-9292-df6b24ca0b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fdf75225-1d85-4853-938a-c6a530c1d715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08160455-cbb2-4dcc-b808-89d6be1264a1",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f18a87b3-b30e-493e-9e9d-90ee2c62d614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e87f17d4-cba7-4557-8039-1bab4071ce0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "157c453b-a9f8-49b0-84b5-701a2cc46b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a29309dc-cdad-4860-b9f9-ee39a4b3d24e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0abdb958-9006-42d7-8a35-5725dff491cd",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b6a9e17-eb72-4149-9cdd-ec59595d2cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62af8c21-75c6-4701-a600-e208fb4f41a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0b56e63-9d39-434a-b216-fd2bff26eaf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "12da4a7d-94b8-4d96-8319-d30561afa5af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b1e507-1cbd-46f1-a464-389e72ab3c12",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b57539-bafc-4fa6-80d5-94b0768a6e67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79a11255-1bd3-4f1d-9fad-38b550b30cdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83be7917-d63c-499f-a66b-724102a305fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccd5edcd-2b28-49c1-9fe9-c83a003f4102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f948ca38-8c34-4df4-a508-f8bb22492744",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20603768-8a7a-43ad-9895-67ec4de18ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0da1341e-807c-4fd5-811b-9380f37e1b45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eb4f44f-29d5-430b-a95b-d145d6a03df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e87fece-8b9a-4497-8fcd-84bc62d6910d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "575369ab-07f3-412f-85a1-a577ac092676",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df8c7500-04b0-4402-bbb1-6bdd7cd4788c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d35e8db-201d-4b29-b71a-b0f6bb7ec938"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22f2741c-250e-462b-bb52-581328005c8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd323fde-7f4c-4e1b-9acc-c036de984bd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9735574f-162a-4efe-b970-23850e84a77d",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad808d9f-d0e8-4fc5-8129-678d98476411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a3ba183-13c2-4ec5-983b-57bd5b987bac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d120d250-c529-4e55-adad-69be460ac15b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6334620-d97b-4cc8-9bc0-52ef7f768742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "febe00f0-0e90-4822-8b07-3a3b066e0d04",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eee3f608-3e6b-430c-8109-2a5c9811108e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a964423-ef76-40dd-8f82-6c634e5b94ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd13c781-42f3-4fb7-b765-3ce462622c1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2307c7d1-45f8-4dff-8b0f-dc06545a7faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "285e8030-4e97-487a-a673-4f0895566e49",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98a354c3-28a3-4271-953a-d4905500a0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71d93c54-c01d-4ab4-858d-feeb8c759960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f9f3819-1af0-4c13-9df8-468d91836fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5a8cba6b-e26c-44db-993a-998d51ef3d79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25a3edd0-1e4b-401e-96de-0789eeb1dba8",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "622816d7-bbd8-4a04-95ce-534a66fd02d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e65e1517-fd68-4445-8262-6a3e6e23bcbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a469526-123f-43c0-a6e6-8ab465cd1a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "90582626-9773-4fa1-b2ec-21112355739d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b883505-cbcc-46e0-a98e-6c34668590a7",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4a84e3d-ecb1-4a6d-a06c-4ef551c4f622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11e5fb1c-f894-48fa-adcf-9f04504cfaa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5690d27c-22fb-4536-8646-ccc2c6407e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "260a94e5-d539-4f2b-99ea-d8b5a9c0ed3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66b06b9e-a2b5-4bb9-a233-7a8b83fdfdc9",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55b01ddf-0836-461b-b3b0-8153840a50fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0a2d0d6-27cf-45eb-bbe4-832390be89dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2477925-b224-4364-a2f3-570629635fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d347eed-6661-4b05-9313-8b97e67601a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b90913b1-8d98-4fda-b303-c45f8a29b2bc",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e15605-9ccf-4783-9f1c-693223f5cc71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1e80b20-320f-4ed6-a93e-a605384f51ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f464ca1-7c86-4227-b167-970632b14ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd095238-4d6a-44f1-ae81-ae6284f20464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ff6d040-b765-45c3-9cc6-7c1c8805b89f",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd8d54e6-84e1-405c-9e9c-53fca82ca97d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87ab4810-ca80-4d37-8048-8985db4228be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d79c5df4-7a61-4aa6-822c-0ba0d068c60c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4413c756-ab4c-4352-a1a3-4b3dc2f10dfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8909d9c-bb98-40cb-82dd-57dcb2d433bb",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eae8c9f-6d19-4ad4-b5f9-8f757897c595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b181156-7d61-403d-8340-08eb0db6980b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c00d908b-7304-424e-9e68-345649e5aaa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "908a91e1-32fb-4f16-90ad-861e9d46a0b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6f5283-f95c-457e-9847-a081884ed6c8",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd3b979-1324-402a-9876-d3513976a51e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "983cc7e0-44cb-4e5b-921c-1c06d5a490aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fb5b250-f210-467c-8801-8356a911ef31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "844fb319-7db0-47bd-878e-425c314273ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "671b194c-aaa8-424f-a81a-2bbf2d225bb0",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94700ded-d2ea-4753-b4c1-cf391854890d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60abea19-baf9-480b-9e7b-91441ebec0df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0cd62b7-0a74-40fe-8221-09e82d82b709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b7ab0c8-7f52-441b-a05c-f728d15c3b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98d165e1-7ce2-4ea9-92d7-a64a85980ac6",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "485b471a-a93b-4677-af80-ed37360f9f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ed2dcb0-235c-4370-a97d-b374358fcd5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1556fe37-8b0a-4b3b-be60-10207c438b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "689e8862-a2f9-430e-b401-7255c61bd608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c68fcd32-f12e-487c-8da6-8085c49e1e60",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ad2e06e-791f-4c8d-bc33-6908888e3c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7284756-1fe7-4871-b025-1718ee8181f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf153c81-c5cf-4b0a-8291-73d65ed6cab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "17da1c5d-e5b9-45a2-b9fe-a5f3140d27eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "153a7a03-73fb-4839-a1ca-4c18e077935b",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ace3c5b-cc03-4c6f-8054-03dfc0770045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02354b35-72e3-4da2-8ccd-4b2db06fa8fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fada52c-08a6-4c79-b8d7-e5112cd7b3c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3fb7f262-e0bd-4930-b305-8993f73a143b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e2f4b66-58b0-4b37-9ed6-d68f5f85ab5f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec3b3af-e5fa-41cf-9a51-56a92a19062e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "fc96743b-7b7f-4600-abc9-2dc6ecbe85a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c297447b-b7a0-49b6-b283-25f9aa39d263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "49a8d2bb-f1a2-4fa3-a8f0-32a15a999ca3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a45ea340-409e-4f85-8ac1-014433b0c183",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e25093b7-7829-4168-b649-6423bd427cfd",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a8647c-71a9-41a4-b558-8586eeeee228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff72fe0d-660e-478a-b912-1831a65209e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e473b12-992b-44e0-9649-e5b0221f3b25",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "1145f7ae-2e01-434f-975a-502890e6c4bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90d20a2f-5e56-4f0a-9273-bc79f6a95c90",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b694056-4cfc-4d75-906b-d3b3db7a5e1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b4014be2-2b2f-42ec-add1-479116c7bd2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be295393-2e85-4f8f-a329-00f6edeedecc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "7e27c028-5d80-472b-91c4-21c622179af3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e8d18ea7-4954-4a22-8212-2e087cb602ba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fbd6f801-5584-45c6-aef8-c7d32776e066"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fc9ad943-9e68-4983-8385-df5a45cf20da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f6da376-435d-4ef4-9bd2-59dce3b082b3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "aff568d0-797e-4d42-9e00-cb14839a590a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "39a52525-f2f1-4dc1-a04b-33ef57fb6793"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "10d556bf-8c39-4269-80e2-8a543fca5f2d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c3c6b97b-e47c-44e4-aefd-71a3d9f4ce1e"
                }
              }
            ]
          },
          {
            "id": "cdc2e562-0228-44ca-81d4-adb5d95951f9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "03a177cd-5efe-4753-b264-7c0a2aa5d4bc",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb66b5b8-9fef-4714-a3f9-7e5ff7962eeb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f6e96d28-2cf5-4db9-868d-89bd46d8646d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa387058-544a-428e-871c-58f0618fa44d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "36b03921-2b22-4e00-b6bb-adb786d7cc40"
                    }
                  }
                ]
              },
              {
                "id": "6a53a1e2-997e-4c0c-986d-f1f9573bd211",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "caeea4ec-3755-4e95-8ce9-fdf62b6861a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5daeb36c-3466-4ad6-9d3b-fc08c7a8bec5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3203a80d-b847-4307-b2a7-456c7728f288",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "50a029f2-d071-4d74-94f8-9f373bc62444"
                    }
                  }
                ]
              },
              {
                "id": "9098dc94-ee13-432b-b82c-5dac03bb116b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a01191ad-3936-474f-be74-4dc21c23a79e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9ec43028-be0a-4309-9ae4-a888b11e08bd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dfcbf45a-5f01-49b3-a457-569e93515364",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "e8409dbc-3a8c-4fac-928a-6fac1bdcab10"
                    }
                  }
                ]
              },
              {
                "id": "bb9a9212-656a-42c5-afc3-f3183043a50a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bcb2cc5f-172e-48e6-b57f-11cea7255dbf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3f033ff9-c806-4247-9c61-88fab5addef5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d7f2184f-42fe-4b02-afdd-962f10c7576a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "44fa4254-1205-4cd6-82a6-4fe2c407854f"
                    }
                  }
                ]
              },
              {
                "id": "f727371e-5a8a-45db-8764-6ad63e5180f7",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fc351518-cbee-4729-ade9-a98cae7493dc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "04728a2d-aaf8-49b1-8c48-a7cc6709b553"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45735bb1-1267-45d0-8aa4-7c113daa2810",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "80de3e0c-ecd3-448b-a528-a06d1a2c90c9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2472bb70-3c05-42ab-8f8e-ec97c3bca9f8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "567b0034-82b8-4c3f-8b21-4db73cb3cd27"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b8d60e3a-c504-400f-8105-990a31638720",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "99ff550d-ec10-4f3d-b0e8-9a8faaf75673"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e0c2d782-00e1-4503-8092-df37652f92f0",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "5ad3baad-7cd2-4910-9e60-a55862bab3b0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "27e586c7-5204-42ca-b04f-6e80e29f51a6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "29fcd48b-dbcc-4701-a4a9-f9fd55350fdb"
            }
          }
        ]
      },
      {
        "id": "74a96025-5dff-4f32-8ab3-1b2332117f8c",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "69214870-7a22-4b60-86d7-7c9cab56e5c3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6f9b2e71-acf8-41cc-b13d-4751610aa79d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9bcb39f9-05a1-4da2-b567-b72aaf7b67e3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd345c0-5e7d-4495-8eb8-59f5238fbe1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3609fcb9-d29b-4c52-9562-e785c5146d40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "575c6845-f48f-46f4-bad3-7b2c819d4845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a75e0052-d70a-42de-9373-48bcae07fc47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4388dc55-4615-4963-9990-5ac50acf2d3b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc7602e-add7-473c-857e-965d91807208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2fbf9b0-22e1-4b40-8bdf-c8585e5151b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fd1be18-a66d-449e-bac7-544a68185da3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a505b7e5-b92e-4cc9-aef3-95ab5e4bb433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "531b685d-e3d2-44f3-8b2a-b10c61a81254",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b35eb9c-d17e-4271-85d2-4d5d9a5d5506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "828df118-4132-4908-ab0a-e97f493ccf0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee90e5f3-4d83-41b3-b3a6-d39c8487ab94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "11716aa7-7412-4b4c-a7c9-8b1bf9f6a978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "151d5854-987b-4b46-a7cf-72f2b56ebdf1",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f473f58f-6747-4c5b-ad9b-5258cd97eacb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c3e07c6-646f-4770-9a6c-4646d837010e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28e98d26-27b8-4f1f-a66d-43e6cde6b12f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e70027e0-f2f3-47a8-a9a0-7b87e155f463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd080e14-cf52-47fb-a2e7-26f2185fbb9e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ae88fb-3573-44fc-9640-ecab498518f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0fa4f84-4e5a-492c-8b38-73b3ef261846"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6297dae6-c231-4b91-9889-2f662f6af3ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "20d4dcc4-bc1f-4f1c-b522-43b4a3e47265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3a72d7d-e6f3-4930-bd64-55b3e4086a13",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff5c66a6-ae5f-4441-8391-0a1f0b9d1db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e28e71d-53a9-4eee-85f4-2a7fdde89d24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ca80bbe-1c7c-4da1-93a1-6086401a8d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3594d3b2-68a2-48f4-8f9d-e1ec0d1e1f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb8f8dc7-c1db-4370-94c6-7b9bba2a5d00",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebd4be91-1dc0-49b8-955c-0061be6951d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b32354d-0ae3-473f-8136-e72106c53ced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f191555a-4a32-41c4-8714-0571886ff2d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdcae0c0-1562-49b9-aed2-9c6affa1af2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ced1fcab-b242-4254-a0e1-789b2e17c2ee",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bc23109-c690-40f7-8584-0676b895e023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63d11614-8f59-47cb-ac53-d9cb718bee73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aa96a43-fb03-4cff-863d-db188164ba75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "11320a05-6959-4f43-b7a3-e41673bc9615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82384321-b4da-4118-8d1e-ee32fb0f3e30",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ca05c3-ab87-4acf-8d8e-ac2bc8efe0ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98122f48-978d-4fdc-a763-65231c77a0a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa07cdb-f6fb-4fcb-883a-491d1ba74667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4783d336-85ec-4ce1-a2fa-5e8f6d66866f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da9a4d8-8174-427a-88ea-84b404f7192e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cba118e7-6aa3-4163-9e8c-bf34e1cd773a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22c4adeb-49b5-4149-9ad4-0448f1b1d55b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "653a8fb4-2b07-42c7-9154-379d218a0027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae37be09-b673-490a-adc8-109046c58d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b1e094-6122-4196-a7eb-d7e8f398efd0",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bbd706a-18d1-4532-87c3-98f76398c9e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "673e83e7-12ff-4046-9746-1c03ec17e334"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d96f1e29-3c9d-4c91-9758-25889735d000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e56894a9-1904-4b98-b7a5-b0297e7fc94e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a7bef43-59eb-440d-96d6-e4b8a40a873a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecae5fa0-17c6-41ee-b24d-0b3ed484a161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05724e21-eff2-41e3-b598-74f8b7ea0286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2174c28-e242-44d6-95be-7e12ce7b6806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "deebf4a2-d663-43d4-8964-ae3c8be8d196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bf57193-c964-4b51-ae26-6dfd7b46f622",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d04a250-871f-4b7d-9259-def3568ab4d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2585004d-7c98-48f1-93f8-142cbb469667"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfe80c98-e170-496d-9710-421f3f02e6e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f65494a9-57c4-4d78-96ee-131ec399aa2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90ee0f0b-4fee-49e0-bbeb-daff7cad3aff",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c6bae2-12e2-40ae-abc5-e5ed388a25ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6744533-776c-4a3b-a135-aec5ded5ada8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b73ab305-7bf0-43c8-b42e-fe23840d70b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d1a74c9-1c2e-4ccd-ae3a-7fcd748ba499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a81faa9-1836-43dc-a9be-c726478153f3",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e206807-74c0-4950-a1d3-c54ed04be908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de38ae05-5b9a-47d5-8fa6-c25c08802ad1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d019e71-71f5-4e47-96ad-c3b2c0fe95c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "21442743-e04c-4981-9ac2-14e97ded4e0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f48383-218b-4f64-8cb1-f40b93890e1e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64f233a8-a399-42c2-bcb5-eef20a69049a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bc93c7b-1ef4-49e5-9972-5a0bc94524a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54448410-90a1-442c-a042-3669e040b279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "40e475b9-ae1b-4f81-93f3-38bd2f8126bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9752fe1d-115c-4066-a1b8-dd78c35513f1",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d27d11-99d2-4867-b8cf-f386c74b7c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28cbfed3-101a-4296-a1a8-b9cdaa26f169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e35c86fc-7f32-4e89-ad52-7063d424199d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "98aba814-a347-45c0-996b-febd76dfb75b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99e3c7d6-eddb-4618-bb9a-4a15e7918230",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c89924-ce60-4cf0-8ac4-929732466869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0427bc5-0b1c-4d37-b012-fd4beffac90b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b45dfa-b4a2-4741-a3cf-d3de71c58c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3f703bd-9a93-4286-aab5-e5fc240b856e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e866f3f1-241b-44ab-93bb-e8aaa1d759dc",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06891676-4f58-436a-b2d7-c4ce5a9b78fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9feed85-4eed-432a-aa72-990ed5856fc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "767e5cbc-8b63-4058-896b-a011baa7399e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee92f870-7186-44e1-879e-1cc7bb8ef35a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec577bba-f086-49d3-a68e-52ed2a9f767e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b29d8fa-38a8-4c39-95eb-e0b7179852d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51f5a274-f090-4c81-93d9-d8175fb65203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d6fcf09-ac05-4702-ab63-15d5dffa1cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fdd1529-8bc9-4422-b409-33dc0b6294d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79f87035-c24f-471a-92fe-8dddb21d01bb",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e4aa933-db41-4b16-bddf-8794946aec15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8905be7c-1e45-425e-97d7-a835a72465e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e4739d2-af40-415e-a043-44842e06e34d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f1dba0a-188b-437c-8eae-b1f682858126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1480b6e0-64dd-4255-af4a-9592d291ba5d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e36e48a-d161-4c67-ad2d-d60c0b132026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82b70dc1-8808-401e-b831-8667caf8ed11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0cd16d1-3c96-40de-b5af-d5ef36aa7aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d9f2994-8c97-48aa-8e54-652ffeca0ef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "492f2b81-359b-4b83-bd71-a80905c864bf",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe783de-2f6d-4723-ba9b-517910a4f524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a011135d-4006-43b9-b451-9c7bd4f9f165"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90952a50-e0b5-48da-b3fd-ead25527d9f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbecb1c8-cfa4-4e60-bf6b-56606db45353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15524623-ba8f-4272-b432-3b2afe2da20c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c10adcf-e3bd-4210-a044-4c8f9afb7e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c7a8eba-0e5f-4efd-ad55-61d6db481af8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8765c968-0d39-482f-820c-64ec97bac6c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e26ba462-f56e-40c9-81fb-f6e52c03ca88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f7a92f-c330-4926-a3f7-bad5639dfff8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae0da4d-2b46-48c9-ad81-a999f1b36940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc8ec559-dc25-4bad-9750-02d85b20c03b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "809122af-cca5-4c9a-a1ae-5d3db03f7bc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38cd64ca-836e-40be-b267-4b5aa04d0009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "827d3bf4-8398-422a-84bf-f433bddd9885",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae96cd20-ab99-4006-9922-c5d4d3b9eabf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c26465d4-9b95-49ab-bbad-8eb693ae08ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1400ee4c-ab19-4189-9a1e-0009d78cce12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "91f99e3d-e668-4dec-b088-e019f53622db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "427fb5f5-2d98-4803-af30-1fa8b68a0235",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86e4095a-8e9f-4691-978f-31731b7588bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33b6826f-1195-4bbd-91da-42ca0b3d3f1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e276efe-d29e-45dd-b0f7-cd57264c6955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37776112-d971-4197-a2d8-068438bb81ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e84f675-4146-4187-9986-04b235825b24",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ee4967-55e9-4d03-891e-fdc5ee0d1d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10847866-feaf-45af-a659-f3e9e79aa583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "723bb8e3-f57f-4ab9-a95c-eae3def3c951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37c8a86e-3375-4edd-b899-2dfb354fd853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60786321-bb94-4de5-ad73-e6a50fd6aa4a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e6fe7c3-ab4c-488b-99da-5c9f5f2a09ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80ff4ea9-bdf6-4428-a433-904ed08f0d0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74f829e-859d-43c7-838d-df8205e5816f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1152e79c-6e3c-481c-8343-722d198da813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dd97277-479e-4032-b7ab-8734bacd41ed",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd649ce9-af4e-4337-a75c-0b14b811f5e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d89b0e3-5b90-4703-ae53-db6f433a745e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0137de86-f601-4b18-a36f-6a1059acaa9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3a59abb-0df0-4a77-94f9-1f422c45a9eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa5f98a-cbdd-4b6e-95d6-1257cfa63007",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acb6579d-76ce-4a50-b49b-3ea8f0c85b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51135ccb-c9b6-4c6a-848c-d2f65471f899"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6dbabb9-af91-4316-b426-622b67060819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ece01778-0f33-4a12-b3e4-136e13ec32c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "559acc23-c3cf-4216-b436-482cdacf9223",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a822000-512c-43d9-a179-c15ab6e610e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "260abbbc-f595-41d6-83de-4fa9a879db14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "926b089a-4eda-4779-a6c9-1eafc52ee04b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2282b0e-ca70-4dd9-867a-06d5afa8688a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e98d13eb-49b7-44af-bad0-9752ac5f27f3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "834092bd-aa9e-47db-ba24-6947ef8863c3",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca05531d-f182-411f-a294-044641793072",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11fbbb37-6677-4deb-811e-a10831bbdceb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65892641-44b5-4993-98ec-9f8a77071a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "338ea7d5-0ef3-42bb-8eac-166520cc2d1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a9d5cc4-ddd1-40d8-be97-4028e042be1a",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ea7341-7936-4592-bb90-b60e0d54358c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "33d98802-37dc-4ee9-b01e-f901b6a77031"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e76610d-f2bc-4e64-95e2-17fe8916e1b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb85fa75-461d-4dc7-88e3-14e4582b6f54"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "834aadc4-e002-4c64-810d-5a1f598d6e52",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f8fefd5b-629c-4277-812a-f1786410e7e3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a7daeda3-dd6e-4be7-beeb-38ab706487c5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "15b30983-eecd-4836-a5c5-b1cff9fad39f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b53e43ab-2c1e-463d-8909-64e4554c9e72",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d0331f7a-da5c-4581-99eb-badf6c4b7143"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "77e9c560-0ccc-4962-a93f-00397aed3c92",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2cb419bb-4dcc-4a37-b1f5-8c07d23991bb"
            }
          }
        ]
      },
      {
        "id": "0874cfa1-4a26-4134-8cb7-a568d6e2248f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0f639201-b87b-4c65-a94c-c8fc142797f6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "07421e4d-e331-4516-968d-6eb6ef162979",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8592f462-70ca-49cd-ad69-4692e1121fd2",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d5ca2bd-9125-48d3-bb67-8eb8e73f6a5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce1fc685-6e50-4c75-a795-f6c719c494f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98eb98a1-1511-40bd-855a-13c6aaec1501",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b17c3510-65ba-4f26-8636-b4788193c8ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d711c931-de57-4a6a-a601-c7273d85f84b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53d8d554-1fc0-41dd-b889-710b7d19e5f1",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b975c94-06fb-49b9-8df7-2fa5fe353499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33265d7d-59a7-4a35-ae1d-b82f21c65673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a23ed2-e324-4804-b58e-7f7a2580adc6",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "165ba290-759f-4678-8da8-3399e1f7650b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a035c2f3-9157-4559-bb53-b74ab771a9fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa8e13af-5852-4e28-a7cf-da9f5521ffdd",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "791e0e23-b263-4bf0-8168-f8e05e092f5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7da44997-9040-4822-90f7-147cde0a85a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1375e49a-65c0-46d5-9608-8a94161ec566",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4212bb1f-9ad7-4551-8996-4113c0fc1e9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93426eea-d74a-4857-bf55-dd324a6269e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d04a17c8-cd5b-42ed-855d-0c65c8fe843a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c80eea8-4c10-4919-9786-76e9ddee6e58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7338361c-49dc-44cb-99e4-2bb0d1bb9698"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfff5715-35f3-4257-873b-fc4108730d09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9450d88-00ec-41f7-a38f-93d2ecd7651f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49d58727-46fd-4500-8ff6-ef6d75736ebc",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de1fd3d-9c1b-43e1-af69-fa2ab2c42c52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37583b19-e88b-410a-84af-b90615c4df3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "462bdd6b-bbe9-482a-b5ce-a0f656703363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74585daa-e795-41d9-b67a-e3a86e023da2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31d8361a-5b68-452b-9eab-27d482afcb7b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db1b221f-aefd-4969-902b-91f657c068c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a359b2e9-da1d-4087-bcf3-0c68befc4d24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18f8f0ff-783d-4fd5-b5f3-991579200401",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9757b409-f0f0-4be8-8e04-92001833b8b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67895cdc-c4e6-49a0-bb19-8703558117aa",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54d6af23-3307-4735-bce5-4011c46277d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c13ca28e-25b3-49bf-b975-63ffca011cdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1968534-10b9-4266-a433-039bf3a74a14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0d9c8e5-39ec-4ba8-9082-ad2c3fda69c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8309db1e-2704-45fc-b980-854c5f02a5dc",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34a93e29-1992-4260-842d-769575e2b01e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "748a499f-c2a3-4758-87ce-7e4c0bf3e3a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa4385f8-baa2-4a69-8765-d8d17ee4ae71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1da30e07-0188-408d-84dd-d70e651ebdf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "401416c6-c633-4ad0-9fe6-d94c612093cc",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "611a60b1-6620-4d25-a3f0-038fa5fc13e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9c4f41c-3eba-432b-bafa-837cae5cc542"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16edf6fd-0c06-4376-8657-02c9a2ae3ec0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05c83b4d-53ed-47ae-9b6f-3a6ce39a60f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b8edfca-dcef-44ed-ad82-f42b987b12c9",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d4deca1-92cf-4083-ba05-fcf6cb95c376",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66218cf3-1334-4d45-b789-1f0b4ada9711"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68fa4f0f-c061-4580-a79d-58e186a4db4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4362f45-093b-4add-9066-7d0c078918ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b141d03b-2490-4be7-9930-4c5b420d943e",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fff3bca-acf3-4863-9f99-025de847e6cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee42bd72-596a-408b-96d4-da32d7c1041e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c372326-f503-403e-80ef-804a59055530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ade77a8-11d2-4564-9459-4b8b488e1826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa041101-3892-4b23-b9a8-76e9c66d46ac",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21bba286-199c-497e-99e5-105bfab5fdd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3952f65b-c4a1-4436-b608-3968d8d0390b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f268231-b1ef-4498-82b3-965585c1134b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcf0d2a7-97ec-4e0d-8c3c-72356a842f47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "496bfb70-7422-49c4-8665-76d89c59bdcf",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55fc7f45-80fb-4504-b352-51a843236faa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93abee6c-d3db-4057-8fa2-bc5fe35616df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a223cbd-3747-4a39-aad7-777c6706104b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "547989c9-740d-4de3-aa6b-c70ec9620a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84020f7e-9a35-4630-8e2c-526c07d2e96b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eae455f1-44a9-4c2b-8c5b-4fdf7d300eb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c63f41df-63dd-4147-9c7e-c037213b9b08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "206da076-46f5-4b99-bcc6-78d810861595",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "180666ee-c7d5-4d54-a317-d5b9c1150b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a94bda-d796-4c4e-b828-ba57cc002145",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b99525f0-00c7-4532-8e7c-22a261687bd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d3f2c32-c25f-4c62-8489-e593e6103bbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d23f34e5-f52b-44ca-87b1-28cf0cfd16da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9555132-773a-45fe-a6f5-18620f6ab254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c05745d2-338a-478b-9621-44eb91eae4a6",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c4e3286-3e9f-491b-931f-4db47ce92752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b507b6b-7ec0-4c12-84bf-8a9a95a5d8cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80979a72-08f4-4715-8b3c-d9de2322db46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad19cfdb-7cec-4bde-a553-fc7513d012bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "443f4b21-1030-4490-a23c-7aae4f828c50",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eb34573-0a06-472a-b3fd-326ac05ad8a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20c66243-6a5c-4e15-a6f0-d9a1ff0b84b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5829550-7ef0-44c9-8f42-98636ae512b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e545326f-374a-4d97-9896-a5bcf177901e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "638c928a-aebd-49a1-a29b-91e542e78b99",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c0bf864-f29d-445e-a654-b8f71604fd7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e05e1e49-2ebd-49f3-aee6-041d8fcfe37a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb5d0cc-30cc-4f76-a97a-a8bebcf1ab72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fece596-a6e4-4916-8f49-c6e804eafbec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d4329a6-1bd9-46af-bab1-ed859431f3fa",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96de1979-bedd-45cc-8e2c-a863b8718c58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4638d73a-1088-4c0c-992f-4b9673db411b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10758a44-3b5d-43d4-a4e8-bc053fded29a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f89c785-5a91-4bd4-8673-588429ae9ae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16dbfaaf-7092-49bf-99ba-04ea2f8950fb",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0af1218f-4be9-4686-a089-3fe4bd572750",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b6a77c8-6965-484c-8230-bef4f24c9a19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d69359a0-d39f-4b0c-bd10-1fb26a261b23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02375740-4f61-4d30-a7fd-ef6266ac7161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b97189a-6bc7-401b-a0c0-904d3ffa16d0",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de49b808-23cc-49d8-8732-e6c2dbb55a4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98cb21f4-c39b-494d-af2a-b4e14c5c6b78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "180608f0-aeb3-4503-a180-603f77b8c561",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "120f4237-9663-45b9-9072-15846b87fb99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fdb70d1-233a-4c08-9317-32b8ada0f8a1",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6112f07c-19b7-473a-ba42-aa35332429ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6596cd1b-b32f-4c6a-ad4b-8316358e7e3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf9e8a4e-ef4a-481b-b757-dc3169a74e00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dff96f7-8252-4044-9853-a587a7428367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa5a4ad6-52a9-4616-8a06-b93076095dab",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b62954-738d-470e-bf02-dfab416c9367",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "348f8d53-249a-463b-bf89-51fde8825c9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e26b6c4-44b4-4365-99ee-99d9a1efe034",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15c5cf70-854d-4525-abf4-848042783b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad444207-c69f-4c6b-b1bb-4a68b8587e33",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "148facf3-c2ce-475a-a2fb-16bd7c554099",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "945d586f-1e4e-4021-8b3a-26d908ca8ce4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45e375b5-08f6-43ec-aefe-241524d6b7ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cb5ab18-4cb0-4b5e-81a0-44693914f74c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51025b46-b6f8-4af0-8a47-a7c87a0273cc",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d2a98ba-0faa-4ec7-9e8f-466aa5c2a8d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e28256d8-9434-4ed2-a7df-dfb1056ccad7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83699c41-3625-4ca7-8491-d2f70cbbaf00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a781c152-46b1-425b-a510-1fa3b763116b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a9f56a-2498-4f98-9c01-f6c750b5d714",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f270a743-9832-4c11-9f42-479a38ea4df9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5995f12c-e5fa-4be1-8c35-3fdf2d3a2ea1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae8e21f-c3c0-45c9-b5ba-12b8aadedfd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffcd4e36-903d-4504-9776-6ee3806a792d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6464d0bb-4873-4f03-a1e5-bb92966ab733",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f0dba5f-2109-4621-a0ab-24ec39909d63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43fa178d-daf7-4e73-a375-7fd54987bcb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b37aea9-95d7-4b86-a8b0-63378300b263",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07a63878-e7c0-459f-a1c9-8d15e0145c6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea2f766f-c4e7-4783-b3e5-e67b496adae1",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e147422b-b45b-4e90-a123-51a9f57e5730",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51504607-70e8-4709-bd9d-f9d8eb2b3aec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c46250c4-f397-4b92-8a17-2e45f297ea31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ed83010-cb34-4dc1-8490-2225a9cd5384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b233fd9-e6a7-4043-b5e8-205ef0d587c0",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77ebb5a5-48ef-4f5a-867d-7b3824a712cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e355d3b1-d288-4406-9db3-fb33c1c1c5fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdcb66e3-defb-4de1-9dc9-c1655b797eb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f32dc7a-22e3-418d-9d78-a9f3134f2f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bcf788c-a253-47de-afc7-d25da9a29c51",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3639ace7-6a4c-41a1-bb56-0c8f37a9bb3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "192d59c2-6fe0-406d-ae5c-ea7b47a1ec64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dafee29c-9e75-4aa2-9d60-fd53f324bc73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dd8cdc0-4585-480e-9ea3-c06cf9425b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "704b3c40-18e0-491e-a646-7c28db1b7d0a",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a0c2f74-11f0-4017-bd3f-609d9f152960",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "069662db-f658-45e7-9c4c-b41ffa499fad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "558da5f9-c31e-4cb0-9a5f-2f4d99b662b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "278f62d5-4130-4a64-9e8f-e844c1a8bb1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d74e9fe-ce57-4361-8991-7d131296767d",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd23883-4c89-4051-b687-471ceed17cc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23eb91b2-8f44-4c45-959f-b2ad32a7ca7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b31a8bde-c5ae-4cb1-9348-c27574790574",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ec94965-fa63-41f9-ab63-5ef2c17a81e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9463e54-1ed4-4838-affa-fd8a322a8d6d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd31654-d047-4240-b42d-832d784a9b46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83f1e92a-0615-4fb0-aa5c-bcaef1e5a460"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f6258a5-479a-4acf-9c98-d2b0ebaab298",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09bc223b-eaba-476b-817d-ab10bb738f31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e5cd44-8288-42b0-94d5-aa9b2513359b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d5e6e2-287a-43c3-a11b-a7fac8145ece",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62b70365-85a2-40ed-aa71-b21170802cec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f26e43-a61a-4365-a98e-8c77b69e1250",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01282d6d-d5f9-4498-9692-92602187824e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7a2244f-33e7-4084-9c5f-b0955fa96b35",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d125cadd-bacd-4f78-aa50-0c4826c4434d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72d163f0-3a40-4a2c-87be-f2fc6a3ee6df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74cf66f-75fb-4b74-9f93-36af24aec666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "258b2269-d549-4637-ac42-68bd56fcb624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2d9069e-74c4-418a-a5c5-f0ea96e51ceb",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06d14f5a-0cd1-46e4-aac7-f91554687bbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5768d6c-f44c-44da-86ca-c5559e83c5c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf822d01-a6d4-4a6a-bb26-17a4aecb3014",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7278caf-6f7a-46a8-a208-3fd26de6fdae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df9e1412-cfd3-4aa9-8016-590db878c80e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b1d627-095a-4577-99f2-a5138cc0a4fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09c1b47d-3c81-47e6-9e42-f842b400ebcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d04f72d-bf82-444d-8f88-36d7d26f895f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1d58a95-fb56-4a2d-9527-ff57d9378458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20df9a61-d06b-498a-a7d1-e82542d0b0f5",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d45dd0a2-8814-40e3-b9a2-c68e36f26dd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe1b79bb-1eaa-4973-9e09-94c28686fd6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18814463-5807-4382-8416-65c39ff984ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27d0ebba-71e5-499b-b2d9-84329881bf57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f6c01b5-d4e4-42ce-a810-fb12d787063f",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78caa5ca-261e-487a-8cd4-fbbce81fb752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5dad3a7-f1ab-4850-b75b-3a9869966cc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e730675f-a17f-44af-9f62-01d279fc4dc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "415082a9-15be-4705-b852-c8418f9e4756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21d319ba-395f-42b6-b55d-346e67646f24",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "349e1eeb-332d-4d4d-8f06-8d68a78c6b25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de58bf2c-f8ee-42e4-9a32-01d34ac8313f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1812e693-8252-4eff-98a1-cff44f34cfb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afb6bd95-1b87-4989-baea-e1c61a390da2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "279e37c3-2e94-45d1-83e0-fcb9bace4593",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51859782-2b14-4448-8997-69b2826bb68e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b9ddd94-522b-4a75-b75f-ae75a8a10e79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c8e7323-3fe4-4cf0-8820-efb8c47ba8d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "874facfc-f83c-42cf-a9e3-711523f18d07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6555c608-01cd-4ffc-a38c-e53fdbbf2eed",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a5fa6d1-7896-4982-be9c-900e0660c399",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "927ae919-45ea-439c-834c-4d5107ee7d5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d6090fc-0029-4837-a4c5-cdd7aa08a1d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7049979-8e82-4b27-8b37-51a292ce4f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4449f52-76f3-41d5-8664-eba36fb1fbe1",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db8e95e1-aea0-44ae-9884-672949500ee8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a2847c4-f376-43e0-9a28-835e0a753ba2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0430da61-3876-474f-85c9-55a7eb4632ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a140d211-9800-4e72-b6b2-c8c61cf85ffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a8e29f5-041b-4645-aadf-24369939773a",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46c5f83f-c378-4ade-9b77-b17b30bb44b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "001192ed-08a6-40a4-9222-95f30dd9080b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0ae6876-3a09-4200-87f7-3cad2eca78e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff3e2b8d-8789-4818-a398-47b7ca72f29b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e4b7723-6a75-4458-adb9-165030b73eb3",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc85521-1d9e-47fc-91ab-235279a8cbfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc1e7922-e91e-44d7-81b4-c429a9a15087"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b00957a-9540-48a3-bcc5-fe448b1a0c1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d7cc8ae-8272-493e-9fbc-22c336c31901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5efb7272-1269-4d86-a497-fc82293e2fc1",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26bfca6a-b729-43b6-9d07-863bba9d6d94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41595f5d-0a62-42d6-871c-5e736b6f91d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6038aa8-9ecc-43c7-9ef6-36bbc8a968b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02323319-a5aa-491c-910b-256c4e64bca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def24803-5b3a-425a-a370-8be76a6e3830",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c233ba-debd-4d34-99b3-559e6cee7377",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa98ce96-1ec3-4541-95de-e6ac61124613"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "170e7aed-126a-425b-b3b0-de42916c1558",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24659610-c4ee-4882-aa2b-eb61c6169b98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d53cab73-b146-4fe8-b2f8-cf30a9c54de4",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bce9fb28-4b04-4426-ac78-e823b040163b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61196906-64ea-4076-8cea-5e235028191e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "733c984b-fcdf-4aec-b3b5-4756ffb978ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80651612-0f46-4a25-8fbb-b8a7d7339acc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3814b09-0cfe-4d44-a38f-dbb05dab7ecf",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9d13174-fd1a-4e6d-b33e-bb2f4ae649a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "170b787e-c921-4add-9184-474180491f11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "928d3f1a-5818-4219-8338-5aeb4faa039e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1376008-3aae-47a8-8274-88461dcbaa50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d03afbad-64f2-455d-b0c4-614ea85dae56",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f7971d-cd5c-4a5a-ac38-bcd8179abb26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f14bc33f-56d6-4130-b072-c8a2aa4494c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ad0547-dfbe-4a06-b7d3-770baadcdd5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6505c5c7-cad1-4093-a862-ca1683e97636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "525d7f1f-3edc-42c0-a728-8a7ef497ad4a",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb9752b-9581-4874-bab5-90e8f6d871e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8fb26c8-c9ce-4507-863b-0685bc94f1ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cffe27a1-d930-4a03-8508-c66ff7e1fc17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e421671f-70e2-4c07-9dd7-b41e7eaeba5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad0b243e-c3d7-4ae4-a484-edc96cda7081",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4d0efc8-dd47-46a4-b78c-8053a392fa16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46ff99bc-b4bc-47ce-ac16-03bf92b0ecb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e365d1f1-4af3-40e7-ab85-d279c6816a5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f3f358c-297b-4203-98bc-75bf1557be71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b42a730c-8575-4b39-94ed-a8b4f9bc824b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f6fd52f-c972-4a57-898f-3801ab13164b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d92e51c4-f9d9-4bbd-aa09-40acb558577d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76b2b3df-d9d0-42ea-993f-9558874729c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c52a163-ec87-4d97-9d73-415313734352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d88a2c37-6e7a-47af-a1f1-2e087b15e33d",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1f40772-8eaa-4be3-b8f0-3fc5c4a63e2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9c8f9bf-296f-47cd-94e2-02694079fc05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8926c14-d606-45bf-ae1e-19d57932d2fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36ff1284-52c5-4174-9fc1-0b95e75b5b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efe883ac-abfd-4a42-aedc-8a2dba18d147",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa9855e3-dbfc-4237-9c00-0ddbadda3a48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4316028-f45c-4608-b51b-9e351ef3f38e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e62f501-ecdd-4ce7-a21a-6d6ac45c79a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "380fc8a4-e74f-4d6a-8a78-9eb967c15ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "812a01ce-83ba-4ddd-ae63-f3fab6065591",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d5e755-7153-42a4-849a-fb3f04481f18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6fa775f-abc8-42ae-90cc-4889002f866c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28234b61-17a5-45a9-96b7-754524142759",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de71f24e-0544-43da-bd2b-5ecc1e17c9df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09336307-c244-415c-bcc7-b4f99dc3f3f0",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ff75084-c099-4e26-bbd4-3f1d3efdd18c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aff5e87-8590-4047-95ac-acc0c51a3ebf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d4cb80e-e6ba-4fbd-9368-e5b86eda8d65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c020a552-f354-4d4b-9c35-f8c1a098c2d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2146e915-1481-446d-9ca7-4a695c17ecbf",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f681762-3ffc-4127-855e-47308c58087b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cc81202-335b-4358-a97c-e1053aa8741d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "399b4cb9-d159-40d3-9b22-8ce58e873eda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd192f08-e371-4d67-a7da-518a0a73bea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e48964-1233-4355-8690-5ccff9ca3669",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1254630-4d3a-4ccc-95ba-24d6781b792b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a7449ff-dab6-4f83-ae23-b3d8ddfa638b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c77588-3f08-43b5-9279-3cf16f4aa6c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30e1f45f-ce04-4c77-bf62-7725d2b9aa01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43f6026a-812c-499a-bf8e-3b32719641b2",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d1e8202-75a6-46ce-b8b0-ce249a74a846",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f90afce2-b5c9-4059-81c0-77b86b3a8b45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e7e5942-ec65-4760-92cf-60982c4adb91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51396eea-8257-4f0d-8e5d-8f7d4de22223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab27ceb0-222c-412f-abb0-f9678a5e7c3c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df8fad7-f6c8-45c5-ba95-eadedeac75d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8e8e0b0-a02c-48e1-a333-f7cda49b3a1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47337745-d423-49c8-ae4f-44ad400e6b87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2e666ee-c434-4aa1-83fd-ae9874d8a7b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4197e692-9bef-4f4a-b0ce-a700ca9f335a",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b532345-1bba-4473-8b2d-4a428d84e520",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9d4ecb7-891c-44b7-9f2e-da8f9c844a35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b9c310c-2eef-40a1-be91-4ff58958b3c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "055d0c4e-8d7f-4daa-8931-cc5155e1a212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504cbc35-4cdf-416b-a272-3c43c0a7fe1f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "987bf98a-7570-4395-b99d-18ea4f258356",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01b9295a-d404-4c95-8ed6-c1e012513959"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fa6af7d-595e-4dc9-b16b-9ec89f642bfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1ad1f4e-ab2f-4f9f-9fb2-c5ed43e690bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a262d9f-22a5-4060-b8cf-eb47d92e9a5c",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57eaa2ae-11b4-44df-a0e8-36959a7ccf90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80414439-6b08-417b-ab6e-0a3a68d6efbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6bbe213-1663-4c7b-a527-03577bffb8ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b9de7a4-79a3-4425-a04d-b2ce116b134b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9672cbe1-3f43-4bf9-b942-67be296716b6",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0002b30-fef7-47d5-9f50-160e826d0e46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3739c17-7d66-4ccd-b055-a79593af243a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f8eb71-91be-4026-81dc-be7539de3e8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd079b0a-41e5-4193-a4a6-c0a112cd4d34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90dbd21c-9c26-4c20-9d05-af9f831f6d5d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea9a33e6-0c5d-4e1f-87bc-57e3bc1d4257",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1706ed5a-8c50-4cf9-8b2a-28a988df7f83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d82fd18e-82bc-434d-911d-46504aa7971a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae80a3dd-d2eb-4521-9cea-914fc82fa087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d50431-9579-4a4f-998d-7cd8b518594b",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84d51f5e-7f6d-422b-aced-1c3e16c60269",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94cce16e-79e4-4285-a622-11f118fe13bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ddcd5db-df93-4b5f-bbf9-366c4b88f74e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e9bbfa0-fd33-4211-9d53-1f4c6da70dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "488177ba-1eb0-417e-9d37-39c6b35bc157",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b6e8d41-7cb3-4051-8967-dd75a49073e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5037ad13-d998-45bb-8c1d-2a77dc35822e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6954617d-7bc3-4013-aca5-4e3ec8543f57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc61c64c-9979-406e-be3f-57988265e5d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c9391b-1533-4f5a-be6e-0ceace8984b8",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c41c28e6-0902-4838-ae2c-8d397c27d0fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a73fd1d3-c292-46ac-9261-1398b104b99d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bbaf31d-aea6-45fe-8b10-d32526335469",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d5852df-6dd9-46c8-97a7-120aa5c1507e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09a8d87c-136b-44ab-8bb0-69cd2500a7bb",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fa5c10c-6bff-4631-bc8b-ed361b001185",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2038974-2a3f-41ac-9280-3b66fd0781e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1bbf52a-2ba9-4f26-8077-d9cf61c31a55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50a34415-badf-4fb5-8ad8-a2c68a6186aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e2b5187-e6fa-4dc9-a1b7-c6452453776f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "721a4811-0aa3-4aa1-8580-2e7aed80cf48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ba3a008-47f7-44be-9efa-34c73336b5aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81dda427-d929-441a-a30e-f8ebfcfb0969",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c5ad357-4a22-476b-99a8-ac826cdb5129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "391cba07-cd3a-4f18-b56e-ae1b865eafc4",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "929c4083-3b97-4b3b-b3d0-3cdeae10c831",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "036bea6c-bb1e-4ae2-9378-e48a5d0e3ecf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b9c449f-cec0-497f-aaf0-c5363de29b84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edfbb32e-85d0-4375-a337-37a514b7a6b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0eab0a8-47c5-4b44-ba09-b13ac1144a74",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed93ce02-f19b-41d8-b1cd-e31cbab57c14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27e8f1ec-d582-4ed0-9bfd-7c80c8ddf774"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a337fc7c-3fa7-45c5-a62c-7ff7e8a5f3ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8dd4faf-e8f9-493f-a200-15d5f22a53bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90577d7d-547a-4143-b012-e7fe4889012a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4bf919a-bfaa-4c7e-8076-d4206416f290",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a50fe72b-e2df-4819-956f-eabb74897d2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b0ad7a1-5abe-41db-ace2-d93f5201d4c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "468d7e62-9d6d-4640-9243-6368cc2566f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "148aa608-c253-4d5c-ad78-0abd30101e6b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d5d609f-9356-40b3-a725-da6086fc3680",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13123039-b32a-43e4-95be-11edbd3b22dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb73f33-f45d-4458-b55a-e8eb6349c8b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f6fcd99-786b-4910-a5e2-a6b5acfdfc61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e68c69c-c1a2-4f52-881f-9088ac5eebbb",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdbbfb39-b096-4f1f-bc18-ce82695fab4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe1e2d43-4ef1-4ded-b9a2-f1f0a7f009fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcdd14e2-f317-4839-9d9d-cbf9693e289c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc2fec61-b30d-4d43-b246-84aa4a6f49b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecfc9312-5ebf-44f8-9b33-38663bdcdc46",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6df80728-f3ca-4f0d-8c15-397a99a4d13b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49bc9c35-3e6a-4122-aae6-9b17e85ed808"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "266cf862-f2e5-4977-9882-b490fcec2f7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25ec728a-0c81-4cb4-ba46-84b448bb10c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d484e9f2-5f4b-4e2d-a17c-82b6e4590c48",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "182731d0-6219-43e9-b0e4-293e3a8d95ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee363657-c48d-4862-968b-e285fa021eb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43043be9-e18b-4675-925f-90068c084812",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "771b64cf-6125-4f56-943f-a7710779d214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33f68a86-899e-4cba-8ef1-975ae137c049",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eafd6263-9c1f-417c-8346-319a1de73453",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f323d2a-bc4b-4bc8-975e-2ebca273ff02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd063da-9b75-4c2b-8be0-ff0389868f47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "004eb34e-e7b3-479c-b7c2-e45cc84c2290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffcb3ebe-bce6-4fd5-a073-04f9744c08d3",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4b0ee83-041c-4b0d-9cfa-889b8969611b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb99df4a-6689-46ea-9e9d-7e260f52f05e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa33ffc2-3072-426c-aa77-810dc0761c4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddf0f9e6-9942-41ff-b351-88eabf9c2f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d54ea0-d16a-4eb4-af8a-3abf08d6321b",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f1529c-0127-4887-aa4c-c05bc2af0500",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffc1b368-fba9-409e-922f-c1c5f2bbf6f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a07762c2-c19d-4bcc-a806-abc5fa8de14f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efdad5a6-b2ba-4e8a-8ae0-af8432d65485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93d63685-3750-42b4-a320-bb44ec5ded70",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89d3a594-8b33-46e0-8fd9-bc54f1df096a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ebaf768-e259-4796-a03a-8705b7c98fae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b69cc16a-2efa-4652-afd2-43aa641f0896",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96847745-2cab-4ff0-b548-3cbc41a8bd22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97bb2bc7-a698-47e1-9360-bfa01db6474f",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "820090cd-e331-43f2-864e-670a46234930",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4ad1037-f539-48da-ae3d-3880d36e0e1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58e03ebc-32c8-40f2-8cb6-4075532ca250",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bfe1afa-570d-4c65-bdea-99895f6f90b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9738d30-6bb5-476c-8418-f0fc8e49cf4d",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c239406-0f9d-465e-8bcd-fc480eb701cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14fa47a5-8321-4ba4-a27b-b94a20718591"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2c99391-224e-46c7-b732-0547bee72908",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7daab925-7705-4f1e-8be2-480a31b1b624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c5c1885-a276-4549-ad07-71ef61d60ebd",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74b8706a-90af-49c4-834e-9a9294736b8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1079b51c-65ad-4e7d-9b4f-a8f1bdbaf5ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c73ae6b-b971-4473-b112-62e0e5b2643a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "465055dd-0151-4789-8129-c085657e3b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8fb7c5d-2b64-43c7-8824-4f937e3a9ee4",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d210e1-f107-4e75-89a5-a53510fe78fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d440917-56d0-4622-8c9d-764e6fd321f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c63f0a3d-6e8f-4384-a7a1-d2d0f7e6bd29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "912db0be-ca60-4e00-ab2f-a6a6137f70b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53f42eb3-ee78-44b1-b999-a4308264340a",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6757cff9-69e2-4cc2-9301-077113c78573",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5aecb4d-20c8-49ef-9eec-7e4bebeb831a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f7ec9f5-cb4d-43b2-9e86-b980edf96d96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecd5b897-d4e6-4a37-9332-7e1172d41db5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed6395d4-3f6a-4e69-9daa-05146ebbdfef",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc74528e-3d98-452f-80b6-6e4c5f0d0c70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b06ac7f6-1e1d-4399-b85b-dcfbe59ee368"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99bf357f-5262-4064-b5e6-c30f6875884b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "763a9d87-aa73-47dd-adb0-73cfaacdd915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0f9df30-7ef5-4e30-9a65-b3c3807f4552",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63beee38-e843-49b7-8832-3a4aa23b9173",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13392a62-5b80-426f-84d3-3358de7b7bd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "006a6ef5-d8bb-40aa-b106-a87219c814a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d990209b-dd0d-4662-b1e4-0ebd3df6eb18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d6ab46b-cb5d-4c68-a590-91a4893c5088",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fc68526-3252-4ca6-8313-8818ab866b5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5a06b23-b654-4230-9b83-c0c3c0a6d5a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eb5090b-a682-460b-a076-b8d5577e51b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc199985-f3bb-4675-b916-b64ea9b3224c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2136748-8eb0-47a4-8f0a-eacee5c0734c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "494afe9d-a4f2-4358-9e72-a98c5325d86c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b56deff-c32c-4809-8ebf-7fbbdb25d478"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8dcacec-4c3f-4c7f-b99c-286776c6add3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b88c565f-ef67-4612-84ba-0ba752c53a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad01d33a-21e5-47c9-88b0-7b3294b3982e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd6c0ef-5a1f-469b-a1dd-e398b2c00a05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4d58f07-9f91-485f-8ffc-c468b66b6802"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3bdb685-dcbf-4b0a-9a3f-b5418f74840d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "309f134c-60c5-4482-8ef6-21712db2dfce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2557f435-c966-42ae-a06b-12322bae95a9",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d485993e-e044-413e-b80d-0d193ac1324f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be4f4d29-3691-4cc9-a5d0-1586e542d2b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8192c75-8d4c-4abf-bdd5-daab9874b94b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80fc82e5-98ee-4c74-8651-3eb4100f6ddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "287de9b1-d6ac-4c3c-b2d1-8a36d513fd90",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb1b4e7-8b50-412a-b8fb-d891bcfae0b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81b543ba-c469-4c3b-be87-4729a377ec46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "776f37c9-f3ec-4a23-8fae-d36b751bd728",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a0fb75e-3772-4d4b-bd3b-70e4903ea56a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f95e81ee-2aaa-44e2-a587-f5507bcb3fa2",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f25444e-534a-40d7-afc4-585e6a5f0e77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eafaa7ae-48d0-48cc-9303-4214e2c95522"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3e89b6-f3c9-4451-8f66-f8a761d213db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b185172-168c-4e02-bc5f-f4a30d5bb5c0"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ea9cf965-247b-4e39-b417-95d12bc8f4eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d9314654-d5a9-4d10-9a66-2cc65335c290"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ff36ec30-d8ae-4fff-af8c-2eadd1718bef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4c93a565-bca1-40d6-9b63-10f4cb76b4d4"
                    }
                  }
                ]
              },
              {
                "id": "5ed5f239-4662-4a9a-8170-cb3f6d7b06fc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0a9cd57a-1280-46cb-b6d2-b3a61390eb7b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf290f5d-f645-42ca-9e02-81442d87cfc9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0bedb10e-eafd-43d2-bf07-a64b61ba2850"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7c35982-6132-4cb4-9857-5be108cdf8c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fb805360-2662-4457-8844-7d8947739b07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f07166-8d47-479f-912d-582a204582fd",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46ef3192-3997-4563-875a-9c131b440f6c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "303221f4-bcdb-4e9e-875e-2ce88e8c6f9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4de77f00-0f93-418d-ab6b-134598f79de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "78145c89-c82e-4cce-8f75-0f7593fefbf5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c56d33f7-04e0-4797-8ea0-188da60205d2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ed58a64-4435-4bfb-b9e4-977989635d07"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "957a9696-98d7-4cfa-9c3c-8353fd490d8a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "43cb4544-45fc-45cb-a162-6bff56737e40"
                    }
                  }
                ]
              },
              {
                "id": "c13b12cc-88b0-4c43-b293-5cb1307ca95a",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "78c81f77-7362-4d19-8664-63cf10ab7f27",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f085f54-c0f3-41fc-b1f9-b0a2e28bbf13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e7132712-e0b7-4230-b04d-7d8994ea09f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "558230d2-8630-4186-864a-313ed60b45a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e42063c4-2b89-4b75-beb2-514a3a239ca4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4a4d2721-e968-4da0-a7e2-b6c2cdea3365",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4904f315-9a1e-435e-beab-01cc14175668",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3984392f-da96-41a0-90dd-483c3b7db812",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "048fb77a-c586-4c83-a7fa-97d42be79914"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9da41b0c-3d65-4cd3-abd9-dec90e9f32bb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00e71040-5a04-4ca2-9027-cc3f247d141a"
                    }
                  }
                ]
              },
              {
                "id": "1233ad6f-8824-4249-800b-f3b11793ec40",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec0c8dbc-5574-4754-b7a1-a6c39f1b8fbf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0836186c-7881-4aec-b75c-fd191a79e2eb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa90be3d-0b3c-416f-9089-3260a02adc94",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "426ccd7f-5d99-4317-aac6-b3e6a6f6586b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da751dcb-d4e0-4d52-8909-48ccd1ee54b8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "fafd38ff-c1bc-4b49-948e-d5e9b6ce3700"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "460308ac-1d70-4530-8696-6c4df6ca76be",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "990f0bba-b5a8-4b29-b976-23c957de20e0"
            }
          }
        ]
      },
      {
        "id": "d1f9296b-1916-41eb-a632-c1ceeba63018",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0648c6f9-68c7-4da4-85f3-bbdf7dead724",
            "name": "Negative Testing",
            "item": [
              {
                "id": "63a0dd31-7547-44df-b7ae-01a41819a3b4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a951789a-6e05-4583-9884-a1187d9896cd",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f084a1d0-119f-461c-b48a-e89f9f8e57a0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5078f4dd-4265-4377-9a27-a3b2f07dcac3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a52b538f-75dd-4fd8-8812-9ae909313dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e94c49e9-d2ce-49bb-a50a-8020f35674d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2c413d8-72cb-49e8-ac44-6a27482382bb",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9872119f-9631-4145-b91b-5d2938facd6c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e8621f86-2ff4-412b-bb9e-e0a7fc067a79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1073ad8e-0f89-4a50-ba96-28f0dae5e693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d2e3a394-963c-45b4-96d9-b9210d6f3a35"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "384d7d70-ee2e-434a-a874-940763a6edc8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cd15c35d-4f87-45ad-a580-20ce4870da6a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea51ef9e-413c-4d91-9df2-9f09012986ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e58fdc6-872e-40c8-b2e1-157ffc683a40"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1219bec0-194a-42c2-8380-53414e9057c3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f1651335-789a-4195-ae69-df6a3a3a4df7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6f361374-1fe4-435b-a7e6-ff1247bf2b99",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "94f015df-e638-469c-83f2-a55c223d1ed6"
            }
          }
        ]
      },
      {
        "id": "efcbbe4e-1f19-42f1-a307-a2c9fb655b5b",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "08e0302c-532d-4069-8ad7-f8f3f283626a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3f636087-d4b6-4443-95e7-68a7d85feedd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3ffe4871-412f-46e6-9c9a-9d8b4151be5e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daa351a8-5914-4e2c-8c71-e5a811097d99",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f068b9a2-ad5f-4999-af4b-5b53ac3e3ae7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf3a14ef-3997-4635-b420-bbe470176046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5670553e-fa30-4bef-92ab-4e0f82aa8c7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3464671-0c4c-4ac7-990d-ebbe2e3b822a",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e9a184-7ebd-4a16-9aef-75dca2b53c77",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d20f41a4-3807-471c-aca7-fcecb6b47162"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29be5f1f-a461-4a1e-993e-ce92586cae31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4924d4bf-fea8-4687-bfc2-9a1786506985"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "314b0eda-89cb-4aef-a6c0-6c3228a868ba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4be021f0-13d3-426a-861c-8a75c832c246"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ade7893-b640-49c7-9a51-c07ee7da2fe1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b8c3b360-0657-49ec-b241-4b03750cfb4f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c4b7161f-21f4-4138-824c-aca0be5d0493",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "24766723-3fa0-43a9-9fee-98082a1b8c05"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f7de90e3-9e1a-4b16-b8fb-f2fb2efacb63",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "779ce3d7-a202-40b1-b937-edc6f528ee59"
            }
          }
        ]
      },
      {
        "id": "6110e7f5-0914-48b6-bc00-9aa60f7b2f3b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d83b293b-eee2-46dc-97dd-cbd57e0fea96",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cd0d54ba-f397-43d1-b544-cc2c2ac553e0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "74731a55-2e85-4531-b5ca-48b473250c0b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5398dc3-9900-40a3-a0a4-748d519e068b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6c0dc8e4-61a5-4c51-ba5b-18061e35672a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b16df91-9063-4981-b248-8c5ff40a9aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0fd378e1-e801-4809-9043-b2634ed54e14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0c80551-b8be-4ca9-b906-efc8f094d509",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dff5eeab-19b1-435a-9537-46a102699c5d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "91696fd1-edab-4ad5-9511-bce5ccdfb723"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ffc5035-54db-49a7-a564-79d9783c9b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6ec69c62-917f-403f-9d17-4e77fe251673"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "91fbca4f-3ca2-475c-b6dc-96bee98357e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "82dd0937-022e-4f4c-bf64-1a5b251c2b4a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c8c83fe-7637-4878-8e05-e324b81a942b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e78470c7-e8e0-44e8-9a1a-143c65fccd7b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "08ee3bbb-e2d4-4448-b8e3-f70d1b07a5b5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "192814cc-48b1-4db0-bb16-a61a999b0f5b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "497a77ba-28f2-42e7-9096-fb2f6d0395f1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6f8f28eb-8bd4-4f0c-8aae-e04e1f984508"
            }
          }
        ]
      },
      {
        "id": "e3951b68-8725-46a8-825c-6160b741348e",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9a2be5ec-1191-42b5-b754-fa83a0b16b87",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "98d9d7a1-d3fd-4a52-bf4c-cf0db81e2fdf",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "5ccca09c-ee4f-4b1c-94ec-5973455f7676",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e09a91ab-b9bf-4c40-80bb-ec6b8bd8578b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "89f502c0-abe2-4faa-b3f6-375ba9d0e471",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 91.04961832061069,
      "responseMin": 6,
      "responseMax": 1030,
      "responseSd": 178.19194080269148,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1673224687239,
      "completed": 1673224721863
    },
    "executions": [
      {
        "id": "166e7af3-cee4-41da-a395-c12788a7b597",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f7919000-06ac-469c-94fe-55c1b5688d3a",
          "httpRequestId": "35719ed6-d861-4970-a9e0-893b2798dd52"
        },
        "item": {
          "id": "166e7af3-cee4-41da-a395-c12788a7b597",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d5d6b83d-0303-47d8-b081-4d1dadc3e020",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 0
        }
      },
      {
        "id": "81f9eca5-a2bd-4462-84e2-715b646b2fbc",
        "cursor": {
          "ref": "39c4a077-e3c0-40f4-b982-4ed969e7db63",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5944ee2c-ed89-4f7e-8556-9243e5a5cb4a"
        },
        "item": {
          "id": "81f9eca5-a2bd-4462-84e2-715b646b2fbc",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "26b50d7b-93d8-4637-8018-d79ceb2ae805",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "3f70f55e-2d61-4e7a-aaac-429b654b3875",
        "cursor": {
          "ref": "8c40501d-4bad-4685-8767-1c767cc00168",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f9346dce-85db-4ec4-bcf6-7508d21ad4b8"
        },
        "item": {
          "id": "3f70f55e-2d61-4e7a-aaac-429b654b3875",
          "name": "did_json"
        },
        "response": {
          "id": "569b75d2-792c-45ab-bb6f-19a488e854ed",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "029b5340-5790-4a02-a237-db7ce094fd87",
        "cursor": {
          "ref": "e5350ae1-745c-4b52-90e2-be0049ee9886",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "43092a8f-f1c9-4a6f-9496-bc36a269dde9"
        },
        "item": {
          "id": "029b5340-5790-4a02-a237-db7ce094fd87",
          "name": "did:invalid"
        },
        "response": {
          "id": "3e099fd4-26b5-4396-9723-746f462483d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "029b5340-5790-4a02-a237-db7ce094fd87",
        "cursor": {
          "ref": "e5350ae1-745c-4b52-90e2-be0049ee9886",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "43092a8f-f1c9-4a6f-9496-bc36a269dde9"
        },
        "item": {
          "id": "029b5340-5790-4a02-a237-db7ce094fd87",
          "name": "did:invalid"
        },
        "response": {
          "id": "3e099fd4-26b5-4396-9723-746f462483d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81363cfc-7855-4c7b-bb81-2ff5545a0db9",
        "cursor": {
          "ref": "6c086ea2-ce85-4a38-8f82-7be1df8af388",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "325dfc8b-5cff-4c9c-8aca-c9a05db66b8a"
        },
        "item": {
          "id": "81363cfc-7855-4c7b-bb81-2ff5545a0db9",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "66703516-2d17-46f7-ae63-3047d8e16ddc",
          "status": "Not Found",
          "code": 404,
          "responseTime": 58,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7f8e15c-c6f2-4a1d-b46c-7fb592ac0af5",
        "cursor": {
          "ref": "b347fa58-0afa-4854-abab-380f5427d2c3",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "3a64c7a6-fa5e-4e2c-a800-5c0f245ae2a4"
        },
        "item": {
          "id": "f7f8e15c-c6f2-4a1d-b46c-7fb592ac0af5",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "347196a3-6114-47f5-8e43-1f14f6f8a656",
          "status": "Not Found",
          "code": 404,
          "responseTime": 9,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb46a90-1458-40f4-b84a-b417ceaab9c6",
        "cursor": {
          "ref": "78e313ad-a962-4c33-a18b-a76bda10ae1c",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4e05bb92-0352-4329-8229-1508cca9817b"
        },
        "item": {
          "id": "2cb46a90-1458-40f4-b84a-b417ceaab9c6",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "5fdba38d-f762-466f-9d3a-183872c0ae03",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3958e66-0c57-40e3-a2f0-870850963343",
        "cursor": {
          "ref": "f5a851f9-6e23-4652-8b24-b544ca96042b",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1be424e3-9b9e-4337-a92f-2e0177070b7b"
        },
        "item": {
          "id": "e3958e66-0c57-40e3-a2f0-870850963343",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "421da8f0-c14b-4c7c-b569-b08e15f381a7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3958e66-0c57-40e3-a2f0-870850963343",
        "cursor": {
          "ref": "f5a851f9-6e23-4652-8b24-b544ca96042b",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1be424e3-9b9e-4337-a92f-2e0177070b7b"
        },
        "item": {
          "id": "e3958e66-0c57-40e3-a2f0-870850963343",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "421da8f0-c14b-4c7c-b569-b08e15f381a7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85be1728-d42b-4294-858d-5664d0fa9a90",
        "cursor": {
          "ref": "d2f45a68-6027-4b80-b1d5-700eb30063d7",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "095d4442-b54c-4a45-9c0d-0999bab9b2a8"
        },
        "item": {
          "id": "85be1728-d42b-4294-858d-5664d0fa9a90",
          "name": "identifiers"
        },
        "response": {
          "id": "1bfd2829-3768-4156-a6c2-6529006f4b12",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe6da4d5-7669-4ee0-8c34-e76ceb53de6a",
        "cursor": {
          "ref": "978a4c05-dc5b-4e57-8d51-e8e4871cffc7",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f4b4ca77-6b3f-49ac-834e-8ae83806b765"
        },
        "item": {
          "id": "fe6da4d5-7669-4ee0-8c34-e76ceb53de6a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "05adbb55-b7ba-4b52-b4f7-d79bf93ce021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe6da4d5-7669-4ee0-8c34-e76ceb53de6a",
        "cursor": {
          "ref": "978a4c05-dc5b-4e57-8d51-e8e4871cffc7",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f4b4ca77-6b3f-49ac-834e-8ae83806b765"
        },
        "item": {
          "id": "fe6da4d5-7669-4ee0-8c34-e76ceb53de6a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "05adbb55-b7ba-4b52-b4f7-d79bf93ce021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "653b0888-fc75-406b-8e2b-49a055387747",
        "cursor": {
          "ref": "2f73a9ae-00bf-477c-af0f-2feb0ec021e7",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "1061124f-134d-41cc-a12b-3c3bd87fd2b6"
        },
        "item": {
          "id": "653b0888-fc75-406b-8e2b-49a055387747",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7776d97a-384d-40ee-a85c-2b4f80b76ca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bcc47e2-bb6d-4799-af6b-4a3ad6ac4f33",
        "cursor": {
          "ref": "b86904af-5e78-479a-8eac-70aac9b05c6d",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e9c064f0-904e-4bb1-ba24-c71314fdf6ef"
        },
        "item": {
          "id": "2bcc47e2-bb6d-4799-af6b-4a3ad6ac4f33",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "dbbcd950-0735-4a15-9672-33a12c046c0a",
          "status": "Created",
          "code": 201,
          "responseTime": 621,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "a7b49608-17b0-479a-81d8-7acfe5f506c9",
        "cursor": {
          "ref": "c5fe7913-b37a-429f-ac85-b753ee1c3a3d",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "38c05d4a-bb58-41ed-b096-87dd706c878e"
        },
        "item": {
          "id": "a7b49608-17b0-479a-81d8-7acfe5f506c9",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "1780108f-1181-4fdc-b48b-3a28c08d7780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "700e0c99-8131-4210-8b66-04dabb0ed2ea",
        "cursor": {
          "ref": "f0c60ecd-d53a-4b20-92e0-a4a69af1a467",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "80ef945b-fe0e-4b0d-a4f0-b282da5c6acb"
        },
        "item": {
          "id": "700e0c99-8131-4210-8b66-04dabb0ed2ea",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a15f4601-f502-4c00-857d-0386f691d29d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b56132f6-cb6b-47ff-9351-e15b5ce27f23",
        "cursor": {
          "ref": "2944e40c-9287-47b7-9ab5-8b543b8c0dc3",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "061ed2e7-917c-4262-b3aa-ab8c1145136b"
        },
        "item": {
          "id": "b56132f6-cb6b-47ff-9351-e15b5ce27f23",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "2b6b1cc2-c949-4070-b758-1870e0b25be7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e014d1e1-933c-44ee-83cb-758925ce6b0c",
        "cursor": {
          "ref": "62f026a8-7205-4a4b-b3c9-4e6a2a419975",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "fa35fe0b-42db-4334-9731-a51130551ee7"
        },
        "item": {
          "id": "e014d1e1-933c-44ee-83cb-758925ce6b0c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "1a4ea32c-603a-4d52-b8e2-f9954b541c02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "075674a1-8c49-4f6b-af83-5bcfbeedc59d",
        "cursor": {
          "ref": "865a84eb-c192-443e-b770-e2e9f2a2dfbc",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6c4eb8e6-64de-44c2-859d-1bde52619647"
        },
        "item": {
          "id": "075674a1-8c49-4f6b-af83-5bcfbeedc59d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "815af553-e6e3-4d08-a1f9-abef2d523135",
          "status": "Created",
          "code": 201,
          "responseTime": 512,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "b6c24ba1-e9b8-446c-9b61-cbce46d5921e",
        "cursor": {
          "ref": "a491f999-b738-437d-9887-de61ff561b81",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0945ea97-73fd-4db0-8b77-9f7899681642"
        },
        "item": {
          "id": "b6c24ba1-e9b8-446c-9b61-cbce46d5921e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "f2b4139e-8755-4c13-8851-3603e6891524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17315253-fa0a-4d3b-a6f9-93d73674b60c",
        "cursor": {
          "ref": "cd59c88b-0b42-402a-939f-e03e5fab92ca",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "88eb0ab4-5b94-49fb-ad8d-be2a97186464"
        },
        "item": {
          "id": "17315253-fa0a-4d3b-a6f9-93d73674b60c",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "2131b8d6-009c-465f-8681-c3ae2c786cc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "004604b2-0b70-4f2d-81fb-c99b05a52fa8",
        "cursor": {
          "ref": "e4eacb80-357a-472d-80dd-45b9b2d9b590",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "31fde048-9451-46e8-a292-138c2846cb82"
        },
        "item": {
          "id": "004604b2-0b70-4f2d-81fb-c99b05a52fa8",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "02e35da7-be68-4461-bb16-6dd057eb0898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06d79d7f-b673-42b6-8e2a-2661f0e21790",
        "cursor": {
          "ref": "95f074f4-89f2-44b2-b961-68d50dcb567e",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d65f495a-ed78-4266-84d0-6aa164f4b006"
        },
        "item": {
          "id": "06d79d7f-b673-42b6-8e2a-2661f0e21790",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b1228264-38c6-460c-a438-88d13c46b2a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d681628-c7b9-4e14-bf3f-20b3fa328d60",
        "cursor": {
          "ref": "e263892a-856a-4f71-836b-da8b0d049e80",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a9e0e038-90b6-4585-b4cb-007f20477e77"
        },
        "item": {
          "id": "4d681628-c7b9-4e14-bf3f-20b3fa328d60",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "e915d4fd-7be1-4fac-83a7-96e1ed28897a",
          "status": "Created",
          "code": 201,
          "responseTime": 488,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "e51aa83d-35e8-4c27-a2ba-993a40229ff2",
        "cursor": {
          "ref": "b83498b8-3152-47d7-acbe-da39310608f9",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c78e9c27-3cd8-4be6-afb9-0c91679ab40a"
        },
        "item": {
          "id": "e51aa83d-35e8-4c27-a2ba-993a40229ff2",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "25b3720f-a7a3-4392-a99a-0b1d2b67929e",
          "status": "Created",
          "code": 201,
          "responseTime": 1030,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "e0d34e73-9763-419e-8fe6-e9753bfe4ceb",
        "cursor": {
          "ref": "452b5b5d-f0f7-4154-94f9-3a3849c01807",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3642d9b5-0543-4dd4-b98f-b95bdbac2fb6"
        },
        "item": {
          "id": "e0d34e73-9763-419e-8fe6-e9753bfe4ceb",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e3c935e5-f496-47b0-89cd-875c150bd7e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "155ca858-c243-4efb-8f13-13269844a6f7",
        "cursor": {
          "ref": "9c1744ab-7bfd-49ad-816a-bcb7c184e54d",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c6e35e42-1d31-4ab3-beaf-b37415963552"
        },
        "item": {
          "id": "155ca858-c243-4efb-8f13-13269844a6f7",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "971d1278-053b-4f8e-b8fd-214dd7a5f18a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d9095d6-2625-408c-9a1a-1b54e1e6a270",
        "cursor": {
          "ref": "24e1f4b4-4b5c-4032-8ca7-6e626e8a7deb",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7bc50807-f4e3-4d4b-bad0-e366e1a11d00"
        },
        "item": {
          "id": "1d9095d6-2625-408c-9a1a-1b54e1e6a270",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "217be789-7662-4562-94be-f6421dc7be29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c17916e-fbcc-4ad2-ba82-e1966e042b27",
        "cursor": {
          "ref": "dc122a7f-bc35-4bc9-af61-c51aa82d3ea0",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4d83346a-98e2-4c03-ad78-43fa4011e95b"
        },
        "item": {
          "id": "9c17916e-fbcc-4ad2-ba82-e1966e042b27",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "dd24d47e-e789-4f51-81c8-66e732f5eb14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d65bfc9-9b64-4022-912d-76bf58f6b227",
        "cursor": {
          "ref": "f7a587d5-c93a-4dd6-84ce-9dda54f11a37",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0e82535a-ee1f-49bc-9bad-a0296e0f2be4"
        },
        "item": {
          "id": "7d65bfc9-9b64-4022-912d-76bf58f6b227",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "0c79492f-ece6-42cb-a636-a42962d7fba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77c88cfd-086d-483a-b282-31fd6121db20",
        "cursor": {
          "ref": "099aa0c9-19d0-4c27-a087-58b658e66cb3",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "03e89728-18ef-48b5-8f3c-b6111c7edc09"
        },
        "item": {
          "id": "77c88cfd-086d-483a-b282-31fd6121db20",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "5052f101-8fa7-4a48-a199-fd4f87f2bf57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "081e6941-228d-4692-a352-a8daf7b293a3",
        "cursor": {
          "ref": "2b10ff8b-ed2f-4984-a823-d8738f32d60c",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "43d902fd-0ba5-4223-9a55-508481df97d7"
        },
        "item": {
          "id": "081e6941-228d-4692-a352-a8daf7b293a3",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "acbf90ec-fafb-4107-ba41-ac82569d19f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2092e358-b67c-4fe4-86ab-a6fd1bfce7a1",
        "cursor": {
          "ref": "2ef1d62f-239d-40ec-a288-864944982467",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "942fa914-d7d4-4d7f-b7ba-fc338663a816"
        },
        "item": {
          "id": "2092e358-b67c-4fe4-86ab-a6fd1bfce7a1",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "fee404e4-0d1e-40f9-870a-35b534b0149a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3642ee1-dd3b-448a-98de-8c651a8a664f",
        "cursor": {
          "ref": "be6f2ac4-271e-46a5-bc5a-c938085c927e",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1beadd5e-adb1-43e9-ad39-21ccbc49e76c"
        },
        "item": {
          "id": "f3642ee1-dd3b-448a-98de-8c651a8a664f",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "6d79cef4-f090-409b-a8c5-d3935744c017",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a35ec3-44b9-4a58-a921-8ef38eb62493",
        "cursor": {
          "ref": "82e825f8-73aa-4279-b545-413d9b8ee60f",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d0a30ed1-c3c9-4b8b-b706-ced7b97dc6e9"
        },
        "item": {
          "id": "a5a35ec3-44b9-4a58-a921-8ef38eb62493",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "59085c92-7770-41d1-bafc-24feb46fd4e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c689b8d-211b-4fe3-b5a1-459920557f53",
        "cursor": {
          "ref": "2d7ec714-0c70-4ee8-bafe-87abe683b5b3",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "896b0bc7-84ea-49b8-8ad4-aade2abffa6a"
        },
        "item": {
          "id": "3c689b8d-211b-4fe3-b5a1-459920557f53",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "85bbc8d2-0853-439e-9158-4862d3c6e948",
          "status": "Created",
          "code": 201,
          "responseTime": 927,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "5bf20f84-0af7-4d29-929f-ed6f5d20318e",
        "cursor": {
          "ref": "4265c79a-5833-4174-aa24-9288a3c5fde0",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "06d7e3fd-32aa-4f22-b6c9-29d5d410c631"
        },
        "item": {
          "id": "5bf20f84-0af7-4d29-929f-ed6f5d20318e",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "8672d69c-3088-4ea0-a46c-7e188bd7f617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "728711a2-3245-457b-88ce-065085db420f",
        "cursor": {
          "ref": "9bb12035-20b6-4e85-ab03-b93321997135",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d24e5455-046c-4bfa-8555-19b1ec1db322"
        },
        "item": {
          "id": "728711a2-3245-457b-88ce-065085db420f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "dd32ecca-e113-4b7f-8584-0cafda74f05d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cf582f4-ab85-4d90-accb-f786918dc3cb",
        "cursor": {
          "ref": "22c51f33-69ab-4383-850a-b11aac852de9",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9896937c-3b28-48d5-a585-7d74d3a58d71"
        },
        "item": {
          "id": "4cf582f4-ab85-4d90-accb-f786918dc3cb",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "c620c0bd-fdbd-4e82-a84c-c6da37fbe4a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4978e1bf-ce4c-4b3d-b794-46bbca3da389",
        "cursor": {
          "ref": "25ae2afe-8970-4f3d-be81-c1fb6ab8ec1b",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "02208e15-647c-4f83-a58a-b31b9794d70c"
        },
        "item": {
          "id": "4978e1bf-ce4c-4b3d-b794-46bbca3da389",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "6115b4d7-9b33-4dd1-9fd7-14277fc0129d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1e6662d-ada6-4592-82eb-08d8cc2b74fb",
        "cursor": {
          "ref": "58f95d17-b051-4759-a76d-d7f893ad974b",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c5b8adc5-f703-490f-aea2-8d642a5604d0"
        },
        "item": {
          "id": "c1e6662d-ada6-4592-82eb-08d8cc2b74fb",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f984e2b2-eb08-47ee-9f05-f2fbba421024",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9604f70-aeaf-4f5d-ad7d-9acacbeb5e26",
        "cursor": {
          "ref": "f0da31b4-8f5e-44ee-b5b5-c99da59aeba0",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "fdb728a1-8694-4e68-91f9-525961960032"
        },
        "item": {
          "id": "d9604f70-aeaf-4f5d-ad7d-9acacbeb5e26",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "cd36a899-ddac-4054-bfcd-2524f04895ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0a9ba74-306d-4640-8c07-4dbf5fa1de5d",
        "cursor": {
          "ref": "0a436f3e-72dc-47d0-88ab-01df6c8a3e3a",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "5f344a06-c98a-43fb-9c4e-79fa1f6a08f6"
        },
        "item": {
          "id": "e0a9ba74-306d-4640-8c07-4dbf5fa1de5d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "9ac01c1e-62fc-407d-9502-2693d870ffd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65009902-c37f-4fa8-9c3a-fa33291afe08",
        "cursor": {
          "ref": "ff0a0113-4aa0-4100-b3c8-a7508d48065e",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f0b7bc13-d896-4168-bb56-5b75d639ca7f"
        },
        "item": {
          "id": "65009902-c37f-4fa8-9c3a-fa33291afe08",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "eefa42f5-1a18-4c27-93e4-4e746d29de09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84682a31-ef62-452f-8964-f760c08193f1",
        "cursor": {
          "ref": "a4e8bf3c-410f-46ae-a881-d72a02447179",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b9de1228-ea59-46c8-b09f-0e1f2115ee85"
        },
        "item": {
          "id": "84682a31-ef62-452f-8964-f760c08193f1",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "213748f7-c86f-4174-9b96-a88917b1e136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8227c4bd-cd7b-435e-b9f7-de9d65c18dab",
        "cursor": {
          "ref": "ce9bf945-7b02-4851-9779-6f010d8f5e99",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "787ba5c6-cad5-459d-a633-4a32b7bd25be"
        },
        "item": {
          "id": "8227c4bd-cd7b-435e-b9f7-de9d65c18dab",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "4ddfcebe-0f64-4170-b673-54e23c0f5257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e4f4514-6dd3-4f62-b2f9-ff4b1d155ca1",
        "cursor": {
          "ref": "1b4e682f-db34-40ee-bd89-948a927ac890",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1fafbe3a-8123-473c-9ec0-f665ae9bb773"
        },
        "item": {
          "id": "2e4f4514-6dd3-4f62-b2f9-ff4b1d155ca1",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f41b4391-4fc0-4f43-95b5-4fa938bf405e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc385abf-658f-4b64-90a6-6fd9ce790d58",
        "cursor": {
          "ref": "645e5763-949d-40ee-8c59-3240b4398955",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "780ee3f0-53c3-4f68-b9b4-e258ba8c8f01"
        },
        "item": {
          "id": "fc385abf-658f-4b64-90a6-6fd9ce790d58",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "caae447d-09c7-4d16-8e38-76141efd9948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "899b054d-5663-411a-bdf2-70fd8f7e6c96",
        "cursor": {
          "ref": "f356b9da-eccb-4ce0-8a93-6af0d98a29f9",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2f82ab39-95b5-4701-9c92-9a0e5f6910c7"
        },
        "item": {
          "id": "899b054d-5663-411a-bdf2-70fd8f7e6c96",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "17c06132-5ea2-41b4-b32d-bc9beaaad4cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 329,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "145f656e-1e2e-45d3-ad93-c7f5b2d13e0a",
        "cursor": {
          "ref": "5a6b3219-d6c8-4f9c-854a-19eb52c65ce2",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f75939e1-b1e1-4091-8d37-481557df3f44"
        },
        "item": {
          "id": "145f656e-1e2e-45d3-ad93-c7f5b2d13e0a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "43cd4203-6c7d-4ac3-9668-8a10e213de29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8151651c-549d-4307-a9d0-ac05a0536eb8",
        "cursor": {
          "ref": "a118229a-3fec-4f52-b0ba-55a89de063da",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "7f27fc59-0ef9-4421-99e6-4625c0523e7c"
        },
        "item": {
          "id": "8151651c-549d-4307-a9d0-ac05a0536eb8",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "3f6e63e4-a55e-4652-b7e6-c12deae64bf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9095428d-bf36-468e-a006-2929d8eb9ba4",
        "cursor": {
          "ref": "35bacc3f-e8a6-443a-9f7d-037f56f083ae",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "cd7bd6d1-2eb2-439e-92d1-3c9ae84dfecf"
        },
        "item": {
          "id": "9095428d-bf36-468e-a006-2929d8eb9ba4",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "c5bf277c-473b-4a0b-8490-217f57442abe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ccd413d-3e00-4014-98c9-2a4eec3a7857",
        "cursor": {
          "ref": "de9e96e7-a3f1-41b1-8f3f-96049acfe758",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "fa315c87-1b46-40d8-a2f9-d65bddd91eb7"
        },
        "item": {
          "id": "2ccd413d-3e00-4014-98c9-2a4eec3a7857",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "933080c6-958a-495a-8192-978fb8ee461f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47f3be2f-b02c-4443-b7ea-215ac160d55d",
        "cursor": {
          "ref": "afa33fc2-14ff-4b5b-aea6-e24ed1f7cfc8",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d59bb1b0-43ad-42d6-8291-29737fef8995"
        },
        "item": {
          "id": "47f3be2f-b02c-4443-b7ea-215ac160d55d",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "53a1af1c-7958-4c93-b173-cb369d12fdc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26e0e3e1-0c8e-4943-b7e2-ae2961847fce",
        "cursor": {
          "ref": "e84505e7-499c-486f-81b1-16c64a29f9c9",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "36faad51-129d-428c-8b46-9614670676c7"
        },
        "item": {
          "id": "26e0e3e1-0c8e-4943-b7e2-ae2961847fce",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "114d27ae-7b2d-4d99-a397-5fff146a4e79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a17758b-f297-4018-a610-ac0a9a1b9ca5",
        "cursor": {
          "ref": "9b1cb925-a598-496f-bfe7-47260bf6daee",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "39c419af-7eeb-401b-bd9a-83e6ea682eb5"
        },
        "item": {
          "id": "1a17758b-f297-4018-a610-ac0a9a1b9ca5",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4f7b29fa-d02a-4904-86e2-411c512c579e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 339,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "b19a8655-60e2-435b-9e15-98136e0e25fb",
        "cursor": {
          "ref": "22dab1a5-596f-40e1-837f-ccefe4c3b731",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "0c1c1b9f-912b-4830-9316-3c9621a4127d"
        },
        "item": {
          "id": "b19a8655-60e2-435b-9e15-98136e0e25fb",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d25d07f4-43c1-428f-8c69-675073018635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9c2efdc-658a-47ff-8529-422e202e397f",
        "cursor": {
          "ref": "e9c9d1cb-3d69-4f91-bba5-c71922cb619c",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "408eca39-249f-4906-8ad7-c03c60aac7d4"
        },
        "item": {
          "id": "f9c2efdc-658a-47ff-8529-422e202e397f",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e7b4ea04-aa6d-41df-9caf-c148fa1ac614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c09e2457-ff9a-4117-a426-9f708020fdf0",
        "cursor": {
          "ref": "bda29667-8bd6-487f-941b-58c798b8ade5",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "279f4585-a4f4-459e-8ebb-6802ef4912a9"
        },
        "item": {
          "id": "c09e2457-ff9a-4117-a426-9f708020fdf0",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "3d4b3dc8-c821-4e85-a4de-b225ca8e5b41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa75785-1d40-41aa-b0fd-8e3949ac4e9a",
        "cursor": {
          "ref": "237684a4-6390-484f-a4d6-6193373ae27b",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "73c31ba6-d099-453a-b2e5-3e232c1845e8"
        },
        "item": {
          "id": "3fa75785-1d40-41aa-b0fd-8e3949ac4e9a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "8ecb7b02-73fa-4f65-9637-a960ab5db01a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8219f530-9cd0-4d24-894e-231f34c31bdf",
        "cursor": {
          "ref": "e051bb6b-4035-42cc-9668-57a8b778b35b",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "4c1dc4e4-1f35-4381-b266-0f7ff3fd108e"
        },
        "item": {
          "id": "8219f530-9cd0-4d24-894e-231f34c31bdf",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "7fba3069-b6ea-4283-9d93-94080d431721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "275c4df4-1b44-413a-b1cb-abf439bccae7",
        "cursor": {
          "ref": "49f9cef6-f742-4803-a592-c1d7ef871c59",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2c0a91be-c887-450b-83fc-cfaaf60d0281"
        },
        "item": {
          "id": "275c4df4-1b44-413a-b1cb-abf439bccae7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c49cd3b4-779e-4150-8c00-074878b98f3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aad5f95-1d0c-4a4d-898c-0c4f49a9c832",
        "cursor": {
          "ref": "f6b3d69e-c54a-474a-b54e-f25cd9759f7f",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "dd85add8-746e-46d4-ac2e-417506479701"
        },
        "item": {
          "id": "7aad5f95-1d0c-4a4d-898c-0c4f49a9c832",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "74bca631-b481-412b-bb2d-46cbe596862d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c3d3dab-9254-43a5-877e-d8ec64f7eb6b",
        "cursor": {
          "ref": "931e411b-8f2c-4e75-a453-ad433eaac808",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8ebe45a2-c822-448c-aeb5-bf754840178a"
        },
        "item": {
          "id": "0c3d3dab-9254-43a5-877e-d8ec64f7eb6b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "53ceda79-673e-4429-83f1-91d24ae3be68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94c95aa5-ffa6-4987-8471-7d238da8a4d4",
        "cursor": {
          "ref": "66f31239-c8fd-446d-bf6d-14150ac9830b",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "858192da-c55f-4671-a06f-962504164fd2"
        },
        "item": {
          "id": "94c95aa5-ffa6-4987-8471-7d238da8a4d4",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "75bea1e6-f050-4285-bfe6-5bfb9fd652d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7896c8e-820a-4a13-a454-e6febcf74788",
        "cursor": {
          "ref": "5606efe6-06dd-4b01-881a-0c43698b5874",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "345157e7-7490-4bfe-bce5-01bf8ddd7f00"
        },
        "item": {
          "id": "e7896c8e-820a-4a13-a454-e6febcf74788",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "aa112842-83ba-4c1f-9216-663ba7863ffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d41a925e-ac3c-4cde-9008-2606970a6aab",
        "cursor": {
          "ref": "69c51ea1-056a-4a19-8019-7c236e2cf8d8",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "21a18c7a-4006-447e-909c-ffebe62ef04a"
        },
        "item": {
          "id": "d41a925e-ac3c-4cde-9008-2606970a6aab",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "04cdf86e-8e85-454d-b7be-493591aae434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2ef77bd-3eca-4140-8e35-f86e54a60c31",
        "cursor": {
          "ref": "cc1249ed-597e-4af0-b321-f7d52625b5b6",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0433adee-64e7-45a9-b2cd-def62c3f0d77"
        },
        "item": {
          "id": "f2ef77bd-3eca-4140-8e35-f86e54a60c31",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "2599e881-a886-42af-9142-90acf10751c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1397d704-5b09-4a02-805b-82985cb5e254",
        "cursor": {
          "ref": "caacb307-28ec-4d76-84dc-9728f3a26716",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "b61f6627-9848-4fe6-9e18-079f2f91b6d7"
        },
        "item": {
          "id": "1397d704-5b09-4a02-805b-82985cb5e254",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "edb60f17-cbd0-4d60-821a-4526bf059f59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ff1dad1-a774-444d-97a0-fb2110200f15",
        "cursor": {
          "ref": "5a0cd7b3-3a34-44b6-86ec-db82fbad97c3",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "be76342e-7aba-4ae3-81c7-d8c10a986e73"
        },
        "item": {
          "id": "5ff1dad1-a774-444d-97a0-fb2110200f15",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "90bc699b-5307-4aaa-87c2-bfe9cf8f6ed5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e7005dd-02d7-4709-adbf-d41805aeaae6",
        "cursor": {
          "ref": "3295d107-f446-4c8d-8069-8a466b1ba7ee",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c91e0046-1f6e-48d1-aebb-e462169a32d8"
        },
        "item": {
          "id": "0e7005dd-02d7-4709-adbf-d41805aeaae6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b54bac41-0a8c-49f0-b12f-72d740dbaf98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0754b4e-4298-4b30-bb07-f00c4858ff94",
        "cursor": {
          "ref": "3f43341e-28d5-4c72-92f5-5f9da1b470af",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c21de53b-1eaa-423f-9355-7368cece9326"
        },
        "item": {
          "id": "f0754b4e-4298-4b30-bb07-f00c4858ff94",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "4b4c96de-9ae6-4f81-b85e-630fb0ffd5c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b005269-e866-4ebf-980b-dca0c4ae7592",
        "cursor": {
          "ref": "87bbdd0e-79f4-4aea-b6d8-55ef953798d2",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "2481f035-8277-451b-9ead-b81498e0bdc2"
        },
        "item": {
          "id": "6b005269-e866-4ebf-980b-dca0c4ae7592",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "03d62ada-24eb-4db9-a8ac-98759950d928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "325a2b70-9155-429c-84de-49f4dde2337e",
        "cursor": {
          "ref": "afe8f2d2-bdbf-4e47-99ef-376a06530f88",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "2b6b5139-af62-474d-8561-f5ce468821c7"
        },
        "item": {
          "id": "325a2b70-9155-429c-84de-49f4dde2337e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "8f9022ef-dac0-48de-9b2b-269f97d68b12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb8f3c1b-3b4f-421b-9234-1bef7c0987c6",
        "cursor": {
          "ref": "6f6039dd-b30f-47ea-b2ee-79542cfa5f69",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5442b7f6-b255-48da-ae05-4ebb1bf70ee4"
        },
        "item": {
          "id": "fb8f3c1b-3b4f-421b-9234-1bef7c0987c6",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "87beac1b-8e2c-4408-9ef0-91096bea788c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "300c5cfe-9c7d-4b1d-84cd-4bc2e9e2aef2",
        "cursor": {
          "ref": "d612b519-38fe-4343-8c9e-e7ab9a60e4bc",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "52c2bb79-def7-4b09-abcf-78c2ff7a8bf3"
        },
        "item": {
          "id": "300c5cfe-9c7d-4b1d-84cd-4bc2e9e2aef2",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "a6d5a032-71fa-490b-856b-6398dad6b458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5fe0513-12ca-4a02-b37f-f86feca29ad9",
        "cursor": {
          "ref": "0c78bb29-cbcf-4a99-af98-674d253f6fa2",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "89c5828b-bb51-4f34-aa38-adea10511c20"
        },
        "item": {
          "id": "d5fe0513-12ca-4a02-b37f-f86feca29ad9",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "7f7657c7-3938-450a-b4ee-401c7b718783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "595141fd-c575-4c34-a808-84e8a16a8e52",
        "cursor": {
          "ref": "49b26ce7-72ab-444d-ad41-0e53b54beff3",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "89713310-7cf0-4c35-81c9-9b0cdd2ccfb9"
        },
        "item": {
          "id": "595141fd-c575-4c34-a808-84e8a16a8e52",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "1a109c69-5af5-4cf6-8186-1644a7bcaf7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "854d5c72-2498-41ae-8119-94b2691ccc5c",
        "cursor": {
          "ref": "ade12bfb-cff0-4d81-bf52-a4506923c2a4",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "38a4da02-7c39-47fb-a395-c6337a9dedf0"
        },
        "item": {
          "id": "854d5c72-2498-41ae-8119-94b2691ccc5c",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "8a756f76-3569-4219-9751-e5c0d1d15c1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1937f47-43d8-49b5-8e56-653b671914b4",
        "cursor": {
          "ref": "b524c17f-ddf7-47c5-b5ea-8f9d49784abf",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "7faa8e21-e728-4939-ad29-737608ab3887"
        },
        "item": {
          "id": "d1937f47-43d8-49b5-8e56-653b671914b4",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "878a5402-afc4-4ddf-b2f5-8388e4f69a48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa8115c0-a66b-4313-b04a-da9ca0e1097b",
        "cursor": {
          "ref": "9d1bc6bc-1f32-4894-8f91-39329e93b413",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "fe5e670d-de6c-471f-9dd0-739c2fb3cce4"
        },
        "item": {
          "id": "fa8115c0-a66b-4313-b04a-da9ca0e1097b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "bc0c07c1-edb0-4a47-a72d-4203da90ef5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc0469b-ba51-41e8-9fff-0a8f3f88894c",
        "cursor": {
          "ref": "60c52abc-162e-43ea-a810-4366f07f9f34",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "cee230e3-c86c-4eda-a884-6a95a9a48c96"
        },
        "item": {
          "id": "2cc0469b-ba51-41e8-9fff-0a8f3f88894c",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "6e4df50c-f89a-4e27-8954-ea84eed16eb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a75d7c64-f924-4fa2-8904-87fdc4ea707c",
        "cursor": {
          "ref": "665d26cd-5aee-4a7d-a065-4a3d1ec47b8c",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "0fed3388-9432-484c-be07-8df8800bb528"
        },
        "item": {
          "id": "a75d7c64-f924-4fa2-8904-87fdc4ea707c",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a22a965e-bef2-4c45-bd6c-59bf6cb95736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eb94c4e-93f8-4726-802f-1ac08bccda31",
        "cursor": {
          "ref": "df140a9f-8882-494c-b519-901cf0d5a48b",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0794271b-1388-4729-a0b2-44ba722b42b1"
        },
        "item": {
          "id": "4eb94c4e-93f8-4726-802f-1ac08bccda31",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "b138f274-cfab-4f2b-b325-0ff12425bfc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67d6394c-46b1-451f-9f57-3f68124ada89",
        "cursor": {
          "ref": "c865ff70-8ddc-423d-9a5c-2b659df6c9ea",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "6bc4bac6-711d-4f81-8b65-b131e6ee36b4"
        },
        "item": {
          "id": "67d6394c-46b1-451f-9f57-3f68124ada89",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "45f01f13-9eb1-48f4-8504-04140ab3973b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08160455-cbb2-4dcc-b808-89d6be1264a1",
        "cursor": {
          "ref": "a4ba56f3-d7f9-4cbc-8ba6-bbccb5079432",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "f29baf25-3823-4f50-87ce-fef86a9e731e"
        },
        "item": {
          "id": "08160455-cbb2-4dcc-b808-89d6be1264a1",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "36479e2d-7481-408d-886a-904435d2e076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0abdb958-9006-42d7-8a35-5725dff491cd",
        "cursor": {
          "ref": "753e8d42-c256-4563-ac72-23c0f1f522fd",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "4629f9cf-f1ac-421d-b1d4-5d84c7b6f63b"
        },
        "item": {
          "id": "0abdb958-9006-42d7-8a35-5725dff491cd",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "528a8865-53dd-4ccf-bf3d-1045cd3f84ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 327,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b1e507-1cbd-46f1-a464-389e72ab3c12",
        "cursor": {
          "ref": "f0566279-9de6-4210-ab7a-31c7ae7e4fe7",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ad90b408-5f63-42b0-9970-019498edc601"
        },
        "item": {
          "id": "55b1e507-1cbd-46f1-a464-389e72ab3c12",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "9907005e-2263-4755-920c-4de1447fd1c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f948ca38-8c34-4df4-a508-f8bb22492744",
        "cursor": {
          "ref": "d79c909c-07cc-42d7-9752-5005026fe181",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "489cfc8e-2f7d-4631-86a6-fefec68a39dc"
        },
        "item": {
          "id": "f948ca38-8c34-4df4-a508-f8bb22492744",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "7377b44f-e1a2-4f1f-ba27-a29013ee6f47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "575369ab-07f3-412f-85a1-a577ac092676",
        "cursor": {
          "ref": "cb6d4900-569a-4ab6-a6a7-c017089d8b2e",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f4430bb4-5506-44fc-9c30-8d8c0833691a"
        },
        "item": {
          "id": "575369ab-07f3-412f-85a1-a577ac092676",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "34227bc7-f326-49fb-a006-38c33aefb6a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9735574f-162a-4efe-b970-23850e84a77d",
        "cursor": {
          "ref": "03528759-fdbb-4298-889d-35e30b0f5861",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "7d989032-b900-4c69-8352-b3a01f24a3f9"
        },
        "item": {
          "id": "9735574f-162a-4efe-b970-23850e84a77d",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ae24f088-efcb-4942-acea-a902a978bd7b",
          "status": "Created",
          "code": 201,
          "responseTime": 680,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "febe00f0-0e90-4822-8b07-3a3b066e0d04",
        "cursor": {
          "ref": "1c6a703c-6c1f-495f-aa90-8bb71dd8b845",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "5cfe98fb-8d3e-4ee3-bc2f-0cf499c359c8"
        },
        "item": {
          "id": "febe00f0-0e90-4822-8b07-3a3b066e0d04",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a25cf365-1fb1-4264-a148-616be3c424f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "285e8030-4e97-487a-a673-4f0895566e49",
        "cursor": {
          "ref": "33fd2b75-8199-4eef-8762-31a2411a5060",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "bcfe4ea2-bbe9-406e-964e-0d1d64523033"
        },
        "item": {
          "id": "285e8030-4e97-487a-a673-4f0895566e49",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "977b46f6-c67a-413a-9c7c-5e38e5becfaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25a3edd0-1e4b-401e-96de-0789eeb1dba8",
        "cursor": {
          "ref": "d92ed13f-14b2-428e-876d-f47c82836a9b",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "648473d6-307b-491b-a219-ca3562d3c5a5"
        },
        "item": {
          "id": "25a3edd0-1e4b-401e-96de-0789eeb1dba8",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "d9ccc92d-4ff2-4b53-ba45-f31e5da64dc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b883505-cbcc-46e0-a98e-6c34668590a7",
        "cursor": {
          "ref": "fa7a3cfe-7ae6-48da-ae6f-731f11ccd815",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "113de25a-5820-49ea-bd8b-c41d749340d6"
        },
        "item": {
          "id": "7b883505-cbcc-46e0-a98e-6c34668590a7",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8c514aa2-d47c-42be-aea0-3d0d323285a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66b06b9e-a2b5-4bb9-a233-7a8b83fdfdc9",
        "cursor": {
          "ref": "e2602d07-bc39-4a84-8280-24e536f1ccb6",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "624f500d-d065-4bd0-9274-21c681b7adb7"
        },
        "item": {
          "id": "66b06b9e-a2b5-4bb9-a233-7a8b83fdfdc9",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "20335a4b-d066-40fc-b6a0-d182d1a26f48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b90913b1-8d98-4fda-b303-c45f8a29b2bc",
        "cursor": {
          "ref": "07480563-5b94-4391-b817-3b5df0966e6e",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f6d4bb3d-539c-47fc-89f4-1520ed1f788f"
        },
        "item": {
          "id": "b90913b1-8d98-4fda-b303-c45f8a29b2bc",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "1394aa41-1fd8-41d0-ba8d-b7040c6a1466",
          "status": "Created",
          "code": 201,
          "responseTime": 691,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "6ff6d040-b765-45c3-9cc6-7c1c8805b89f",
        "cursor": {
          "ref": "a9a100c5-ba02-412a-b8ad-3399a8cdcc7a",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "22fe6531-c1c8-431a-8ade-9cfca1348a7f"
        },
        "item": {
          "id": "6ff6d040-b765-45c3-9cc6-7c1c8805b89f",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "0ddb957b-f67c-4965-96a0-531d2b97b436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8909d9c-bb98-40cb-82dd-57dcb2d433bb",
        "cursor": {
          "ref": "c394928b-2d09-4ec5-b3c0-fda212eaabec",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8200177c-78b2-4ed4-93d9-618aec7690de"
        },
        "item": {
          "id": "e8909d9c-bb98-40cb-82dd-57dcb2d433bb",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "fcca98c4-de38-428f-b98b-bb6e88cf83ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6f5283-f95c-457e-9847-a081884ed6c8",
        "cursor": {
          "ref": "6443af3d-0208-45cc-9bda-ced926c73d37",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8ceb1904-d419-4ce3-8ff2-58babef85a83"
        },
        "item": {
          "id": "7b6f5283-f95c-457e-9847-a081884ed6c8",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "2f1b997b-094b-4dba-9ccb-394ad506e4e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "671b194c-aaa8-424f-a81a-2bbf2d225bb0",
        "cursor": {
          "ref": "52a23f6a-68f3-43e0-a1ee-d57a8a461a98",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "bca02da0-1144-4f3f-bbc9-e25ba3aef320"
        },
        "item": {
          "id": "671b194c-aaa8-424f-a81a-2bbf2d225bb0",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "9bb8713e-90aa-4008-86ed-e7c0bd1c7460",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98d165e1-7ce2-4ea9-92d7-a64a85980ac6",
        "cursor": {
          "ref": "0baf21bb-e1a2-440d-8bae-77a6e0f60edb",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "1c574b22-b994-458b-a94e-589c4e41e153"
        },
        "item": {
          "id": "98d165e1-7ce2-4ea9-92d7-a64a85980ac6",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "14536fe0-01a4-49c9-96e5-18f0b126514a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c68fcd32-f12e-487c-8da6-8085c49e1e60",
        "cursor": {
          "ref": "36f7bb09-22c5-4112-b7c0-51da2cb8320d",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "77057872-7aaa-41b6-a26f-929a0b13c2ad"
        },
        "item": {
          "id": "c68fcd32-f12e-487c-8da6-8085c49e1e60",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "aff74570-4dcf-4491-9dad-2f1705bb227e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "153a7a03-73fb-4839-a1ca-4c18e077935b",
        "cursor": {
          "ref": "710f94c4-7703-4239-934d-c9f620febd83",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d20f1456-5a05-4077-bdc3-a2cf91828bc3"
        },
        "item": {
          "id": "153a7a03-73fb-4839-a1ca-4c18e077935b",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "79019f40-87a6-4e96-bcfd-4cb6ec7402d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e2f4b66-58b0-4b37-9ed6-d68f5f85ab5f",
        "cursor": {
          "ref": "25433964-d705-4115-998d-268fdc0d8889",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "23bb910d-38c5-473b-8d61-94bfd1faac0d"
        },
        "item": {
          "id": "8e2f4b66-58b0-4b37-9ed6-d68f5f85ab5f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "224baf3a-14e5-45a3-b40e-9fc03af46c2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e25093b7-7829-4168-b649-6423bd427cfd",
        "cursor": {
          "ref": "dddd9260-978d-4807-8f0d-2e09bfa72e85",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d101baf6-0b2a-42d4-98ee-bb13b868a862"
        },
        "item": {
          "id": "e25093b7-7829-4168-b649-6423bd427cfd",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f5f8c1dd-f990-4a64-a773-1a8b69efe55d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "90d20a2f-5e56-4f0a-9273-bc79f6a95c90",
        "cursor": {
          "ref": "3c4c9490-e122-43ae-bd9e-e8d41a4b3444",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "126e995d-b81d-4689-afdc-81ca1dafde49"
        },
        "item": {
          "id": "90d20a2f-5e56-4f0a-9273-bc79f6a95c90",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "bdcdf3d9-56be-4bd4-8ca1-63ac53323976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "03a177cd-5efe-4753-b264-7c0a2aa5d4bc",
        "cursor": {
          "ref": "1dc147bf-89bc-44a2-9d13-a25638622f7a",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "8cd39000-e967-47fa-8869-cf75b09ca326"
        },
        "item": {
          "id": "03a177cd-5efe-4753-b264-7c0a2aa5d4bc",
          "name": "credentials_issue"
        },
        "response": {
          "id": "19f870b4-ea05-4869-84cb-1362e98959e0",
          "status": "Created",
          "code": 201,
          "responseTime": 641,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a53a1e2-997e-4c0c-986d-f1f9573bd211",
        "cursor": {
          "ref": "aac79210-9b4a-4658-902c-3a7db1c2336c",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "02ce480a-c9ad-4ed7-bea0-2febda803597"
        },
        "item": {
          "id": "6a53a1e2-997e-4c0c-986d-f1f9573bd211",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "12b12911-1380-4576-bac2-fe3493416531",
          "status": "Created",
          "code": 201,
          "responseTime": 708,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9098dc94-ee13-432b-b82c-5dac03bb116b",
        "cursor": {
          "ref": "34e122cf-0479-410f-9110-59560d6ff76a",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "3e3db1ac-dce1-45e1-acbf-2c004fc9ffc6"
        },
        "item": {
          "id": "9098dc94-ee13-432b-b82c-5dac03bb116b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e7b937bc-46c2-4325-8713-d855d36fc3b9",
          "status": "Created",
          "code": 201,
          "responseTime": 675,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb9a9212-656a-42c5-afc3-f3183043a50a",
        "cursor": {
          "ref": "a64ad587-8fe8-4d01-b21d-789b3e6f6fe3",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "243741cd-1094-4415-a86e-6706b6e43948"
        },
        "item": {
          "id": "bb9a9212-656a-42c5-afc3-f3183043a50a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "56f0b523-1174-4abd-a89c-ee5f3a837e84",
          "status": "Created",
          "code": 201,
          "responseTime": 712,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "f727371e-5a8a-45db-8764-6ad63e5180f7",
        "cursor": {
          "ref": "e0d5a864-d6e8-49d0-9b52-a8c0396f78a4",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "132b33eb-4b50-4185-89b8-9bb32c8de601"
        },
        "item": {
          "id": "f727371e-5a8a-45db-8764-6ad63e5180f7",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0e2878da-6aee-4f25-8708-2f9705106344",
          "status": "Created",
          "code": 201,
          "responseTime": 666,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bcb39f9-05a1-4da2-b567-b72aaf7b67e3",
        "cursor": {
          "ref": "d8fc4c09-cca6-4bcf-bb88-6ed920920e3f",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "4e6bdd1d-7ccd-46cc-86ff-523b6b7c877f"
        },
        "item": {
          "id": "9bcb39f9-05a1-4da2-b567-b72aaf7b67e3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d59ecb4f-8b04-41f9-aba2-2ead8672dd27",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "9bcb39f9-05a1-4da2-b567-b72aaf7b67e3",
        "cursor": {
          "ref": "d8fc4c09-cca6-4bcf-bb88-6ed920920e3f",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "4e6bdd1d-7ccd-46cc-86ff-523b6b7c877f"
        },
        "item": {
          "id": "9bcb39f9-05a1-4da2-b567-b72aaf7b67e3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d59ecb4f-8b04-41f9-aba2-2ead8672dd27",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "4388dc55-4615-4963-9990-5ac50acf2d3b",
        "cursor": {
          "ref": "df140ff7-5ba1-447a-ae70-fec3af538440",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "9fabed48-f51a-4e3d-b511-c29481b1d9b2"
        },
        "item": {
          "id": "4388dc55-4615-4963-9990-5ac50acf2d3b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "0bbd2326-3166-4f61-8db3-0c538432e9c4",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "531b685d-e3d2-44f3-8b2a-b10c61a81254",
        "cursor": {
          "ref": "519543e6-efc7-4fff-8dc4-b41b70a1e85a",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "c04d5859-7a60-49e6-97e6-be0aa01c946d"
        },
        "item": {
          "id": "531b685d-e3d2-44f3-8b2a-b10c61a81254",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6a3fe92f-2565-4e32-92c0-58a38fe68b18",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "151d5854-987b-4b46-a7cf-72f2b56ebdf1",
        "cursor": {
          "ref": "17cf2bf5-a972-4627-9f9b-edbb198a8137",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "834242a3-c024-4141-8d64-dbb940693945"
        },
        "item": {
          "id": "151d5854-987b-4b46-a7cf-72f2b56ebdf1",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2ce66f76-6494-4c1a-ab82-834b1c6e41f6",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "fd080e14-cf52-47fb-a2e7-26f2185fbb9e",
        "cursor": {
          "ref": "fbe5c494-1301-4671-8d56-caba3ff93465",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "8cc7268c-7bdc-4519-bf7c-0f9170879449"
        },
        "item": {
          "id": "fd080e14-cf52-47fb-a2e7-26f2185fbb9e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e5f872ea-180b-4e53-a203-57e79c1c34c1",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "c3a72d7d-e6f3-4930-bd64-55b3e4086a13",
        "cursor": {
          "ref": "2909d4cc-2db1-4334-8439-6ad8d75f59a4",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "1d7d3e17-2ca7-464b-a46f-74abc90f5989"
        },
        "item": {
          "id": "c3a72d7d-e6f3-4930-bd64-55b3e4086a13",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b61011f7-5ba3-4c5d-8181-cecb8203e358",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "bb8f8dc7-c1db-4370-94c6-7b9bba2a5d00",
        "cursor": {
          "ref": "3272bcc6-fea3-4b24-a220-657216b49c36",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "839c5cfd-9ce4-472d-b8f7-f473ac7fb15b"
        },
        "item": {
          "id": "bb8f8dc7-c1db-4370-94c6-7b9bba2a5d00",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "48812018-27fa-4679-861b-d9ebf311151d",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "ced1fcab-b242-4254-a0e1-789b2e17c2ee",
        "cursor": {
          "ref": "d0e16222-38d4-4514-8765-4ba988bf13ce",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a66120e9-21f7-441b-8112-0a2af73585ce"
        },
        "item": {
          "id": "ced1fcab-b242-4254-a0e1-789b2e17c2ee",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "bab5a79c-5598-4c68-8894-c7695281a3e2",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "82384321-b4da-4118-8d1e-ee32fb0f3e30",
        "cursor": {
          "ref": "eb6aec3e-6456-41f4-90d2-9623e1f0ddda",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "3c2eed87-e40c-437d-b589-5c5ddd8fd958"
        },
        "item": {
          "id": "82384321-b4da-4118-8d1e-ee32fb0f3e30",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "db3315a0-eee1-48d2-82cf-adefdfe60be4",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "7da9a4d8-8174-427a-88ea-84b404f7192e",
        "cursor": {
          "ref": "c6e2d769-116f-4350-9620-f19b5e7ed92e",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "18407ecf-1fba-4b76-9a6e-ec444072be01"
        },
        "item": {
          "id": "7da9a4d8-8174-427a-88ea-84b404f7192e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a8092790-a7fb-4836-8579-f98d209a2308",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "c7b1e094-6122-4196-a7eb-d7e8f398efd0",
        "cursor": {
          "ref": "6689dbc2-ef09-4d2a-aadd-d91a96870fb6",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a5ebd447-3740-4103-a8b5-4b2b18bc510d"
        },
        "item": {
          "id": "c7b1e094-6122-4196-a7eb-d7e8f398efd0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "47583d46-fc27-4950-96a7-d91835910d67",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "0a7bef43-59eb-440d-96d6-e4b8a40a873a",
        "cursor": {
          "ref": "24ab86c1-da90-4f54-96ed-c9f714434e75",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "978a50b6-e7bd-40b3-90e9-b8ba3d117145"
        },
        "item": {
          "id": "0a7bef43-59eb-440d-96d6-e4b8a40a873a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e51f6bca-101c-461f-a024-aabe6f2ac2a3",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "2bf57193-c964-4b51-ae26-6dfd7b46f622",
        "cursor": {
          "ref": "54671bce-fd1f-4b8e-93cf-4f54fcc4399f",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "68b68d03-8c4a-4545-8a78-2572eb2339ae"
        },
        "item": {
          "id": "2bf57193-c964-4b51-ae26-6dfd7b46f622",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5b058ffc-78e7-4525-90e5-232a0495990c",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "90ee0f0b-4fee-49e0-bbeb-daff7cad3aff",
        "cursor": {
          "ref": "bf3d30c0-1bed-4000-85a6-6555581a2720",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "02a68707-56cf-4daf-83e8-01bd74ab4e04"
        },
        "item": {
          "id": "90ee0f0b-4fee-49e0-bbeb-daff7cad3aff",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "93aa9ca0-9583-4c3f-90cf-4b32884ca6d4",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "3a81faa9-1836-43dc-a9be-c726478153f3",
        "cursor": {
          "ref": "513438df-e34d-4e3c-894c-e7db54a17a40",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f210fbad-0eea-4c17-ba91-a8211d396965"
        },
        "item": {
          "id": "3a81faa9-1836-43dc-a9be-c726478153f3",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "68213e7f-d802-4366-a568-e6a3466da11d",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "47f48383-218b-4f64-8cb1-f40b93890e1e",
        "cursor": {
          "ref": "5320797d-2c33-43b5-82c3-5838059c75f9",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "f3d519eb-8369-4ea3-9626-1ca60f56f0a4"
        },
        "item": {
          "id": "47f48383-218b-4f64-8cb1-f40b93890e1e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7c856e5a-96a1-492d-86e9-c799d7fd4699",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "9752fe1d-115c-4066-a1b8-dd78c35513f1",
        "cursor": {
          "ref": "8a8b090c-c3f6-40c1-afd3-e8f7f8bcf05e",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f8b45b42-9764-4b41-b5c9-e1ab63011d86"
        },
        "item": {
          "id": "9752fe1d-115c-4066-a1b8-dd78c35513f1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "46e45524-5815-4579-8a91-ed5deead6c6e",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "99e3c7d6-eddb-4618-bb9a-4a15e7918230",
        "cursor": {
          "ref": "aa03a0ef-9811-472e-8896-7e9796c95192",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "68573253-a049-48a0-af1d-035a139241a9"
        },
        "item": {
          "id": "99e3c7d6-eddb-4618-bb9a-4a15e7918230",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "870c69c2-252c-4b70-88eb-cd89ec4dc058",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "e866f3f1-241b-44ab-93bb-e8aaa1d759dc",
        "cursor": {
          "ref": "cabf46da-844a-4a59-99e7-34a3f5870334",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "82d5be89-5e3e-4a57-b9ce-ed84fdb45218"
        },
        "item": {
          "id": "e866f3f1-241b-44ab-93bb-e8aaa1d759dc",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "67527b11-cf9c-4b87-a39d-012126aec1cf",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "ec577bba-f086-49d3-a68e-52ed2a9f767e",
        "cursor": {
          "ref": "5ee3a272-4fc7-43d3-ac61-c19fee185606",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "43e51d38-0bbc-4669-9219-a0f345c38751"
        },
        "item": {
          "id": "ec577bba-f086-49d3-a68e-52ed2a9f767e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f95f3524-8ec3-4c8b-8fee-a5642cafae70",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "79f87035-c24f-471a-92fe-8dddb21d01bb",
        "cursor": {
          "ref": "af73b52c-9238-4114-a7f2-523faa2e60e7",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "4156b869-0f6a-47f1-8434-078020603700"
        },
        "item": {
          "id": "79f87035-c24f-471a-92fe-8dddb21d01bb",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "40b211c7-b24c-407b-9089-b2ddf8687f90",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "1480b6e0-64dd-4255-af4a-9592d291ba5d",
        "cursor": {
          "ref": "1e1e6d2a-8313-484e-b736-88a5b0b9f760",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b6b998b8-58b3-4f09-956a-8b42ef8621b5"
        },
        "item": {
          "id": "1480b6e0-64dd-4255-af4a-9592d291ba5d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "068ef678-498b-4438-9beb-42f04fcc93db",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "492f2b81-359b-4b83-bd71-a80905c864bf",
        "cursor": {
          "ref": "f8db04bd-2507-467c-b399-d4662888d0b6",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "e5e4732c-7b02-4755-9d9e-81cd13ab524f"
        },
        "item": {
          "id": "492f2b81-359b-4b83-bd71-a80905c864bf",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e0028e3c-2550-4731-a4d6-dcd7dabc720e",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "15524623-ba8f-4272-b432-3b2afe2da20c",
        "cursor": {
          "ref": "58e91d06-870c-43d9-91c5-a228ff3f6063",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "6a313427-f60a-4b63-b446-5876e4ff7e8d"
        },
        "item": {
          "id": "15524623-ba8f-4272-b432-3b2afe2da20c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f07a44b5-4614-4e51-8155-5743b312639f",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "a4f7a92f-c330-4926-a3f7-bad5639dfff8",
        "cursor": {
          "ref": "ec3963d5-2dac-4df2-bafe-b0663e28a00e",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "76a344ae-8427-469e-b65c-0cdbdca02566"
        },
        "item": {
          "id": "a4f7a92f-c330-4926-a3f7-bad5639dfff8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "bff7d39b-0319-425c-8d85-de8c9c1e33ba",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "827d3bf4-8398-422a-84bf-f433bddd9885",
        "cursor": {
          "ref": "becca989-0c5a-41f2-a3bb-1a57690d3806",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a8b39452-c565-41db-b8db-4b76d80a1eba"
        },
        "item": {
          "id": "827d3bf4-8398-422a-84bf-f433bddd9885",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e0e4e924-5ed6-4862-9f4c-0ff6bcda3639",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "427fb5f5-2d98-4803-af30-1fa8b68a0235",
        "cursor": {
          "ref": "f48f7b4e-d6ee-4c14-89f6-b2e6790faa3e",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "99a58572-6b25-4d22-8bff-3192488e812c"
        },
        "item": {
          "id": "427fb5f5-2d98-4803-af30-1fa8b68a0235",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f7bc1f3d-b5aa-4a30-99cd-7174a3373235",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "1e84f675-4146-4187-9986-04b235825b24",
        "cursor": {
          "ref": "3e270eda-1dfd-4257-ba94-3ab6656f1ddc",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "49d6e65f-b768-44c3-b720-63527d537723"
        },
        "item": {
          "id": "1e84f675-4146-4187-9986-04b235825b24",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "18658005-596b-4a09-867c-2adc2c05ec93",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "60786321-bb94-4de5-ad73-e6a50fd6aa4a",
        "cursor": {
          "ref": "1d49b74f-f034-4ca7-961e-aace908427be",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ac7e7a78-572e-45bf-afbf-14ceca12bc46"
        },
        "item": {
          "id": "60786321-bb94-4de5-ad73-e6a50fd6aa4a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "cd3248f3-f484-4fc9-9f76-e9d39645d739",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "5dd97277-479e-4032-b7ab-8734bacd41ed",
        "cursor": {
          "ref": "0eabb43b-9258-416e-9382-01a027fcf9c4",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "dbc38928-8083-4873-a93e-521d8826c9fd"
        },
        "item": {
          "id": "5dd97277-479e-4032-b7ab-8734bacd41ed",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4e47c9df-a960-4400-9e26-b8bf739b10ce",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "2fa5f98a-cbdd-4b6e-95d6-1257cfa63007",
        "cursor": {
          "ref": "050c19c8-be10-451f-bda1-fbdad699abe8",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "864776dd-85de-4f35-977f-0f62bb0f7239"
        },
        "item": {
          "id": "2fa5f98a-cbdd-4b6e-95d6-1257cfa63007",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4402fbea-a1bd-4433-b498-ee2f7b5923e8",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "559acc23-c3cf-4216-b436-482cdacf9223",
        "cursor": {
          "ref": "6a224177-ccdd-4244-bd8b-b1ca85924970",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "948dd17e-c27a-4d2d-8d58-49b34a9b3b21"
        },
        "item": {
          "id": "559acc23-c3cf-4216-b436-482cdacf9223",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "882bfb06-fb2f-41f8-a337-b61639c6b2bf",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "834092bd-aa9e-47db-ba24-6947ef8863c3",
        "cursor": {
          "ref": "b6c7dd46-7e1b-4644-b653-16caf62ec7e1",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e749b0a1-daad-4427-b476-b45f32706558"
        },
        "item": {
          "id": "834092bd-aa9e-47db-ba24-6947ef8863c3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a6327c39-7a11-4b2b-a5c9-e3080162a2e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a9d5cc4-ddd1-40d8-be97-4028e042be1a",
        "cursor": {
          "ref": "a78ce545-1a45-4a91-b067-f807bdb9c1b3",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e722a799-92c3-48d4-a5d3-e2b26bf69294"
        },
        "item": {
          "id": "3a9d5cc4-ddd1-40d8-be97-4028e042be1a",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "d94ee031-2ae2-4e52-bad2-5661f86abdbf",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8592f462-70ca-49cd-ad69-4692e1121fd2",
        "cursor": {
          "ref": "40781a94-3ab0-4197-a3aa-69e5066d4478",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "476b74db-0ddb-4cc1-ab7b-2030dbacb910"
        },
        "item": {
          "id": "8592f462-70ca-49cd-ad69-4692e1121fd2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e1dc46f5-7f59-4efb-bebb-f532872f404b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8592f462-70ca-49cd-ad69-4692e1121fd2",
        "cursor": {
          "ref": "40781a94-3ab0-4197-a3aa-69e5066d4478",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "476b74db-0ddb-4cc1-ab7b-2030dbacb910"
        },
        "item": {
          "id": "8592f462-70ca-49cd-ad69-4692e1121fd2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e1dc46f5-7f59-4efb-bebb-f532872f404b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98eb98a1-1511-40bd-855a-13c6aaec1501",
        "cursor": {
          "ref": "2aa86f1d-25a4-43e6-ab57-8b638be32e34",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "13c9b4e5-764a-41b4-9729-ee432d566baf"
        },
        "item": {
          "id": "98eb98a1-1511-40bd-855a-13c6aaec1501",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "1aaa1f53-643c-4362-b2cf-9706b88c3bc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53d8d554-1fc0-41dd-b889-710b7d19e5f1",
        "cursor": {
          "ref": "5ec76251-f5e5-429b-b22c-e478eaa3489b",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "588a07e5-db80-420a-b61a-945f06a753a0"
        },
        "item": {
          "id": "53d8d554-1fc0-41dd-b889-710b7d19e5f1",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "39a9def5-066f-44cb-83f7-fc4f6c5d9442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1a23ed2-e324-4804-b58e-7f7a2580adc6",
        "cursor": {
          "ref": "a9407697-f6b0-4eea-9d00-9fef04671a57",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "3a80a954-7cc7-4aeb-87da-c327e7aba40e"
        },
        "item": {
          "id": "c1a23ed2-e324-4804-b58e-7f7a2580adc6",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5d7c2a8e-ec13-4b64-b04b-216dc87b0cab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa8e13af-5852-4e28-a7cf-da9f5521ffdd",
        "cursor": {
          "ref": "b349fac9-fe9e-41a9-ab9b-69f160a7d523",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5e520fee-ecd6-49a4-8196-4e916cc65c2b"
        },
        "item": {
          "id": "fa8e13af-5852-4e28-a7cf-da9f5521ffdd",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "f9fbe19c-a0f6-4aae-84c8-94575f643455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1375e49a-65c0-46d5-9608-8a94161ec566",
        "cursor": {
          "ref": "ecaad119-72c5-459c-be3b-2f3afd53e4a7",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "668da588-518c-4e07-b783-e33924a442da"
        },
        "item": {
          "id": "1375e49a-65c0-46d5-9608-8a94161ec566",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "30e76638-3577-449b-973b-4ad5896dd60a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d04a17c8-cd5b-42ed-855d-0c65c8fe843a",
        "cursor": {
          "ref": "b4b5f5f1-cfca-4cf1-8281-e293676cd790",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "25747175-f8bb-4a2a-8e83-adadf0c13d5a"
        },
        "item": {
          "id": "d04a17c8-cd5b-42ed-855d-0c65c8fe843a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "2ce2e7d3-1015-44be-9c2d-c4ee313c08cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49d58727-46fd-4500-8ff6-ef6d75736ebc",
        "cursor": {
          "ref": "3598327c-0046-4d69-ac12-91ffc2d21d8a",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "19c295bc-576f-47a2-a9ad-57d34bff5c29"
        },
        "item": {
          "id": "49d58727-46fd-4500-8ff6-ef6d75736ebc",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8a20d6f4-9918-4fc8-b86d-fcd3228b33cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31d8361a-5b68-452b-9eab-27d482afcb7b",
        "cursor": {
          "ref": "14c04a0e-25e8-49b5-ad3e-8c779077cceb",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "268b931c-a18c-4931-88c9-074a02732e7b"
        },
        "item": {
          "id": "31d8361a-5b68-452b-9eab-27d482afcb7b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "a660adf6-af0e-45ba-a304-9b46d47743a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67895cdc-c4e6-49a0-bb19-8703558117aa",
        "cursor": {
          "ref": "9a498487-adae-4f8f-ae33-df1391db04c0",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "8ca266ec-d288-495d-a675-b44fdf751ce1"
        },
        "item": {
          "id": "67895cdc-c4e6-49a0-bb19-8703558117aa",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0d03da8a-6b5d-42df-950f-706e43df4d7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8309db1e-2704-45fc-b980-854c5f02a5dc",
        "cursor": {
          "ref": "0031f555-4217-4a4e-ab95-47b3c8aa09a4",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ba82134c-b3f3-4ad1-ac78-98513a219cb3"
        },
        "item": {
          "id": "8309db1e-2704-45fc-b980-854c5f02a5dc",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "cdcbdc64-7ba5-4717-bcc8-5b39954942aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "401416c6-c633-4ad0-9fe6-d94c612093cc",
        "cursor": {
          "ref": "3ee841a2-7aa4-4df3-a12b-d9ef0fa3ea49",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "6a0e9a38-03be-47b0-9ff6-916d9790dcf2"
        },
        "item": {
          "id": "401416c6-c633-4ad0-9fe6-d94c612093cc",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "89afbf56-94a0-41e5-9998-f410b674c7eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b8edfca-dcef-44ed-ad82-f42b987b12c9",
        "cursor": {
          "ref": "2895334c-de66-4a9a-9b40-e5ad37521e96",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "dc8bfdbe-0f76-41f8-9305-98a7897da36c"
        },
        "item": {
          "id": "4b8edfca-dcef-44ed-ad82-f42b987b12c9",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "6b607c8b-6abd-4d5f-8044-0f29308469dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b141d03b-2490-4be7-9930-4c5b420d943e",
        "cursor": {
          "ref": "76137784-ea47-4eef-9e56-ebec2136fc7a",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "dbb3948a-ea41-48c7-839a-54677709caf2"
        },
        "item": {
          "id": "b141d03b-2490-4be7-9930-4c5b420d943e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "645ffa64-ae92-4eca-bc00-4f5e126f9aa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa041101-3892-4b23-b9a8-76e9c66d46ac",
        "cursor": {
          "ref": "f4883f4d-9946-45da-b75f-1e828e458d8b",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "874b0e36-b070-4781-b6df-dd865a9cbbea"
        },
        "item": {
          "id": "fa041101-3892-4b23-b9a8-76e9c66d46ac",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "7e57a54f-b4bf-4e44-bf24-088e5e7e85a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "496bfb70-7422-49c4-8665-76d89c59bdcf",
        "cursor": {
          "ref": "fbfcbeeb-fe19-452c-9ee6-9ed63d21e141",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "7e7a2efc-2840-4428-bdfb-a886eb7beafe"
        },
        "item": {
          "id": "496bfb70-7422-49c4-8665-76d89c59bdcf",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "b9cc98ab-9715-4c3d-88b1-657c5902f3bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84020f7e-9a35-4630-8e2c-526c07d2e96b",
        "cursor": {
          "ref": "150d26ac-9ba0-4ee3-89e2-14f14f101c5d",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "73ffecf1-6254-4637-af36-53da30e6174d"
        },
        "item": {
          "id": "84020f7e-9a35-4630-8e2c-526c07d2e96b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "997295b5-7335-4c71-bc9b-414850a1716c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a94bda-d796-4c4e-b828-ba57cc002145",
        "cursor": {
          "ref": "45071140-cf9b-431e-9d6c-95fdf782c78b",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "cb8603b0-d81c-4cf6-a93a-69fe71e0db9d"
        },
        "item": {
          "id": "a5a94bda-d796-4c4e-b828-ba57cc002145",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "13735eb9-44f7-4762-b733-ff64f37ae88a",
          "status": "OK",
          "code": 200,
          "responseTime": 662,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "c05745d2-338a-478b-9621-44eb91eae4a6",
        "cursor": {
          "ref": "e0ad5967-d465-44bd-a263-2431e48ace5b",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ffa8b624-2879-4e10-9a7a-1b4d9918a211"
        },
        "item": {
          "id": "c05745d2-338a-478b-9621-44eb91eae4a6",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "1687d45a-3d56-4aff-93b6-dda588079a51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 294,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "443f4b21-1030-4490-a23c-7aae4f828c50",
        "cursor": {
          "ref": "d2c71124-8a46-45ca-afd0-9f796cd11ecd",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "cbfd9d13-57ee-4f58-8f32-813f639399f0"
        },
        "item": {
          "id": "443f4b21-1030-4490-a23c-7aae4f828c50",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e730eb85-ecc6-4cb8-94e3-8ec552f5b4aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 297,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "638c928a-aebd-49a1-a29b-91e542e78b99",
        "cursor": {
          "ref": "5cf7e114-12ca-426b-bea2-6ddf4c137449",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "76da095d-941d-47c2-841e-00ad0b8a0195"
        },
        "item": {
          "id": "638c928a-aebd-49a1-a29b-91e542e78b99",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "5ae725fc-62ef-4dd7-ae43-ed420043cf5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 274,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d4329a6-1bd9-46af-bab1-ed859431f3fa",
        "cursor": {
          "ref": "8b1d9b1e-9e56-47c4-9f6d-505f752c2df0",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d7d53756-f1ec-4616-ac94-105c230d821b"
        },
        "item": {
          "id": "9d4329a6-1bd9-46af-bab1-ed859431f3fa",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "aa7051c7-513b-4fed-a383-952fa0a85e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 285,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16dbfaaf-7092-49bf-99ba-04ea2f8950fb",
        "cursor": {
          "ref": "d77790c8-1a9b-4b33-bfbb-04f73ef094d2",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "533e5da8-bedd-4f4f-82cd-9991704f5eb7"
        },
        "item": {
          "id": "16dbfaaf-7092-49bf-99ba-04ea2f8950fb",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a5c0140b-90a7-4d68-9ccc-45837741ec30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 287,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b97189a-6bc7-401b-a0c0-904d3ffa16d0",
        "cursor": {
          "ref": "e0778b4c-e831-4fec-92a2-bb3d726f47d1",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c42288a1-9500-4017-b761-b42b1d502494"
        },
        "item": {
          "id": "1b97189a-6bc7-401b-a0c0-904d3ffa16d0",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "ce953918-f093-4ea7-ad51-d9bf198bde17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 273,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fdb70d1-233a-4c08-9317-32b8ada0f8a1",
        "cursor": {
          "ref": "3a7a9ce7-7706-4b9f-b01c-354fd894fb16",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "738a342a-efd5-46d6-9d6e-71c7ffc06545"
        },
        "item": {
          "id": "1fdb70d1-233a-4c08-9317-32b8ada0f8a1",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e223fe03-5d9f-464d-a4e1-abbb67ac78c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa5a4ad6-52a9-4616-8a06-b93076095dab",
        "cursor": {
          "ref": "5e7364c9-69cb-4185-9678-d3774b0ecde0",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "7f2455f2-4fc5-4070-9b9e-d17151e9a406"
        },
        "item": {
          "id": "aa5a4ad6-52a9-4616-8a06-b93076095dab",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "0bb46d8e-6011-4b5d-807e-049f41e0079a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad444207-c69f-4c6b-b1bb-4a68b8587e33",
        "cursor": {
          "ref": "7d66fb2c-44f8-4766-9740-265afbe1f596",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "85429c2d-a7c3-4b72-becf-3b894fc685a0"
        },
        "item": {
          "id": "ad444207-c69f-4c6b-b1bb-4a68b8587e33",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6f581cdf-8e1b-4855-a840-e751fba9f03b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 259,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51025b46-b6f8-4af0-8a47-a7c87a0273cc",
        "cursor": {
          "ref": "595d2c89-c81a-4bcb-b998-caffb377fad1",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "7bf26b7c-dc8f-4f86-a84c-f99631f0ceff"
        },
        "item": {
          "id": "51025b46-b6f8-4af0-8a47-a7c87a0273cc",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "9348fce0-1775-47e0-a255-a2a6152ba970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7a9f56a-2498-4f98-9c01-f6c750b5d714",
        "cursor": {
          "ref": "b46dc8a3-827f-4206-980f-ebcb98f4775f",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "0027ae1a-92ec-4331-841c-ad1b3d89dac6"
        },
        "item": {
          "id": "e7a9f56a-2498-4f98-9c01-f6c750b5d714",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "75ddae8a-5fdc-4ffc-b9bd-67e6d50e7106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6464d0bb-4873-4f03-a1e5-bb92966ab733",
        "cursor": {
          "ref": "be21272a-2780-4246-97fc-a3fb9c22786a",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "76223ae9-ee6c-48de-97d1-71ffac0987d5"
        },
        "item": {
          "id": "6464d0bb-4873-4f03-a1e5-bb92966ab733",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f00c8bee-9351-4eb3-b27c-84143e52cd33",
          "status": "OK",
          "code": 200,
          "responseTime": 402,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "ea2f766f-c4e7-4783-b3e5-e67b496adae1",
        "cursor": {
          "ref": "ab885461-a0a3-42af-bbdb-86a9914c3d3f",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f6dd78cb-33c6-40f0-a6da-bbe08415bd62"
        },
        "item": {
          "id": "ea2f766f-c4e7-4783-b3e5-e67b496adae1",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "004c805f-f6a7-4551-89cf-dcbeb1c5c45c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b233fd9-e6a7-4043-b5e8-205ef0d587c0",
        "cursor": {
          "ref": "15da0437-3ff3-4b8b-a44a-aef5cc2240d2",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "f1d39f9c-8ac3-401a-9e42-d930828cbe37"
        },
        "item": {
          "id": "9b233fd9-e6a7-4043-b5e8-205ef0d587c0",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "4f45224a-7b44-4fcb-b786-861ea433533d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bcf788c-a253-47de-afc7-d25da9a29c51",
        "cursor": {
          "ref": "1cd91039-5652-4510-88cd-9a7ce8c6d161",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "db5787c8-cd68-4e0d-ac97-ae0c95c28a51"
        },
        "item": {
          "id": "0bcf788c-a253-47de-afc7-d25da9a29c51",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5d38fdcc-ba6b-4235-925d-46838a32cae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "704b3c40-18e0-491e-a646-7c28db1b7d0a",
        "cursor": {
          "ref": "f2dff992-2120-4c34-8892-c8ab1c4e0dba",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "86b0f2be-2e00-4e44-96d0-38f51c7ef81c"
        },
        "item": {
          "id": "704b3c40-18e0-491e-a646-7c28db1b7d0a",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "1de2ab58-3443-4009-a87f-8d767e38c530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d74e9fe-ce57-4361-8991-7d131296767d",
        "cursor": {
          "ref": "0a45d050-73bd-4551-8136-1816fe634cae",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "09c0591a-3388-4d57-854c-1ca4ed84327c"
        },
        "item": {
          "id": "7d74e9fe-ce57-4361-8991-7d131296767d",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "33416dd2-9fbd-45af-9859-8ece639afb74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9463e54-1ed4-4838-affa-fd8a322a8d6d",
        "cursor": {
          "ref": "8c0bf764-1c3e-4e27-b40c-a4e8d130c830",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "eb9bc426-d0a1-415f-9fb3-f9bac50fbc11"
        },
        "item": {
          "id": "c9463e54-1ed4-4838-affa-fd8a322a8d6d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "466612a6-83b1-400b-8930-a39a459a1605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9e5cd44-8288-42b0-94d5-aa9b2513359b",
        "cursor": {
          "ref": "fba58049-4010-4717-b606-276471ac3f6e",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "76f6a40c-63a7-45e9-b3b9-1dcf77de56bf"
        },
        "item": {
          "id": "d9e5cd44-8288-42b0-94d5-aa9b2513359b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f6afb087-52cf-4207-b72a-e4392f945b2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 278,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7a2244f-33e7-4084-9c5f-b0955fa96b35",
        "cursor": {
          "ref": "ac86877e-0d6b-4313-aefb-3286aa66d5cb",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "21c48e78-a33a-45bf-ab9b-2365fef79a0d"
        },
        "item": {
          "id": "c7a2244f-33e7-4084-9c5f-b0955fa96b35",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "fa1f1522-eee1-42f8-b76d-bb45ea864048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 282,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2d9069e-74c4-418a-a5c5-f0ea96e51ceb",
        "cursor": {
          "ref": "65ecaf2b-85a6-465a-9ced-834ebd80dc8f",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f64d5718-c737-4090-adbf-3564d0e2f2c8"
        },
        "item": {
          "id": "b2d9069e-74c4-418a-a5c5-f0ea96e51ceb",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d1470650-a079-4013-abb4-224a7e1932f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 278,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df9e1412-cfd3-4aa9-8016-590db878c80e",
        "cursor": {
          "ref": "1465720d-ee80-4cb5-a03e-67706c78c2a2",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "470e70db-c68d-4128-8d92-10349de94371"
        },
        "item": {
          "id": "df9e1412-cfd3-4aa9-8016-590db878c80e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "ada8dbbb-a68d-4966-99b4-99b224a2d880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 438,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20df9a61-d06b-498a-a7d1-e82542d0b0f5",
        "cursor": {
          "ref": "26c8dffc-ad28-4863-b3d8-8522e816cb2a",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "10b97c24-d0e2-4427-bc51-c54bb220572c"
        },
        "item": {
          "id": "20df9a61-d06b-498a-a7d1-e82542d0b0f5",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "481ab71f-c74d-4ca4-a17d-7edb7115d9b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 276,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f6c01b5-d4e4-42ce-a810-fb12d787063f",
        "cursor": {
          "ref": "867563ed-16e9-4f26-87eb-6ecd2aef5b90",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "ed6ea32f-4b99-4564-9551-3fbcd4c85a0e"
        },
        "item": {
          "id": "8f6c01b5-d4e4-42ce-a810-fb12d787063f",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "78daf426-91f6-4460-9b0c-893c081e390a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 275,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21d319ba-395f-42b6-b55d-346e67646f24",
        "cursor": {
          "ref": "4a777281-1f4e-4543-ad6b-57eecdb56e4c",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "9fe1d0ab-dc8b-4720-b9ec-af199e4c4cea"
        },
        "item": {
          "id": "21d319ba-395f-42b6-b55d-346e67646f24",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "8dab60ef-fce1-4c3d-8323-67f1806f28d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 265,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "279e37c3-2e94-45d1-83e0-fcb9bace4593",
        "cursor": {
          "ref": "429131a5-1b77-422a-b14b-bdfa71fdd942",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "7ea5d0e0-75bd-4af0-bce8-41acd6a34b52"
        },
        "item": {
          "id": "279e37c3-2e94-45d1-83e0-fcb9bace4593",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e59188e4-e493-482a-8508-679d13183527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 272,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6555c608-01cd-4ffc-a38c-e53fdbbf2eed",
        "cursor": {
          "ref": "2ebbaf79-672e-4f17-9ae9-b122d01b3fc4",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "aaac4481-4491-4b39-9a15-29dbba145f45"
        },
        "item": {
          "id": "6555c608-01cd-4ffc-a38c-e53fdbbf2eed",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "8c23e976-89ac-4d84-87ee-5335c9590c47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 278,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4449f52-76f3-41d5-8664-eba36fb1fbe1",
        "cursor": {
          "ref": "97b5ca4a-71bd-4a6d-8ac4-d2997108e719",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "987b45e8-cb95-4b73-b4ba-bf4372dc794d"
        },
        "item": {
          "id": "d4449f52-76f3-41d5-8664-eba36fb1fbe1",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "9abaf812-c34f-4e89-ace9-55599077cb0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 348,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a8e29f5-041b-4645-aadf-24369939773a",
        "cursor": {
          "ref": "10a3b3f7-4bd7-4c81-88ca-5a6cddbcd2ee",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a98abbd3-cb02-4721-9931-ea2249867baf"
        },
        "item": {
          "id": "8a8e29f5-041b-4645-aadf-24369939773a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "020e6625-e081-4176-ac53-d5209be43f4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 278,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e4b7723-6a75-4458-adb9-165030b73eb3",
        "cursor": {
          "ref": "efd6f9de-4f90-4027-9268-06b8311d8bca",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e4eaafeb-9d21-471b-ba7c-3507e239b1b6"
        },
        "item": {
          "id": "8e4b7723-6a75-4458-adb9-165030b73eb3",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "9aa42e2c-aabc-4eae-afdc-ccf7dc001d2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 289,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5efb7272-1269-4d86-a497-fc82293e2fc1",
        "cursor": {
          "ref": "737611c5-a900-44a1-9bc3-65eeec4670e4",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "750e1a9b-a71c-4c6c-a078-0214721fa647"
        },
        "item": {
          "id": "5efb7272-1269-4d86-a497-fc82293e2fc1",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "594e3e2c-ab60-4443-895c-c46ff0a1977b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def24803-5b3a-425a-a370-8be76a6e3830",
        "cursor": {
          "ref": "fa876866-3534-4689-b7e2-6ba653f26e44",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "fdb8e921-3ce5-44e2-b53a-7fb4228cf5b5"
        },
        "item": {
          "id": "def24803-5b3a-425a-a370-8be76a6e3830",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f573e563-c6a0-4537-b744-bc5743a64442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 281,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d53cab73-b146-4fe8-b2f8-cf30a9c54de4",
        "cursor": {
          "ref": "847ebab6-5402-416d-97d2-677144bf82b6",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "94d2b946-ed58-447d-98fb-15425f5e1c86"
        },
        "item": {
          "id": "d53cab73-b146-4fe8-b2f8-cf30a9c54de4",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "41fba74f-03e2-4b53-9ce9-fbf5cedc7b24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 297,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3814b09-0cfe-4d44-a38f-dbb05dab7ecf",
        "cursor": {
          "ref": "775e1538-8822-4046-bc79-4d7dca4aca6c",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "87329e89-06ad-4822-8ae3-0d0bfa7df30a"
        },
        "item": {
          "id": "c3814b09-0cfe-4d44-a38f-dbb05dab7ecf",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "359c0253-38ab-471c-8830-3e4419195507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 270,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d03afbad-64f2-455d-b0c4-614ea85dae56",
        "cursor": {
          "ref": "5d5c5fde-0411-436f-81ff-0962ae85f7e6",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "66ab35fe-972d-46db-877b-5a1568461dec"
        },
        "item": {
          "id": "d03afbad-64f2-455d-b0c4-614ea85dae56",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "4e49f70d-be2e-4cf5-9355-bab529a849e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 271,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "525d7f1f-3edc-42c0-a728-8a7ef497ad4a",
        "cursor": {
          "ref": "fa0fa9a6-1bdb-4969-94fb-c7a92658fd96",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "6b7df553-ec55-425e-acc5-2c7c1e6f67b3"
        },
        "item": {
          "id": "525d7f1f-3edc-42c0-a728-8a7ef497ad4a",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "7db4fc60-443a-456c-988a-1d6f7ac4c1a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 310,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad0b243e-c3d7-4ae4-a484-edc96cda7081",
        "cursor": {
          "ref": "5e46b2d6-7469-4406-8c7d-50d87ef567d5",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "84721123-55de-493d-865a-7fc418440f65"
        },
        "item": {
          "id": "ad0b243e-c3d7-4ae4-a484-edc96cda7081",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "29e8fca9-651d-4b5e-a364-f2a4b6e83af4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b42a730c-8575-4b39-94ed-a8b4f9bc824b",
        "cursor": {
          "ref": "417ed564-8f94-484d-845d-837027694c16",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e16b87b5-adc0-450c-95b0-b74329cf6d63"
        },
        "item": {
          "id": "b42a730c-8575-4b39-94ed-a8b4f9bc824b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ca2811d5-1428-48ea-9bea-2df5e8bc3424",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d88a2c37-6e7a-47af-a1f1-2e087b15e33d",
        "cursor": {
          "ref": "114c3339-0337-4097-9d9c-1844959f60af",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "b314f837-1307-4c3e-b606-b666d2bb574b"
        },
        "item": {
          "id": "d88a2c37-6e7a-47af-a1f1-2e087b15e33d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "cb4ef522-9cd9-4f2a-a0b4-cc9a24cb6a57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efe883ac-abfd-4a42-aedc-8a2dba18d147",
        "cursor": {
          "ref": "6a65a8df-a71d-4df2-8528-c3b8dec5536a",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f777d3f5-8b01-4e0e-80e7-e568a7318da3"
        },
        "item": {
          "id": "efe883ac-abfd-4a42-aedc-8a2dba18d147",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "36e5b152-71ff-4aec-ab21-2b7c0d00c4f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 309,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "812a01ce-83ba-4ddd-ae63-f3fab6065591",
        "cursor": {
          "ref": "0ed9748a-f439-4a12-b0f0-4862a9b40b34",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "d7f4aebe-8b4c-417a-8d4a-13c0f8285700"
        },
        "item": {
          "id": "812a01ce-83ba-4ddd-ae63-f3fab6065591",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "d5e56795-af28-4ba9-8563-e6e3c984d596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09336307-c244-415c-bcc7-b4f99dc3f3f0",
        "cursor": {
          "ref": "0dbf2ef1-b2f7-413b-bbab-45316123ff48",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "018a439b-a1a5-462a-8033-68280b9fa89f"
        },
        "item": {
          "id": "09336307-c244-415c-bcc7-b4f99dc3f3f0",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9e2cf87a-9452-4975-943f-8ec9ce0a0e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2146e915-1481-446d-9ca7-4a695c17ecbf",
        "cursor": {
          "ref": "77d1430a-30bc-46a1-8042-b61f77a36dea",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "221fcd22-1d01-4cc6-b17b-0d1eadbaad5d"
        },
        "item": {
          "id": "2146e915-1481-446d-9ca7-4a695c17ecbf",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "101a5162-dbb0-4e79-b1d1-ab31ad6d3c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e48964-1233-4355-8690-5ccff9ca3669",
        "cursor": {
          "ref": "ef396cd9-82ab-40b6-b292-d8251501914f",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "412313e5-a4b0-49e5-9da9-35cff4a4bd65"
        },
        "item": {
          "id": "23e48964-1233-4355-8690-5ccff9ca3669",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c149f51f-4b6a-495a-aaf8-33c3e0c45dd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43f6026a-812c-499a-bf8e-3b32719641b2",
        "cursor": {
          "ref": "e8d6898c-9a37-40d2-b76e-9c5a784473c5",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "60e5cf72-5ee1-4792-b803-6f3eb36cd007"
        },
        "item": {
          "id": "43f6026a-812c-499a-bf8e-3b32719641b2",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "8db3ea65-d569-4c16-8a45-940f5e975780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 272,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab27ceb0-222c-412f-abb0-f9678a5e7c3c",
        "cursor": {
          "ref": "e91d1fea-5618-4c11-97ca-28d9838860f9",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "d2b3e4b0-d584-40be-870f-f8ef691793fa"
        },
        "item": {
          "id": "ab27ceb0-222c-412f-abb0-f9678a5e7c3c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d75b3ad9-15a4-43ca-8b93-151ccf7016a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4197e692-9bef-4f4a-b0ce-a700ca9f335a",
        "cursor": {
          "ref": "4c46253e-98a8-48dd-8805-83d0e5c5d2fe",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "13d9dd95-cdb4-48c3-aa40-92770c2001ce"
        },
        "item": {
          "id": "4197e692-9bef-4f4a-b0ce-a700ca9f335a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "4ba21ba3-4703-42f1-b279-8a7b50d11290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "504cbc35-4cdf-416b-a272-3c43c0a7fe1f",
        "cursor": {
          "ref": "28130511-5436-4cf4-98f1-90a93b8ebf68",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "4a8c1713-0b65-41aa-821f-1377cd46348b"
        },
        "item": {
          "id": "504cbc35-4cdf-416b-a272-3c43c0a7fe1f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0996e11b-5f38-4c21-aea6-f9cfac59d259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a262d9f-22a5-4060-b8cf-eb47d92e9a5c",
        "cursor": {
          "ref": "5a80ca2a-c2bd-40c7-8987-d9a2bdc30200",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d3b86567-4cb3-443f-be19-2b0a8c61d1f8"
        },
        "item": {
          "id": "9a262d9f-22a5-4060-b8cf-eb47d92e9a5c",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7683ae9a-f6d4-4cd8-8e22-34f7bff99a4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9672cbe1-3f43-4bf9-b942-67be296716b6",
        "cursor": {
          "ref": "83d0ecfd-f3e4-4a69-a595-e7608ce094d1",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "b9a8d9cc-3b79-40a1-a897-43771ead4a35"
        },
        "item": {
          "id": "9672cbe1-3f43-4bf9-b942-67be296716b6",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "c13df6d3-8f27-4efd-88b4-2c51ff1579a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90dbd21c-9c26-4c20-9d05-af9f831f6d5d",
        "cursor": {
          "ref": "4b2f9c0c-0436-4930-8f71-77350d128922",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ee3ffca4-63cf-4829-963e-781479d4cd3c"
        },
        "item": {
          "id": "90dbd21c-9c26-4c20-9d05-af9f831f6d5d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "1efe02e9-89df-4507-aff0-db73d6dc47b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d50431-9579-4a4f-998d-7cd8b518594b",
        "cursor": {
          "ref": "ca0e9f7a-bb94-44c6-aecb-c22d9a29c95a",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "55887edb-798f-4faa-8d83-6c0972896eb0"
        },
        "item": {
          "id": "a9d50431-9579-4a4f-998d-7cd8b518594b",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2a0626d6-e3a8-4ce1-ba2e-c6360f36c227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "488177ba-1eb0-417e-9d37-39c6b35bc157",
        "cursor": {
          "ref": "f86fa407-4340-45cd-8e65-005c8b2231d6",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "eb2c18d8-8ac3-4b3e-bdb9-f7d95f1ed1d1"
        },
        "item": {
          "id": "488177ba-1eb0-417e-9d37-39c6b35bc157",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d3eca746-60d0-45f7-b9ec-639b85c1f0c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9c9391b-1533-4f5a-be6e-0ceace8984b8",
        "cursor": {
          "ref": "b180176b-2a85-43d7-8cd5-fb1ebbc97036",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "84e3506b-e8ee-4ea5-af19-e2a5ec6140f5"
        },
        "item": {
          "id": "f9c9391b-1533-4f5a-be6e-0ceace8984b8",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "40291e03-dc61-4731-af1b-2ce6a83f0443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09a8d87c-136b-44ab-8bb0-69cd2500a7bb",
        "cursor": {
          "ref": "15137aad-a2fa-47df-9dab-0c026e9977b1",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a51c275b-3421-41fc-8c63-ea203cccd155"
        },
        "item": {
          "id": "09a8d87c-136b-44ab-8bb0-69cd2500a7bb",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b32d7d74-b80e-4258-82b5-4a9bf9f7c149",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e2b5187-e6fa-4dc9-a1b7-c6452453776f",
        "cursor": {
          "ref": "3aef7929-55be-4f7b-bd4a-932736a61190",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "06c62630-a1b6-4f35-9a9e-effc62df49eb"
        },
        "item": {
          "id": "2e2b5187-e6fa-4dc9-a1b7-c6452453776f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "30e0e524-8f62-4785-b1bf-862c195e4708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "391cba07-cd3a-4f18-b56e-ae1b865eafc4",
        "cursor": {
          "ref": "0ff613b0-4a38-4ede-8144-06cd07cdc35a",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "7de8f93a-301b-456d-88d9-4db2fedbac01"
        },
        "item": {
          "id": "391cba07-cd3a-4f18-b56e-ae1b865eafc4",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "58e3d4a4-f691-4717-947c-ae04625ae05e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0eab0a8-47c5-4b44-ba09-b13ac1144a74",
        "cursor": {
          "ref": "36081893-cdea-4c9e-a02c-8007bc6ff329",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "6f96c8f6-1386-4c78-9a51-b8ee1632f7f8"
        },
        "item": {
          "id": "a0eab0a8-47c5-4b44-ba09-b13ac1144a74",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d4135203-2a75-4e59-b5ba-7ae7fd89927f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90577d7d-547a-4143-b012-e7fe4889012a",
        "cursor": {
          "ref": "434b698a-d134-47f9-bf75-4d9fdcb6d5e3",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d070ca77-4c29-41f6-b983-3cb5226472ad"
        },
        "item": {
          "id": "90577d7d-547a-4143-b012-e7fe4889012a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "68758fa4-5428-4526-8055-209b316a2a77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "148aa608-c253-4d5c-ad78-0abd30101e6b",
        "cursor": {
          "ref": "67a3887c-06bc-45b1-83dd-a4199fbc30b5",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c2a59a3e-4dd1-4e8f-aef7-4393e10de2ac"
        },
        "item": {
          "id": "148aa608-c253-4d5c-ad78-0abd30101e6b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "51d9d158-17fe-42d6-a30f-d47cd92de231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e68c69c-c1a2-4f52-881f-9088ac5eebbb",
        "cursor": {
          "ref": "88d429e4-2acc-479e-b392-98c75c31aa1e",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "63576dec-a57c-40c1-b73f-efabe23f2414"
        },
        "item": {
          "id": "5e68c69c-c1a2-4f52-881f-9088ac5eebbb",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e67d6aa4-6e8b-4e5c-8583-201dc838b1d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecfc9312-5ebf-44f8-9b33-38663bdcdc46",
        "cursor": {
          "ref": "670c8468-1db0-4dce-8908-711a4f82a753",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d06fd99a-66ce-47e3-975f-89b49507b528"
        },
        "item": {
          "id": "ecfc9312-5ebf-44f8-9b33-38663bdcdc46",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a5718b44-8803-4ad6-9188-81beb0762555",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d484e9f2-5f4b-4e2d-a17c-82b6e4590c48",
        "cursor": {
          "ref": "4ae39b0a-66e4-4790-bd11-31786d32b94e",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "7de50e4c-7504-4f31-a807-6c1081c2d63e"
        },
        "item": {
          "id": "d484e9f2-5f4b-4e2d-a17c-82b6e4590c48",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7d075f39-243e-4a87-9fc0-1889a8ee404a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33f68a86-899e-4cba-8ef1-975ae137c049",
        "cursor": {
          "ref": "6bce7291-7c35-4fda-9d9b-eea668e66c32",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e6944c81-82c0-416b-91d6-3cf15b13f834"
        },
        "item": {
          "id": "33f68a86-899e-4cba-8ef1-975ae137c049",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "bdaa47f3-e8aa-431a-a297-68940cce7364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffcb3ebe-bce6-4fd5-a073-04f9744c08d3",
        "cursor": {
          "ref": "f2df4170-a758-4784-8eda-8c9fc96d44b4",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e108dfa3-ed1d-45c4-869f-e067f661084a"
        },
        "item": {
          "id": "ffcb3ebe-bce6-4fd5-a073-04f9744c08d3",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "fd138539-ff40-48a5-ac29-fb2115a195fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52d54ea0-d16a-4eb4-af8a-3abf08d6321b",
        "cursor": {
          "ref": "8ba23f74-6b72-404e-a935-f431be9c5593",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "219388d8-2d4e-4a9c-96ae-47f6b1ddc0ef"
        },
        "item": {
          "id": "52d54ea0-d16a-4eb4-af8a-3abf08d6321b",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "a22506f5-c1af-49fc-87a6-6abab4a57fb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93d63685-3750-42b4-a320-bb44ec5ded70",
        "cursor": {
          "ref": "23321a07-b891-4906-b23a-b4c746a819f3",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "6d45d315-8af2-4284-bb4a-de0019ec982f"
        },
        "item": {
          "id": "93d63685-3750-42b4-a320-bb44ec5ded70",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "cebb7095-d923-4b15-8793-11c2e177769d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97bb2bc7-a698-47e1-9360-bfa01db6474f",
        "cursor": {
          "ref": "d939c556-82b8-4fa6-87a9-ad06770e0de1",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "856c1684-b922-43a2-a07b-baa1aae4aa80"
        },
        "item": {
          "id": "97bb2bc7-a698-47e1-9360-bfa01db6474f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "d13d11d6-98f0-40ab-9f3a-38ddf87297e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9738d30-6bb5-476c-8418-f0fc8e49cf4d",
        "cursor": {
          "ref": "962afb3a-af13-42be-bb43-05bfbb5c6b24",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d5062b4c-281a-424e-8f73-e6d6ee947997"
        },
        "item": {
          "id": "c9738d30-6bb5-476c-8418-f0fc8e49cf4d",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "92935492-f7c8-4b18-8e64-77f04b9e3708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c5c1885-a276-4549-ad07-71ef61d60ebd",
        "cursor": {
          "ref": "7a903a9e-d5e1-4e25-970a-43077a036628",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b2340b31-5cfb-4457-86a6-d1679f2b5c63"
        },
        "item": {
          "id": "8c5c1885-a276-4549-ad07-71ef61d60ebd",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5469a662-5717-4d52-a758-a8b90419a2b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8fb7c5d-2b64-43c7-8824-4f937e3a9ee4",
        "cursor": {
          "ref": "fae9d79a-a9d4-41e7-8bbb-a4833f7f507c",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "45c2b675-987d-4618-914a-c876731311cb"
        },
        "item": {
          "id": "e8fb7c5d-2b64-43c7-8824-4f937e3a9ee4",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "bc14b211-6560-4650-a6ad-b8c3790f214c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f42eb3-ee78-44b1-b999-a4308264340a",
        "cursor": {
          "ref": "71203f4f-cf88-49b1-a1ab-f153f322c3ae",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "0d780f27-af14-407c-828f-0198523a75a1"
        },
        "item": {
          "id": "53f42eb3-ee78-44b1-b999-a4308264340a",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "837874c9-8da8-437f-aaa7-0c383b8c9a62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed6395d4-3f6a-4e69-9daa-05146ebbdfef",
        "cursor": {
          "ref": "12ee373b-f833-4597-9119-3b9577bd74e5",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "250dd674-5cdd-41df-b0a0-33ef0c48d4dc"
        },
        "item": {
          "id": "ed6395d4-3f6a-4e69-9daa-05146ebbdfef",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "439f6a2e-ae5b-44e3-8a48-12fb9b1f5490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0f9df30-7ef5-4e30-9a65-b3c3807f4552",
        "cursor": {
          "ref": "b7f881dd-a5e5-4e73-bdfe-2de51854ec08",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "2fa4b472-847b-4b19-b9c7-85d85ee3ec98"
        },
        "item": {
          "id": "c0f9df30-7ef5-4e30-9a65-b3c3807f4552",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "671b453c-3fa0-44b4-8080-5f7b24428410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d6ab46b-cb5d-4c68-a590-91a4893c5088",
        "cursor": {
          "ref": "96c6da84-10d5-4714-ada2-cac89ffab016",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "e19dfdde-e105-4e29-9e49-1f71ca29597f"
        },
        "item": {
          "id": "6d6ab46b-cb5d-4c68-a590-91a4893c5088",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e24ab590-26ee-4f4d-9e37-ab0d4872587f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2136748-8eb0-47a4-8f0a-eacee5c0734c",
        "cursor": {
          "ref": "b1f21ede-d5f9-477b-b56d-e505f2189453",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f3a5e018-c7b3-4bab-90fe-616d10004e01"
        },
        "item": {
          "id": "c2136748-8eb0-47a4-8f0a-eacee5c0734c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "598cf9f4-9e6d-4fac-bbbc-02d952375dc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad01d33a-21e5-47c9-88b0-7b3294b3982e",
        "cursor": {
          "ref": "3677b1bd-16e5-4a3a-9668-05838277aef7",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "46f56669-b70c-4308-a770-4f5136eb7f1d"
        },
        "item": {
          "id": "ad01d33a-21e5-47c9-88b0-7b3294b3982e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "54281591-7aeb-4739-9f77-1318e7d1fa25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2557f435-c966-42ae-a06b-12322bae95a9",
        "cursor": {
          "ref": "350f9cfa-0102-4779-a32b-3ff5004b8d8a",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "13d25b9e-f58b-4167-8447-1d89fe6e4091"
        },
        "item": {
          "id": "2557f435-c966-42ae-a06b-12322bae95a9",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "64b13920-11b1-4d7c-b019-cabfd2d8c2c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "287de9b1-d6ac-4c3c-b2d1-8a36d513fd90",
        "cursor": {
          "ref": "abdf77e0-10b8-4a7e-9ea2-4d73ed126512",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "2d19e6fb-4359-4c53-ba01-f1246a537e42"
        },
        "item": {
          "id": "287de9b1-d6ac-4c3c-b2d1-8a36d513fd90",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "6a4a3d41-2e8d-4c01-9c18-c63d0854c89c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f95e81ee-2aaa-44e2-a587-f5507bcb3fa2",
        "cursor": {
          "ref": "d116ad16-c481-4f1e-8c79-08d3f08188da",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f9d19193-4c18-4e46-942c-5bebccfe7cef"
        },
        "item": {
          "id": "f95e81ee-2aaa-44e2-a587-f5507bcb3fa2",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d19de86c-229c-40ba-a328-a484c11c4e90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a9cd57a-1280-46cb-b6d2-b3a61390eb7b",
        "cursor": {
          "ref": "9957cfcc-4343-4e85-975e-f75424c9b225",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "448fd683-4559-4697-8cff-1e2c928c35ac"
        },
        "item": {
          "id": "0a9cd57a-1280-46cb-b6d2-b3a61390eb7b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "658d8da1-7715-40b1-95e7-188d4285519f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3f07166-8d47-479f-912d-582a204582fd",
        "cursor": {
          "ref": "31b63cda-01c0-40fc-b1bc-85e68f54db28",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "c267949e-7713-44b7-bf70-f023b7a98c97"
        },
        "item": {
          "id": "f3f07166-8d47-479f-912d-582a204582fd",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "eaee0bc8-9a40-42f4-80ad-9b5bcb053103",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78c81f77-7362-4d19-8664-63cf10ab7f27",
        "cursor": {
          "ref": "cba02bca-203b-4a12-8924-b1f9d6f79bd2",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8577b6fd-51b1-4b2c-a9b9-ba134ab753d4"
        },
        "item": {
          "id": "78c81f77-7362-4d19-8664-63cf10ab7f27",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "4b60984f-4d9b-492b-8e04-0c85e2f754f4",
          "status": "OK",
          "code": 200,
          "responseTime": 237,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "4904f315-9a1e-435e-beab-01cc14175668",
        "cursor": {
          "ref": "46377eac-e6e3-4239-84aa-42e96693de26",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "14dce862-76b6-4724-b9e8-d5b65c678c6d"
        },
        "item": {
          "id": "4904f315-9a1e-435e-beab-01cc14175668",
          "name": "credentials_verify"
        },
        "response": {
          "id": "6f92d567-e28b-4545-8201-b0c0efedd643",
          "status": "OK",
          "code": 200,
          "responseTime": 597,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1233ad6f-8824-4249-800b-f3b11793ec40",
        "cursor": {
          "ref": "f4b76d5a-3f66-4e93-b209-5fda1b0b2e46",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e0ac85c6-d004-41f9-9700-9cbc03e35e08"
        },
        "item": {
          "id": "1233ad6f-8824-4249-800b-f3b11793ec40",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "1051b47d-5769-4cfc-bbaa-8b04fd6ede12",
          "status": "OK",
          "code": 200,
          "responseTime": 608,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a951789a-6e05-4583-9884-a1187d9896cd",
        "cursor": {
          "ref": "d7b8b745-bb89-4172-a51b-9f1e5e8c079a",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "318df17d-dd7d-4a32-944a-6894be9ae396"
        },
        "item": {
          "id": "a951789a-6e05-4583-9884-a1187d9896cd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "88e63635-0bf0-4c85-83d2-704268fbb669",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a951789a-6e05-4583-9884-a1187d9896cd",
        "cursor": {
          "ref": "d7b8b745-bb89-4172-a51b-9f1e5e8c079a",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "318df17d-dd7d-4a32-944a-6894be9ae396"
        },
        "item": {
          "id": "a951789a-6e05-4583-9884-a1187d9896cd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "88e63635-0bf0-4c85-83d2-704268fbb669",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a951789a-6e05-4583-9884-a1187d9896cd",
        "cursor": {
          "ref": "d7b8b745-bb89-4172-a51b-9f1e5e8c079a",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "318df17d-dd7d-4a32-944a-6894be9ae396"
        },
        "item": {
          "id": "a951789a-6e05-4583-9884-a1187d9896cd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "88e63635-0bf0-4c85-83d2-704268fbb669",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2c413d8-72cb-49e8-ac44-6a27482382bb",
        "cursor": {
          "ref": "2adf695c-0415-44bd-a5aa-977b9a86e8dd",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "95b7476b-3afd-4ac7-b43d-66792516cdd5"
        },
        "item": {
          "id": "d2c413d8-72cb-49e8-ac44-6a27482382bb",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "90ef9569-2d4b-48a8-9213-ef2e4f861466",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ffe4871-412f-46e6-9c9a-9d8b4151be5e",
        "cursor": {
          "ref": "2beba1fb-f179-473c-84e1-103a7994bf3b",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "16638312-60eb-4b03-8da6-775a34cb8be9"
        },
        "item": {
          "id": "3ffe4871-412f-46e6-9c9a-9d8b4151be5e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "cb86fd32-4fa0-4446-a60f-b0c252f5e954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "3ffe4871-412f-46e6-9c9a-9d8b4151be5e",
        "cursor": {
          "ref": "2beba1fb-f179-473c-84e1-103a7994bf3b",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "16638312-60eb-4b03-8da6-775a34cb8be9"
        },
        "item": {
          "id": "3ffe4871-412f-46e6-9c9a-9d8b4151be5e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "cb86fd32-4fa0-4446-a60f-b0c252f5e954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "c3464671-0c4c-4ac7-990d-ebbe2e3b822a",
        "cursor": {
          "ref": "4970f173-f97d-4b5a-a05a-e06e35fe54a3",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "1cee194a-7f40-46f8-b192-987c570e6cb0"
        },
        "item": {
          "id": "c3464671-0c4c-4ac7-990d-ebbe2e3b822a",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "e9753589-d15b-4304-8a7d-06350a361471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "74731a55-2e85-4531-b5ca-48b473250c0b",
        "cursor": {
          "ref": "3f67af5e-f3d2-4762-b208-612ebf0c6f26",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "2a40cb1c-1a6e-4db6-906f-285819b8dfd9"
        },
        "item": {
          "id": "74731a55-2e85-4531-b5ca-48b473250c0b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d22e36d5-5351-435e-8c65-9ebc6d3b1b92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "74731a55-2e85-4531-b5ca-48b473250c0b",
        "cursor": {
          "ref": "3f67af5e-f3d2-4762-b208-612ebf0c6f26",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "2a40cb1c-1a6e-4db6-906f-285819b8dfd9"
        },
        "item": {
          "id": "74731a55-2e85-4531-b5ca-48b473250c0b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d22e36d5-5351-435e-8c65-9ebc6d3b1b92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "d0c80551-b8be-4ca9-b906-efc8f094d509",
        "cursor": {
          "ref": "61a77445-643b-4d82-b23f-ad233ea68203",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "7e02cfff-24e8-4d00-ac58-1893f1fb10e2"
        },
        "item": {
          "id": "d0c80551-b8be-4ca9-b906-efc8f094d509",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "600630ee-0360-443b-a12e-9a543ee3fc11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}